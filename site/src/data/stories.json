{
  "components-avatar-all--all": {
    "id": "components-avatar-all--all",
    "kind": "Components/Avatar/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const appearance = select(\n    'appearance',\n    ['primary', 'secondary', 'alert', 'warning', 'success', 'accent1', 'accent2', 'accent3', 'accent4'],\n    undefined\n  );\n\n  const size = select('size', ['regular', 'tiny'], undefined);\n  const withTooltip = boolean('with tooltip', true);\n\n  const children = text('children', '');\n  const firstName = text('firstName', 'John');\n  const lastName = text('lastName', 'Doe');\n\n  const options = {\n    appearance,\n    withTooltip,\n    size,\n    firstName,\n    lastName,\n  };\n\n  return <Avatar {...options}>{children}</Avatar>;\n}"
      },
      "__id": "components-avatar-all--all",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Avatar`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "secondary",
              "alert",
              "warning",
              "success",
              "accent1",
              "accent2",
              "accent3",
              "accent4"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"secondary\" | \"alert\" | \"warning\" | \"success\" | \"accent1\" | \"accent2\" | \"accent3\" | \"accent4\""
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "**Only first 2 characters are rendered (SOON TO BE DEPRECATED)**",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "firstName": {
          "name": "firstName",
          "description": "First Name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "lastName": {
          "name": "lastName",
          "description": "Last Name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withTooltip": {
          "name": "withTooltip",
          "description": "Determines if tooltip is visible",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "tooltipPosition": {
          "name": "tooltipPosition",
          "description": "Position to place the tooltip",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "bottom",
              "top",
              "top-start",
              "top-end",
              "bottom-start",
              "bottom-end",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"top\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "\"bottom\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Determines size of `Avatar`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "\"regular\" | \"tiny\""
            },
            "defaultValue": {
              "summary": "\"regular\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-avatar-default-avatar--default-avatar": {
    "id": "components-avatar-default-avatar--default-avatar",
    "kind": "Components/Avatar/Default Avatar",
    "name": "Default Avatar",
    "story": "Default Avatar",
    "parameters": {
      "storySource": {
        "source": "() => <Avatar firstName=\"John\" lastName=\"Doe\" appearance=\"primary\" />"
      },
      "__id": "components-avatar-default-avatar--default-avatar",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Avatar`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "secondary",
              "alert",
              "warning",
              "success",
              "accent1",
              "accent2",
              "accent3",
              "accent4"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"secondary\" | \"alert\" | \"warning\" | \"success\" | \"accent1\" | \"accent2\" | \"accent3\" | \"accent4\""
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "**Only first 2 characters are rendered (SOON TO BE DEPRECATED)**",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "firstName": {
          "name": "firstName",
          "description": "First Name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "lastName": {
          "name": "lastName",
          "description": "Last Name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withTooltip": {
          "name": "withTooltip",
          "description": "Determines if tooltip is visible",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "tooltipPosition": {
          "name": "tooltipPosition",
          "description": "Position to place the tooltip",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "bottom",
              "top",
              "top-start",
              "top-end",
              "bottom-start",
              "bottom-end",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"top\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "\"bottom\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Determines size of `Avatar`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "\"regular\" | \"tiny\""
            },
            "defaultValue": {
              "summary": "\"regular\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-avatar-variants-appearance--appearance": {
    "id": "components-avatar-variants-appearance--appearance",
    "kind": "Components/Avatar/Variants/Appearance",
    "name": "Appearance",
    "story": "Appearance",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const weight = 'strong';\n\n  const appearances: Appearance[] = [\n    'primary',\n    'secondary',\n    'alert',\n    'warning',\n    'success',\n    'accent1',\n    'accent2',\n    'accent3',\n    'accent4',\n  ];\n\n  return (\n    <div className=\"d-flex\">\n      {appearances.map((appear, ind) => {\n        return (\n          <div key={ind} className=\"mr-9\">\n            <Text weight={weight}>{appear.charAt(0).toUpperCase() + appear.slice(1)}</Text>\n            <br />\n            <br />\n            <Avatar firstName=\"John\" lastName=\"Doe\" appearance={appear} />\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-avatar-variants-appearance--appearance",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Avatar`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "secondary",
              "alert",
              "warning",
              "success",
              "accent1",
              "accent2",
              "accent3",
              "accent4"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"secondary\" | \"alert\" | \"warning\" | \"success\" | \"accent1\" | \"accent2\" | \"accent3\" | \"accent4\""
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "**Only first 2 characters are rendered (SOON TO BE DEPRECATED)**",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "firstName": {
          "name": "firstName",
          "description": "First Name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "lastName": {
          "name": "lastName",
          "description": "Last Name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withTooltip": {
          "name": "withTooltip",
          "description": "Determines if tooltip is visible",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "tooltipPosition": {
          "name": "tooltipPosition",
          "description": "Position to place the tooltip",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "bottom",
              "top",
              "top-start",
              "top-end",
              "bottom-start",
              "bottom-end",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"top\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "\"bottom\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Determines size of `Avatar`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "\"regular\" | \"tiny\""
            },
            "defaultValue": {
              "summary": "\"regular\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-avatar-variants-size--size": {
    "id": "components-avatar-variants-size--size",
    "kind": "Components/Avatar/Variants/Size",
    "name": "Size",
    "story": "Size",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const weight = 'strong';\n\n  return (\n    <div className=\"d-flex\">\n      <div className=\"mr-9 d-flex flex-column\">\n        <Text weight={weight}>Regular</Text> <br />\n        <Avatar firstName=\"John\" lastName=\"Doe\" />\n      </div>\n      <div className=\"mr-9  d-flex flex-column\">\n        <Text weight={weight}>Tiny</Text> <br />\n        <Avatar firstName=\"John\" lastName=\"Doe\" size=\"tiny\" />\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-avatar-variants-size--size",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Avatar`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "secondary",
              "alert",
              "warning",
              "success",
              "accent1",
              "accent2",
              "accent3",
              "accent4"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"secondary\" | \"alert\" | \"warning\" | \"success\" | \"accent1\" | \"accent2\" | \"accent3\" | \"accent4\""
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "**Only first 2 characters are rendered (SOON TO BE DEPRECATED)**",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "firstName": {
          "name": "firstName",
          "description": "First Name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "lastName": {
          "name": "lastName",
          "description": "Last Name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withTooltip": {
          "name": "withTooltip",
          "description": "Determines if tooltip is visible",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "tooltipPosition": {
          "name": "tooltipPosition",
          "description": "Position to place the tooltip",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "bottom",
              "top",
              "top-start",
              "top-end",
              "bottom-start",
              "bottom-end",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"top\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "\"bottom\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Determines size of `Avatar`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "\"regular\" | \"tiny\""
            },
            "defaultValue": {
              "summary": "\"regular\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-avatargroup-all--all": {
    "id": "components-avatargroup-all--all",
    "kind": "Components/AvatarGroup/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const position = select(\n    'position',\n    ['top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end'],\n    'bottom'\n  );\n\n  const on = select('on', ['click', 'hover'], 'hover');\n\n  const dark = boolean('dark', true);\n\n  const max = number('max', 2);\n\n  const options = {\n    max,\n    popoverOptions: {\n      on,\n      position,\n      dark,\n    },\n    list: list.slice(0, 4),\n  };\n\n  return <AvatarGroup {...options} />;\n}"
      },
      "__id": "components-avatargroup-all--all",
      "args": {},
      "argTypes": {
        "list": {
          "name": "list",
          "description": "List of `Avatars`\n\n<pre className=\"DocPage-codeBlock\">\nAvatarData: {\n  firstName?: string;\n  lastName?: string;\n  appearance?: Appearance;\n}\n</pre>",
          "type": {
            "required": true,
            "name": "other",
            "value": "AvatarData[]"
          },
          "table": {
            "type": {
              "summary": "AvatarData[]"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Max `Avatars` to show before +x.",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "2"
            }
          }
        },
        "borderColor": {
          "name": "borderColor",
          "description": "Border color of `Avatars`.",
          "type": {
            "required": false,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": {
              "summary": "\"var(--white)\""
            }
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "**Popover for +x avatar**\n\n<pre className=\"DocPage-codeBlock\">\nPopperProps: {\n   popperRenderer?: (names: AvatarData[]) => JSX.Element;\n   appendToBody?: boolean;\n   dark?: boolean;\n   position?: Position;\n   on?: ActionType;\n   maxHeight?: number;\n   popperClassName?: string;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| popperRenderer | Callback function to create custom popover content  | |\n| appendToBody | Appends `Popover` wrapper inside body | true |\n| dark | Changes background of `Popover` | true |\n| position | Position to place `Popover` | bottom |\n| on | Event triggering the `Popover` | hover |\n| maxHeight | Max height of `Popover Text Wrapper` (does not work in case of custom popperRenderer) | 150 |\n| popperClassName | Custom classname added to `Popover` | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopperProps"
          },
          "table": {
            "type": {
              "summary": "PopperProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "tooltipPosition": {
          "name": "tooltipPosition",
          "description": "Position to place the tooltip on `Avatars` shown before +x",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "bottom",
              "top",
              "top-start",
              "top-end",
              "bottom-start",
              "bottom-end",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"top\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "\"bottom\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-avatargroup-variants-border-color--border-color": {
    "id": "components-avatargroup-variants-border-color--border-color",
    "kind": "Components/AvatarGroup/Variants/Border Color",
    "name": "Border Color",
    "story": "Border Color",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const colors = ['secondary', 'alert', 'warning', 'accent1'];\n\n  return (\n    <div className=\"d-flex\">\n      {colors.map((color, i) => {\n        return (\n          <div key={i} className=\"mr-9\">\n            <AvatarGroup list={list.slice(0, 4)} borderColor={`var(--${color})`} />\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-avatargroup-variants-border-color--border-color",
      "args": {},
      "argTypes": {
        "list": {
          "name": "list",
          "description": "List of `Avatars`\n\n<pre className=\"DocPage-codeBlock\">\nAvatarData: {\n  firstName?: string;\n  lastName?: string;\n  appearance?: Appearance;\n}\n</pre>",
          "type": {
            "required": true,
            "name": "other",
            "value": "AvatarData[]"
          },
          "table": {
            "type": {
              "summary": "AvatarData[]"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Max `Avatars` to show before +x.",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "2"
            }
          }
        },
        "borderColor": {
          "name": "borderColor",
          "description": "Border color of `Avatars`.",
          "type": {
            "required": false,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": {
              "summary": "\"var(--white)\""
            }
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "**Popover for +x avatar**\n\n<pre className=\"DocPage-codeBlock\">\nPopperProps: {\n   popperRenderer?: (names: AvatarData[]) => JSX.Element;\n   appendToBody?: boolean;\n   dark?: boolean;\n   position?: Position;\n   on?: ActionType;\n   maxHeight?: number;\n   popperClassName?: string;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| popperRenderer | Callback function to create custom popover content  | |\n| appendToBody | Appends `Popover` wrapper inside body | true |\n| dark | Changes background of `Popover` | true |\n| position | Position to place `Popover` | bottom |\n| on | Event triggering the `Popover` | hover |\n| maxHeight | Max height of `Popover Text Wrapper` (does not work in case of custom popperRenderer) | 150 |\n| popperClassName | Custom classname added to `Popover` | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopperProps"
          },
          "table": {
            "type": {
              "summary": "PopperProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "tooltipPosition": {
          "name": "tooltipPosition",
          "description": "Position to place the tooltip on `Avatars` shown before +x",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "bottom",
              "top",
              "top-start",
              "top-end",
              "bottom-start",
              "bottom-end",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"top\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "\"bottom\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-avatargroup-variants-custom-popper--custom-popper": {
    "id": "components-avatargroup-variants-custom-popper--custom-popper",
    "kind": "Components/AvatarGroup/Variants/Custom Popper",
    "name": "Custom Popper",
    "story": "Custom Popper",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const popperRenderer = (names: any) => {\n    const AvatarList = names.map((avatar: any, index: number) => {\n      const { firstName, lastName, appearance } = avatar;\n\n      return (\n        <div className=\"d-flex align-items-center mr-4 mb-4\" key={index}>\n          <Avatar\n            firstName={firstName}\n            lastName={lastName}\n            appearance={appearance}\n            className=\"mr-4\"\n            withTooltip={false}\n          />\n          <Text>{`${firstName} ${lastName}`}</Text>\n        </div>\n      );\n    });\n\n    return (\n      <div className=\"overflow-auto py-4 px-6\" style={{ maxHeight: '150px' }}>\n        {AvatarList}\n      </div>\n    );\n  };\n\n  return <AvatarGroup list={list} popoverOptions={{ popperRenderer, dark: false, on: 'click' }} />;\n}"
      },
      "__id": "components-avatargroup-variants-custom-popper--custom-popper",
      "args": {},
      "argTypes": {
        "list": {
          "name": "list",
          "description": "List of `Avatars`\n\n<pre className=\"DocPage-codeBlock\">\nAvatarData: {\n  firstName?: string;\n  lastName?: string;\n  appearance?: Appearance;\n}\n</pre>",
          "type": {
            "required": true,
            "name": "other",
            "value": "AvatarData[]"
          },
          "table": {
            "type": {
              "summary": "AvatarData[]"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Max `Avatars` to show before +x.",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "2"
            }
          }
        },
        "borderColor": {
          "name": "borderColor",
          "description": "Border color of `Avatars`.",
          "type": {
            "required": false,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": {
              "summary": "\"var(--white)\""
            }
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "**Popover for +x avatar**\n\n<pre className=\"DocPage-codeBlock\">\nPopperProps: {\n   popperRenderer?: (names: AvatarData[]) => JSX.Element;\n   appendToBody?: boolean;\n   dark?: boolean;\n   position?: Position;\n   on?: ActionType;\n   maxHeight?: number;\n   popperClassName?: string;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| popperRenderer | Callback function to create custom popover content  | |\n| appendToBody | Appends `Popover` wrapper inside body | true |\n| dark | Changes background of `Popover` | true |\n| position | Position to place `Popover` | bottom |\n| on | Event triggering the `Popover` | hover |\n| maxHeight | Max height of `Popover Text Wrapper` (does not work in case of custom popperRenderer) | 150 |\n| popperClassName | Custom classname added to `Popover` | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopperProps"
          },
          "table": {
            "type": {
              "summary": "PopperProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "tooltipPosition": {
          "name": "tooltipPosition",
          "description": "Position to place the tooltip on `Avatars` shown before +x",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "bottom",
              "top",
              "top-start",
              "top-end",
              "bottom-start",
              "bottom-end",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"top\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "\"bottom\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-backdrop-all--all": {
    "id": "components-backdrop-all--all",
    "kind": "Components/Backdrop/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const open = boolean('open', true);\n\n  const options = {\n    open,\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Backdrop {...options} />\n    </div>\n  );\n}"
      },
      "__id": "components-backdrop-all--all",
      "args": {},
      "argTypes": {
        "open": {
          "name": "open",
          "description": "Handles open/close state",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-badge--solid-secondary": {
    "id": "components-badge--solid-secondary",
    "kind": "Components/Badge",
    "name": "Solid Secondary",
    "story": "Solid Secondary",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Badge appearance=\"secondary\" subtle={false}>\n    {'Closed'}\n  </Badge>\n)"
      },
      "__id": "components-badge--solid-secondary",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "primary",
              "secondary",
              "alert",
              "warning",
              "success",
              "accent1",
              "accent2",
              "accent3",
              "accent4"
            ]
          },
          "table": {
            "type": {
              "summary": "\"primary\" | \"secondary\" | \"alert\" | \"warning\" | \"success\" | \"accent1\" | \"accent2\" | \"accent3\" | \"accent4\""
            },
            "defaultValue": {
              "summary": "\"secondary\""
            }
          }
        },
        "subtle": {
          "name": "subtle",
          "description": "Makes `Badge` appearance subtle",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Badge`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-badge-all--all": {
    "id": "components-badge-all--all",
    "kind": "Components/Badge/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const appearance = select(\n    'appearance',\n    ['primary', 'secondary', 'alert', 'warning', 'success', 'accent1', 'accent2', 'accent3', 'accent4'],\n    undefined\n  );\n\n  const subtle = boolean('subtle', false);\n\n  const children = text('children', 'Badge');\n\n  return (\n    <Badge appearance={appearance} subtle={subtle}>\n      {children}\n    </Badge>\n  );\n}"
      },
      "__id": "components-badge-all--all",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "primary",
              "secondary",
              "alert",
              "warning",
              "success",
              "accent1",
              "accent2",
              "accent3",
              "accent4"
            ]
          },
          "table": {
            "type": {
              "summary": "\"primary\" | \"secondary\" | \"alert\" | \"warning\" | \"success\" | \"accent1\" | \"accent2\" | \"accent3\" | \"accent4\""
            },
            "defaultValue": {
              "summary": "\"secondary\""
            }
          }
        },
        "subtle": {
          "name": "subtle",
          "description": "Makes `Badge` appearance subtle",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Badge`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-badge-solid-alert--solid-alert": {
    "id": "components-badge-solid-alert--solid-alert",
    "kind": "Components/Badge/Solid Alert",
    "name": "Solid Alert",
    "story": "Solid Alert",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Badge appearance=\"alert\" subtle={false}>\n    {'Failed'}\n  </Badge>\n)"
      },
      "__id": "components-badge-solid-alert--solid-alert",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "primary",
              "secondary",
              "alert",
              "warning",
              "success",
              "accent1",
              "accent2",
              "accent3",
              "accent4"
            ]
          },
          "table": {
            "type": {
              "summary": "\"primary\" | \"secondary\" | \"alert\" | \"warning\" | \"success\" | \"accent1\" | \"accent2\" | \"accent3\" | \"accent4\""
            },
            "defaultValue": {
              "summary": "\"secondary\""
            }
          }
        },
        "subtle": {
          "name": "subtle",
          "description": "Makes `Badge` appearance subtle",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Badge`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-badge-solid-warning--solid-warning": {
    "id": "components-badge-solid-warning--solid-warning",
    "kind": "Components/Badge/Solid Warning",
    "name": "Solid Warning",
    "story": "Solid Warning",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Badge appearance=\"warning\" subtle={false}>\n    {'Disapproved'}\n  </Badge>\n)"
      },
      "__id": "components-badge-solid-warning--solid-warning",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "primary",
              "secondary",
              "alert",
              "warning",
              "success",
              "accent1",
              "accent2",
              "accent3",
              "accent4"
            ]
          },
          "table": {
            "type": {
              "summary": "\"primary\" | \"secondary\" | \"alert\" | \"warning\" | \"success\" | \"accent1\" | \"accent2\" | \"accent3\" | \"accent4\""
            },
            "defaultValue": {
              "summary": "\"secondary\""
            }
          }
        },
        "subtle": {
          "name": "subtle",
          "description": "Makes `Badge` appearance subtle",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Badge`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-badge-subtle-alert--subtle-alert": {
    "id": "components-badge-subtle-alert--subtle-alert",
    "kind": "Components/Badge/Subtle Alert",
    "name": "Subtle Alert",
    "story": "Subtle Alert",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Badge appearance=\"alert\" subtle={true}>\n    {'1.41'}\n  </Badge>\n)"
      },
      "__id": "components-badge-subtle-alert--subtle-alert",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "primary",
              "secondary",
              "alert",
              "warning",
              "success",
              "accent1",
              "accent2",
              "accent3",
              "accent4"
            ]
          },
          "table": {
            "type": {
              "summary": "\"primary\" | \"secondary\" | \"alert\" | \"warning\" | \"success\" | \"accent1\" | \"accent2\" | \"accent3\" | \"accent4\""
            },
            "defaultValue": {
              "summary": "\"secondary\""
            }
          }
        },
        "subtle": {
          "name": "subtle",
          "description": "Makes `Badge` appearance subtle",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Badge`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-badge-subtle-secondary--subtle-secondary": {
    "id": "components-badge-subtle-secondary--subtle-secondary",
    "kind": "Components/Badge/Subtle Secondary",
    "name": "Subtle Secondary",
    "story": "Subtle Secondary",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Badge appearance=\"secondary\" subtle={true}>\n    {'Closed'}\n  </Badge>\n)"
      },
      "__id": "components-badge-subtle-secondary--subtle-secondary",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "primary",
              "secondary",
              "alert",
              "warning",
              "success",
              "accent1",
              "accent2",
              "accent3",
              "accent4"
            ]
          },
          "table": {
            "type": {
              "summary": "\"primary\" | \"secondary\" | \"alert\" | \"warning\" | \"success\" | \"accent1\" | \"accent2\" | \"accent3\" | \"accent4\""
            },
            "defaultValue": {
              "summary": "\"secondary\""
            }
          }
        },
        "subtle": {
          "name": "subtle",
          "description": "Makes `Badge` appearance subtle",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Badge`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-badge-subtle-warning--subtle-warning": {
    "id": "components-badge-subtle-warning--subtle-warning",
    "kind": "Components/Badge/Subtle Warning",
    "name": "Subtle Warning",
    "story": "Subtle Warning",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Badge appearance=\"warning\" subtle={true}>\n    {'Pending'}\n  </Badge>\n)"
      },
      "__id": "components-badge-subtle-warning--subtle-warning",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "primary",
              "secondary",
              "alert",
              "warning",
              "success",
              "accent1",
              "accent2",
              "accent3",
              "accent4"
            ]
          },
          "table": {
            "type": {
              "summary": "\"primary\" | \"secondary\" | \"alert\" | \"warning\" | \"success\" | \"accent1\" | \"accent2\" | \"accent3\" | \"accent4\""
            },
            "defaultValue": {
              "summary": "\"secondary\""
            }
          }
        },
        "subtle": {
          "name": "subtle",
          "description": "Makes `Badge` appearance subtle",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Badge`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-badge-success--success": {
    "id": "components-badge-success--success",
    "kind": "Components/Badge/Success",
    "name": "Success",
    "story": "Success",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Badge appearance=\"success\" subtle={false}>\n    {'Badge'}\n  </Badge>\n)"
      },
      "__id": "components-badge-success--success",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "primary",
              "secondary",
              "alert",
              "warning",
              "success",
              "accent1",
              "accent2",
              "accent3",
              "accent4"
            ]
          },
          "table": {
            "type": {
              "summary": "\"primary\" | \"secondary\" | \"alert\" | \"warning\" | \"success\" | \"accent1\" | \"accent2\" | \"accent3\" | \"accent4\""
            },
            "defaultValue": {
              "summary": "\"secondary\""
            }
          }
        },
        "subtle": {
          "name": "subtle",
          "description": "Makes `Badge` appearance subtle",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Badge`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-badge-variants-appearance--appearance": {
    "id": "components-badge-variants-appearance--appearance",
    "kind": "Components/Badge/Variants/Appearance",
    "name": "Appearance",
    "story": "Appearance",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const subtle = false;\n  const weight = 'strong';\n\n  const children = text('children', 'Badge');\n\n  const appearances: Appearance[] = [\n    'primary',\n    'secondary',\n    'alert',\n    'warning',\n    'success',\n    'accent1',\n    'accent2',\n    'accent3',\n    'accent4',\n  ];\n\n  return (\n    <div className=\"d-flex\">\n      {appearances.map((appear, ind) => {\n        return (\n          <div key={ind} className=\"mr-9\">\n            <Badge appearance={appear} subtle={subtle}>\n              {children}\n            </Badge>\n            <br />\n            <Text weight={weight}>{appear.charAt(0).toUpperCase() + appear.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-badge-variants-appearance--appearance",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "primary",
              "secondary",
              "alert",
              "warning",
              "success",
              "accent1",
              "accent2",
              "accent3",
              "accent4"
            ]
          },
          "table": {
            "type": {
              "summary": "\"primary\" | \"secondary\" | \"alert\" | \"warning\" | \"success\" | \"accent1\" | \"accent2\" | \"accent3\" | \"accent4\""
            },
            "defaultValue": {
              "summary": "\"secondary\""
            }
          }
        },
        "subtle": {
          "name": "subtle",
          "description": "Makes `Badge` appearance subtle",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Badge`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-badge-variants-subtle--subtle": {
    "id": "components-badge-variants-subtle--subtle",
    "kind": "Components/Badge/Variants/Subtle",
    "name": "Subtle",
    "story": "Subtle",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const ButtonSubtle = true;\n  const weight = 'strong';\n\n  const children = text('children', 'Badge');\n\n  const appearances: Appearance[] = [\n    'primary',\n    'secondary',\n    'alert',\n    'warning',\n    'success',\n    'accent1',\n    'accent2',\n    'accent3',\n    'accent4',\n  ];\n\n  return (\n    <div className=\"d-flex\">\n      {appearances.map((appear, ind) => {\n        return (\n          <div key={ind} className=\"mr-9\">\n            <Badge appearance={appear} subtle={ButtonSubtle}>\n              {children}\n            </Badge>\n            <br />\n            <Text weight={weight}>{appear.charAt(0).toUpperCase() + appear.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-badge-variants-subtle--subtle",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "primary",
              "secondary",
              "alert",
              "warning",
              "success",
              "accent1",
              "accent2",
              "accent3",
              "accent4"
            ]
          },
          "table": {
            "type": {
              "summary": "\"primary\" | \"secondary\" | \"alert\" | \"warning\" | \"success\" | \"accent1\" | \"accent2\" | \"accent3\" | \"accent4\""
            },
            "defaultValue": {
              "summary": "\"secondary\""
            }
          }
        },
        "subtle": {
          "name": "subtle",
          "description": "Makes `Badge` appearance subtle",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Badge`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-breadcrumbs-variants-less-than-4-levels--less-than-4-levels": {
    "id": "components-breadcrumbs-variants-less-than-4-levels--less-than-4-levels",
    "kind": "Components/Breadcrumbs/Variants/Less Than 4 Levels",
    "name": "Less Than 4 Levels",
    "story": "Less Than 4 Levels",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const list = [\n    {\n      label: 'Level 0',\n      link: '/level0',\n    },\n    {\n      label: 'Level 1',\n      link: '/level1',\n    },\n    {\n      label: 'Level 2',\n      link: '/level2',\n    },\n    {\n      label: 'Level 3',\n      link: '/level3',\n    },\n  ];\n\n  return (\n    <div style={{ background: 'var(--secondary-lightest)' }}>\n      <Breadcrumbs list={list} onClick={(link) => action(`on-click: ${link}`)()} />\n    </div>\n  );\n}"
      },
      "__id": "components-breadcrumbs-variants-less-than-4-levels--less-than-4-levels",
      "args": {},
      "argTypes": {
        "list": {
          "name": "list",
          "description": "List of `Breadcrumb` props\n\n<pre className=\"DocPage-codeBlock\">\nBreadcrumb: {\n    label: string;\n    link: string;\n}\n</pre>",
          "type": {
            "required": true,
            "name": "other",
            "value": "Breadcrumb[]"
          },
          "table": {
            "type": {
              "summary": "Breadcrumb[]"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "onClick handler for `Breadcrumb`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((link: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((link: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-breadcrumbs-variants-more-than-4-levels--more-than-4-levels": {
    "id": "components-breadcrumbs-variants-more-than-4-levels--more-than-4-levels",
    "kind": "Components/Breadcrumbs/Variants/More Than 4 Levels",
    "name": "More Than 4 Levels",
    "story": "More Than 4 Levels",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const list = [\n    {\n      label: 'Level 0',\n      link: '/level0',\n    },\n    {\n      label: 'Level 1',\n      link: '/level1',\n    },\n    {\n      label: 'Level 2',\n      link: '/level2',\n    },\n    {\n      label: 'Level 3',\n      link: '/level3',\n    },\n    {\n      label: 'Level 4',\n      link: '/level4',\n    },\n  ];\n\n  return (\n    <div style={{ background: 'var(--secondary-lightest)' }}>\n      <Breadcrumbs list={list} onClick={(link) => action(`on-click: ${link}`)()} />\n    </div>\n  );\n}"
      },
      "__id": "components-breadcrumbs-variants-more-than-4-levels--more-than-4-levels",
      "args": {},
      "argTypes": {
        "list": {
          "name": "list",
          "description": "List of `Breadcrumb` props\n\n<pre className=\"DocPage-codeBlock\">\nBreadcrumb: {\n    label: string;\n    link: string;\n}\n</pre>",
          "type": {
            "required": true,
            "name": "other",
            "value": "Breadcrumb[]"
          },
          "table": {
            "type": {
              "summary": "Breadcrumb[]"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "onClick handler for `Breadcrumb`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((link: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((link: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-button-all--all": {
    "id": "components-button-all--all",
    "kind": "Components/Button/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const type = select('type', ['button', 'submit', 'reset'], undefined);\n\n  const appearance = select('appearance', ['basic', 'primary', 'success', 'alert', 'transparent'], undefined);\n\n  const size = select('size', ['tiny', 'regular', 'large'], undefined);\n\n  const disabled = boolean('disabled', false);\n\n  const expanded = boolean('expanded', false);\n\n  const loading = boolean('loading', false);\n\n  const icon = text('icon', '');\n\n  const iconAlign = select('iconAlign', ['left', 'right'], undefined);\n\n  const children = text('children', 'Button');\n\n  return (\n    <Button\n      onClick={action('button-clicked')}\n      onMouseEnter={action('mouse-enter')}\n      onMouseLeave={action('mouse-leave')}\n      type={type}\n      appearance={appearance}\n      size={size}\n      expanded={expanded}\n      disabled={disabled}\n      loading={loading}\n      icon={icon}\n      iconAlign={iconAlign}\n    >\n      {children}\n    </Button>\n  );\n}"
      },
      "__id": "components-button-all--all",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "Type of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "button",
              "submit",
              "reset"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"button\" | \"submit\" | \"reset\""
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "The size of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Button`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Expands the `Button` to full width",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Selected state of `Button`\n\n**Only applicable for `appearance: 'basic' | 'transparent'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "loading": {
          "name": "loading",
          "description": "Adds loader inside `Button` when waiting for an action to complete",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Name of icon that is to be added inside `Button`\nMaterial icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "iconAlign": {
          "name": "iconAlign",
          "description": "Align icon left or right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "largeIcon": {
          "name": "largeIcon",
          "description": "Determines if size of icon is large\n\n**Valid when button has icon only**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Specifies autoFocus on render",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Button` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-button-alert-button--alert-button": {
    "id": "components-button-alert-button--alert-button",
    "kind": "Components/Button/Alert Button",
    "name": "Alert Button",
    "story": "Alert Button",
    "parameters": {
      "storySource": {
        "source": "() => <Button appearance=\"alert\">Delete</Button>"
      },
      "__id": "components-button-alert-button--alert-button",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "Type of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "button",
              "submit",
              "reset"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"button\" | \"submit\" | \"reset\""
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "The size of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Button`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Expands the `Button` to full width",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Selected state of `Button`\n\n**Only applicable for `appearance: 'basic' | 'transparent'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "loading": {
          "name": "loading",
          "description": "Adds loader inside `Button` when waiting for an action to complete",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Name of icon that is to be added inside `Button`\nMaterial icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "iconAlign": {
          "name": "iconAlign",
          "description": "Align icon left or right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "largeIcon": {
          "name": "largeIcon",
          "description": "Determines if size of icon is large\n\n**Valid when button has icon only**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Specifies autoFocus on render",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Button` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-button-basic-button--basic-button": {
    "id": "components-button-basic-button--basic-button",
    "kind": "Components/Button/Basic Button",
    "name": "Basic Button",
    "story": "Basic Button",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Button appearance=\"basic\" size=\"regular\">\n    Cancel\n  </Button>\n)"
      },
      "__id": "components-button-basic-button--basic-button",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "Type of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "button",
              "submit",
              "reset"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"button\" | \"submit\" | \"reset\""
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "The size of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Button`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Expands the `Button` to full width",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Selected state of `Button`\n\n**Only applicable for `appearance: 'basic' | 'transparent'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "loading": {
          "name": "loading",
          "description": "Adds loader inside `Button` when waiting for an action to complete",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Name of icon that is to be added inside `Button`\nMaterial icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "iconAlign": {
          "name": "iconAlign",
          "description": "Align icon left or right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "largeIcon": {
          "name": "largeIcon",
          "description": "Determines if size of icon is large\n\n**Valid when button has icon only**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Specifies autoFocus on render",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Button` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-button-expanded-button--expanded-button": {
    "id": "components-button-expanded-button--expanded-button",
    "kind": "Components/Button/Expanded Button",
    "name": "Expanded Button",
    "story": "Expanded Button",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Button appearance=\"primary\" size=\"large\" expanded={true}>\n    Login\n  </Button>\n)"
      },
      "__id": "components-button-expanded-button--expanded-button",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "Type of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "button",
              "submit",
              "reset"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"button\" | \"submit\" | \"reset\""
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "The size of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Button`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Expands the `Button` to full width",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Selected state of `Button`\n\n**Only applicable for `appearance: 'basic' | 'transparent'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "loading": {
          "name": "loading",
          "description": "Adds loader inside `Button` when waiting for an action to complete",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Name of icon that is to be added inside `Button`\nMaterial icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "iconAlign": {
          "name": "iconAlign",
          "description": "Align icon left or right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "largeIcon": {
          "name": "largeIcon",
          "description": "Determines if size of icon is large\n\n**Valid when button has icon only**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Specifies autoFocus on render",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Button` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-button-icon-button--icon-button": {
    "id": "components-button-icon-button--icon-button",
    "kind": "Components/Button/Icon Button",
    "name": "Icon Button",
    "story": "Icon Button",
    "parameters": {
      "storySource": {
        "source": "() => <Button appearance=\"basic\" icon=\"keyboard_arrow_right\" />"
      },
      "__id": "components-button-icon-button--icon-button",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "Type of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "button",
              "submit",
              "reset"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"button\" | \"submit\" | \"reset\""
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "The size of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Button`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Expands the `Button` to full width",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Selected state of `Button`\n\n**Only applicable for `appearance: 'basic' | 'transparent'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "loading": {
          "name": "loading",
          "description": "Adds loader inside `Button` when waiting for an action to complete",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Name of icon that is to be added inside `Button`\nMaterial icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "iconAlign": {
          "name": "iconAlign",
          "description": "Align icon left or right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "largeIcon": {
          "name": "largeIcon",
          "description": "Determines if size of icon is large\n\n**Valid when button has icon only**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Specifies autoFocus on render",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Button` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-button-icon-button-group--icon-button-group": {
    "id": "components-button-icon-button-group--icon-button-group",
    "kind": "Components/Button/Icon Button Group",
    "name": "Icon Button Group",
    "story": "Icon Button Group",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <div className=\"d-flex\">\n    <Button size=\"tiny\" icon=\"content_copy\" className=\"mr-2\" />\n    <Button size=\"tiny\" icon=\"content_paste\" className=\"mr-2\" />\n    <Button size=\"tiny\" icon=\"delete\" />\n  </div>\n)"
      },
      "__id": "components-button-icon-button-group--icon-button-group",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "Type of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "button",
              "submit",
              "reset"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"button\" | \"submit\" | \"reset\""
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "The size of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Button`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Expands the `Button` to full width",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Selected state of `Button`\n\n**Only applicable for `appearance: 'basic' | 'transparent'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "loading": {
          "name": "loading",
          "description": "Adds loader inside `Button` when waiting for an action to complete",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Name of icon that is to be added inside `Button`\nMaterial icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "iconAlign": {
          "name": "iconAlign",
          "description": "Align icon left or right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "largeIcon": {
          "name": "largeIcon",
          "description": "Determines if size of icon is large\n\n**Valid when button has icon only**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Specifies autoFocus on render",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Button` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-button-icon-left-button--icon-left-button": {
    "id": "components-button-icon-left-button--icon-left-button",
    "kind": "Components/Button/Icon Left Button",
    "name": "Icon Left Button",
    "story": "Icon Left Button",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Button icon=\"get_app\" iconAlign=\"left\">\n    Download\n  </Button>\n)"
      },
      "__id": "components-button-icon-left-button--icon-left-button",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "Type of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "button",
              "submit",
              "reset"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"button\" | \"submit\" | \"reset\""
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "The size of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Button`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Expands the `Button` to full width",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Selected state of `Button`\n\n**Only applicable for `appearance: 'basic' | 'transparent'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "loading": {
          "name": "loading",
          "description": "Adds loader inside `Button` when waiting for an action to complete",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Name of icon that is to be added inside `Button`\nMaterial icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "iconAlign": {
          "name": "iconAlign",
          "description": "Align icon left or right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "largeIcon": {
          "name": "largeIcon",
          "description": "Determines if size of icon is large\n\n**Valid when button has icon only**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Specifies autoFocus on render",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Button` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-button-icon-right-button--icon-right-button": {
    "id": "components-button-icon-right-button--icon-right-button",
    "kind": "Components/Button/Icon Right Button",
    "name": "Icon Right Button",
    "story": "Icon Right Button",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Button icon=\"arrow_forward\" iconAlign=\"right\">\n    Next in rank\n  </Button>\n)"
      },
      "__id": "components-button-icon-right-button--icon-right-button",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "Type of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "button",
              "submit",
              "reset"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"button\" | \"submit\" | \"reset\""
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "The size of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Button`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Expands the `Button` to full width",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Selected state of `Button`\n\n**Only applicable for `appearance: 'basic' | 'transparent'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "loading": {
          "name": "loading",
          "description": "Adds loader inside `Button` when waiting for an action to complete",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Name of icon that is to be added inside `Button`\nMaterial icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "iconAlign": {
          "name": "iconAlign",
          "description": "Align icon left or right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "largeIcon": {
          "name": "largeIcon",
          "description": "Determines if size of icon is large\n\n**Valid when button has icon only**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Specifies autoFocus on render",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Button` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-button-label-button-group--label-button-group": {
    "id": "components-button-label-button-group--label-button-group",
    "kind": "Components/Button/Label Button Group",
    "name": "Label Button Group",
    "story": "Label Button Group",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <div className=\"d-flex\">\n    <Button size=\"tiny\" className=\"mr-2\">\n      Copy\n    </Button>\n    <Button size=\"tiny\" className=\"mr-2\">\n      Paste\n    </Button>\n    <Button size=\"tiny\">Delete</Button>\n  </div>\n)"
      },
      "__id": "components-button-label-button-group--label-button-group",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "Type of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "button",
              "submit",
              "reset"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"button\" | \"submit\" | \"reset\""
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "The size of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Button`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Expands the `Button` to full width",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Selected state of `Button`\n\n**Only applicable for `appearance: 'basic' | 'transparent'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "loading": {
          "name": "loading",
          "description": "Adds loader inside `Button` when waiting for an action to complete",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Name of icon that is to be added inside `Button`\nMaterial icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "iconAlign": {
          "name": "iconAlign",
          "description": "Align icon left or right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "largeIcon": {
          "name": "largeIcon",
          "description": "Determines if size of icon is large\n\n**Valid when button has icon only**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Specifies autoFocus on render",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Button` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-button-loader-in-button--loader-in-button": {
    "id": "components-button-loader-in-button--loader-in-button",
    "kind": "Components/Button/Loader In Button",
    "name": "Loader In Button",
    "story": "Loader In Button",
    "parameters": {
      "storySource": {
        "source": "() => <Button appearance=\"primary\" loading={true} />"
      },
      "__id": "components-button-loader-in-button--loader-in-button",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "Type of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "button",
              "submit",
              "reset"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"button\" | \"submit\" | \"reset\""
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "The size of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Button`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Expands the `Button` to full width",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Selected state of `Button`\n\n**Only applicable for `appearance: 'basic' | 'transparent'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "loading": {
          "name": "loading",
          "description": "Adds loader inside `Button` when waiting for an action to complete",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Name of icon that is to be added inside `Button`\nMaterial icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "iconAlign": {
          "name": "iconAlign",
          "description": "Align icon left or right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "largeIcon": {
          "name": "largeIcon",
          "description": "Determines if size of icon is large\n\n**Valid when button has icon only**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Specifies autoFocus on render",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Button` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-button-primary-button--primary-button": {
    "id": "components-button-primary-button--primary-button",
    "kind": "Components/Button/Primary Button",
    "name": "Primary Button",
    "story": "Primary Button",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Button appearance=\"primary\" size=\"regular\">\n    Submit\n  </Button>\n)"
      },
      "__id": "components-button-primary-button--primary-button",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "Type of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "button",
              "submit",
              "reset"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"button\" | \"submit\" | \"reset\""
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "The size of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Button`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Expands the `Button` to full width",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Selected state of `Button`\n\n**Only applicable for `appearance: 'basic' | 'transparent'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "loading": {
          "name": "loading",
          "description": "Adds loader inside `Button` when waiting for an action to complete",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Name of icon that is to be added inside `Button`\nMaterial icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "iconAlign": {
          "name": "iconAlign",
          "description": "Align icon left or right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "largeIcon": {
          "name": "largeIcon",
          "description": "Determines if size of icon is large\n\n**Valid when button has icon only**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Specifies autoFocus on render",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Button` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-button-split-button--split-button": {
    "id": "components-button-split-button--split-button",
    "kind": "Components/Button/Split Button",
    "name": "Split Button",
    "story": "Split Button",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <div className=\"d-flex\">\n    <Button className=\"mr-2\">Request review</Button>\n    <div className=\"mb-10\" style={{ width: '150px' }}>\n      <Dropdown menu={true} icon=\"expand_more\" options={options} />\n    </div>\n  </div>\n)"
      },
      "__id": "components-button-split-button--split-button",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "Type of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "button",
              "submit",
              "reset"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"button\" | \"submit\" | \"reset\""
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "The size of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Button`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Expands the `Button` to full width",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Selected state of `Button`\n\n**Only applicable for `appearance: 'basic' | 'transparent'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "loading": {
          "name": "loading",
          "description": "Adds loader inside `Button` when waiting for an action to complete",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Name of icon that is to be added inside `Button`\nMaterial icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "iconAlign": {
          "name": "iconAlign",
          "description": "Align icon left or right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "largeIcon": {
          "name": "largeIcon",
          "description": "Determines if size of icon is large\n\n**Valid when button has icon only**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Specifies autoFocus on render",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Button` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-button-transparent-button--transparent-button": {
    "id": "components-button-transparent-button--transparent-button",
    "kind": "Components/Button/Transparent Button",
    "name": "Transparent Button",
    "story": "Transparent Button",
    "parameters": {
      "storySource": {
        "source": "() => <Button appearance=\"transparent\">Re-evaluate</Button>"
      },
      "__id": "components-button-transparent-button--transparent-button",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "Type of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "button",
              "submit",
              "reset"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"button\" | \"submit\" | \"reset\""
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "The size of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Button`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Expands the `Button` to full width",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Selected state of `Button`\n\n**Only applicable for `appearance: 'basic' | 'transparent'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "loading": {
          "name": "loading",
          "description": "Adds loader inside `Button` when waiting for an action to complete",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Name of icon that is to be added inside `Button`\nMaterial icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "iconAlign": {
          "name": "iconAlign",
          "description": "Align icon left or right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "largeIcon": {
          "name": "largeIcon",
          "description": "Determines if size of icon is large\n\n**Valid when button has icon only**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Specifies autoFocus on render",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Button` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-button-transparent-icon-button--transparent-icon-button": {
    "id": "components-button-transparent-icon-button--transparent-icon-button",
    "kind": "Components/Button/Transparent Icon Button",
    "name": "Transparent Icon Button",
    "story": "Transparent Icon Button",
    "parameters": {
      "storySource": {
        "source": "() => <Button appearance=\"transparent\" icon=\"more_horiz\" />"
      },
      "__id": "components-button-transparent-icon-button--transparent-icon-button",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "Type of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "button",
              "submit",
              "reset"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"button\" | \"submit\" | \"reset\""
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "The size of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Button`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Expands the `Button` to full width",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Selected state of `Button`\n\n**Only applicable for `appearance: 'basic' | 'transparent'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "loading": {
          "name": "loading",
          "description": "Adds loader inside `Button` when waiting for an action to complete",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Name of icon that is to be added inside `Button`\nMaterial icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "iconAlign": {
          "name": "iconAlign",
          "description": "Align icon left or right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "largeIcon": {
          "name": "largeIcon",
          "description": "Determines if size of icon is large\n\n**Valid when button has icon only**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Specifies autoFocus on render",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Button` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-button-variants-appearance--appearance": {
    "id": "components-button-variants-appearance--appearance",
    "kind": "Components/Button/Variants/Appearance",
    "name": "Appearance",
    "story": "Appearance",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const disabled = false;\n  const expanded = false;\n  const loading = false;\n\n  const appearances: Appearance[] = ['basic', 'primary', 'success', 'alert', 'transparent'];\n\n  const children = text('children', 'Button');\n\n  return (\n    <div className=\"d-flex\">\n      {appearances.map((appear, ind) => {\n        return (\n          <div key={ind} className=\"mr-9\">\n            <Button\n              onClick={action('button-clicked')}\n              onMouseEnter={action('mouse-enter')}\n              onMouseLeave={action('mouse-leave')}\n              appearance={appear}\n              size={'regular'}\n              expanded={expanded}\n              disabled={disabled}\n              loading={loading}\n            >\n              {children}\n            </Button>\n            <br />\n            <Text weight=\"strong\">{appear.charAt(0).toUpperCase() + appear.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-button-variants-appearance--appearance",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "Type of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "button",
              "submit",
              "reset"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"button\" | \"submit\" | \"reset\""
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "The size of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Button`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Expands the `Button` to full width",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Selected state of `Button`\n\n**Only applicable for `appearance: 'basic' | 'transparent'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "loading": {
          "name": "loading",
          "description": "Adds loader inside `Button` when waiting for an action to complete",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Name of icon that is to be added inside `Button`\nMaterial icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "iconAlign": {
          "name": "iconAlign",
          "description": "Align icon left or right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "largeIcon": {
          "name": "largeIcon",
          "description": "Determines if size of icon is large\n\n**Valid when button has icon only**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Specifies autoFocus on render",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Button` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-button-variants-expanded--expanded": {
    "id": "components-button-variants-expanded--expanded",
    "kind": "Components/Button/Variants/Expanded",
    "name": "Expanded",
    "story": "Expanded",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const disabled = false;\n  const ButtonExpanded = true;\n  const loading = false;\n\n  const appearances: Appearance[] = ['basic', 'primary', 'success', 'alert'];\n\n  const children = text('children', 'Button');\n\n  return (\n    <div className=\"Row\">\n      {appearances.map((appear, ind) => {\n        return (\n          <div key={ind} className=\"mr-9 mb-4 w-50\">\n            <Button\n              onClick={action('button-clicked')}\n              onMouseEnter={action('mouse-enter')}\n              onMouseLeave={action('mouse-leave')}\n              appearance={appear}\n              size={'regular'}\n              expanded={ButtonExpanded}\n              disabled={disabled}\n              loading={loading}\n            >\n              {children}\n            </Button>\n            <br />\n            <Text weight=\"strong\">{appear.charAt(0).toUpperCase() + appear.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-button-variants-expanded--expanded",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "Type of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "button",
              "submit",
              "reset"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"button\" | \"submit\" | \"reset\""
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "The size of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Button`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Expands the `Button` to full width",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Selected state of `Button`\n\n**Only applicable for `appearance: 'basic' | 'transparent'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "loading": {
          "name": "loading",
          "description": "Adds loader inside `Button` when waiting for an action to complete",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Name of icon that is to be added inside `Button`\nMaterial icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "iconAlign": {
          "name": "iconAlign",
          "description": "Align icon left or right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "largeIcon": {
          "name": "largeIcon",
          "description": "Determines if size of icon is large\n\n**Valid when button has icon only**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Specifies autoFocus on render",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Button` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-button-variants-icon-icon--icon": {
    "id": "components-button-variants-icon-icon--icon",
    "kind": "Components/Button/Variants/Icon/Icon",
    "name": "Icon",
    "story": "Icon",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div>\n      <div className=\"mb-7\">\n        <Text weight=\"medium\" size=\"large\">\n          Tiny\n        </Text>\n        <div className=\"d-flex align-items-center mt-4\">\n          <Button\n            onClick={action('button-clicked')}\n            onMouseEnter={action('mouse-enter')}\n            onMouseLeave={action('mouse-leave')}\n            className=\"mr-7\"\n            icon=\"add\"\n            size=\"tiny\"\n            largeIcon={false}\n          />\n          <Button\n            onClick={action('button-clicked')}\n            onMouseEnter={action('mouse-enter')}\n            onMouseLeave={action('mouse-leave')}\n            className=\"\"\n            icon=\"add\"\n            size=\"tiny\"\n            largeIcon={true}\n          />\n        </div>\n      </div>\n      <div className=\"mb-7\">\n        <Text weight=\"medium\" size=\"large\">\n          Regular\n        </Text>\n        <div className=\"d-flex align-items-center mt-4\">\n          <Button\n            onClick={action('button-clicked')}\n            onMouseEnter={action('mouse-enter')}\n            onMouseLeave={action('mouse-leave')}\n            className=\"mr-7\"\n            icon=\"print\"\n            size=\"regular\"\n            largeIcon={false}\n          />\n          <Button\n            onClick={action('button-clicked')}\n            onMouseEnter={action('mouse-enter')}\n            onMouseLeave={action('mouse-leave')}\n            className=\"\"\n            icon=\"print\"\n            size=\"regular\"\n            largeIcon={true}\n          />\n        </div>\n      </div>\n      <div className=\"mb-7\">\n        <Text weight=\"medium\" size=\"large\">\n          Large\n        </Text>\n        <div className=\"d-flex align-items-center mt-4\">\n          <Button\n            onClick={action('button-clicked')}\n            onMouseEnter={action('mouse-enter')}\n            onMouseLeave={action('mouse-leave')}\n            className=\"mr-7\"\n            icon=\"more_horiz\"\n            size=\"large\"\n            largeIcon={false}\n          />\n          <Button\n            onClick={action('button-clicked')}\n            onMouseEnter={action('mouse-enter')}\n            onMouseLeave={action('mouse-leave')}\n            className=\"\"\n            icon=\"more_horiz\"\n            size=\"large\"\n            largeIcon={true}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-button-variants-icon-icon--icon",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "Type of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "button",
              "submit",
              "reset"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"button\" | \"submit\" | \"reset\""
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "The size of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Button`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Expands the `Button` to full width",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Selected state of `Button`\n\n**Only applicable for `appearance: 'basic' | 'transparent'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "loading": {
          "name": "loading",
          "description": "Adds loader inside `Button` when waiting for an action to complete",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Name of icon that is to be added inside `Button`\nMaterial icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "iconAlign": {
          "name": "iconAlign",
          "description": "Align icon left or right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "largeIcon": {
          "name": "largeIcon",
          "description": "Determines if size of icon is large\n\n**Valid when button has icon only**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Specifies autoFocus on render",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Button` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-button-variants-icon-icon-left--icon-left": {
    "id": "components-button-variants-icon-icon-left--icon-left",
    "kind": "Components/Button/Variants/Icon/Icon Left",
    "name": "Icon Left",
    "story": "Icon Left",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const disabled = false;\n  const expanded = false;\n  const loading = false;\n  const iconAlign = 'left';\n\n  const size: Size[] = ['tiny', 'regular', 'large'];\n\n  const icon = text('icon', 'refresh');\n  const children = text('children', 'Button');\n  return (\n    <div className=\"d-flex w-25\">\n      {size.map((IconSize, ind) => {\n        return (\n          <div key={ind} className=\"mr-5\">\n            <div className=\"h-50\">\n              <Button\n                onClick={action('button-clicked')}\n                onMouseEnter={action('mouse-enter')}\n                onMouseLeave={action('mouse-leave')}\n                appearance={'basic'}\n                size={IconSize}\n                expanded={expanded}\n                disabled={disabled}\n                loading={loading}\n                icon={icon}\n                iconAlign={iconAlign}\n              >\n                {children}\n              </Button>\n            </div>\n            <br />\n            <Text weight=\"strong\">{IconSize.charAt(0).toUpperCase() + IconSize.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-button-variants-icon-icon-left--icon-left",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "Type of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "button",
              "submit",
              "reset"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"button\" | \"submit\" | \"reset\""
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "The size of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Button`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Expands the `Button` to full width",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Selected state of `Button`\n\n**Only applicable for `appearance: 'basic' | 'transparent'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "loading": {
          "name": "loading",
          "description": "Adds loader inside `Button` when waiting for an action to complete",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Name of icon that is to be added inside `Button`\nMaterial icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "iconAlign": {
          "name": "iconAlign",
          "description": "Align icon left or right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "largeIcon": {
          "name": "largeIcon",
          "description": "Determines if size of icon is large\n\n**Valid when button has icon only**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Specifies autoFocus on render",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Button` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-button-variants-icon-icon-right--icon-right": {
    "id": "components-button-variants-icon-icon-right--icon-right",
    "kind": "Components/Button/Variants/Icon/Icon Right",
    "name": "Icon Right",
    "story": "Icon Right",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const disabled = false;\n  const expanded = false;\n  const loading = false;\n  const iconAlign = 'right';\n\n  const size: Size[] = ['tiny', 'regular', 'large'];\n\n  const icon = text('icon', 'refresh');\n  const children = text('children', 'Button');\n  return (\n    <div className=\"d-flex w-25\">\n      {size.map((IconSize, ind) => {\n        return (\n          <div key={ind} className=\"mr-5\">\n            <div className=\"h-50\">\n              <Button\n                onClick={action('button-clicked')}\n                onMouseEnter={action('mouse-enter')}\n                onMouseLeave={action('mouse-leave')}\n                appearance={'basic'}\n                size={IconSize}\n                expanded={expanded}\n                disabled={disabled}\n                loading={loading}\n                icon={icon}\n                iconAlign={iconAlign}\n              >\n                {children}\n              </Button>\n            </div>\n            <br />\n            <Text weight=\"strong\">{IconSize.charAt(0).toUpperCase() + IconSize.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-button-variants-icon-icon-right--icon-right",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "Type of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "button",
              "submit",
              "reset"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"button\" | \"submit\" | \"reset\""
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "The size of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Button`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Expands the `Button` to full width",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Selected state of `Button`\n\n**Only applicable for `appearance: 'basic' | 'transparent'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "loading": {
          "name": "loading",
          "description": "Adds loader inside `Button` when waiting for an action to complete",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Name of icon that is to be added inside `Button`\nMaterial icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "iconAlign": {
          "name": "iconAlign",
          "description": "Align icon left or right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "largeIcon": {
          "name": "largeIcon",
          "description": "Determines if size of icon is large\n\n**Valid when button has icon only**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Specifies autoFocus on render",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Button` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-button-variants-size--size": {
    "id": "components-button-variants-size--size",
    "kind": "Components/Button/Variants/Size",
    "name": "Size",
    "story": "Size",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const disabled = false;\n  const expanded = false;\n  const loading = false;\n\n  const sizes: Size[] = ['tiny', 'regular', 'large'];\n\n  const children = text('children', 'Button');\n\n  return (\n    <div className=\"d-flex w-25\">\n      {sizes.map((ButtonSize, ind) => {\n        return (\n          <div key={ind} className=\"mr-5\">\n            <div className=\"h-50\">\n              <Button\n                onClick={action('button-clicked')}\n                onMouseEnter={action('mouse-enter')}\n                onMouseLeave={action('mouse-leave')}\n                appearance={'primary'}\n                size={ButtonSize}\n                expanded={expanded}\n                disabled={disabled}\n                loading={loading}\n              >\n                {children}\n              </Button>\n            </div>\n            <br />\n            <Text weight=\"strong\">{ButtonSize.charAt(0).toUpperCase() + ButtonSize.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-button-variants-size--size",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "Type of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "button",
              "submit",
              "reset"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"button\" | \"submit\" | \"reset\""
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "The size of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Button`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Expands the `Button` to full width",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Selected state of `Button`\n\n**Only applicable for `appearance: 'basic' | 'transparent'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "loading": {
          "name": "loading",
          "description": "Adds loader inside `Button` when waiting for an action to complete",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Name of icon that is to be added inside `Button`\nMaterial icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "iconAlign": {
          "name": "iconAlign",
          "description": "Align icon left or right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "largeIcon": {
          "name": "largeIcon",
          "description": "Determines if size of icon is large\n\n**Valid when button has icon only**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Specifies autoFocus on render",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Button` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-button-variants-state-alert--alert": {
    "id": "components-button-variants-state-alert--alert",
    "kind": "Components/Button/Variants/State/Alert",
    "name": "Alert",
    "story": "Alert",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const disabled = false;\n  const expanded = false;\n  const loading = false;\n\n  const children = text('children', 'Button');\n\n  const style = {\n    justifyContent: 'space-between',\n  };\n\n  return (\n    <div className=\"d-flex w-25\" style={style}>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'alert'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={disabled}\n          loading={loading}\n        >\n          {children}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Default</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'alert'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={true}\n          loading={loading}\n        >\n          {children}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Disabled</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'alert'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={disabled}\n          loading={true}\n        >\n          {''}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Loading</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'alert'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={disabled}\n          loading={true}\n        >\n          {children}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Loading with Text</Text>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-button-variants-state-alert--alert",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "Type of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "button",
              "submit",
              "reset"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"button\" | \"submit\" | \"reset\""
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "The size of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Button`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Expands the `Button` to full width",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Selected state of `Button`\n\n**Only applicable for `appearance: 'basic' | 'transparent'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "loading": {
          "name": "loading",
          "description": "Adds loader inside `Button` when waiting for an action to complete",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Name of icon that is to be added inside `Button`\nMaterial icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "iconAlign": {
          "name": "iconAlign",
          "description": "Align icon left or right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "largeIcon": {
          "name": "largeIcon",
          "description": "Determines if size of icon is large\n\n**Valid when button has icon only**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Specifies autoFocus on render",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Button` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-button-variants-state-basic--basic": {
    "id": "components-button-variants-state-basic--basic",
    "kind": "Components/Button/Variants/State/Basic",
    "name": "Basic",
    "story": "Basic",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const disabled = false;\n  const expanded = false;\n  const loading = false;\n\n  const children = text('children', 'Button');\n\n  const style = {\n    justifyContent: 'space-between',\n  };\n\n  return (\n    <div className=\"d-flex w-25\" style={style}>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'basic'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={disabled}\n          loading={loading}\n        >\n          {children}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Default</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'basic'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={true}\n          loading={loading}\n        >\n          {children}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Disabled</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'basic'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={disabled}\n          loading={true}\n        >\n          {''}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Loading</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'basic'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={disabled}\n          loading={true}\n        >\n          {children}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Loading with Text</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'basic'}\n          size={'regular'}\n          selected={true}\n        >\n          {children}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Selected</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'basic'}\n          size={'regular'}\n          selected={true}\n          icon=\"events\"\n        />\n        <br />\n        <Text weight=\"strong\">Selected Icon</Text>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-button-variants-state-basic--basic",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "Type of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "button",
              "submit",
              "reset"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"button\" | \"submit\" | \"reset\""
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "The size of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Button`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Expands the `Button` to full width",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Selected state of `Button`\n\n**Only applicable for `appearance: 'basic' | 'transparent'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "loading": {
          "name": "loading",
          "description": "Adds loader inside `Button` when waiting for an action to complete",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Name of icon that is to be added inside `Button`\nMaterial icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "iconAlign": {
          "name": "iconAlign",
          "description": "Align icon left or right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "largeIcon": {
          "name": "largeIcon",
          "description": "Determines if size of icon is large\n\n**Valid when button has icon only**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Specifies autoFocus on render",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Button` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-button-variants-state-primary--primary": {
    "id": "components-button-variants-state-primary--primary",
    "kind": "Components/Button/Variants/State/Primary",
    "name": "Primary",
    "story": "Primary",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const disabled = false;\n  const expanded = false;\n  const loading = false;\n\n  const children = text('children', 'Button');\n\n  const style = {\n    justifyContent: 'space-between',\n  };\n  return (\n    <div className=\"d-flex w-25\" style={style}>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'primary'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={disabled}\n          loading={loading}\n        >\n          {children}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Default</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'primary'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={true}\n          loading={loading}\n        >\n          {children}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Disabled</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'primary'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={disabled}\n          loading={true}\n        >\n          {''}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Loading</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'primary'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={disabled}\n          loading={true}\n        >\n          {children}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Loading with Text</Text>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-button-variants-state-primary--primary",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "Type of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "button",
              "submit",
              "reset"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"button\" | \"submit\" | \"reset\""
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "The size of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Button`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Expands the `Button` to full width",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Selected state of `Button`\n\n**Only applicable for `appearance: 'basic' | 'transparent'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "loading": {
          "name": "loading",
          "description": "Adds loader inside `Button` when waiting for an action to complete",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Name of icon that is to be added inside `Button`\nMaterial icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "iconAlign": {
          "name": "iconAlign",
          "description": "Align icon left or right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "largeIcon": {
          "name": "largeIcon",
          "description": "Determines if size of icon is large\n\n**Valid when button has icon only**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Specifies autoFocus on render",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Button` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-button-variants-state-success--success": {
    "id": "components-button-variants-state-success--success",
    "kind": "Components/Button/Variants/State/Success",
    "name": "Success",
    "story": "Success",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const disabled = false;\n  const expanded = false;\n  const loading = false;\n\n  const children = text('children', 'Button');\n\n  const style = {\n    justifyContent: 'space-between',\n  };\n\n  return (\n    <div className=\"d-flex w-25\" style={style}>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'success'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={disabled}\n          loading={loading}\n        >\n          {children}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Default</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'success'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={true}\n          loading={loading}\n        >\n          {children}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Disabled</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'success'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={disabled}\n          loading={true}\n        >\n          {''}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Loading</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'success'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={disabled}\n          loading={true}\n        >\n          {children}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Loading with Text</Text>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-button-variants-state-success--success",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "Type of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "button",
              "submit",
              "reset"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"button\" | \"submit\" | \"reset\""
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "The size of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Button`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Expands the `Button` to full width",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Selected state of `Button`\n\n**Only applicable for `appearance: 'basic' | 'transparent'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "loading": {
          "name": "loading",
          "description": "Adds loader inside `Button` when waiting for an action to complete",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Name of icon that is to be added inside `Button`\nMaterial icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "iconAlign": {
          "name": "iconAlign",
          "description": "Align icon left or right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "largeIcon": {
          "name": "largeIcon",
          "description": "Determines if size of icon is large\n\n**Valid when button has icon only**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Specifies autoFocus on render",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Button` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-button-variants-state-transparent--transparent": {
    "id": "components-button-variants-state-transparent--transparent",
    "kind": "Components/Button/Variants/State/Transparent",
    "name": "Transparent",
    "story": "Transparent",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const disabled = false;\n  const expanded = false;\n  const loading = false;\n\n  const children = text('children', 'Button');\n\n  const style = {\n    justifyContent: 'space-between',\n  };\n  return (\n    <div className=\"d-flex w-25\" style={style}>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'transparent'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={disabled}\n          loading={loading}\n        >\n          {children}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Default</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'transparent'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={true}\n          loading={loading}\n        >\n          {children}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Disabled</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'transparent'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={disabled}\n          loading={true}\n        >\n          {''}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Loading</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'transparent'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={disabled}\n          loading={true}\n        >\n          {children}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Loading with Text</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'transparent'}\n          size={'regular'}\n          selected={true}\n        >\n          {children}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Selected</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'transparent'}\n          size={'regular'}\n          selected={true}\n          icon=\"events\"\n        />\n        <br />\n        <Text weight=\"strong\">Selected Icon</Text>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-button-variants-state-transparent--transparent",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "Type of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "button",
              "submit",
              "reset"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"button\" | \"submit\" | \"reset\""
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "The size of `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Button`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Button`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Expands the `Button` to full width",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Selected state of `Button`\n\n**Only applicable for `appearance: 'basic' | 'transparent'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "loading": {
          "name": "loading",
          "description": "Adds loader inside `Button` when waiting for an action to complete",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Name of icon that is to be added inside `Button`\nMaterial icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "iconAlign": {
          "name": "iconAlign",
          "description": "Align icon left or right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "largeIcon": {
          "name": "largeIcon",
          "description": "Determines if size of icon is large\n\n**Valid when button has icon only**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Specifies autoFocus on render",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Button` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Button`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-calendar-all--all": {
    "id": "components-calendar-all--all",
    "kind": "Components/Calendar/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const monthsInView = number('monthsInView', 1);\n\n  const dateValue = date('date', undefined);\n\n  const startDate = date('startDate', undefined);\n\n  const endDate = date('endDate', undefined);\n\n  const view = select('view', ['date', 'month', 'year'], undefined);\n\n  const rangePicker = boolean('rangePicker', false);\n\n  const rangeLimit = number('rangeLimit', 0);\n\n  const firstDayOfWeek = select(\n    'firstDayOfWeek',\n    ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'],\n    undefined\n  );\n\n  const disabledBefore = date('disabledBefore', new Date('Jan 20 2015'));\n\n  const disabledAfter = date('disabledAfter', new Date('Jan 20 2028'));\n\n  const jumpView = boolean('jumpView', true);\n\n  const yearNav = number('yearNav', -1);\n\n  const monthNav = number('monthNav', -1);\n\n  const attr: Record<string, any> = {};\n  if (disabledBefore) attr.disabledBefore = disabledBefore;\n  if (disabledAfter) attr.disabledAfter = disabledAfter;\n  if (rangeLimit) attr.rangeLimit = rangeLimit;\n  if (yearNav !== -1) attr.yearNav = yearNav;\n  if (monthNav !== -1) attr.monthNav = monthNav;\n\n  return (\n    <Card className=\"d-inline-flex\" shadow=\"light\">\n      <Calendar\n        monthsInView={monthsInView}\n        rangePicker={rangePicker}\n        jumpView={jumpView}\n        date={convertToDate(dateValue)}\n        startDate={convertToDate(startDate)}\n        endDate={convertToDate(endDate)}\n        onDateChange={(currDate?: Date) => action(`on date change : ${currDate}`)()}\n        onRangeChange={(sDate?: Date, eDate?: Date) => action(`on range change: ${sDate} - ${eDate}`)()}\n        view={view}\n        firstDayOfWeek={firstDayOfWeek}\n        {...attr}\n      />\n    </Card>\n  );\n}"
      },
      "__id": "components-calendar-all--all",
      "args": {},
      "argTypes": {
        "onDateChange": {
          "name": "onDateChange",
          "description": "Callback function called when date is changed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((date: Date) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((date: Date) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onRangeChange": {
          "name": "onRangeChange",
          "description": "Callback function called when range is changed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((startDate: Date | undefined, endDate: Date | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((startDate: Date | undefined, endDate: Date | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "date": {
          "name": "date",
          "description": "Selected date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "rangePicker": {
          "name": "rangePicker",
          "description": "Set if want to use as RangePicker",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "startDate": {
          "name": "startDate",
          "description": "Selected startDate for RangePicker",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "endDate": {
          "name": "endDate",
          "description": "Selected endDate for RangePicker",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "rangeLimit": {
          "name": "rangeLimit",
          "description": "Allowed limit for difference in startDate and endDate\n\n**set `0` or `undefined` for infinite limit**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of `Calendar`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\""
            },
            "defaultValue": {
              "summary": "\"large\""
            }
          }
        },
        "monthsInView": {
          "name": "monthsInView",
          "description": "Number of months rendered in view",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "jumpView": {
          "name": "jumpView",
          "description": "Enables jumping to different view on clicking on Calendar Header\n\n**set to `false` if monthsInView > 1**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "firstDayOfWeek": {
          "name": "firstDayOfWeek",
          "description": "Specifies first day of week to be rendered",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "sunday",
              "monday",
              "tuesday",
              "wednesday",
              "thursday",
              "friday",
              "saturday"
            ]
          },
          "table": {
            "type": {
              "summary": "\"sunday\" | \"monday\" | \"tuesday\" | \"wednesday\" | \"thursday\" | \"friday\" | \"saturday\""
            },
            "defaultValue": {
              "summary": "\"sunday\""
            }
          }
        },
        "view": {
          "name": "view",
          "description": "Specifies initial view of `Calendar`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "date",
              "month",
              "year"
            ]
          },
          "table": {
            "type": {
              "summary": "\"date\" | \"month\" | \"year\""
            },
            "defaultValue": {
              "summary": "\"date\""
            }
          }
        },
        "disabledBefore": {
          "name": "disabledBefore",
          "description": "Dates to be disabled before mentioned date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "disabledAfter": {
          "name": "disabledAfter",
          "description": "Dates to be disabled after mentioned date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "yearNav": {
          "name": "yearNav",
          "description": "Initial year to be set for navigation\n\n**use only if date, startDate and endDate are all set or undefined**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "monthNav": {
          "name": "monthNav",
          "description": "Initial month to be set for navigation\n\n**0 indexed(0-11)**\n\n**use only if date, startDate and endDate are all set or undefined**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-calendar-variants-disabled--disabled": {
    "id": "components-calendar-variants-disabled--disabled",
    "kind": "Components/Calendar/Variants/Disabled",
    "name": "Disabled",
    "story": "Disabled",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const view: View[] = ['year', 'month', 'date'];\n\n  return (\n    <>\n      <Heading>disabledBefore</Heading>\n      <div className=\"d-flex\">\n        {view.map((v, index) => (\n          <div className=\"mr-8\" key={index}>\n            <Card className=\"d-inline-flex\" shadow=\"light\">\n              <Calendar date={new Date(2020, 2, 15)} disabledBefore={new Date(2020, 2, 10)} view={v} />\n            </Card>\n          </div>\n        ))}\n      </div>\n\n      <Heading>disabledAfter</Heading>\n      <div className=\"d-flex\">\n        {view.map((v, index) => (\n          <div className=\"mr-8\" key={index}>\n            <Card className=\"d-inline-flex\" shadow=\"light\">\n              <Calendar date={new Date(2020, 2, 15)} disabledAfter={new Date(2020, 2, 20)} view={v} />\n            </Card>\n          </div>\n        ))}\n      </div>\n\n      <Heading>disabledBefore and disabledAfter</Heading>\n      <div className=\"d-flex\">\n        {view.map((v, index) => (\n          <div className=\"mr-8\" key={index}>\n            <Card className=\"d-inline-flex\" shadow=\"light\">\n              <Calendar\n                date={new Date(2020, 2, 15)}\n                disabledBefore={new Date(2020, 2, 10)}\n                disabledAfter={new Date(2020, 2, 20)}\n                view={v}\n              />\n            </Card>\n          </div>\n        ))}\n      </div>\n    </>\n  );\n}"
      },
      "__id": "components-calendar-variants-disabled--disabled",
      "args": {},
      "argTypes": {
        "onDateChange": {
          "name": "onDateChange",
          "description": "Callback function called when date is changed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((date: Date) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((date: Date) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onRangeChange": {
          "name": "onRangeChange",
          "description": "Callback function called when range is changed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((startDate: Date | undefined, endDate: Date | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((startDate: Date | undefined, endDate: Date | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "date": {
          "name": "date",
          "description": "Selected date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "rangePicker": {
          "name": "rangePicker",
          "description": "Set if want to use as RangePicker",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "startDate": {
          "name": "startDate",
          "description": "Selected startDate for RangePicker",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "endDate": {
          "name": "endDate",
          "description": "Selected endDate for RangePicker",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "rangeLimit": {
          "name": "rangeLimit",
          "description": "Allowed limit for difference in startDate and endDate\n\n**set `0` or `undefined` for infinite limit**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of `Calendar`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\""
            },
            "defaultValue": {
              "summary": "\"large\""
            }
          }
        },
        "monthsInView": {
          "name": "monthsInView",
          "description": "Number of months rendered in view",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "jumpView": {
          "name": "jumpView",
          "description": "Enables jumping to different view on clicking on Calendar Header\n\n**set to `false` if monthsInView > 1**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "firstDayOfWeek": {
          "name": "firstDayOfWeek",
          "description": "Specifies first day of week to be rendered",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "sunday",
              "monday",
              "tuesday",
              "wednesday",
              "thursday",
              "friday",
              "saturday"
            ]
          },
          "table": {
            "type": {
              "summary": "\"sunday\" | \"monday\" | \"tuesday\" | \"wednesday\" | \"thursday\" | \"friday\" | \"saturday\""
            },
            "defaultValue": {
              "summary": "\"sunday\""
            }
          }
        },
        "view": {
          "name": "view",
          "description": "Specifies initial view of `Calendar`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "date",
              "month",
              "year"
            ]
          },
          "table": {
            "type": {
              "summary": "\"date\" | \"month\" | \"year\""
            },
            "defaultValue": {
              "summary": "\"date\""
            }
          }
        },
        "disabledBefore": {
          "name": "disabledBefore",
          "description": "Dates to be disabled before mentioned date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "disabledAfter": {
          "name": "disabledAfter",
          "description": "Dates to be disabled after mentioned date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "yearNav": {
          "name": "yearNav",
          "description": "Initial year to be set for navigation\n\n**use only if date, startDate and endDate are all set or undefined**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "monthNav": {
          "name": "monthNav",
          "description": "Initial month to be set for navigation\n\n**0 indexed(0-11)**\n\n**use only if date, startDate and endDate are all set or undefined**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-calendar-variants-first-day-of-week--first-day-of-week": {
    "id": "components-calendar-variants-first-day-of-week--first-day-of-week",
    "kind": "Components/Calendar/Variants/First Day Of Week",
    "name": "First Day Of Week",
    "story": "First Day Of Week",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const values: Day[] = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n\n  const style = {\n    flexWrap: 'wrap',\n  };\n\n  return (\n    // @ts-ignore\n    <div className=\"d-flex\" style={style}>\n      {values.map((v, index) => (\n        <div className=\"mr-9 mt-5\" key={index}>\n          <Card className=\"d-inline-flex\" shadow=\"light\">\n            <Calendar date={new Date(2020, 2, 1)} firstDayOfWeek={v} />\n          </Card>\n        </div>\n      ))}\n    </div>\n  );\n}"
      },
      "__id": "components-calendar-variants-first-day-of-week--first-day-of-week",
      "args": {},
      "argTypes": {
        "onDateChange": {
          "name": "onDateChange",
          "description": "Callback function called when date is changed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((date: Date) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((date: Date) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onRangeChange": {
          "name": "onRangeChange",
          "description": "Callback function called when range is changed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((startDate: Date | undefined, endDate: Date | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((startDate: Date | undefined, endDate: Date | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "date": {
          "name": "date",
          "description": "Selected date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "rangePicker": {
          "name": "rangePicker",
          "description": "Set if want to use as RangePicker",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "startDate": {
          "name": "startDate",
          "description": "Selected startDate for RangePicker",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "endDate": {
          "name": "endDate",
          "description": "Selected endDate for RangePicker",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "rangeLimit": {
          "name": "rangeLimit",
          "description": "Allowed limit for difference in startDate and endDate\n\n**set `0` or `undefined` for infinite limit**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of `Calendar`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\""
            },
            "defaultValue": {
              "summary": "\"large\""
            }
          }
        },
        "monthsInView": {
          "name": "monthsInView",
          "description": "Number of months rendered in view",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "jumpView": {
          "name": "jumpView",
          "description": "Enables jumping to different view on clicking on Calendar Header\n\n**set to `false` if monthsInView > 1**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "firstDayOfWeek": {
          "name": "firstDayOfWeek",
          "description": "Specifies first day of week to be rendered",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "sunday",
              "monday",
              "tuesday",
              "wednesday",
              "thursday",
              "friday",
              "saturday"
            ]
          },
          "table": {
            "type": {
              "summary": "\"sunday\" | \"monday\" | \"tuesday\" | \"wednesday\" | \"thursday\" | \"friday\" | \"saturday\""
            },
            "defaultValue": {
              "summary": "\"sunday\""
            }
          }
        },
        "view": {
          "name": "view",
          "description": "Specifies initial view of `Calendar`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "date",
              "month",
              "year"
            ]
          },
          "table": {
            "type": {
              "summary": "\"date\" | \"month\" | \"year\""
            },
            "defaultValue": {
              "summary": "\"date\""
            }
          }
        },
        "disabledBefore": {
          "name": "disabledBefore",
          "description": "Dates to be disabled before mentioned date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "disabledAfter": {
          "name": "disabledAfter",
          "description": "Dates to be disabled after mentioned date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "yearNav": {
          "name": "yearNav",
          "description": "Initial year to be set for navigation\n\n**use only if date, startDate and endDate are all set or undefined**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "monthNav": {
          "name": "monthNav",
          "description": "Initial month to be set for navigation\n\n**0 indexed(0-11)**\n\n**use only if date, startDate and endDate are all set or undefined**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-calendar-variants-size--size": {
    "id": "components-calendar-variants-size--size",
    "kind": "Components/Calendar/Variants/Size",
    "name": "Size",
    "story": "Size",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const view: View[] = ['year', 'month', 'date'];\n\n  return (\n    <>\n      <div className=\"mt-8\">\n        <Heading>size: small</Heading>\n        <div className=\"d-flex\">\n          {view.map((v, index) => (\n            <div className=\"mr-8\" key={index}>\n              <Card className=\"d-inline-flex\" shadow=\"light\">\n                <Calendar date={new Date(2020, 2, 15)} size={'small'} view={v} />\n              </Card>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"mt-8\">\n        <Heading>size: large</Heading>\n        <div className=\"d-flex\">\n          {view.map((v, index) => (\n            <div className=\"mr-8\" key={index}>\n              <Card className=\"d-inline-flex\" shadow=\"light\">\n                <Calendar date={new Date(2020, 2, 15)} size={'large'} view={v} />\n              </Card>\n            </div>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n}"
      },
      "__id": "components-calendar-variants-size--size",
      "args": {},
      "argTypes": {
        "onDateChange": {
          "name": "onDateChange",
          "description": "Callback function called when date is changed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((date: Date) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((date: Date) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onRangeChange": {
          "name": "onRangeChange",
          "description": "Callback function called when range is changed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((startDate: Date | undefined, endDate: Date | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((startDate: Date | undefined, endDate: Date | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "date": {
          "name": "date",
          "description": "Selected date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "rangePicker": {
          "name": "rangePicker",
          "description": "Set if want to use as RangePicker",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "startDate": {
          "name": "startDate",
          "description": "Selected startDate for RangePicker",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "endDate": {
          "name": "endDate",
          "description": "Selected endDate for RangePicker",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "rangeLimit": {
          "name": "rangeLimit",
          "description": "Allowed limit for difference in startDate and endDate\n\n**set `0` or `undefined` for infinite limit**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of `Calendar`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\""
            },
            "defaultValue": {
              "summary": "\"large\""
            }
          }
        },
        "monthsInView": {
          "name": "monthsInView",
          "description": "Number of months rendered in view",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "jumpView": {
          "name": "jumpView",
          "description": "Enables jumping to different view on clicking on Calendar Header\n\n**set to `false` if monthsInView > 1**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "firstDayOfWeek": {
          "name": "firstDayOfWeek",
          "description": "Specifies first day of week to be rendered",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "sunday",
              "monday",
              "tuesday",
              "wednesday",
              "thursday",
              "friday",
              "saturday"
            ]
          },
          "table": {
            "type": {
              "summary": "\"sunday\" | \"monday\" | \"tuesday\" | \"wednesday\" | \"thursday\" | \"friday\" | \"saturday\""
            },
            "defaultValue": {
              "summary": "\"sunday\""
            }
          }
        },
        "view": {
          "name": "view",
          "description": "Specifies initial view of `Calendar`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "date",
              "month",
              "year"
            ]
          },
          "table": {
            "type": {
              "summary": "\"date\" | \"month\" | \"year\""
            },
            "defaultValue": {
              "summary": "\"date\""
            }
          }
        },
        "disabledBefore": {
          "name": "disabledBefore",
          "description": "Dates to be disabled before mentioned date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "disabledAfter": {
          "name": "disabledAfter",
          "description": "Dates to be disabled after mentioned date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "yearNav": {
          "name": "yearNav",
          "description": "Initial year to be set for navigation\n\n**use only if date, startDate and endDate are all set or undefined**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "monthNav": {
          "name": "monthNav",
          "description": "Initial month to be set for navigation\n\n**0 indexed(0-11)**\n\n**use only if date, startDate and endDate are all set or undefined**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-caption-all--all": {
    "id": "components-caption-all--all",
    "kind": "Components/Caption/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const error = boolean('error', false);\n  const hide = boolean('hide', false);\n  const withInput = boolean('with input', false);\n  const children = text('children', 'Caption');\n  const options = {\n    error,\n    hide,\n    withInput,\n  };\n\n  return <Caption {...options}>{children}</Caption>;\n}"
      },
      "__id": "components-caption-all--all",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "Text to be rendered",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "hide": {
          "name": "hide",
          "description": "Makes `Caption` component invisible",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withInput": {
          "name": "withInput",
          "description": "Adds default top margin of 4px",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-caption-error--error": {
    "id": "components-caption-error--error",
    "kind": "Components/Caption/Error",
    "name": "Error",
    "story": "Error",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <Caption>Without Error</Caption>\n      </div>\n      <div>\n        <Caption error={true}>With Error</Caption>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-caption-error--error",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "Text to be rendered",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "hide": {
          "name": "hide",
          "description": "Makes `Caption` component invisible",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withInput": {
          "name": "withInput",
          "description": "Adds default top margin of 4px",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-card-all--all": {
    "id": "components-card-all--all",
    "kind": "Components/Card/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const shadow = select('shadow', ['none', 'default'], undefined);\n\n  return (\n    <>\n      <Card shadow={shadow} className=\"w-50\" style={{ height: '250px' }}>\n        <CardHeader>\n          <Text weight=\"strong\" size=\"large\">\n            Card Heading\n          </Text>\n        </CardHeader>\n        <CardBody>\n          <div>Card Body</div>\n        </CardBody>\n        <CardFooter className=\"justify-content-end\">\n          <>\n            <Button appearance=\"basic\">Cancel</Button>\n            <Button appearance=\"primary\" className=\"ml-4\">\n              Submit\n            </Button>\n          </>\n        </CardFooter>\n      </Card>\n      <Card className=\"mt-5 w-50\">\n        <CardHeader>\n          <Text weight=\"strong\" size=\"large\">\n            Card Heading\n          </Text>\n        </CardHeader>\n        <CardBody>\n          <div>Card Body</div>\n        </CardBody>\n        <CardSubdued border=\"top\">Subdued section.</CardSubdued>\n      </Card>\n    </>\n  );\n}"
      },
      "__id": "components-card-all--all",
      "args": {},
      "argTypes": {
        "shadow": {
          "name": "shadow",
          "description": "Shadow of the `Card`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "dark",
              "default",
              "none",
              "light",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"dark\" | \"default\" | \"none\" | \"light\" | \"medium\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-card-card-within-a-card--card-within-a-card": {
    "id": "components-card-card-within-a-card--card-within-a-card",
    "kind": "Components/Card/Card Within A Card",
    "name": "Card Within A Card",
    "story": "Card Within A Card",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <Row>\n      <Column size=\"5\">\n        <Card>\n          <CardHeader>\n            <Heading size=\"s\">Managed Plans</Heading>\n          </CardHeader>\n          <CardBody>\n            <Card shadow=\"none\" className=\"mb-6\">\n              <CardHeader className=\"d-flex justify-content-between\">\n                <Text weight=\"strong\">PRIMARY</Text>\n                <Badge appearance=\"accent4\">ACTIVE</Badge>\n              </CardHeader>\n              <CardBody>\n                <Text appearance=\"disabled\">MSSP - Track 3</Text>\n                <br />\n                <Text small={true}>Medicare</Text>\n                <br />\n                <div className=\"py-6\">\n                  <Text small={true} appearance=\"disabled\">\n                    Subscriber\n                  </Text>\n                  <br />\n                  <Text appearance=\"disabled\">LAWSON, JOY (Self)</Text>\n                  <br />\n                  <Text weight=\"medium\">ZGP123456789</Text>\n                </div>\n                <Row className=\"py-4\" style={{ borderTop: 'var(--border)' }}>\n                  <Column>\n                    <Text appearance=\"disabled\" small={true}>\n                      Last attr:\n                    </Text>\n                    <Text small={true} className=\"ml-3\">\n                      04/19\n                    </Text>\n                  </Column>\n                  <Column>\n                    <Text appearance=\"disabled\" small={true}>\n                      Plan ID:\n                    </Text>\n                    <Text small={true} className=\"ml-3\">\n                      040\n                    </Text>\n                  </Column>\n                  <Column>\n                    <Text appearance=\"disabled\" small={true}>\n                      Payer ID:\n                    </Text>\n                    <Text small={true} className=\"ml-3\">\n                      001\n                    </Text>\n                  </Column>\n                </Row>\n              </CardBody>\n            </Card>\n\n            <Card shadow=\"none\" className=\"mb-6\">\n              <CardHeader className=\"d-flex justify-content-between\">\n                <Text weight=\"strong\" appearance=\"disabled\">\n                  SECONDARY\n                </Text>\n                <Badge>INACTIVE</Badge>\n              </CardHeader>\n              <CardBody>\n                <Text appearance=\"disabled\">Community Plan</Text>\n                <br />\n                <Text small={true}>Blue Shield of California</Text>\n                <br />\n                <div className=\"py-6\">\n                  <Text small={true} appearance=\"disabled\">\n                    Subscriber\n                  </Text>\n                  <br />\n                  <Text appearance=\"disabled\">LAWSON, MICHAEL (Spouse)</Text>\n                  <br />\n                  <Text weight=\"medium\">HKA987654321</Text>\n                </div>\n                <Row className=\"py-4\" style={{ borderTop: 'var(--border)' }}>\n                  <Column>\n                    <Text appearance=\"disabled\" small={true}>\n                      Last attr:\n                    </Text>\n                    <Text small={true} className=\"ml-3\">\n                      11/18\n                    </Text>\n                  </Column>\n                  <Column>\n                    <Text appearance=\"disabled\" small={true}>\n                      Plan ID:\n                    </Text>\n                    <Text small={true} className=\"ml-3\">\n                      002\n                    </Text>\n                  </Column>\n                  <Column>\n                    <Text appearance=\"disabled\" small={true}>\n                      Payer ID:\n                    </Text>\n                    <Text small={true} className=\"ml-3\">\n                      042\n                    </Text>\n                  </Column>\n                </Row>\n              </CardBody>\n            </Card>\n          </CardBody>\n        </Card>\n      </Column>\n    </Row>\n  );\n}"
      },
      "__id": "components-card-card-within-a-card--card-within-a-card",
      "args": {},
      "argTypes": {
        "shadow": {
          "name": "shadow",
          "description": "Shadow of the `Card`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "dark",
              "default",
              "none",
              "light",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"dark\" | \"default\" | \"none\" | \"light\" | \"medium\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-card-default-card--default-card": {
    "id": "components-card-default-card--default-card",
    "kind": "Components/Card/Default Card",
    "name": "Default Card",
    "story": "Default Card",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <Card>\n      <div className=\"p-8\" />\n    </Card>\n  );\n}"
      },
      "__id": "components-card-default-card--default-card",
      "args": {},
      "argTypes": {
        "shadow": {
          "name": "shadow",
          "description": "Shadow of the `Card`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "dark",
              "default",
              "none",
              "light",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"dark\" | \"default\" | \"none\" | \"light\" | \"medium\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-card-empty-card--empty-card": {
    "id": "components-card-empty-card--empty-card",
    "kind": "Components/Card/Empty Card",
    "name": "Empty Card",
    "story": "Empty Card",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <Row>\n      <Column size=\"8\">\n        <Card>\n          <CardHeader>\n            <Heading size=\"s\">Daily progress</Heading>\n          </CardHeader>\n          <CardBody>\n            <EmptyState\n              title=\"Unable to fetch data\"\n              description=\"Sorry there was a technical issue while getting this data. Please try again.\"\n              imageSrc={image}\n              size=\"small\"\n              className=\"pb-6\"\n            >\n              <Button icon=\"refresh\" iconAlign=\"left\" className=\"mt-3\">\n                Reload\n              </Button>\n            </EmptyState>\n          </CardBody>\n        </Card>\n      </Column>\n    </Row>\n  );\n}"
      },
      "__id": "components-card-empty-card--empty-card",
      "args": {},
      "argTypes": {
        "shadow": {
          "name": "shadow",
          "description": "Shadow of the `Card`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "dark",
              "default",
              "none",
              "light",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"dark\" | \"default\" | \"none\" | \"light\" | \"medium\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-card-flat--flat": {
    "id": "components-card-flat--flat",
    "kind": "Components/Card/Flat",
    "name": "Flat",
    "story": "Flat",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <Card shadow=\"none\">\n      <div className=\"p-8\" />\n    </Card>\n  );\n}"
      },
      "__id": "components-card-flat--flat",
      "args": {},
      "argTypes": {
        "shadow": {
          "name": "shadow",
          "description": "Shadow of the `Card`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "dark",
              "default",
              "none",
              "light",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"dark\" | \"default\" | \"none\" | \"light\" | \"medium\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-card-highlighting-a-section--highlighting-a-section": {
    "id": "components-card-highlighting-a-section--highlighting-a-section",
    "kind": "Components/Card/Highlighting A Section",
    "name": "Highlighting A Section",
    "story": "Highlighting A Section",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <Row>\n      <Column size=\"7\">\n        <Card>\n          <CardHeader>\n            <Heading size=\"s\">Set timing</Heading>\n          </CardHeader>\n          <CardBody>\n            <Paragraph>\n              After the campaign starts, the outreach attempt will be made with the recipients according to the sender's\n              preferred timings.\n            </Paragraph>\n            <Row>\n              <Column size=\"12\" className=\"pt-4\">\n                <Radio label=\"Send now\" name=\"gender\" value=\"Checkbox\" defaultChecked={true} />\n                <Text small={true} appearance=\"disabled\" className=\"ml-7\">\n                  Campaign will start immediately\n                </Text>\n              </Column>\n              <Column size=\"12\" className=\"py-4\">\n                <Radio label=\"Schedule for later\" name=\"gender\" value=\"Checkbox\" />\n                <Text small={true} appearance=\"disabled\" className=\"ml-7\">\n                  Campaign will not start immediately\n                </Text>\n              </Column>\n            </Row>\n          </CardBody>\n\n          <CardSubdued border=\"top\">\n            <Text weight=\"strong\" small={true}>\n              SELECTED RECIPIENTS\n            </Text>\n            <div className=\"pt-6\">\n              <StatusHint appearance=\"success\">437 wil receive the message.</StatusHint>\n              <StatusHint appearance=\"alert\">42 have opted out or never agreed to receive messages.</StatusHint>\n            </div>\n          </CardSubdued>\n        </Card>\n      </Column>\n    </Row>\n  );\n}"
      },
      "__id": "components-card-highlighting-a-section--highlighting-a-section",
      "args": {},
      "argTypes": {
        "border": {
          "name": "border",
          "description": "Border of the `Subdued Card`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "bottom",
              "top",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"bottom\" | \"top\" | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-card-scrollable-content--scrollable-content": {
    "id": "components-card-scrollable-content--scrollable-content",
    "kind": "Components/Card/Scrollable Content",
    "name": "Scrollable Content",
    "story": "Scrollable Content",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const schema = [\n    {\n      width: '100%',\n      name: 'data',\n      displayName: '',\n      cellRenderer: (props: any) => {\n        return (\n          <>\n            <Paragraph>\n              <Text weight=\"strong\">{props.data.data.title}</Text>\n              <br />\n              <Text>{props.data.data.subTitle}</Text>\n            </Paragraph>\n          </>\n        );\n      },\n    },\n  ];\n\n  return (\n    <div>\n      <Card className=\"\">\n        <CardHeader>\n          <Heading size=\"s\">Use a template</Heading>\n        </CardHeader>\n        <div style={{ height: '350px' }}>\n          <List\n            data={data}\n            schema={schema}\n            withHeader={true}\n            headerOptions={{\n              withSearch: true,\n              dynamicColumn: false,\n            }}\n            withPagination={true}\n            pageSize={5}\n          />\n        </div>\n      </Card>\n    </div>\n  );\n}"
      },
      "__id": "components-card-scrollable-content--scrollable-content",
      "args": {},
      "argTypes": {
        "shadow": {
          "name": "shadow",
          "description": "Shadow of the `Card`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "dark",
              "default",
              "none",
              "light",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"dark\" | \"default\" | \"none\" | \"light\" | \"medium\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-card-subdued--subdued": {
    "id": "components-card-subdued--subdued",
    "kind": "Components/Card/Subdued",
    "name": "Subdued",
    "story": "Subdued",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <CardSubdued>\n      <div className=\"p-8\" />\n    </CardSubdued>\n  );\n}"
      },
      "__id": "components-card-subdued--subdued",
      "args": {},
      "argTypes": {
        "border": {
          "name": "border",
          "description": "Border of the `Subdued Card`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "bottom",
              "top",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"bottom\" | \"top\" | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-chat-chat-message--chat-message": {
    "id": "components-chat-chat-message--chat-message",
    "kind": "Components/Chat/Chat Message",
    "name": "Chat Message",
    "story": "Chat Message",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const type = select('type', ['incoming', 'outgoing'], 'incoming');\n\n  const statusType = select('statusType', ['sent', 'urgent', 'read', 'sending', 'failed'], 'sent');\n\n  const isTyping = boolean('isTyping', false);\n\n  const message = text('text', 'Hello, there.');\n  const typingText = text('typing text', 'Typing..');\n  const failedMessage = text('failed message', 'Click to retry');\n  const sendingMessage = text('sending message', 'Sending');\n\n  const options = {\n    type,\n    isTyping,\n    typingText,\n    failedMessage,\n    sendingMessage,\n    text: message,\n    statusOptions: { type: statusType, time: '10:11 AM' },\n  };\n\n  return (\n    <div className=\"w-25\">\n      <ChatMessage {...options} />\n    </div>\n  );\n}"
      },
      "__id": "components-chat-chat-message--chat-message",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "Type of `ChatMessage`\n\nMessageType = 'incoming' | 'outgoing';",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "incoming",
              "outgoing"
            ]
          },
          "table": {
            "type": {
              "summary": "\"incoming\" | \"outgoing\""
            },
            "defaultValue": null
          }
        },
        "isTyping": {
          "name": "isTyping",
          "description": "Determines if user is typing",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "statusOptions": {
          "name": "statusOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nStatusProps: {\n   type: 'failed' | 'sending' | 'sent' | 'read' | 'urgent';;\n   time?: string | number;\n   readText?: string;\n   failedText?: string;\n   sendingText?: string;\n}\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| type | Type of message status | |\n| time | Time at which message was sent/recieved | |\n| readText | Message to be shown if chat message is read | Read |\n| failedText | Message to be shown if chat message can't be delivered | Click to retry |\n| sendingText | Message to be shown while sending chat message | Sending |",
          "type": {
            "required": false,
            "name": "other",
            "value": "StatusProps | undefined"
          },
          "table": {
            "type": {
              "summary": "StatusProps | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Callback function called when chat message is clicked.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "text": {
          "name": "text",
          "description": "Text Message",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "typingText": {
          "name": "typingText",
          "description": "Message to be shown while user is typing",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-checkbox-all--all": {
    "id": "components-checkbox-all--all",
    "kind": "Components/Checkbox/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const size = select('size', ['regular', 'tiny'], undefined);\n\n  const label = text('label', 'Checkbox');\n\n  const checked = boolean('checked', false);\n\n  const indeterminate = boolean('indeterminate', false);\n\n  const disabled = boolean('disabled', false);\n\n  const onChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    updateKnob('checked', event.target.checked);\n    updateKnob('indeterminate', event.target.indeterminate);\n    return action(`onChange: ${event.target.checked}`)();\n  };\n\n  return (\n    <Checkbox\n      checked={checked}\n      indeterminate={indeterminate}\n      disabled={disabled}\n      size={size}\n      label={label}\n      onChange={onChangeHandler}\n    />\n  );\n}"
      },
      "__id": "components-checkbox-all--all",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of the `Checkbox`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "defaultChecked": {
          "name": "defaultChecked",
          "description": "Default value of checked (Used in case of uncontrolled `Checkbox`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "checked": {
          "name": "checked",
          "description": "Denotes Selection (Used in case of controlled `Checkbox`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "indeterminate": {
          "name": "indeterminate",
          "description": "Used in case of nested `Checkbox`, overwrites checked if true",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Checkbox`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "label": {
          "name": "label",
          "description": "Describes Label of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "helpText": {
          "name": "helpText",
          "description": "Describes Help Text of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Name of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when user the selects an option",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: ChangeEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: ChangeEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-checkbox-alignment-of-checkbox-group--alignment-of-checkbox-group": {
    "id": "components-checkbox-alignment-of-checkbox-group--alignment-of-checkbox-group",
    "kind": "Components/Checkbox/Alignment Of Checkbox Group",
    "name": "Alignment Of Checkbox Group",
    "story": "Alignment Of Checkbox Group",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <div>\n    <Row>\n      <Column>\n        <Label>Days</Label>\n        {days.map((day, index) => {\n          return <Checkbox key={index} label={day} defaultChecked={index < 2} className={index !== 0 ? 'mt-4' : ''} />;\n        })}\n        <div className=\"pt-5\">\n          <Text>Vertical Alignment</Text>\n        </div>\n      </Column>\n      <Column>\n        <Label>Days</Label>\n        <div className=\"d-flex\">\n          {days.map((day, index) => {\n            return (\n              <Checkbox className={index !== 0 ? 'ml-7' : ''} key={index} label={day} defaultChecked={index < 2} />\n            );\n          })}\n        </div>\n        <div className=\"pt-5\">\n          <Text>Horizontal Alignment</Text>\n        </div>\n      </Column>\n    </Row>\n  </div>\n)"
      },
      "__id": "components-checkbox-alignment-of-checkbox-group--alignment-of-checkbox-group",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of the `Checkbox`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "defaultChecked": {
          "name": "defaultChecked",
          "description": "Default value of checked (Used in case of uncontrolled `Checkbox`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "checked": {
          "name": "checked",
          "description": "Denotes Selection (Used in case of controlled `Checkbox`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "indeterminate": {
          "name": "indeterminate",
          "description": "Used in case of nested `Checkbox`, overwrites checked if true",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Checkbox`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "label": {
          "name": "label",
          "description": "Describes Label of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "helpText": {
          "name": "helpText",
          "description": "Describes Help Text of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Name of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when user the selects an option",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: ChangeEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: ChangeEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-checkbox-checkbox-group--checkbox-group": {
    "id": "components-checkbox-checkbox-group--checkbox-group",
    "kind": "Components/Checkbox/Checkbox Group",
    "name": "Checkbox Group",
    "story": "Checkbox Group",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <div>\n    <Label>Problems</Label>\n    <Checkbox label=\"Cardiovascular\" defaultChecked={true} />\n    <Checkbox label=\"Obesity\" defaultChecked={true} className=\"mt-5\" />\n    <Checkbox label=\"Patient has language barriers\" className=\"mt-5\" />\n    <Checkbox label=\"Mental and behavioral health conditions\" className=\"mt-5\" />\n  </div>\n)"
      },
      "__id": "components-checkbox-checkbox-group--checkbox-group",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of the `Checkbox`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "defaultChecked": {
          "name": "defaultChecked",
          "description": "Default value of checked (Used in case of uncontrolled `Checkbox`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "checked": {
          "name": "checked",
          "description": "Denotes Selection (Used in case of controlled `Checkbox`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "indeterminate": {
          "name": "indeterminate",
          "description": "Used in case of nested `Checkbox`, overwrites checked if true",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Checkbox`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "label": {
          "name": "label",
          "description": "Describes Label of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "helpText": {
          "name": "helpText",
          "description": "Describes Help Text of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Name of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when user the selects an option",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: ChangeEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: ChangeEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-checkbox-default-checkbox--default-checkbox": {
    "id": "components-checkbox-default-checkbox--default-checkbox",
    "kind": "Components/Checkbox/Default Checkbox",
    "name": "Default Checkbox",
    "story": "Default Checkbox",
    "parameters": {
      "storySource": {
        "source": "() => <Checkbox label=\"Emergency contact\" defaultChecked={true} />"
      },
      "__id": "components-checkbox-default-checkbox--default-checkbox",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of the `Checkbox`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "defaultChecked": {
          "name": "defaultChecked",
          "description": "Default value of checked (Used in case of uncontrolled `Checkbox`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "checked": {
          "name": "checked",
          "description": "Denotes Selection (Used in case of controlled `Checkbox`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "indeterminate": {
          "name": "indeterminate",
          "description": "Used in case of nested `Checkbox`, overwrites checked if true",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Checkbox`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "label": {
          "name": "label",
          "description": "Describes Label of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "helpText": {
          "name": "helpText",
          "description": "Describes Help Text of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Name of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when user the selects an option",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: ChangeEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: ChangeEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-checkbox-nested-checkboxes--nested-checkboxes": {
    "id": "components-checkbox-nested-checkboxes--nested-checkboxes",
    "kind": "Components/Checkbox/Nested Checkboxes",
    "name": "Nested Checkboxes",
    "story": "Nested Checkboxes",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const style = {\n    display: 'flex',\n    'flex-direction': 'column',\n    paddingLeft: '25px',\n  };\n  const parentObj = { checked: false, indeterminate: true };\n  const labels = ['Diabetes Eye Exam', 'HbA1c Test in last 12 months', 'Falls Risk Assessment'];\n  const childArray = [true, true, false];\n\n  const [checked, setChecked] = React.useState(childArray);\n  const [parentStatus, setParentStatus] = React.useState(parentObj);\n\n  const handleParentChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const updatedArray = [...childArray].fill(event.target.checked);\n    setChecked(updatedArray);\n    setParentStatus({ indeterminate: event.target.indeterminate, checked: event.target.checked });\n  };\n\n  const handleChildChange = (event: React.ChangeEvent<HTMLInputElement>, index: number) => {\n    const updateCheck = [...checked];\n    updateCheck[index] = event.target.checked;\n    const totalCount = labels.length;\n    const countT = updateCheck.filter(Boolean).length;\n    const status = countT < totalCount;\n    const obj = countT > 0 ? { checked: !status, indeterminate: status } : { checked: !status, indeterminate: false };\n    setChecked(updateCheck);\n    setParentStatus(obj);\n  };\n\n  return (\n    <div>\n      <Checkbox\n        checked={parentStatus.checked}\n        indeterminate={parentStatus.indeterminate}\n        label={'Measures'}\n        onChange={handleParentChange}\n        value={'Measures'}\n      />\n      <div style={style}>\n        {labels.map((label, ind) => {\n          return (\n            <Checkbox\n              key={`checkbox-${ind}`}\n              label={label}\n              checked={checked[ind]}\n              value={label}\n              onChange={(c) => handleChildChange(c, ind)}\n              defaultChecked={ind < 2}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-checkbox-nested-checkboxes--nested-checkboxes",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of the `Checkbox`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "defaultChecked": {
          "name": "defaultChecked",
          "description": "Default value of checked (Used in case of uncontrolled `Checkbox`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "checked": {
          "name": "checked",
          "description": "Denotes Selection (Used in case of controlled `Checkbox`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "indeterminate": {
          "name": "indeterminate",
          "description": "Used in case of nested `Checkbox`, overwrites checked if true",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Checkbox`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "label": {
          "name": "label",
          "description": "Describes Label of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "helpText": {
          "name": "helpText",
          "description": "Describes Help Text of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Name of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when user the selects an option",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: ChangeEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: ChangeEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-checkbox-overflow-behavior--overflow-behavior": {
    "id": "components-checkbox-overflow-behavior--overflow-behavior",
    "kind": "Components/Checkbox/Overflow Behavior",
    "name": "Overflow Behavior",
    "story": "Overflow Behavior",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <div className=\"w-25\">\n    <Checkbox label=\"Patient with impaired physical mobility and care deficits.\" />\n  </div>\n)"
      },
      "__id": "components-checkbox-overflow-behavior--overflow-behavior",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of the `Checkbox`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "defaultChecked": {
          "name": "defaultChecked",
          "description": "Default value of checked (Used in case of uncontrolled `Checkbox`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "checked": {
          "name": "checked",
          "description": "Denotes Selection (Used in case of controlled `Checkbox`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "indeterminate": {
          "name": "indeterminate",
          "description": "Used in case of nested `Checkbox`, overwrites checked if true",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Checkbox`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "label": {
          "name": "label",
          "description": "Describes Label of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "helpText": {
          "name": "helpText",
          "description": "Describes Help Text of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Name of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when user the selects an option",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: ChangeEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: ChangeEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-checkbox-variants-checkbox-list--checkbox-list": {
    "id": "components-checkbox-variants-checkbox-list--checkbox-list",
    "kind": "Components/Checkbox/Variants/Checkbox List",
    "name": "Checkbox List",
    "story": "Checkbox List",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const style = {\n    display: 'flex',\n    'flex-direction': 'column',\n    paddingLeft: '25px',\n  };\n  const parentObj = { checked: false, indeterminate: false };\n  const labels = ['InConnect', 'InGraph', 'InReport'];\n  const childArray = Array(labels.length).fill(false);\n\n  const [checked, setChecked] = React.useState(childArray);\n  const [parentStatus, setParentStatus] = React.useState(parentObj);\n\n  const handleParentChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const updatedArray = [...childArray].fill(event.target.checked);\n    setChecked(updatedArray);\n    setParentStatus({ indeterminate: event.target.indeterminate, checked: event.target.checked });\n  };\n\n  const handleChildChange = (event: React.ChangeEvent<HTMLInputElement>, index: number) => {\n    const updateCheck = [...checked];\n    updateCheck[index] = event.target.checked;\n    const totalCount = labels.length;\n    const countT = updateCheck.filter(Boolean).length;\n    const status = countT < totalCount;\n    const obj = countT > 0 ? { checked: !status, indeterminate: status } : { checked: !status, indeterminate: false };\n    setChecked(updateCheck);\n    setParentStatus(obj);\n  };\n\n  return (\n    <div>\n      <Checkbox\n        checked={parentStatus.checked}\n        indeterminate={parentStatus.indeterminate}\n        label={'Innovaccer'}\n        onChange={handleParentChange}\n        value={'Innovaccer'}\n      />\n      <div style={style}>\n        {labels.map((label, ind) => {\n          return (\n            <Checkbox\n              key={`checkbox-${ind}`}\n              label={label}\n              checked={checked[ind]}\n              value={label}\n              onChange={(e) => handleChildChange(e, ind)}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-checkbox-variants-checkbox-list--checkbox-list",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of the `Checkbox`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "defaultChecked": {
          "name": "defaultChecked",
          "description": "Default value of checked (Used in case of uncontrolled `Checkbox`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "checked": {
          "name": "checked",
          "description": "Denotes Selection (Used in case of controlled `Checkbox`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "indeterminate": {
          "name": "indeterminate",
          "description": "Used in case of nested `Checkbox`, overwrites checked if true",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Checkbox`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "label": {
          "name": "label",
          "description": "Describes Label of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "helpText": {
          "name": "helpText",
          "description": "Describes Help Text of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Name of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when user the selects an option",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: ChangeEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: ChangeEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-checkbox-variants-controlled-checkbox--controlled-checkbox": {
    "id": "components-checkbox-variants-controlled-checkbox--controlled-checkbox",
    "kind": "Components/Checkbox/Variants/Controlled Checkbox",
    "name": "Controlled Checkbox",
    "story": "Controlled Checkbox",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [checked, setChecked] = React.useState(false);\n\n  const handleParentChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const updatedChecked = event.target.checked;\n    window.setTimeout(() => {\n      setChecked(updatedChecked);\n    }, 2000);\n  };\n\n  return <Checkbox checked={checked} label={'Innovaccer'} onChange={handleParentChange} value={'Innovaccer'} />;\n}"
      },
      "__id": "components-checkbox-variants-controlled-checkbox--controlled-checkbox",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of the `Checkbox`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "defaultChecked": {
          "name": "defaultChecked",
          "description": "Default value of checked (Used in case of uncontrolled `Checkbox`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "checked": {
          "name": "checked",
          "description": "Denotes Selection (Used in case of controlled `Checkbox`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "indeterminate": {
          "name": "indeterminate",
          "description": "Used in case of nested `Checkbox`, overwrites checked if true",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Checkbox`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "label": {
          "name": "label",
          "description": "Describes Label of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "helpText": {
          "name": "helpText",
          "description": "Describes Help Text of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Name of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when user the selects an option",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: ChangeEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: ChangeEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-checkbox-variants-disabled--disabled": {
    "id": "components-checkbox-variants-disabled--disabled",
    "kind": "Components/Checkbox/Variants/Disabled",
    "name": "Disabled",
    "story": "Disabled",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const label = text('label', 'Checkbox');\n  return (\n    <div className=\"d-flex\">\n      <div className=\"mr-5\">\n        <Checkbox checked={true} disabled={true} label={label} />\n        <br />\n        <Text weight=\"strong\">Checked</Text>\n      </div>\n      <div className=\"mr-5\">\n        <Checkbox checked={false} disabled={true} label={label} />\n        <br />\n        <Text weight=\"strong\">Unchecked</Text>\n      </div>\n      <div className=\"mr-5\">\n        <Checkbox indeterminate={true} disabled={true} label={label} />\n        <br />\n        <Text weight=\"strong\">Indeterminate</Text>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-checkbox-variants-disabled--disabled",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of the `Checkbox`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "defaultChecked": {
          "name": "defaultChecked",
          "description": "Default value of checked (Used in case of uncontrolled `Checkbox`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "checked": {
          "name": "checked",
          "description": "Denotes Selection (Used in case of controlled `Checkbox`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "indeterminate": {
          "name": "indeterminate",
          "description": "Used in case of nested `Checkbox`, overwrites checked if true",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Checkbox`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "label": {
          "name": "label",
          "description": "Describes Label of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "helpText": {
          "name": "helpText",
          "description": "Describes Help Text of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Name of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when user the selects an option",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: ChangeEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: ChangeEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-checkbox-variants-size--size": {
    "id": "components-checkbox-variants-size--size",
    "kind": "Components/Checkbox/Variants/Size",
    "name": "Size",
    "story": "Size",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const sizes: Size[] = ['tiny', 'regular'];\n  const label = text('label', 'Checkbox');\n  return (\n    <div className=\"d-flex\">\n      {sizes.map((CheckboxSize, ind) => {\n        return (\n          <div key={ind} className=\"mr-5\">\n            <div className=\"h-50\">\n              <Checkbox checked={true} disabled={false} size={CheckboxSize} label={label} />\n            </div>\n            <br />\n            <Text weight=\"strong\">{CheckboxSize.charAt(0).toUpperCase() + CheckboxSize.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-checkbox-variants-size--size",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of the `Checkbox`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "defaultChecked": {
          "name": "defaultChecked",
          "description": "Default value of checked (Used in case of uncontrolled `Checkbox`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "checked": {
          "name": "checked",
          "description": "Denotes Selection (Used in case of controlled `Checkbox`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "indeterminate": {
          "name": "indeterminate",
          "description": "Used in case of nested `Checkbox`, overwrites checked if true",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Checkbox`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "label": {
          "name": "label",
          "description": "Describes Label of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "helpText": {
          "name": "helpText",
          "description": "Describes Help Text of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Name of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when user the selects an option",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: ChangeEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: ChangeEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-checkbox-variants-uncontrolled-checkbox--uncontrolled-checkbox": {
    "id": "components-checkbox-variants-uncontrolled-checkbox--uncontrolled-checkbox",
    "kind": "Components/Checkbox/Variants/Uncontrolled Checkbox",
    "name": "Uncontrolled Checkbox",
    "story": "Uncontrolled Checkbox",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const handleParentChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    return action(`onChange: ${event.target.checked}`)();\n  };\n\n  return (\n    <div>\n      <Checkbox defaultChecked={true} label={'Innovaccer'} onChange={handleParentChange} value={'Innovaccer'} />\n    </div>\n  );\n}"
      },
      "__id": "components-checkbox-variants-uncontrolled-checkbox--uncontrolled-checkbox",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of the `Checkbox`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "defaultChecked": {
          "name": "defaultChecked",
          "description": "Default value of checked (Used in case of uncontrolled `Checkbox`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "checked": {
          "name": "checked",
          "description": "Denotes Selection (Used in case of controlled `Checkbox`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "indeterminate": {
          "name": "indeterminate",
          "description": "Used in case of nested `Checkbox`, overwrites checked if true",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Checkbox`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "label": {
          "name": "label",
          "description": "Describes Label of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "helpText": {
          "name": "helpText",
          "description": "Describes Help Text of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Name of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when user the selects an option",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: ChangeEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: ChangeEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-checkbox-with-help-text--with-help-text": {
    "id": "components-checkbox-with-help-text--with-help-text",
    "kind": "Components/Checkbox/With Help Text",
    "name": "With Help Text",
    "story": "With Help Text",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <Checkbox\n      label={'Guardian'}\n      helpText={'A member legally responsible for the care of the patient.'}\n      className=\"w-25\"\n    />\n  );\n}"
      },
      "__id": "components-checkbox-with-help-text--with-help-text",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of the `Checkbox`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "defaultChecked": {
          "name": "defaultChecked",
          "description": "Default value of checked (Used in case of uncontrolled `Checkbox`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "checked": {
          "name": "checked",
          "description": "Denotes Selection (Used in case of controlled `Checkbox`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "indeterminate": {
          "name": "indeterminate",
          "description": "Used in case of nested `Checkbox`, overwrites checked if true",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Checkbox`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "label": {
          "name": "label",
          "description": "Describes Label of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "helpText": {
          "name": "helpText",
          "description": "Describes Help Text of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Name of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "description": "Specifies tab index of `Checkbox`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when user the selects an option",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: ChangeEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: ChangeEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-chip-all--all": {
    "id": "components-chip-all--all",
    "kind": "Components/Chip/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const type = select('type', ['action', 'selection', 'input'], 'input');\n\n  const label = text('label', 'Chip Label');\n\n  const icon = text('icon', 'assessment');\n\n  const disabled = boolean('disabled', false);\n\n  let clearButton;\n  if (type !== 'action') {\n    clearButton = boolean('clearButton', true);\n  }\n\n  let selected;\n  if (type === 'selection') {\n    selected = boolean('selected', false);\n  }\n  return (\n    <Chip\n      icon={icon}\n      label={label}\n      clearButton={clearButton}\n      disabled={disabled}\n      type={type}\n      onClose={action(`onClose: ${name}`)}\n      onClick={action(`onClick: ${name}`)}\n      selected={selected}\n      name={'chip'}\n    />\n  );\n}"
      },
      "__id": "components-chip-all--all",
      "args": {},
      "argTypes": {
        "label": {
          "name": "label",
          "description": "Label of chip",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Type of material `Icon`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "clearButton": {
          "name": "clearButton",
          "description": "Shows the 'clear' icon if value is not empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the Chip, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Select the chip",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of chip",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "action",
              "input",
              "selection"
            ]
          },
          "table": {
            "type": {
              "summary": "\"action\" | \"input\" | \"selection\""
            },
            "defaultValue": {
              "summary": "\"input\""
            }
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Handler to be called when Chip is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((name: ReactText) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((name: ReactText) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when Chip is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((name: ReactText) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((name: ReactText) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-chip-action-chip--action-chip": {
    "id": "components-chip-action-chip--action-chip",
    "kind": "Components/Chip/Action Chip",
    "name": "Action Chip",
    "story": "Action Chip",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Chip\n    label=\"First Name\"\n    clearButton={false}\n    disabled={false}\n    type=\"action\"\n    name={'chip'}\n    onClick={action('on-click')}\n  />\n)"
      },
      "__id": "components-chip-action-chip--action-chip",
      "args": {},
      "argTypes": {
        "label": {
          "name": "label",
          "description": "Label of chip",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Type of material `Icon`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "clearButton": {
          "name": "clearButton",
          "description": "Shows the 'clear' icon if value is not empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the Chip, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Select the chip",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of chip",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "action",
              "input",
              "selection"
            ]
          },
          "table": {
            "type": {
              "summary": "\"action\" | \"input\" | \"selection\""
            },
            "defaultValue": {
              "summary": "\"input\""
            }
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Handler to be called when Chip is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((name: ReactText) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((name: ReactText) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when Chip is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((name: ReactText) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((name: ReactText) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-chip-input--input": {
    "id": "components-chip-input--input",
    "kind": "Components/Chip/Input",
    "name": "Input",
    "story": "Input",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Chip\n    label=\"First Name\"\n    clearButton={true}\n    disabled={false}\n    type=\"input\"\n    name={'chip'}\n    onClick={action('on-click')}\n    onClose={action('on-close')}\n  />\n)"
      },
      "__id": "components-chip-input--input",
      "args": {},
      "argTypes": {
        "label": {
          "name": "label",
          "description": "Label of chip",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Type of material `Icon`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "clearButton": {
          "name": "clearButton",
          "description": "Shows the 'clear' icon if value is not empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the Chip, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Select the chip",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of chip",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "action",
              "input",
              "selection"
            ]
          },
          "table": {
            "type": {
              "summary": "\"action\" | \"input\" | \"selection\""
            },
            "defaultValue": {
              "summary": "\"input\""
            }
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Handler to be called when Chip is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((name: ReactText) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((name: ReactText) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when Chip is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((name: ReactText) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((name: ReactText) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-chip-selection--selection": {
    "id": "components-chip-selection--selection",
    "kind": "Components/Chip/Selection",
    "name": "Selection",
    "story": "Selection",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [selected, setSelected] = React.useState(false);\n\n  return (\n    <Chip\n      label=\"Yes\"\n      clearButton={false}\n      type=\"selection\"\n      selected={selected}\n      name={'chip'}\n      onClick={() => setSelected(!selected)}\n    />\n  );\n}"
      },
      "__id": "components-chip-selection--selection",
      "args": {},
      "argTypes": {
        "label": {
          "name": "label",
          "description": "Label of chip",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Type of material `Icon`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "clearButton": {
          "name": "clearButton",
          "description": "Shows the 'clear' icon if value is not empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the Chip, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Select the chip",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of chip",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "action",
              "input",
              "selection"
            ]
          },
          "table": {
            "type": {
              "summary": "\"action\" | \"input\" | \"selection\""
            },
            "defaultValue": {
              "summary": "\"input\""
            }
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Handler to be called when Chip is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((name: ReactText) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((name: ReactText) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when Chip is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((name: ReactText) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((name: ReactText) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-chip-variants-action--action": {
    "id": "components-chip-variants-action--action",
    "kind": "Components/Chip/Variants/Action",
    "name": "Action",
    "story": "Action",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const icon = text('icon', 'assessment');\n  const label = text('label', 'Action');\n  return (\n    <div className=\"d-flex\">\n      {BooleanValue.map((booleanvalue, ind) => {\n        return (\n          <div key={ind} className=\"mr-9\">\n            <Chip\n              icon={icon}\n              label={label}\n              disabled={booleanvalue}\n              onClose={action(`onClose: ${name}`)}\n              onClick={action(`onClick: ${name}`)}\n              type=\"action\"\n              name={'chip'}\n            />\n            <br />\n            <Text weight=\"strong\">{`Disabled: ${booleanvalue}`}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-chip-variants-action--action",
      "args": {},
      "argTypes": {
        "label": {
          "name": "label",
          "description": "Label of chip",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Type of material `Icon`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "clearButton": {
          "name": "clearButton",
          "description": "Shows the 'clear' icon if value is not empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the Chip, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Select the chip",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of chip",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "action",
              "input",
              "selection"
            ]
          },
          "table": {
            "type": {
              "summary": "\"action\" | \"input\" | \"selection\""
            },
            "defaultValue": {
              "summary": "\"input\""
            }
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Handler to be called when Chip is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((name: ReactText) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((name: ReactText) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when Chip is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((name: ReactText) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((name: ReactText) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-chip-variants-input--input": {
    "id": "components-chip-variants-input--input",
    "kind": "Components/Chip/Variants/Input",
    "name": "Input",
    "story": "Input",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const icon = text('icon', 'assessment');\n  const label = text('label', 'Input');\n  return (\n    <div className=\"d-flex\">\n      {BooleanValue.map((booleanvalue, ind) => {\n        return (\n          <div key={ind} className=\"mr-9\">\n            <Chip\n              icon={icon}\n              label={label}\n              clearButton={true}\n              disabled={booleanvalue}\n              type=\"input\"\n              onClose={action(`onClose: ${name}`)}\n              onClick={action(`onClick: ${name}`)}\n              name={'chip'}\n            />\n            <br />\n            <Text weight=\"strong\">{`Disabled: ${booleanvalue}`}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-chip-variants-input--input",
      "args": {},
      "argTypes": {
        "label": {
          "name": "label",
          "description": "Label of chip",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Type of material `Icon`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "clearButton": {
          "name": "clearButton",
          "description": "Shows the 'clear' icon if value is not empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the Chip, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Select the chip",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of chip",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "action",
              "input",
              "selection"
            ]
          },
          "table": {
            "type": {
              "summary": "\"action\" | \"input\" | \"selection\""
            },
            "defaultValue": {
              "summary": "\"input\""
            }
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Handler to be called when Chip is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((name: ReactText) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((name: ReactText) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when Chip is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((name: ReactText) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((name: ReactText) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-chip-variants-selection--selection": {
    "id": "components-chip-variants-selection--selection",
    "kind": "Components/Chip/Variants/Selection",
    "name": "Selection",
    "story": "Selection",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const icon = text('icon', 'assessment');\n  const label = text('label', 'Selection');\n  return (\n    <div className=\"d-flex\">\n      {BooleanValue.map((booleanvalue, ind) => {\n        return (\n          <div key={ind} className=\"mr-9\">\n            <Chip\n              icon={icon}\n              label={label}\n              clearButton={true}\n              disabled={booleanvalue}\n              type=\"selection\"\n              onClose={action(`onClose: ${name}`)}\n              onClick={action(`onClick: ${name}`)}\n              selected={false}\n              name={'chip'}\n            />\n            <br />\n            <Text weight=\"strong\">{`Disabled: ${booleanvalue}`}</Text>\n          </div>\n        );\n      })}\n      <div className=\"mr-9\">\n        <Chip\n          icon={icon}\n          label={label}\n          clearButton={true}\n          type=\"selection\"\n          onClose={action(`onClose: ${name}`)}\n          onClick={action(`onClick: ${name}`)}\n          selected={true}\n          name={'chip'}\n        />\n        <br />\n        <Text weight=\"strong\">Selected: true</Text>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-chip-variants-selection--selection",
      "args": {},
      "argTypes": {
        "label": {
          "name": "label",
          "description": "Label of chip",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Type of material `Icon`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "clearButton": {
          "name": "clearButton",
          "description": "Shows the 'clear' icon if value is not empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the Chip, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Select the chip",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of chip",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "action",
              "input",
              "selection"
            ]
          },
          "table": {
            "type": {
              "summary": "\"action\" | \"input\" | \"selection\""
            },
            "defaultValue": {
              "summary": "\"input\""
            }
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Handler to be called when Chip is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((name: ReactText) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((name: ReactText) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when Chip is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((name: ReactText) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((name: ReactText) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-chip-variants-types--types": {
    "id": "components-chip-variants-types--types",
    "kind": "Components/Chip/Variants/Types",
    "name": "Types",
    "story": "Types",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const types: Type[] = ['action', 'selection', 'input'];\n  const icon = text('icon', 'assessment');\n  const label = text('label', 'ChipLabel');\n  const clearButton = boolean('clearButton', true);\n  const disabled = false;\n  const selected = false;\n  return (\n    <div className=\"d-flex\">\n      {types.map((type, ind) => {\n        return (\n          <div key={ind} className=\"mr-9\">\n            <Chip\n              icon={icon}\n              label={label}\n              clearButton={clearButton}\n              disabled={disabled}\n              type={type}\n              onClose={action(`onClose: ${name}`)}\n              onClick={action(`onClick: ${name}`)}\n              selected={selected}\n              name={'chip'}\n            />\n            <br />\n            <Text weight=\"strong\">{type.charAt(0).toUpperCase() + type.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-chip-variants-types--types",
      "args": {},
      "argTypes": {
        "label": {
          "name": "label",
          "description": "Label of chip",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Type of material `Icon`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "clearButton": {
          "name": "clearButton",
          "description": "Shows the 'clear' icon if value is not empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the Chip, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "selected": {
          "name": "selected",
          "description": "Select the chip",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of chip",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "action",
              "input",
              "selection"
            ]
          },
          "table": {
            "type": {
              "summary": "\"action\" | \"input\" | \"selection\""
            },
            "defaultValue": {
              "summary": "\"input\""
            }
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Handler to be called when Chip is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((name: ReactText) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((name: ReactText) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when Chip is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((name: ReactText) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((name: ReactText) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-chipgroup-all--all": {
    "id": "components-chipgroup-all--all",
    "kind": "Components/ChipGroup/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const type: Type[] = ['action', 'input', 'selection'];\n  const list = [\n    {\n      label: 'Action',\n      icon: 'assessment',\n      disabled: false,\n      type: type[0],\n      name: '1',\n    },\n    {\n      label: 'Input',\n      icon: 'assessment',\n      clearButton: true,\n      disabled: false,\n      type: type[1],\n      name: '2',\n    },\n    {\n      label: 'Selection',\n      icon: 'assessment',\n      clearButton: true,\n      disabled: false,\n      type: type[2],\n      selected: true,\n      name: '3',\n    },\n    {\n      label: 'Selection',\n      icon: 'assessment',\n      clearButton: true,\n      disabled: false,\n      type: type[2],\n      name: '4',\n    },\n  ];\n\n  return <ChipGroup onClose={action(`onClose: ${name}`)} onClick={action(`onClick: ${name}`)} list={list} />;\n}"
      },
      "__id": "components-chipgroup-all--all",
      "args": {},
      "argTypes": {
        "onClose": {
          "name": "onClose",
          "description": "Handler to be called when Chip is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((item: ChipProps) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((item: ChipProps) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when Chip is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((item: ChipProps) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((item: ChipProps) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "list": {
          "name": "list",
          "description": "List of chips",
          "type": {
            "required": true,
            "name": "other",
            "value": "ChipProps[]"
          },
          "table": {
            "type": {
              "summary": "ChipProps[]"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-chipinput-all--all": {
    "id": "components-chipinput-all--all",
    "kind": "Components/ChipInput/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const allowDuplicates = boolean('allowDuplicates', false);\n\n  const placeholder = text('placeholder', 'Add value');\n\n  const disabled = boolean('disabled', false);\n\n  return (\n    <ChipInput\n      allowDuplicates={allowDuplicates}\n      placeholder={placeholder}\n      disabled={disabled}\n      chipOptions={{ clearButton: true }}\n    />\n  );\n}"
      },
      "__id": "components-chipinput-all--all",
      "args": {},
      "argTypes": {
        "allowDuplicates": {
          "name": "allowDuplicates",
          "description": "Allows duplicate chips if set to true.",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "chipOptions": {
          "name": "chipOptions",
          "description": "<pre className=\"DocPage-codeBlock\">\n  ChipOptions: {\n   icon?: string;\n   type?: action | input | selection\n   clearButton?: boolean;\n   onClick?: (value: string, index: number) => void;\n  }\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "ChipOptions"
          },
          "table": {
            "type": {
              "summary": "ChipOptions"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the chip input if set to true.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "A placeholder that is displayed if the input has no values.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "The chip labels to display (enables controlled mode if set).",
          "type": {
            "required": false,
            "name": "other",
            "value": "string[] | undefined"
          },
          "table": {
            "type": {
              "summary": "string[] | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "The chips to display by default (for uncontrolled mode).",
          "type": {
            "required": false,
            "name": "other",
            "value": "string[]"
          },
          "table": {
            "type": {
              "summary": "string[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus to input",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function that is called when the chips change.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((chips: string[]) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((chips: string[]) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Input` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Input` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-chipinput-chips-in-single-line--chips-in-single-line": {
    "id": "components-chipinput-chips-in-single-line--chips-in-single-line",
    "kind": "Components/ChipInput/Chips In Single Line",
    "name": "Chips In Single Line",
    "story": "Chips In Single Line",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [value, setValue] = React.useState(['Anyone', 'Person with disability']);\n\n  return (\n    <>\n      <Label withInput={true}>Population Focus</Label>\n      <ChipInput value={value} chipOptions={{ clearButton: true }} className=\"w-50\" onChange={setValue} />\n    </>\n  );\n}"
      },
      "__id": "components-chipinput-chips-in-single-line--chips-in-single-line",
      "args": {},
      "argTypes": {
        "allowDuplicates": {
          "name": "allowDuplicates",
          "description": "Allows duplicate chips if set to true.",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "chipOptions": {
          "name": "chipOptions",
          "description": "<pre className=\"DocPage-codeBlock\">\n  ChipOptions: {\n   icon?: string;\n   type?: action | input | selection\n   clearButton?: boolean;\n   onClick?: (value: string, index: number) => void;\n  }\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "ChipOptions"
          },
          "table": {
            "type": {
              "summary": "ChipOptions"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the chip input if set to true.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "A placeholder that is displayed if the input has no values.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "The chip labels to display (enables controlled mode if set).",
          "type": {
            "required": false,
            "name": "other",
            "value": "string[] | undefined"
          },
          "table": {
            "type": {
              "summary": "string[] | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "The chips to display by default (for uncontrolled mode).",
          "type": {
            "required": false,
            "name": "other",
            "value": "string[]"
          },
          "table": {
            "type": {
              "summary": "string[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus to input",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function that is called when the chips change.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((chips: string[]) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((chips: string[]) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Input` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Input` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-chipinput-chips-wrapped-to-next-line--chips-wrapped-to-next-line": {
    "id": "components-chipinput-chips-wrapped-to-next-line--chips-wrapped-to-next-line",
    "kind": "Components/ChipInput/Chips Wrapped To Next Line",
    "name": "Chips Wrapped To Next Line",
    "story": "Chips Wrapped To Next Line",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [value, setValue] = React.useState([\n    'Anyone',\n    'Person with disability',\n    'Retired person from the armed forces',\n  ]);\n\n  return (\n    <div style={{ width: '320px' }}>\n      <Label withInput={true}>Population Focus</Label>\n      <ChipInput value={value} chipOptions={{ clearButton: true }} onChange={setValue} />\n    </div>\n  );\n}"
      },
      "__id": "components-chipinput-chips-wrapped-to-next-line--chips-wrapped-to-next-line",
      "args": {},
      "argTypes": {
        "allowDuplicates": {
          "name": "allowDuplicates",
          "description": "Allows duplicate chips if set to true.",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "chipOptions": {
          "name": "chipOptions",
          "description": "<pre className=\"DocPage-codeBlock\">\n  ChipOptions: {\n   icon?: string;\n   type?: action | input | selection\n   clearButton?: boolean;\n   onClick?: (value: string, index: number) => void;\n  }\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "ChipOptions"
          },
          "table": {
            "type": {
              "summary": "ChipOptions"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the chip input if set to true.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "A placeholder that is displayed if the input has no values.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "The chip labels to display (enables controlled mode if set).",
          "type": {
            "required": false,
            "name": "other",
            "value": "string[] | undefined"
          },
          "table": {
            "type": {
              "summary": "string[] | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "The chips to display by default (for uncontrolled mode).",
          "type": {
            "required": false,
            "name": "other",
            "value": "string[]"
          },
          "table": {
            "type": {
              "summary": "string[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus to input",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function that is called when the chips change.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((chips: string[]) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((chips: string[]) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Input` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Input` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-chipinput-variants-controlled--controlled": {
    "id": "components-chipinput-variants-controlled--controlled",
    "kind": "Components/ChipInput/Variants/Controlled",
    "name": "Controlled",
    "story": "Controlled",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [value, setValue] = React.useState(['1024', '80']);\n\n  return <ChipInput value={value} placeholder=\"Add value\" chipOptions={{ clearButton: true }} onChange={setValue} />;\n}"
      },
      "__id": "components-chipinput-variants-controlled--controlled",
      "args": {},
      "argTypes": {
        "allowDuplicates": {
          "name": "allowDuplicates",
          "description": "Allows duplicate chips if set to true.",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "chipOptions": {
          "name": "chipOptions",
          "description": "<pre className=\"DocPage-codeBlock\">\n  ChipOptions: {\n   icon?: string;\n   type?: action | input | selection\n   clearButton?: boolean;\n   onClick?: (value: string, index: number) => void;\n  }\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "ChipOptions"
          },
          "table": {
            "type": {
              "summary": "ChipOptions"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the chip input if set to true.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "A placeholder that is displayed if the input has no values.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "The chip labels to display (enables controlled mode if set).",
          "type": {
            "required": false,
            "name": "other",
            "value": "string[] | undefined"
          },
          "table": {
            "type": {
              "summary": "string[] | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "The chips to display by default (for uncontrolled mode).",
          "type": {
            "required": false,
            "name": "other",
            "value": "string[]"
          },
          "table": {
            "type": {
              "summary": "string[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus to input",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function that is called when the chips change.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((chips: string[]) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((chips: string[]) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Input` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Input` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-chipinput-variants-disabled--disabled": {
    "id": "components-chipinput-variants-disabled--disabled",
    "kind": "Components/ChipInput/Variants/Disabled",
    "name": "Disabled",
    "story": "Disabled",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [value, setValue] = React.useState(['1024', '80']);\n\n  return <ChipInput value={value} chipOptions={{ clearButton: true }} onChange={setValue} disabled={true} />;\n}"
      },
      "__id": "components-chipinput-variants-disabled--disabled",
      "args": {},
      "argTypes": {
        "allowDuplicates": {
          "name": "allowDuplicates",
          "description": "Allows duplicate chips if set to true.",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "chipOptions": {
          "name": "chipOptions",
          "description": "<pre className=\"DocPage-codeBlock\">\n  ChipOptions: {\n   icon?: string;\n   type?: action | input | selection\n   clearButton?: boolean;\n   onClick?: (value: string, index: number) => void;\n  }\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "ChipOptions"
          },
          "table": {
            "type": {
              "summary": "ChipOptions"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the chip input if set to true.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "A placeholder that is displayed if the input has no values.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "The chip labels to display (enables controlled mode if set).",
          "type": {
            "required": false,
            "name": "other",
            "value": "string[] | undefined"
          },
          "table": {
            "type": {
              "summary": "string[] | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "The chips to display by default (for uncontrolled mode).",
          "type": {
            "required": false,
            "name": "other",
            "value": "string[]"
          },
          "table": {
            "type": {
              "summary": "string[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus to input",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function that is called when the chips change.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((chips: string[]) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((chips: string[]) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Input` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Input` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-collapsible-all--all": {
    "id": "components-collapsible-all--all",
    "kind": "Components/Collapsible/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const hoverable = boolean('hoverable', true);\n  const [expanded, setExpanded] = React.useState(false);\n\n  return (\n    <div className=\"d-flex\">\n      <Collapsible expanded={expanded} hoverable={hoverable} height=\"100vh\" onToggle={setExpanded}>\n        <div className=\"d-flex pt-4\">\n          <Icon name=\"events\" className=\"d-flex align-items-center px-5\" />\n          {expanded && <Text className=\"mr-6\">Collapsible</Text>}\n        </div>\n      </Collapsible>\n      <div>Testing</div>\n    </div>\n  );\n}"
      },
      "__id": "components-collapsible-all--all",
      "args": {},
      "argTypes": {
        "expanded": {
          "name": "expanded",
          "description": "Set expanded state of `Collapsible`",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "hoverable": {
          "name": "hoverable",
          "description": "Determines if `Collapsible Panel` expands on hover",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "height": {
          "name": "height",
          "description": "Height of `Collapsible`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": {
              "summary": "100%"
            }
          }
        },
        "expandedWidth": {
          "name": "expandedWidth",
          "description": "Width of expanded `Collapsible`",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "var(--spacing-9)"
            }
          }
        },
        "onToggle": {
          "name": "onToggle",
          "description": "Callback to be called on footer click",
          "type": {
            "required": false,
            "name": "function",
            "value": "((expanded: boolean) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((expanded: boolean) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Components to render inside `Collapsible`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactChild"
          },
          "table": {
            "type": {
              "summary": "ReactChild"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-datepicker-all--all": {
    "id": "components-datepicker-all--all",
    "kind": "Components/DatePicker/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const withInput = boolean('withInput', false);\n\n  const open = boolean('open', false);\n\n  const closeOnSelect = boolean('closeOnSelect', true);\n\n  const inputFormat = select(\n    'inputFormat',\n    ['mm/dd/yyyy', 'dd/mm/yyyy', 'yyyy-mm-dd', 'mm-dd-yyyy', 'dd-mm-yyyy', 'yyyy-mm-dd'],\n    undefined\n  );\n\n  const outputFormat = select(\n    'outputFormat',\n    ['mm/dd/yyyy', 'dd/mm/yyyy', 'yyyy-mm-dd', 'mm-dd-yyyy', 'dd-mm-yyyy', 'yyyy-mm-dd'],\n    undefined\n  );\n\n  const dateValue = date('date', undefined);\n\n  const view = select('view', ['date', 'month', 'year'], undefined);\n\n  const firstDayOfWeek = select(\n    'firstDayOfWeek',\n    ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'],\n    undefined\n  );\n\n  const disabledBefore = date('disabledBefore', new Date('Jan 20 2015'));\n\n  const disabledAfter = date('disabledAfter', new Date('Jan 20 2028'));\n\n  const jumpView = boolean('jumpView', true);\n\n  const yearNav = number('yearNav', -1);\n\n  const monthNav = number('monthNav', -1);\n\n  const attr: Record<string, any> = {};\n  if (disabledBefore) attr.disabledBefore = disabledBefore;\n  if (disabledAfter) attr.disabledAfter = disabledAfter;\n  if (yearNav !== -1) attr.yearNav = yearNav;\n  if (monthNav !== -1) attr.monthNav = monthNav;\n\n  if (withInput) {\n    return (\n      <DatePicker\n        withInput={withInput}\n        closeOnSelect={closeOnSelect}\n        open={open}\n        inputFormat={inputFormat}\n        outputFormat={outputFormat}\n        jumpView={jumpView}\n        date={dateValue}\n        onDateChange={(currDate?: Date) => action(`on date change : ${currDate}`)()}\n        view={view}\n        firstDayOfWeek={firstDayOfWeek}\n        {...attr}\n      />\n    );\n  }\n  return (\n    <Card className=\"d-inline-flex\" shadow=\"light\">\n      <DatePicker\n        withInput={withInput}\n        inputFormat={inputFormat}\n        outputFormat={outputFormat}\n        jumpView={jumpView}\n        date={dateValue}\n        onDateChange={(currDate?: Date) => action(`on date change : ${currDate}`)()}\n        view={view}\n        firstDayOfWeek={firstDayOfWeek}\n        {...attr}\n      />\n    </Card>\n  );\n}"
      },
      "__id": "components-datepicker-all--all",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of `Calendar`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "large",
              "small"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\""
            },
            "defaultValue": {
              "summary": "\"large\""
            }
          }
        },
        "monthsInView": {
          "name": "monthsInView",
          "description": "Number of months rendered in view",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "jumpView": {
          "name": "jumpView",
          "description": "Enables jumping to different view on clicking on Calendar Header\n\n**set to `false` if monthsInView > 1**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "firstDayOfWeek": {
          "name": "firstDayOfWeek",
          "description": "Specifies first day of week to be rendered",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "sunday",
              "monday",
              "tuesday",
              "wednesday",
              "thursday",
              "friday",
              "saturday"
            ]
          },
          "table": {
            "type": {
              "summary": "\"sunday\" | \"monday\" | \"tuesday\" | \"wednesday\" | \"thursday\" | \"friday\" | \"saturday\""
            },
            "defaultValue": {
              "summary": "\"sunday\""
            }
          }
        },
        "view": {
          "name": "view",
          "description": "Specifies initial view of `Calendar`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "date",
              "month",
              "year"
            ]
          },
          "table": {
            "type": {
              "summary": "\"date\" | \"month\" | \"year\""
            },
            "defaultValue": {
              "summary": "\"date\""
            }
          }
        },
        "disabledBefore": {
          "name": "disabledBefore",
          "description": "Dates to be disabled before mentioned date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "disabledAfter": {
          "name": "disabledAfter",
          "description": "Dates to be disabled after mentioned date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "yearNav": {
          "name": "yearNav",
          "description": "Initial year to be set for navigation\n\n**use only if date, startDate and endDate are all set or undefined**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "monthNav": {
          "name": "monthNav",
          "description": "Initial month to be set for navigation\n\n**0 indexed(0-11)**\n\n**use only if date, startDate and endDate are all set or undefined**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onDateChange": {
          "name": "onDateChange",
          "description": "Callback function called when date is changed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((date: Date | undefined, dateVal?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((date: Date | undefined, dateVal?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "date": {
          "name": "date",
          "description": "Selected date\n\n`number` - number of milliseconds elapsed since January 1, 1970, 00:00:00 UTC\n\n`string` - Date string value as per `inputFormat`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | Date | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | Date | undefined"
            },
            "defaultValue": null
          }
        },
        "withInput": {
          "name": "withInput",
          "description": "Set if `InputMask` should be used as trigger",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "open": {
          "name": "open",
          "description": "Sets open state of `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "position": {
          "name": "position",
          "description": "Position of `DatePicker` with respect to `InputMask`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "bottom",
              "top",
              "top-start",
              "top-end",
              "bottom-start",
              "bottom-end",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"top\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "\"bottom-start\""
            }
          }
        },
        "inputFormat": {
          "name": "inputFormat",
          "description": "Should be used if `date` is of type `string`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "mm/dd/yyyy",
              "dd/mm/yyyy",
              "yyyy/mm/dd",
              "mm-dd-yyyy",
              "dd-mm-yyyy",
              "yyyy-mm-dd"
            ]
          },
          "table": {
            "type": {
              "summary": "\"mm/dd/yyyy\" | \"dd/mm/yyyy\" | \"yyyy/mm/dd\" | \"mm-dd-yyyy\" | \"dd-mm-yyyy\" | \"yyyy-mm-dd\""
            },
            "defaultValue": {
              "summary": "\"mm/dd/yyyy\""
            }
          }
        },
        "outputFormat": {
          "name": "outputFormat",
          "description": "Should be used to translate `date` to desired format for `onDateChange` callback",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "mm/dd/yyyy",
              "dd/mm/yyyy",
              "yyyy/mm/dd",
              "mm-dd-yyyy",
              "dd-mm-yyyy",
              "yyyy-mm-dd"
            ]
          },
          "table": {
            "type": {
              "summary": "\"mm/dd/yyyy\" | \"dd/mm/yyyy\" | \"yyyy/mm/dd\" | \"mm-dd-yyyy\" | \"dd-mm-yyyy\" | \"yyyy-mm-dd\""
            },
            "defaultValue": {
              "summary": "\"mm/dd/yyyy\""
            }
          }
        },
        "inputOptions": {
          "name": "inputOptions",
          "description": "Props to be used for `InputMask`",
          "type": {
            "required": false,
            "name": "other",
            "value": "Pick<InputMaskProps, \"open\" | \"children\" | \"className\" | \"data-test\" | \"size\" | \"accept\" | \"acceptCharset\" | \"action\" | \"allowFullScreen\" | \"allowTransparency\" | ... 358 more ... | \"clearOnEmptyBlur\">"
          },
          "table": {
            "type": {
              "summary": "Pick<InputMaskProps, \"open\" | \"children\" | \"className\" | \"data-test\" | \"size\" | \"accept\" | \"acceptCharset\" | \"action\" | \"allowFullScreen\" | \"allowTransparency\" | ... 358 more ... | \"clearOnEmptyBlur\">"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "validators": {
          "name": "validators",
          "description": "custom Validator for `DatePicker`\n\n`ValidatorFn = (val: string, format: string) => boolean`",
          "type": {
            "required": false,
            "name": "other",
            "value": "SingleOrArray<ValidatorFn<any[]>>"
          },
          "table": {
            "type": {
              "summary": "SingleOrArray<ValidatorFn<any[]>>"
            },
            "defaultValue": {
              "summary": "[Utils.validators.date]"
            }
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Close Popover on date selection",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-datepicker-variants-view--view": {
    "id": "components-datepicker-variants-view--view",
    "kind": "Components/DatePicker/Variants/View",
    "name": "View",
    "story": "View",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const values: View[] = ['year', 'month', 'date'];\n\n  return (\n    <div className=\"d-flex\">\n      {values.map((v, index) => (\n        <div key={index} className=\"mr-9\">\n          <Card className=\"d-inline-flex\" shadow=\"light\">\n            <DatePicker date={new Date(2020, 2, 1)} view={v} />\n          </Card>\n        </div>\n      ))}\n    </div>\n  );\n}"
      },
      "__id": "components-datepicker-variants-view--view",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of `Calendar`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "large",
              "small"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\""
            },
            "defaultValue": {
              "summary": "\"large\""
            }
          }
        },
        "monthsInView": {
          "name": "monthsInView",
          "description": "Number of months rendered in view",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "jumpView": {
          "name": "jumpView",
          "description": "Enables jumping to different view on clicking on Calendar Header\n\n**set to `false` if monthsInView > 1**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "firstDayOfWeek": {
          "name": "firstDayOfWeek",
          "description": "Specifies first day of week to be rendered",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "sunday",
              "monday",
              "tuesday",
              "wednesday",
              "thursday",
              "friday",
              "saturday"
            ]
          },
          "table": {
            "type": {
              "summary": "\"sunday\" | \"monday\" | \"tuesday\" | \"wednesday\" | \"thursday\" | \"friday\" | \"saturday\""
            },
            "defaultValue": {
              "summary": "\"sunday\""
            }
          }
        },
        "view": {
          "name": "view",
          "description": "Specifies initial view of `Calendar`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "date",
              "month",
              "year"
            ]
          },
          "table": {
            "type": {
              "summary": "\"date\" | \"month\" | \"year\""
            },
            "defaultValue": {
              "summary": "\"date\""
            }
          }
        },
        "disabledBefore": {
          "name": "disabledBefore",
          "description": "Dates to be disabled before mentioned date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "disabledAfter": {
          "name": "disabledAfter",
          "description": "Dates to be disabled after mentioned date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "yearNav": {
          "name": "yearNav",
          "description": "Initial year to be set for navigation\n\n**use only if date, startDate and endDate are all set or undefined**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "monthNav": {
          "name": "monthNav",
          "description": "Initial month to be set for navigation\n\n**0 indexed(0-11)**\n\n**use only if date, startDate and endDate are all set or undefined**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onDateChange": {
          "name": "onDateChange",
          "description": "Callback function called when date is changed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((date: Date | undefined, dateVal?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((date: Date | undefined, dateVal?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "date": {
          "name": "date",
          "description": "Selected date\n\n`number` - number of milliseconds elapsed since January 1, 1970, 00:00:00 UTC\n\n`string` - Date string value as per `inputFormat`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | Date | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | Date | undefined"
            },
            "defaultValue": null
          }
        },
        "withInput": {
          "name": "withInput",
          "description": "Set if `InputMask` should be used as trigger",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "open": {
          "name": "open",
          "description": "Sets open state of `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "position": {
          "name": "position",
          "description": "Position of `DatePicker` with respect to `InputMask`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "bottom",
              "top",
              "top-start",
              "top-end",
              "bottom-start",
              "bottom-end",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"top\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "\"bottom-start\""
            }
          }
        },
        "inputFormat": {
          "name": "inputFormat",
          "description": "Should be used if `date` is of type `string`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "mm/dd/yyyy",
              "dd/mm/yyyy",
              "yyyy/mm/dd",
              "mm-dd-yyyy",
              "dd-mm-yyyy",
              "yyyy-mm-dd"
            ]
          },
          "table": {
            "type": {
              "summary": "\"mm/dd/yyyy\" | \"dd/mm/yyyy\" | \"yyyy/mm/dd\" | \"mm-dd-yyyy\" | \"dd-mm-yyyy\" | \"yyyy-mm-dd\""
            },
            "defaultValue": {
              "summary": "\"mm/dd/yyyy\""
            }
          }
        },
        "outputFormat": {
          "name": "outputFormat",
          "description": "Should be used to translate `date` to desired format for `onDateChange` callback",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "mm/dd/yyyy",
              "dd/mm/yyyy",
              "yyyy/mm/dd",
              "mm-dd-yyyy",
              "dd-mm-yyyy",
              "yyyy-mm-dd"
            ]
          },
          "table": {
            "type": {
              "summary": "\"mm/dd/yyyy\" | \"dd/mm/yyyy\" | \"yyyy/mm/dd\" | \"mm-dd-yyyy\" | \"dd-mm-yyyy\" | \"yyyy-mm-dd\""
            },
            "defaultValue": {
              "summary": "\"mm/dd/yyyy\""
            }
          }
        },
        "inputOptions": {
          "name": "inputOptions",
          "description": "Props to be used for `InputMask`",
          "type": {
            "required": false,
            "name": "other",
            "value": "Pick<InputMaskProps, \"open\" | \"children\" | \"className\" | \"data-test\" | \"size\" | \"accept\" | \"acceptCharset\" | \"action\" | \"allowFullScreen\" | \"allowTransparency\" | ... 358 more ... | \"clearOnEmptyBlur\">"
          },
          "table": {
            "type": {
              "summary": "Pick<InputMaskProps, \"open\" | \"children\" | \"className\" | \"data-test\" | \"size\" | \"accept\" | \"acceptCharset\" | \"action\" | \"allowFullScreen\" | \"allowTransparency\" | ... 358 more ... | \"clearOnEmptyBlur\">"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "validators": {
          "name": "validators",
          "description": "custom Validator for `DatePicker`\n\n`ValidatorFn = (val: string, format: string) => boolean`",
          "type": {
            "required": false,
            "name": "other",
            "value": "SingleOrArray<ValidatorFn<any[]>>"
          },
          "table": {
            "type": {
              "summary": "SingleOrArray<ValidatorFn<any[]>>"
            },
            "defaultValue": {
              "summary": "[Utils.validators.date]"
            }
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Close Popover on date selection",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-datepicker-variants-with-input--with-input": {
    "id": "components-datepicker-variants-with-input--with-input",
    "kind": "Components/DatePicker/Variants/With Input",
    "name": "With Input",
    "story": "With Input",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const dateValue = date('date', undefined);\n\n  const inputFormat = select(\n    'inputFormat',\n    ['mm/dd/yyyy', 'dd/mm/yyyy', 'yyyy-mm-dd', 'mm-dd-yyyy', 'dd-mm-yyyy', 'yyyy-mm-dd'],\n    undefined\n  );\n\n  const outputFormat = select(\n    'outputFormat',\n    ['mm/dd/yyyy', 'dd/mm/yyyy', 'yyyy-mm-dd', 'mm-dd-yyyy', 'dd-mm-yyyy', 'yyyy-mm-dd'],\n    undefined\n  );\n\n  const view = select('view', ['date', 'month', 'year'], undefined);\n\n  const firstDayOfWeek = select(\n    'firstDayOfWeek',\n    ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'],\n    undefined\n  );\n\n  const disabledBefore = date('disabledBefore', new Date('Jan 20 2015'));\n\n  const disabledAfter = date('disabledAfter', new Date('Jan 20 2028'));\n\n  const jumpView = boolean('jumpView', true);\n\n  const yearNav = number('yearNav', -1);\n\n  const monthNav = number('monthNav', -1);\n\n  const closeOnSelect = boolean('closeOnSelect', true);\n\n  const attr: Record<string, any> = {};\n  if (disabledBefore) attr.disabledBefore = disabledBefore;\n  if (disabledAfter) attr.disabledAfter = disabledAfter;\n  if (yearNav !== -1) attr.yearNav = yearNav;\n  if (monthNav !== -1) attr.monthNav = monthNav;\n\n  return (\n    <div className=\"w-25\">\n      <DatePicker\n        withInput={true}\n        closeOnSelect={closeOnSelect}\n        inputFormat={inputFormat}\n        outputFormat={outputFormat}\n        jumpView={jumpView}\n        date={dateValue}\n        onDateChange={(currDate?: Date, currValue?: string) => {\n          action(`on date change : ${currDate} --- ${currValue}`)();\n        }}\n        view={view}\n        firstDayOfWeek={firstDayOfWeek}\n        inputOptions={{\n          required: true,\n        }}\n        {...attr}\n      />\n    </div>\n  );\n}"
      },
      "__id": "components-datepicker-variants-with-input--with-input",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of `Calendar`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "large",
              "small"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\""
            },
            "defaultValue": {
              "summary": "\"large\""
            }
          }
        },
        "monthsInView": {
          "name": "monthsInView",
          "description": "Number of months rendered in view",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "jumpView": {
          "name": "jumpView",
          "description": "Enables jumping to different view on clicking on Calendar Header\n\n**set to `false` if monthsInView > 1**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "firstDayOfWeek": {
          "name": "firstDayOfWeek",
          "description": "Specifies first day of week to be rendered",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "sunday",
              "monday",
              "tuesday",
              "wednesday",
              "thursday",
              "friday",
              "saturday"
            ]
          },
          "table": {
            "type": {
              "summary": "\"sunday\" | \"monday\" | \"tuesday\" | \"wednesday\" | \"thursday\" | \"friday\" | \"saturday\""
            },
            "defaultValue": {
              "summary": "\"sunday\""
            }
          }
        },
        "view": {
          "name": "view",
          "description": "Specifies initial view of `Calendar`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "date",
              "month",
              "year"
            ]
          },
          "table": {
            "type": {
              "summary": "\"date\" | \"month\" | \"year\""
            },
            "defaultValue": {
              "summary": "\"date\""
            }
          }
        },
        "disabledBefore": {
          "name": "disabledBefore",
          "description": "Dates to be disabled before mentioned date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "disabledAfter": {
          "name": "disabledAfter",
          "description": "Dates to be disabled after mentioned date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "yearNav": {
          "name": "yearNav",
          "description": "Initial year to be set for navigation\n\n**use only if date, startDate and endDate are all set or undefined**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "monthNav": {
          "name": "monthNav",
          "description": "Initial month to be set for navigation\n\n**0 indexed(0-11)**\n\n**use only if date, startDate and endDate are all set or undefined**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onDateChange": {
          "name": "onDateChange",
          "description": "Callback function called when date is changed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((date: Date | undefined, dateVal?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((date: Date | undefined, dateVal?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "date": {
          "name": "date",
          "description": "Selected date\n\n`number` - number of milliseconds elapsed since January 1, 1970, 00:00:00 UTC\n\n`string` - Date string value as per `inputFormat`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | Date | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | Date | undefined"
            },
            "defaultValue": null
          }
        },
        "withInput": {
          "name": "withInput",
          "description": "Set if `InputMask` should be used as trigger",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "open": {
          "name": "open",
          "description": "Sets open state of `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "position": {
          "name": "position",
          "description": "Position of `DatePicker` with respect to `InputMask`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "bottom",
              "top",
              "top-start",
              "top-end",
              "bottom-start",
              "bottom-end",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"top\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "\"bottom-start\""
            }
          }
        },
        "inputFormat": {
          "name": "inputFormat",
          "description": "Should be used if `date` is of type `string`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "mm/dd/yyyy",
              "dd/mm/yyyy",
              "yyyy/mm/dd",
              "mm-dd-yyyy",
              "dd-mm-yyyy",
              "yyyy-mm-dd"
            ]
          },
          "table": {
            "type": {
              "summary": "\"mm/dd/yyyy\" | \"dd/mm/yyyy\" | \"yyyy/mm/dd\" | \"mm-dd-yyyy\" | \"dd-mm-yyyy\" | \"yyyy-mm-dd\""
            },
            "defaultValue": {
              "summary": "\"mm/dd/yyyy\""
            }
          }
        },
        "outputFormat": {
          "name": "outputFormat",
          "description": "Should be used to translate `date` to desired format for `onDateChange` callback",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "mm/dd/yyyy",
              "dd/mm/yyyy",
              "yyyy/mm/dd",
              "mm-dd-yyyy",
              "dd-mm-yyyy",
              "yyyy-mm-dd"
            ]
          },
          "table": {
            "type": {
              "summary": "\"mm/dd/yyyy\" | \"dd/mm/yyyy\" | \"yyyy/mm/dd\" | \"mm-dd-yyyy\" | \"dd-mm-yyyy\" | \"yyyy-mm-dd\""
            },
            "defaultValue": {
              "summary": "\"mm/dd/yyyy\""
            }
          }
        },
        "inputOptions": {
          "name": "inputOptions",
          "description": "Props to be used for `InputMask`",
          "type": {
            "required": false,
            "name": "other",
            "value": "Pick<InputMaskProps, \"open\" | \"children\" | \"className\" | \"data-test\" | \"size\" | \"accept\" | \"acceptCharset\" | \"action\" | \"allowFullScreen\" | \"allowTransparency\" | ... 358 more ... | \"clearOnEmptyBlur\">"
          },
          "table": {
            "type": {
              "summary": "Pick<InputMaskProps, \"open\" | \"children\" | \"className\" | \"data-test\" | \"size\" | \"accept\" | \"acceptCharset\" | \"action\" | \"allowFullScreen\" | \"allowTransparency\" | ... 358 more ... | \"clearOnEmptyBlur\">"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "validators": {
          "name": "validators",
          "description": "custom Validator for `DatePicker`\n\n`ValidatorFn = (val: string, format: string) => boolean`",
          "type": {
            "required": false,
            "name": "other",
            "value": "SingleOrArray<ValidatorFn<any[]>>"
          },
          "table": {
            "type": {
              "summary": "SingleOrArray<ValidatorFn<any[]>>"
            },
            "defaultValue": {
              "summary": "[Utils.validators.date]"
            }
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Close Popover on date selection",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-daterangepicker-all--all": {
    "id": "components-daterangepicker-all--all",
    "kind": "Components/DateRangePicker/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const withInput = boolean('withInput', false);\n\n  const open = boolean('open', false);\n\n  const monthsInView = number('monthsInView', withInput ? 2 : 1);\n\n  const inputFormat = select(\n    'inputFormat',\n    ['mm/dd/yyyy', 'dd/mm/yyyy', 'yyyy-mm-dd', 'mm-dd-yyyy', 'dd-mm-yyyy', 'yyyy-mm-dd'],\n    undefined\n  );\n\n  const outputFormat = select(\n    'outputFormat',\n    ['mm/dd/yyyy', 'dd/mm/yyyy', 'yyyy-mm-dd', 'mm-dd-yyyy', 'dd-mm-yyyy', 'yyyy-mm-dd'],\n    undefined\n  );\n\n  const startDate = date('startDate', undefined);\n\n  const endDate = date('endDate', undefined);\n\n  const view = select('view', ['date', 'month', 'year'], undefined);\n\n  const rangeLimit = number('rangeLimit', 0);\n\n  const firstDayOfWeek = select(\n    'firstDayOfWeek',\n    ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'],\n    undefined\n  );\n\n  const disabledBefore = date('disabledBefore', new Date('Jan 20 2015'));\n\n  const disabledAfter = date('disabledAfter', new Date('Jan 20 2028'));\n\n  const jumpView = boolean('jumpView', true);\n\n  const yearNav = number('yearNav', -1);\n\n  const monthNav = number('monthNav', -1);\n\n  const attr: Record<string, any> = {};\n  if (disabledBefore) attr.disabledBefore = disabledBefore;\n  if (disabledAfter) attr.disabledAfter = disabledAfter;\n  if (rangeLimit) attr.rangeLimit = rangeLimit;\n  if (yearNav !== -1) attr.yearNav = yearNav;\n  if (monthNav !== -1) attr.monthNav = monthNav;\n\n  if (withInput) {\n    return (\n      <DateRangePicker\n        withInput={withInput}\n        open={open}\n        monthsInView={monthsInView}\n        inputFormat={inputFormat}\n        outputFormat={outputFormat}\n        jumpView={jumpView}\n        startDate={startDate}\n        endDate={endDate}\n        onRangeChange={(sDate?: Date, eDate?: Date, sValue?: string, eValue?: string) =>\n          action(`on range change: ${sDate} - ${eDate} ---- ${sValue} - ${eValue}`)()\n        }\n        view={view}\n        firstDayOfWeek={firstDayOfWeek}\n        {...attr}\n      />\n    );\n  }\n  return (\n    <Card className=\"d-inline-flex\" shadow=\"light\">\n      <DateRangePicker\n        withInput={withInput}\n        monthsInView={monthsInView}\n        jumpView={jumpView}\n        startDate={startDate}\n        endDate={endDate}\n        onRangeChange={(sDate?: Date, eDate?: Date, sValue?: string, eValue?: string) =>\n          action(`on range change: ${sDate} - ${eDate} ---- ${sValue} - ${eValue}`)()\n        }\n        view={view}\n        firstDayOfWeek={firstDayOfWeek}\n        {...attr}\n      />\n    </Card>\n  );\n}"
      },
      "__id": "components-daterangepicker-all--all",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of `Calendar`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "large",
              "small"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\""
            },
            "defaultValue": {
              "summary": "\"large\""
            }
          }
        },
        "monthsInView": {
          "name": "monthsInView",
          "description": "Number of months rendered in view\nNumber of months rendered in view\n\n**Default set to `2` when `withInput: true`**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": null
          }
        },
        "jumpView": {
          "name": "jumpView",
          "description": "Enables jumping to different view on clicking on Calendar Header\n\n**set to `false` if monthsInView > 1**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "firstDayOfWeek": {
          "name": "firstDayOfWeek",
          "description": "Specifies first day of week to be rendered",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "sunday",
              "monday",
              "tuesday",
              "wednesday",
              "thursday",
              "friday",
              "saturday"
            ]
          },
          "table": {
            "type": {
              "summary": "\"sunday\" | \"monday\" | \"tuesday\" | \"wednesday\" | \"thursday\" | \"friday\" | \"saturday\""
            },
            "defaultValue": {
              "summary": "\"sunday\""
            }
          }
        },
        "view": {
          "name": "view",
          "description": "Specifies initial view of `Calendar`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "date",
              "month",
              "year"
            ]
          },
          "table": {
            "type": {
              "summary": "\"date\" | \"month\" | \"year\""
            },
            "defaultValue": {
              "summary": "\"date\""
            }
          }
        },
        "disabledBefore": {
          "name": "disabledBefore",
          "description": "Dates to be disabled before mentioned date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "disabledAfter": {
          "name": "disabledAfter",
          "description": "Dates to be disabled after mentioned date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "yearNav": {
          "name": "yearNav",
          "description": "Initial year to be set for navigation\n\n**use only if date, startDate and endDate are all set or undefined**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "monthNav": {
          "name": "monthNav",
          "description": "Initial month to be set for navigation\n\n**0 indexed(0-11)**\n\n**use only if date, startDate and endDate are all set or undefined**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onRangeChange": {
          "name": "onRangeChange",
          "description": "",
          "type": {
            "required": false,
            "name": "function",
            "value": "((startDate?: Date | undefined, endDate?: Date | undefined, startValue?: string | undefined, endValue?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((startDate?: Date | undefined, endDate?: Date | undefined, startValue?: string | undefined, endValue?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered inside Popover",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": {
              "summary": "<></>"
            }
          }
        },
        "contentAlign": {
          "name": "contentAlign",
          "description": "Alignment of `children` Element",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "left"
            }
          }
        },
        "startDate": {
          "name": "startDate",
          "description": "Start date of `DateRangePicker`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | Date | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | Date | undefined"
            },
            "defaultValue": null
          }
        },
        "endDate": {
          "name": "endDate",
          "description": "End date of `DateRangePicker`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | Date | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | Date | undefined"
            },
            "defaultValue": null
          }
        },
        "rangeLimit": {
          "name": "rangeLimit",
          "description": "Allowed limit for difference in startDate and endDate\n\n**set `0` or `undefined` for infinite limit**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "withInput": {
          "name": "withInput",
          "description": "Set if `InputMask` should be used as trigger",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "singleInput": {
          "name": "singleInput",
          "description": "Set if single `InputMask` should be used as trigger",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "open": {
          "name": "open",
          "description": "Sets open state of `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "position": {
          "name": "position",
          "description": "Position of `DateRangePicker` w.r.t. `InputMask`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "bottom",
              "top",
              "top-start",
              "top-end",
              "bottom-start",
              "bottom-end",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"top\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "\"bottom-start\""
            }
          }
        },
        "inputFormat": {
          "name": "inputFormat",
          "description": "Should be used if `date` is of type `string`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "mm/dd/yyyy",
              "dd/mm/yyyy",
              "yyyy/mm/dd",
              "mm-dd-yyyy",
              "dd-mm-yyyy",
              "yyyy-mm-dd"
            ]
          },
          "table": {
            "type": {
              "summary": "\"mm/dd/yyyy\" | \"dd/mm/yyyy\" | \"yyyy/mm/dd\" | \"mm-dd-yyyy\" | \"dd-mm-yyyy\" | \"yyyy-mm-dd\""
            },
            "defaultValue": {
              "summary": "\"mm/dd/yyyy\""
            }
          }
        },
        "outputFormat": {
          "name": "outputFormat",
          "description": "Should be used to translate `date` to desired format for `onRangeChange` callback",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "mm/dd/yyyy",
              "dd/mm/yyyy",
              "yyyy/mm/dd",
              "mm-dd-yyyy",
              "dd-mm-yyyy",
              "yyyy-mm-dd"
            ]
          },
          "table": {
            "type": {
              "summary": "\"mm/dd/yyyy\" | \"dd/mm/yyyy\" | \"yyyy/mm/dd\" | \"mm-dd-yyyy\" | \"dd-mm-yyyy\" | \"yyyy-mm-dd\""
            },
            "defaultValue": {
              "summary": "\"mm/dd/yyyy\""
            }
          }
        },
        "inputOptions": {
          "name": "inputOptions",
          "description": "Props to be used for date of `InputMask`\n\n**Valid in case of single input**.",
          "type": {
            "required": false,
            "name": "other",
            "value": "InputOptions"
          },
          "table": {
            "type": {
              "summary": "InputOptions"
            },
            "defaultValue": {
              "summary": "{ label: 'Date' }"
            }
          }
        },
        "startInputOptions": {
          "name": "startInputOptions",
          "description": "Props to be used for Start date `InputMask`",
          "type": {
            "required": false,
            "name": "other",
            "value": "InputOptions"
          },
          "table": {
            "type": {
              "summary": "InputOptions"
            },
            "defaultValue": {
              "summary": "{ label: 'Start Date' }"
            }
          }
        },
        "endInputOptions": {
          "name": "endInputOptions",
          "description": "Props to be used for End date `InputMask`",
          "type": {
            "required": false,
            "name": "other",
            "value": "InputOptions"
          },
          "table": {
            "type": {
              "summary": "InputOptions"
            },
            "defaultValue": {
              "summary": "{ label: 'End Date' }"
            }
          }
        },
        "validators": {
          "name": "validators",
          "description": "custom Validator for `DateRangePicker`\n\n`ValidatorFn: (val: string, format: string) => boolean`",
          "type": {
            "required": false,
            "name": "other",
            "value": "SingleOrArray<ValidatorFn<any[]>>"
          },
          "table": {
            "type": {
              "summary": "SingleOrArray<ValidatorFn<any[]>>"
            },
            "defaultValue": {
              "summary": "[Utils.validators.date]"
            }
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-daterangepicker-variants-months-in-view--months-in-view": {
    "id": "components-daterangepicker-variants-months-in-view--months-in-view",
    "kind": "Components/DateRangePicker/Variants/Months In View",
    "name": "Months In View",
    "story": "Months In View",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const style = {\n    flexDirection: 'column',\n  };\n\n  return (\n    // @ts-ignore\n    <div className=\"d-flex\" style={style}>\n      {Array.from([1, 2, 3], (x) => (\n        <div className=\"mt-5\" style={{ alignSelf: 'flex-start' }}>\n          <Card className=\"d-inline-flex\" shadow=\"light\">\n            <DateRangePicker\n              monthsInView={x}\n              startDate={new Date(2019, 11, 3)}\n              endDate={new Date(2020, x - 2, 11)}\n              yearNav={2019}\n              monthNav={11}\n            />\n          </Card>\n        </div>\n      ))}\n    </div>\n  );\n}"
      },
      "__id": "components-daterangepicker-variants-months-in-view--months-in-view",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of `Calendar`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "large",
              "small"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\""
            },
            "defaultValue": {
              "summary": "\"large\""
            }
          }
        },
        "monthsInView": {
          "name": "monthsInView",
          "description": "Number of months rendered in view\nNumber of months rendered in view\n\n**Default set to `2` when `withInput: true`**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": null
          }
        },
        "jumpView": {
          "name": "jumpView",
          "description": "Enables jumping to different view on clicking on Calendar Header\n\n**set to `false` if monthsInView > 1**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "firstDayOfWeek": {
          "name": "firstDayOfWeek",
          "description": "Specifies first day of week to be rendered",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "sunday",
              "monday",
              "tuesday",
              "wednesday",
              "thursday",
              "friday",
              "saturday"
            ]
          },
          "table": {
            "type": {
              "summary": "\"sunday\" | \"monday\" | \"tuesday\" | \"wednesday\" | \"thursday\" | \"friday\" | \"saturday\""
            },
            "defaultValue": {
              "summary": "\"sunday\""
            }
          }
        },
        "view": {
          "name": "view",
          "description": "Specifies initial view of `Calendar`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "date",
              "month",
              "year"
            ]
          },
          "table": {
            "type": {
              "summary": "\"date\" | \"month\" | \"year\""
            },
            "defaultValue": {
              "summary": "\"date\""
            }
          }
        },
        "disabledBefore": {
          "name": "disabledBefore",
          "description": "Dates to be disabled before mentioned date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "disabledAfter": {
          "name": "disabledAfter",
          "description": "Dates to be disabled after mentioned date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "yearNav": {
          "name": "yearNav",
          "description": "Initial year to be set for navigation\n\n**use only if date, startDate and endDate are all set or undefined**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "monthNav": {
          "name": "monthNav",
          "description": "Initial month to be set for navigation\n\n**0 indexed(0-11)**\n\n**use only if date, startDate and endDate are all set or undefined**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onRangeChange": {
          "name": "onRangeChange",
          "description": "",
          "type": {
            "required": false,
            "name": "function",
            "value": "((startDate?: Date | undefined, endDate?: Date | undefined, startValue?: string | undefined, endValue?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((startDate?: Date | undefined, endDate?: Date | undefined, startValue?: string | undefined, endValue?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered inside Popover",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": {
              "summary": "<></>"
            }
          }
        },
        "contentAlign": {
          "name": "contentAlign",
          "description": "Alignment of `children` Element",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "left"
            }
          }
        },
        "startDate": {
          "name": "startDate",
          "description": "Start date of `DateRangePicker`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | Date | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | Date | undefined"
            },
            "defaultValue": null
          }
        },
        "endDate": {
          "name": "endDate",
          "description": "End date of `DateRangePicker`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | Date | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | Date | undefined"
            },
            "defaultValue": null
          }
        },
        "rangeLimit": {
          "name": "rangeLimit",
          "description": "Allowed limit for difference in startDate and endDate\n\n**set `0` or `undefined` for infinite limit**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "withInput": {
          "name": "withInput",
          "description": "Set if `InputMask` should be used as trigger",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "singleInput": {
          "name": "singleInput",
          "description": "Set if single `InputMask` should be used as trigger",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "open": {
          "name": "open",
          "description": "Sets open state of `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "position": {
          "name": "position",
          "description": "Position of `DateRangePicker` w.r.t. `InputMask`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "bottom",
              "top",
              "top-start",
              "top-end",
              "bottom-start",
              "bottom-end",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"top\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "\"bottom-start\""
            }
          }
        },
        "inputFormat": {
          "name": "inputFormat",
          "description": "Should be used if `date` is of type `string`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "mm/dd/yyyy",
              "dd/mm/yyyy",
              "yyyy/mm/dd",
              "mm-dd-yyyy",
              "dd-mm-yyyy",
              "yyyy-mm-dd"
            ]
          },
          "table": {
            "type": {
              "summary": "\"mm/dd/yyyy\" | \"dd/mm/yyyy\" | \"yyyy/mm/dd\" | \"mm-dd-yyyy\" | \"dd-mm-yyyy\" | \"yyyy-mm-dd\""
            },
            "defaultValue": {
              "summary": "\"mm/dd/yyyy\""
            }
          }
        },
        "outputFormat": {
          "name": "outputFormat",
          "description": "Should be used to translate `date` to desired format for `onRangeChange` callback",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "mm/dd/yyyy",
              "dd/mm/yyyy",
              "yyyy/mm/dd",
              "mm-dd-yyyy",
              "dd-mm-yyyy",
              "yyyy-mm-dd"
            ]
          },
          "table": {
            "type": {
              "summary": "\"mm/dd/yyyy\" | \"dd/mm/yyyy\" | \"yyyy/mm/dd\" | \"mm-dd-yyyy\" | \"dd-mm-yyyy\" | \"yyyy-mm-dd\""
            },
            "defaultValue": {
              "summary": "\"mm/dd/yyyy\""
            }
          }
        },
        "inputOptions": {
          "name": "inputOptions",
          "description": "Props to be used for date of `InputMask`\n\n**Valid in case of single input**.",
          "type": {
            "required": false,
            "name": "other",
            "value": "InputOptions"
          },
          "table": {
            "type": {
              "summary": "InputOptions"
            },
            "defaultValue": {
              "summary": "{ label: 'Date' }"
            }
          }
        },
        "startInputOptions": {
          "name": "startInputOptions",
          "description": "Props to be used for Start date `InputMask`",
          "type": {
            "required": false,
            "name": "other",
            "value": "InputOptions"
          },
          "table": {
            "type": {
              "summary": "InputOptions"
            },
            "defaultValue": {
              "summary": "{ label: 'Start Date' }"
            }
          }
        },
        "endInputOptions": {
          "name": "endInputOptions",
          "description": "Props to be used for End date `InputMask`",
          "type": {
            "required": false,
            "name": "other",
            "value": "InputOptions"
          },
          "table": {
            "type": {
              "summary": "InputOptions"
            },
            "defaultValue": {
              "summary": "{ label: 'End Date' }"
            }
          }
        },
        "validators": {
          "name": "validators",
          "description": "custom Validator for `DateRangePicker`\n\n`ValidatorFn: (val: string, format: string) => boolean`",
          "type": {
            "required": false,
            "name": "other",
            "value": "SingleOrArray<ValidatorFn<any[]>>"
          },
          "table": {
            "type": {
              "summary": "SingleOrArray<ValidatorFn<any[]>>"
            },
            "defaultValue": {
              "summary": "[Utils.validators.date]"
            }
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-daterangepicker-variants-range-limit--range-limit": {
    "id": "components-daterangepicker-variants-range-limit--range-limit",
    "kind": "Components/DateRangePicker/Variants/Range Limit",
    "name": "Range Limit",
    "story": "Range Limit",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div className=\"d-flex mr-9\">\n      <Card className=\"d-inline-flex\" shadow=\"light\">\n        <DateRangePicker\n          startDate={new Date(2020, 2, 3)}\n          endDate={new Date(2020, 2, 11)}\n          rangeLimit={7}\n          yearNav={2020}\n          monthNav={2}\n        />\n      </Card>\n    </div>\n  );\n}"
      },
      "__id": "components-daterangepicker-variants-range-limit--range-limit",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of `Calendar`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "large",
              "small"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\""
            },
            "defaultValue": {
              "summary": "\"large\""
            }
          }
        },
        "monthsInView": {
          "name": "monthsInView",
          "description": "Number of months rendered in view\nNumber of months rendered in view\n\n**Default set to `2` when `withInput: true`**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": null
          }
        },
        "jumpView": {
          "name": "jumpView",
          "description": "Enables jumping to different view on clicking on Calendar Header\n\n**set to `false` if monthsInView > 1**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "firstDayOfWeek": {
          "name": "firstDayOfWeek",
          "description": "Specifies first day of week to be rendered",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "sunday",
              "monday",
              "tuesday",
              "wednesday",
              "thursday",
              "friday",
              "saturday"
            ]
          },
          "table": {
            "type": {
              "summary": "\"sunday\" | \"monday\" | \"tuesday\" | \"wednesday\" | \"thursday\" | \"friday\" | \"saturday\""
            },
            "defaultValue": {
              "summary": "\"sunday\""
            }
          }
        },
        "view": {
          "name": "view",
          "description": "Specifies initial view of `Calendar`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "date",
              "month",
              "year"
            ]
          },
          "table": {
            "type": {
              "summary": "\"date\" | \"month\" | \"year\""
            },
            "defaultValue": {
              "summary": "\"date\""
            }
          }
        },
        "disabledBefore": {
          "name": "disabledBefore",
          "description": "Dates to be disabled before mentioned date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "disabledAfter": {
          "name": "disabledAfter",
          "description": "Dates to be disabled after mentioned date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "yearNav": {
          "name": "yearNav",
          "description": "Initial year to be set for navigation\n\n**use only if date, startDate and endDate are all set or undefined**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "monthNav": {
          "name": "monthNav",
          "description": "Initial month to be set for navigation\n\n**0 indexed(0-11)**\n\n**use only if date, startDate and endDate are all set or undefined**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onRangeChange": {
          "name": "onRangeChange",
          "description": "",
          "type": {
            "required": false,
            "name": "function",
            "value": "((startDate?: Date | undefined, endDate?: Date | undefined, startValue?: string | undefined, endValue?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((startDate?: Date | undefined, endDate?: Date | undefined, startValue?: string | undefined, endValue?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered inside Popover",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": {
              "summary": "<></>"
            }
          }
        },
        "contentAlign": {
          "name": "contentAlign",
          "description": "Alignment of `children` Element",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "left"
            }
          }
        },
        "startDate": {
          "name": "startDate",
          "description": "Start date of `DateRangePicker`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | Date | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | Date | undefined"
            },
            "defaultValue": null
          }
        },
        "endDate": {
          "name": "endDate",
          "description": "End date of `DateRangePicker`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | Date | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | Date | undefined"
            },
            "defaultValue": null
          }
        },
        "rangeLimit": {
          "name": "rangeLimit",
          "description": "Allowed limit for difference in startDate and endDate\n\n**set `0` or `undefined` for infinite limit**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "withInput": {
          "name": "withInput",
          "description": "Set if `InputMask` should be used as trigger",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "singleInput": {
          "name": "singleInput",
          "description": "Set if single `InputMask` should be used as trigger",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "open": {
          "name": "open",
          "description": "Sets open state of `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "position": {
          "name": "position",
          "description": "Position of `DateRangePicker` w.r.t. `InputMask`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "bottom",
              "top",
              "top-start",
              "top-end",
              "bottom-start",
              "bottom-end",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"top\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "\"bottom-start\""
            }
          }
        },
        "inputFormat": {
          "name": "inputFormat",
          "description": "Should be used if `date` is of type `string`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "mm/dd/yyyy",
              "dd/mm/yyyy",
              "yyyy/mm/dd",
              "mm-dd-yyyy",
              "dd-mm-yyyy",
              "yyyy-mm-dd"
            ]
          },
          "table": {
            "type": {
              "summary": "\"mm/dd/yyyy\" | \"dd/mm/yyyy\" | \"yyyy/mm/dd\" | \"mm-dd-yyyy\" | \"dd-mm-yyyy\" | \"yyyy-mm-dd\""
            },
            "defaultValue": {
              "summary": "\"mm/dd/yyyy\""
            }
          }
        },
        "outputFormat": {
          "name": "outputFormat",
          "description": "Should be used to translate `date` to desired format for `onRangeChange` callback",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "mm/dd/yyyy",
              "dd/mm/yyyy",
              "yyyy/mm/dd",
              "mm-dd-yyyy",
              "dd-mm-yyyy",
              "yyyy-mm-dd"
            ]
          },
          "table": {
            "type": {
              "summary": "\"mm/dd/yyyy\" | \"dd/mm/yyyy\" | \"yyyy/mm/dd\" | \"mm-dd-yyyy\" | \"dd-mm-yyyy\" | \"yyyy-mm-dd\""
            },
            "defaultValue": {
              "summary": "\"mm/dd/yyyy\""
            }
          }
        },
        "inputOptions": {
          "name": "inputOptions",
          "description": "Props to be used for date of `InputMask`\n\n**Valid in case of single input**.",
          "type": {
            "required": false,
            "name": "other",
            "value": "InputOptions"
          },
          "table": {
            "type": {
              "summary": "InputOptions"
            },
            "defaultValue": {
              "summary": "{ label: 'Date' }"
            }
          }
        },
        "startInputOptions": {
          "name": "startInputOptions",
          "description": "Props to be used for Start date `InputMask`",
          "type": {
            "required": false,
            "name": "other",
            "value": "InputOptions"
          },
          "table": {
            "type": {
              "summary": "InputOptions"
            },
            "defaultValue": {
              "summary": "{ label: 'Start Date' }"
            }
          }
        },
        "endInputOptions": {
          "name": "endInputOptions",
          "description": "Props to be used for End date `InputMask`",
          "type": {
            "required": false,
            "name": "other",
            "value": "InputOptions"
          },
          "table": {
            "type": {
              "summary": "InputOptions"
            },
            "defaultValue": {
              "summary": "{ label: 'End Date' }"
            }
          }
        },
        "validators": {
          "name": "validators",
          "description": "custom Validator for `DateRangePicker`\n\n`ValidatorFn: (val: string, format: string) => boolean`",
          "type": {
            "required": false,
            "name": "other",
            "value": "SingleOrArray<ValidatorFn<any[]>>"
          },
          "table": {
            "type": {
              "summary": "SingleOrArray<ValidatorFn<any[]>>"
            },
            "defaultValue": {
              "summary": "[Utils.validators.date]"
            }
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-daterangepicker-variants-view--view": {
    "id": "components-daterangepicker-variants-view--view",
    "kind": "Components/DateRangePicker/Variants/View",
    "name": "View",
    "story": "View",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const values: View[] = ['year', 'month', 'date'];\n\n  return (\n    <div className=\"d-flex\">\n      {values.map((v, index) => (\n        <div className=\"mr-9\" key={index}>\n          <Card className=\"d-inline-flex\" shadow=\"light\">\n            <DateRangePicker\n              startDate={new Date(2020, 2, 3)}\n              endDate={new Date(2020, 2, 11)}\n              view={v}\n              yearNav={2020}\n              monthNav={2}\n            />\n          </Card>\n        </div>\n      ))}\n    </div>\n  );\n}"
      },
      "__id": "components-daterangepicker-variants-view--view",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of `Calendar`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "large",
              "small"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\""
            },
            "defaultValue": {
              "summary": "\"large\""
            }
          }
        },
        "monthsInView": {
          "name": "monthsInView",
          "description": "Number of months rendered in view\nNumber of months rendered in view\n\n**Default set to `2` when `withInput: true`**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": null
          }
        },
        "jumpView": {
          "name": "jumpView",
          "description": "Enables jumping to different view on clicking on Calendar Header\n\n**set to `false` if monthsInView > 1**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "firstDayOfWeek": {
          "name": "firstDayOfWeek",
          "description": "Specifies first day of week to be rendered",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "sunday",
              "monday",
              "tuesday",
              "wednesday",
              "thursday",
              "friday",
              "saturday"
            ]
          },
          "table": {
            "type": {
              "summary": "\"sunday\" | \"monday\" | \"tuesday\" | \"wednesday\" | \"thursday\" | \"friday\" | \"saturday\""
            },
            "defaultValue": {
              "summary": "\"sunday\""
            }
          }
        },
        "view": {
          "name": "view",
          "description": "Specifies initial view of `Calendar`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "date",
              "month",
              "year"
            ]
          },
          "table": {
            "type": {
              "summary": "\"date\" | \"month\" | \"year\""
            },
            "defaultValue": {
              "summary": "\"date\""
            }
          }
        },
        "disabledBefore": {
          "name": "disabledBefore",
          "description": "Dates to be disabled before mentioned date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "disabledAfter": {
          "name": "disabledAfter",
          "description": "Dates to be disabled after mentioned date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "yearNav": {
          "name": "yearNav",
          "description": "Initial year to be set for navigation\n\n**use only if date, startDate and endDate are all set or undefined**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "monthNav": {
          "name": "monthNav",
          "description": "Initial month to be set for navigation\n\n**0 indexed(0-11)**\n\n**use only if date, startDate and endDate are all set or undefined**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onRangeChange": {
          "name": "onRangeChange",
          "description": "",
          "type": {
            "required": false,
            "name": "function",
            "value": "((startDate?: Date | undefined, endDate?: Date | undefined, startValue?: string | undefined, endValue?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((startDate?: Date | undefined, endDate?: Date | undefined, startValue?: string | undefined, endValue?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered inside Popover",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": {
              "summary": "<></>"
            }
          }
        },
        "contentAlign": {
          "name": "contentAlign",
          "description": "Alignment of `children` Element",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "left"
            }
          }
        },
        "startDate": {
          "name": "startDate",
          "description": "Start date of `DateRangePicker`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | Date | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | Date | undefined"
            },
            "defaultValue": null
          }
        },
        "endDate": {
          "name": "endDate",
          "description": "End date of `DateRangePicker`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | Date | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | Date | undefined"
            },
            "defaultValue": null
          }
        },
        "rangeLimit": {
          "name": "rangeLimit",
          "description": "Allowed limit for difference in startDate and endDate\n\n**set `0` or `undefined` for infinite limit**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "withInput": {
          "name": "withInput",
          "description": "Set if `InputMask` should be used as trigger",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "singleInput": {
          "name": "singleInput",
          "description": "Set if single `InputMask` should be used as trigger",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "open": {
          "name": "open",
          "description": "Sets open state of `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "position": {
          "name": "position",
          "description": "Position of `DateRangePicker` w.r.t. `InputMask`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "bottom",
              "top",
              "top-start",
              "top-end",
              "bottom-start",
              "bottom-end",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"top\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "\"bottom-start\""
            }
          }
        },
        "inputFormat": {
          "name": "inputFormat",
          "description": "Should be used if `date` is of type `string`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "mm/dd/yyyy",
              "dd/mm/yyyy",
              "yyyy/mm/dd",
              "mm-dd-yyyy",
              "dd-mm-yyyy",
              "yyyy-mm-dd"
            ]
          },
          "table": {
            "type": {
              "summary": "\"mm/dd/yyyy\" | \"dd/mm/yyyy\" | \"yyyy/mm/dd\" | \"mm-dd-yyyy\" | \"dd-mm-yyyy\" | \"yyyy-mm-dd\""
            },
            "defaultValue": {
              "summary": "\"mm/dd/yyyy\""
            }
          }
        },
        "outputFormat": {
          "name": "outputFormat",
          "description": "Should be used to translate `date` to desired format for `onRangeChange` callback",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "mm/dd/yyyy",
              "dd/mm/yyyy",
              "yyyy/mm/dd",
              "mm-dd-yyyy",
              "dd-mm-yyyy",
              "yyyy-mm-dd"
            ]
          },
          "table": {
            "type": {
              "summary": "\"mm/dd/yyyy\" | \"dd/mm/yyyy\" | \"yyyy/mm/dd\" | \"mm-dd-yyyy\" | \"dd-mm-yyyy\" | \"yyyy-mm-dd\""
            },
            "defaultValue": {
              "summary": "\"mm/dd/yyyy\""
            }
          }
        },
        "inputOptions": {
          "name": "inputOptions",
          "description": "Props to be used for date of `InputMask`\n\n**Valid in case of single input**.",
          "type": {
            "required": false,
            "name": "other",
            "value": "InputOptions"
          },
          "table": {
            "type": {
              "summary": "InputOptions"
            },
            "defaultValue": {
              "summary": "{ label: 'Date' }"
            }
          }
        },
        "startInputOptions": {
          "name": "startInputOptions",
          "description": "Props to be used for Start date `InputMask`",
          "type": {
            "required": false,
            "name": "other",
            "value": "InputOptions"
          },
          "table": {
            "type": {
              "summary": "InputOptions"
            },
            "defaultValue": {
              "summary": "{ label: 'Start Date' }"
            }
          }
        },
        "endInputOptions": {
          "name": "endInputOptions",
          "description": "Props to be used for End date `InputMask`",
          "type": {
            "required": false,
            "name": "other",
            "value": "InputOptions"
          },
          "table": {
            "type": {
              "summary": "InputOptions"
            },
            "defaultValue": {
              "summary": "{ label: 'End Date' }"
            }
          }
        },
        "validators": {
          "name": "validators",
          "description": "custom Validator for `DateRangePicker`\n\n`ValidatorFn: (val: string, format: string) => boolean`",
          "type": {
            "required": false,
            "name": "other",
            "value": "SingleOrArray<ValidatorFn<any[]>>"
          },
          "table": {
            "type": {
              "summary": "SingleOrArray<ValidatorFn<any[]>>"
            },
            "defaultValue": {
              "summary": "[Utils.validators.date]"
            }
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-daterangepicker-variants-with-input--with-input": {
    "id": "components-daterangepicker-variants-with-input--with-input",
    "kind": "Components/DateRangePicker/Variants/With Input",
    "name": "With Input",
    "story": "With Input",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const monthsInView = number('monthsInView', 2);\n\n  const startDate = date('startDate', undefined);\n\n  const endDate = date('endDate', undefined);\n\n  const inputFormat = select(\n    'inputFormat',\n    ['mm/dd/yyyy', 'dd/mm/yyyy', 'yyyy-mm-dd', 'mm-dd-yyyy', 'dd-mm-yyyy', 'yyyy-mm-dd'],\n    undefined\n  );\n\n  const outputFormat = select(\n    'outputFormat',\n    ['mm/dd/yyyy', 'dd/mm/yyyy', 'yyyy-mm-dd', 'mm-dd-yyyy', 'dd-mm-yyyy', 'yyyy-mm-dd'],\n    undefined\n  );\n\n  const view = select('view', ['date', 'month', 'year'], undefined);\n\n  const firstDayOfWeek = select(\n    'firstDayOfWeek',\n    ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'],\n    undefined\n  );\n\n  const disabledBefore = date('disabledBefore', new Date('Jan 20 2015'));\n\n  const disabledAfter = date('disabledAfter', new Date('Jan 20 2028'));\n\n  const jumpView = boolean('jumpView', true);\n\n  const yearNav = number('yearNav', -1);\n\n  const monthNav = number('monthNav', -1);\n\n  const attr: Record<string, any> = {};\n  if (disabledBefore) attr.disabledBefore = disabledBefore;\n  if (disabledAfter) attr.disabledAfter = disabledAfter;\n  if (yearNav !== -1) attr.yearNav = yearNav;\n  if (monthNav !== -1) attr.monthNav = monthNav;\n\n  return (\n    <div className=\"w-50\">\n      <DateRangePicker\n        withInput={true}\n        startDate={startDate}\n        endDate={endDate}\n        inputFormat={inputFormat}\n        outputFormat={outputFormat}\n        jumpView={jumpView}\n        onRangeChange={(sDate?: Date, eDate?: Date, sValue?: string, eValue?: string) =>\n          action(`on range change: ${sDate} - ${eDate} ---- ${sValue} - ${eValue}`)()\n        }\n        view={view}\n        firstDayOfWeek={firstDayOfWeek}\n        monthsInView={monthsInView}\n        startInputOptions={{\n          required: true,\n        }}\n        endInputOptions={{\n          required: true,\n        }}\n        {...attr}\n      />\n    </div>\n  );\n}"
      },
      "__id": "components-daterangepicker-variants-with-input--with-input",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of `Calendar`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "large",
              "small"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\""
            },
            "defaultValue": {
              "summary": "\"large\""
            }
          }
        },
        "monthsInView": {
          "name": "monthsInView",
          "description": "Number of months rendered in view\nNumber of months rendered in view\n\n**Default set to `2` when `withInput: true`**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": null
          }
        },
        "jumpView": {
          "name": "jumpView",
          "description": "Enables jumping to different view on clicking on Calendar Header\n\n**set to `false` if monthsInView > 1**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "firstDayOfWeek": {
          "name": "firstDayOfWeek",
          "description": "Specifies first day of week to be rendered",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "sunday",
              "monday",
              "tuesday",
              "wednesday",
              "thursday",
              "friday",
              "saturday"
            ]
          },
          "table": {
            "type": {
              "summary": "\"sunday\" | \"monday\" | \"tuesday\" | \"wednesday\" | \"thursday\" | \"friday\" | \"saturday\""
            },
            "defaultValue": {
              "summary": "\"sunday\""
            }
          }
        },
        "view": {
          "name": "view",
          "description": "Specifies initial view of `Calendar`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "date",
              "month",
              "year"
            ]
          },
          "table": {
            "type": {
              "summary": "\"date\" | \"month\" | \"year\""
            },
            "defaultValue": {
              "summary": "\"date\""
            }
          }
        },
        "disabledBefore": {
          "name": "disabledBefore",
          "description": "Dates to be disabled before mentioned date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "disabledAfter": {
          "name": "disabledAfter",
          "description": "Dates to be disabled after mentioned date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "yearNav": {
          "name": "yearNav",
          "description": "Initial year to be set for navigation\n\n**use only if date, startDate and endDate are all set or undefined**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "monthNav": {
          "name": "monthNav",
          "description": "Initial month to be set for navigation\n\n**0 indexed(0-11)**\n\n**use only if date, startDate and endDate are all set or undefined**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onRangeChange": {
          "name": "onRangeChange",
          "description": "",
          "type": {
            "required": false,
            "name": "function",
            "value": "((startDate?: Date | undefined, endDate?: Date | undefined, startValue?: string | undefined, endValue?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((startDate?: Date | undefined, endDate?: Date | undefined, startValue?: string | undefined, endValue?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered inside Popover",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": {
              "summary": "<></>"
            }
          }
        },
        "contentAlign": {
          "name": "contentAlign",
          "description": "Alignment of `children` Element",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "left"
            }
          }
        },
        "startDate": {
          "name": "startDate",
          "description": "Start date of `DateRangePicker`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | Date | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | Date | undefined"
            },
            "defaultValue": null
          }
        },
        "endDate": {
          "name": "endDate",
          "description": "End date of `DateRangePicker`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | Date | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | Date | undefined"
            },
            "defaultValue": null
          }
        },
        "rangeLimit": {
          "name": "rangeLimit",
          "description": "Allowed limit for difference in startDate and endDate\n\n**set `0` or `undefined` for infinite limit**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "withInput": {
          "name": "withInput",
          "description": "Set if `InputMask` should be used as trigger",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "singleInput": {
          "name": "singleInput",
          "description": "Set if single `InputMask` should be used as trigger",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "open": {
          "name": "open",
          "description": "Sets open state of `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "position": {
          "name": "position",
          "description": "Position of `DateRangePicker` w.r.t. `InputMask`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "bottom",
              "top",
              "top-start",
              "top-end",
              "bottom-start",
              "bottom-end",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"top\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "\"bottom-start\""
            }
          }
        },
        "inputFormat": {
          "name": "inputFormat",
          "description": "Should be used if `date` is of type `string`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "mm/dd/yyyy",
              "dd/mm/yyyy",
              "yyyy/mm/dd",
              "mm-dd-yyyy",
              "dd-mm-yyyy",
              "yyyy-mm-dd"
            ]
          },
          "table": {
            "type": {
              "summary": "\"mm/dd/yyyy\" | \"dd/mm/yyyy\" | \"yyyy/mm/dd\" | \"mm-dd-yyyy\" | \"dd-mm-yyyy\" | \"yyyy-mm-dd\""
            },
            "defaultValue": {
              "summary": "\"mm/dd/yyyy\""
            }
          }
        },
        "outputFormat": {
          "name": "outputFormat",
          "description": "Should be used to translate `date` to desired format for `onRangeChange` callback",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "mm/dd/yyyy",
              "dd/mm/yyyy",
              "yyyy/mm/dd",
              "mm-dd-yyyy",
              "dd-mm-yyyy",
              "yyyy-mm-dd"
            ]
          },
          "table": {
            "type": {
              "summary": "\"mm/dd/yyyy\" | \"dd/mm/yyyy\" | \"yyyy/mm/dd\" | \"mm-dd-yyyy\" | \"dd-mm-yyyy\" | \"yyyy-mm-dd\""
            },
            "defaultValue": {
              "summary": "\"mm/dd/yyyy\""
            }
          }
        },
        "inputOptions": {
          "name": "inputOptions",
          "description": "Props to be used for date of `InputMask`\n\n**Valid in case of single input**.",
          "type": {
            "required": false,
            "name": "other",
            "value": "InputOptions"
          },
          "table": {
            "type": {
              "summary": "InputOptions"
            },
            "defaultValue": {
              "summary": "{ label: 'Date' }"
            }
          }
        },
        "startInputOptions": {
          "name": "startInputOptions",
          "description": "Props to be used for Start date `InputMask`",
          "type": {
            "required": false,
            "name": "other",
            "value": "InputOptions"
          },
          "table": {
            "type": {
              "summary": "InputOptions"
            },
            "defaultValue": {
              "summary": "{ label: 'Start Date' }"
            }
          }
        },
        "endInputOptions": {
          "name": "endInputOptions",
          "description": "Props to be used for End date `InputMask`",
          "type": {
            "required": false,
            "name": "other",
            "value": "InputOptions"
          },
          "table": {
            "type": {
              "summary": "InputOptions"
            },
            "defaultValue": {
              "summary": "{ label: 'End Date' }"
            }
          }
        },
        "validators": {
          "name": "validators",
          "description": "custom Validator for `DateRangePicker`\n\n`ValidatorFn: (val: string, format: string) => boolean`",
          "type": {
            "required": false,
            "name": "other",
            "value": "SingleOrArray<ValidatorFn<any[]>>"
          },
          "table": {
            "type": {
              "summary": "SingleOrArray<ValidatorFn<any[]>>"
            },
            "defaultValue": {
              "summary": "[Utils.validators.date]"
            }
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-daterangepicker-variants-with-single-input--with-single-input": {
    "id": "components-daterangepicker-variants-with-single-input--with-single-input",
    "kind": "Components/DateRangePicker/Variants/With Single Input",
    "name": "With Single Input",
    "story": "With Single Input",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const monthsInView = number('monthsInView', 2);\n\n  const startDate = date('startDate', undefined);\n\n  const endDate = date('endDate', undefined);\n\n  const inputFormat = select(\n    'inputFormat',\n    ['mm/dd/yyyy', 'dd/mm/yyyy', 'yyyy-mm-dd', 'mm-dd-yyyy', 'dd-mm-yyyy', 'yyyy-mm-dd'],\n    undefined\n  );\n\n  const outputFormat = select(\n    'outputFormat',\n    ['mm/dd/yyyy', 'dd/mm/yyyy', 'yyyy-mm-dd', 'mm-dd-yyyy', 'dd-mm-yyyy', 'yyyy-mm-dd'],\n    undefined\n  );\n\n  const view = select('view', ['date', 'month', 'year'], undefined);\n\n  const firstDayOfWeek = select(\n    'firstDayOfWeek',\n    ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'],\n    undefined\n  );\n\n  const disabledBefore = date('disabledBefore', new Date('Jan 20 2015'));\n\n  const disabledAfter = date('disabledAfter', new Date('Jan 20 2028'));\n\n  const jumpView = boolean('jumpView', true);\n\n  const yearNav = number('yearNav', -1);\n\n  const monthNav = number('monthNav', -1);\n\n  const attr: Record<string, any> = {};\n  if (disabledBefore) attr.disabledBefore = disabledBefore;\n  if (disabledAfter) attr.disabledAfter = disabledAfter;\n  if (yearNav !== -1) attr.yearNav = yearNav;\n  if (monthNav !== -1) attr.monthNav = monthNav;\n\n  return (\n    <div className=\"w-50\">\n      <DateRangePicker\n        withInput={true}\n        singleInput={true}\n        startDate={startDate}\n        endDate={endDate}\n        inputFormat={inputFormat}\n        outputFormat={outputFormat}\n        jumpView={jumpView}\n        onRangeChange={(sDate?: Date, eDate?: Date, sValue?: string, eValue?: string) =>\n          action(`on range change: ${sDate} - ${eDate} ---- ${sValue} - ${eValue}`)()\n        }\n        view={view}\n        firstDayOfWeek={firstDayOfWeek}\n        monthsInView={monthsInView}\n        inputOptions={{\n          required: true,\n          label: 'Date',\n        }}\n        {...attr}\n      />\n    </div>\n  );\n}"
      },
      "__id": "components-daterangepicker-variants-with-single-input--with-single-input",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of `Calendar`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "large",
              "small"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\""
            },
            "defaultValue": {
              "summary": "\"large\""
            }
          }
        },
        "monthsInView": {
          "name": "monthsInView",
          "description": "Number of months rendered in view\nNumber of months rendered in view\n\n**Default set to `2` when `withInput: true`**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": null
          }
        },
        "jumpView": {
          "name": "jumpView",
          "description": "Enables jumping to different view on clicking on Calendar Header\n\n**set to `false` if monthsInView > 1**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "firstDayOfWeek": {
          "name": "firstDayOfWeek",
          "description": "Specifies first day of week to be rendered",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "sunday",
              "monday",
              "tuesday",
              "wednesday",
              "thursday",
              "friday",
              "saturday"
            ]
          },
          "table": {
            "type": {
              "summary": "\"sunday\" | \"monday\" | \"tuesday\" | \"wednesday\" | \"thursday\" | \"friday\" | \"saturday\""
            },
            "defaultValue": {
              "summary": "\"sunday\""
            }
          }
        },
        "view": {
          "name": "view",
          "description": "Specifies initial view of `Calendar`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "date",
              "month",
              "year"
            ]
          },
          "table": {
            "type": {
              "summary": "\"date\" | \"month\" | \"year\""
            },
            "defaultValue": {
              "summary": "\"date\""
            }
          }
        },
        "disabledBefore": {
          "name": "disabledBefore",
          "description": "Dates to be disabled before mentioned date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "disabledAfter": {
          "name": "disabledAfter",
          "description": "Dates to be disabled after mentioned date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "yearNav": {
          "name": "yearNav",
          "description": "Initial year to be set for navigation\n\n**use only if date, startDate and endDate are all set or undefined**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "monthNav": {
          "name": "monthNav",
          "description": "Initial month to be set for navigation\n\n**0 indexed(0-11)**\n\n**use only if date, startDate and endDate are all set or undefined**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onRangeChange": {
          "name": "onRangeChange",
          "description": "",
          "type": {
            "required": false,
            "name": "function",
            "value": "((startDate?: Date | undefined, endDate?: Date | undefined, startValue?: string | undefined, endValue?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((startDate?: Date | undefined, endDate?: Date | undefined, startValue?: string | undefined, endValue?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered inside Popover",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": {
              "summary": "<></>"
            }
          }
        },
        "contentAlign": {
          "name": "contentAlign",
          "description": "Alignment of `children` Element",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "left"
            }
          }
        },
        "startDate": {
          "name": "startDate",
          "description": "Start date of `DateRangePicker`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | Date | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | Date | undefined"
            },
            "defaultValue": null
          }
        },
        "endDate": {
          "name": "endDate",
          "description": "End date of `DateRangePicker`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | Date | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | Date | undefined"
            },
            "defaultValue": null
          }
        },
        "rangeLimit": {
          "name": "rangeLimit",
          "description": "Allowed limit for difference in startDate and endDate\n\n**set `0` or `undefined` for infinite limit**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "withInput": {
          "name": "withInput",
          "description": "Set if `InputMask` should be used as trigger",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "singleInput": {
          "name": "singleInput",
          "description": "Set if single `InputMask` should be used as trigger",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "open": {
          "name": "open",
          "description": "Sets open state of `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "position": {
          "name": "position",
          "description": "Position of `DateRangePicker` w.r.t. `InputMask`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "bottom",
              "top",
              "top-start",
              "top-end",
              "bottom-start",
              "bottom-end",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"top\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "\"bottom-start\""
            }
          }
        },
        "inputFormat": {
          "name": "inputFormat",
          "description": "Should be used if `date` is of type `string`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "mm/dd/yyyy",
              "dd/mm/yyyy",
              "yyyy/mm/dd",
              "mm-dd-yyyy",
              "dd-mm-yyyy",
              "yyyy-mm-dd"
            ]
          },
          "table": {
            "type": {
              "summary": "\"mm/dd/yyyy\" | \"dd/mm/yyyy\" | \"yyyy/mm/dd\" | \"mm-dd-yyyy\" | \"dd-mm-yyyy\" | \"yyyy-mm-dd\""
            },
            "defaultValue": {
              "summary": "\"mm/dd/yyyy\""
            }
          }
        },
        "outputFormat": {
          "name": "outputFormat",
          "description": "Should be used to translate `date` to desired format for `onRangeChange` callback",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "mm/dd/yyyy",
              "dd/mm/yyyy",
              "yyyy/mm/dd",
              "mm-dd-yyyy",
              "dd-mm-yyyy",
              "yyyy-mm-dd"
            ]
          },
          "table": {
            "type": {
              "summary": "\"mm/dd/yyyy\" | \"dd/mm/yyyy\" | \"yyyy/mm/dd\" | \"mm-dd-yyyy\" | \"dd-mm-yyyy\" | \"yyyy-mm-dd\""
            },
            "defaultValue": {
              "summary": "\"mm/dd/yyyy\""
            }
          }
        },
        "inputOptions": {
          "name": "inputOptions",
          "description": "Props to be used for date of `InputMask`\n\n**Valid in case of single input**.",
          "type": {
            "required": false,
            "name": "other",
            "value": "InputOptions"
          },
          "table": {
            "type": {
              "summary": "InputOptions"
            },
            "defaultValue": {
              "summary": "{ label: 'Date' }"
            }
          }
        },
        "startInputOptions": {
          "name": "startInputOptions",
          "description": "Props to be used for Start date `InputMask`",
          "type": {
            "required": false,
            "name": "other",
            "value": "InputOptions"
          },
          "table": {
            "type": {
              "summary": "InputOptions"
            },
            "defaultValue": {
              "summary": "{ label: 'Start Date' }"
            }
          }
        },
        "endInputOptions": {
          "name": "endInputOptions",
          "description": "Props to be used for End date `InputMask`",
          "type": {
            "required": false,
            "name": "other",
            "value": "InputOptions"
          },
          "table": {
            "type": {
              "summary": "InputOptions"
            },
            "defaultValue": {
              "summary": "{ label: 'End Date' }"
            }
          }
        },
        "validators": {
          "name": "validators",
          "description": "custom Validator for `DateRangePicker`\n\n`ValidatorFn: (val: string, format: string) => boolean`",
          "type": {
            "required": false,
            "name": "other",
            "value": "SingleOrArray<ValidatorFn<any[]>>"
          },
          "table": {
            "type": {
              "summary": "SingleOrArray<ValidatorFn<any[]>>"
            },
            "defaultValue": {
              "summary": "[Utils.validators.date]"
            }
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dialog-all--all": {
    "id": "components-dialog-all--all",
    "kind": "Components/Dialog/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const open = boolean('open', true);\n  const dimension = select('dimension', ['small', 'medium', 'large'], 'small');\n\n  const primaryButtonAppearance = select(\n    'primaryButtonAppearance',\n    ['basic', 'primary', 'success', 'alert', 'transparent'],\n    'primary'\n  );\n\n  const secondaryButtonAppearance = select(\n    'secondaryButtonAppearance',\n    ['basic', 'primary', 'success', 'alert', 'transparent'],\n    'basic'\n  );\n\n  const onClose = () => {\n    updateKnob('open', false);\n    action('on close triggered')();\n  };\n\n  const options = {\n    open,\n    onClose,\n    dimension,\n    primaryButtonAppearance,\n    secondaryButtonAppearance,\n    icon: 'pan_tool',\n    heading: 'Heading',\n    title: 'Description Title',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    primaryButtonLabel: 'Primary',\n    primaryButtonCallback: action('primary click'),\n    secondaryButtonLabel: 'Basic',\n    secondaryButtonCallback: action('basic click'),\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Dialog {...options} />\n    </div>\n  );\n}"
      },
      "__id": "components-dialog-all--all",
      "args": {},
      "argTypes": {
        "onClose": {
          "name": "onClose",
          "description": "Callback for `Dialog` close event",
          "type": {
            "required": true,
            "name": "function",
            "value": "(event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void"
          },
          "table": {
            "type": {
              "summary": "(event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"small\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "heading": {
          "name": "heading",
          "description": "Dialog heading",
          "type": {
            "required": true,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "title": {
          "name": "title",
          "description": "Dialog's description title",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "description": {
          "name": "description",
          "description": "Description inside `Dialog`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "primaryButtonLabel": {
          "name": "primaryButtonLabel",
          "description": "Label of first button inside `Dialog`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "primaryButtonAppearance": {
          "name": "primaryButtonAppearance",
          "description": "Color of second button inside `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": {
              "summary": "primary"
            }
          }
        },
        "primaryButtonCallback": {
          "name": "primaryButtonCallback",
          "description": "Handler to be called when first button is clicked",
          "type": {
            "required": true,
            "name": "function",
            "value": "() => void"
          },
          "table": {
            "type": {
              "summary": "() => void"
            },
            "defaultValue": null
          }
        },
        "secondaryButtonLabel": {
          "name": "secondaryButtonLabel",
          "description": "Label of second button inside `Dialog`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "secondaryButtonAppearance": {
          "name": "secondaryButtonAppearance",
          "description": "Color of second button inside `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": {
              "summary": "basic"
            }
          }
        },
        "secondaryButtonCallback": {
          "name": "secondaryButtonCallback",
          "description": "Handler to be called when second button is clicked",
          "type": {
            "required": true,
            "name": "function",
            "value": "() => void"
          },
          "table": {
            "type": {
              "summary": "() => void"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dialog-variants-dimension-large--large": {
    "id": "components-dialog-variants-dimension-large--large",
    "kind": "Components/Dialog/Variants/Dimension/Large",
    "name": "Large",
    "story": "Large",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const open = boolean('open', true);\n\n  const onClose = () => {\n    updateKnob('open', false);\n  };\n\n  const options = {\n    open,\n    onClose,\n    icon: 'pan_tool',\n    heading: 'Heading',\n    title: 'Description Title/Variants',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    primaryButtonLabel: 'Primary',\n    primaryButtonCallback: action('primary click'),\n    secondaryButtonLabel: 'Basic',\n    secondaryButtonCallback: action('basic click'),\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Dialog dimension=\"large\" {...options} />\n    </div>\n  );\n}"
      },
      "__id": "components-dialog-variants-dimension-large--large",
      "args": {},
      "argTypes": {
        "onClose": {
          "name": "onClose",
          "description": "Callback for `Dialog` close event",
          "type": {
            "required": true,
            "name": "function",
            "value": "(event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void"
          },
          "table": {
            "type": {
              "summary": "(event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"small\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "heading": {
          "name": "heading",
          "description": "Dialog heading",
          "type": {
            "required": true,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "title": {
          "name": "title",
          "description": "Dialog's description title",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "description": {
          "name": "description",
          "description": "Description inside `Dialog`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "primaryButtonLabel": {
          "name": "primaryButtonLabel",
          "description": "Label of first button inside `Dialog`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "primaryButtonAppearance": {
          "name": "primaryButtonAppearance",
          "description": "Color of second button inside `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": {
              "summary": "primary"
            }
          }
        },
        "primaryButtonCallback": {
          "name": "primaryButtonCallback",
          "description": "Handler to be called when first button is clicked",
          "type": {
            "required": true,
            "name": "function",
            "value": "() => void"
          },
          "table": {
            "type": {
              "summary": "() => void"
            },
            "defaultValue": null
          }
        },
        "secondaryButtonLabel": {
          "name": "secondaryButtonLabel",
          "description": "Label of second button inside `Dialog`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "secondaryButtonAppearance": {
          "name": "secondaryButtonAppearance",
          "description": "Color of second button inside `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": {
              "summary": "basic"
            }
          }
        },
        "secondaryButtonCallback": {
          "name": "secondaryButtonCallback",
          "description": "Handler to be called when second button is clicked",
          "type": {
            "required": true,
            "name": "function",
            "value": "() => void"
          },
          "table": {
            "type": {
              "summary": "() => void"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dialog-variants-dimension-medium--medium": {
    "id": "components-dialog-variants-dimension-medium--medium",
    "kind": "Components/Dialog/Variants/Dimension/Medium",
    "name": "Medium",
    "story": "Medium",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const open = boolean('open', true);\n\n  const onClose = () => {\n    updateKnob('open', false);\n  };\n\n  const options = {\n    open,\n    onClose,\n    icon: 'pan_tool',\n    heading: 'Heading',\n    title: 'Description Title/Variants',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    primaryButtonLabel: 'Primary',\n    primaryButtonCallback: action('primary click'),\n    secondaryButtonLabel: 'Basic',\n    secondaryButtonCallback: action('basic click'),\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Dialog dimension=\"medium\" {...options} />\n    </div>\n  );\n}"
      },
      "__id": "components-dialog-variants-dimension-medium--medium",
      "args": {},
      "argTypes": {
        "onClose": {
          "name": "onClose",
          "description": "Callback for `Dialog` close event",
          "type": {
            "required": true,
            "name": "function",
            "value": "(event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void"
          },
          "table": {
            "type": {
              "summary": "(event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"small\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "heading": {
          "name": "heading",
          "description": "Dialog heading",
          "type": {
            "required": true,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "title": {
          "name": "title",
          "description": "Dialog's description title",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "description": {
          "name": "description",
          "description": "Description inside `Dialog`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "primaryButtonLabel": {
          "name": "primaryButtonLabel",
          "description": "Label of first button inside `Dialog`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "primaryButtonAppearance": {
          "name": "primaryButtonAppearance",
          "description": "Color of second button inside `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": {
              "summary": "primary"
            }
          }
        },
        "primaryButtonCallback": {
          "name": "primaryButtonCallback",
          "description": "Handler to be called when first button is clicked",
          "type": {
            "required": true,
            "name": "function",
            "value": "() => void"
          },
          "table": {
            "type": {
              "summary": "() => void"
            },
            "defaultValue": null
          }
        },
        "secondaryButtonLabel": {
          "name": "secondaryButtonLabel",
          "description": "Label of second button inside `Dialog`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "secondaryButtonAppearance": {
          "name": "secondaryButtonAppearance",
          "description": "Color of second button inside `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": {
              "summary": "basic"
            }
          }
        },
        "secondaryButtonCallback": {
          "name": "secondaryButtonCallback",
          "description": "Handler to be called when second button is clicked",
          "type": {
            "required": true,
            "name": "function",
            "value": "() => void"
          },
          "table": {
            "type": {
              "summary": "() => void"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dialog-variants-dimension-small--small": {
    "id": "components-dialog-variants-dimension-small--small",
    "kind": "Components/Dialog/Variants/Dimension/Small",
    "name": "Small",
    "story": "Small",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const open = boolean('open', true);\n\n  const onClose = () => {\n    updateKnob('open', false);\n  };\n\n  const options = {\n    open,\n    onClose,\n    icon: 'pan_tool',\n    heading: 'Heading',\n    title: 'Description Title/Variants',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    primaryButtonLabel: 'Primary',\n    primaryButtonCallback: action('primary click'),\n    secondaryButtonLabel: 'Basic',\n    secondaryButtonCallback: action('basic click'),\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Dialog dimension=\"small\" {...options} />\n    </div>\n  );\n}"
      },
      "__id": "components-dialog-variants-dimension-small--small",
      "args": {},
      "argTypes": {
        "onClose": {
          "name": "onClose",
          "description": "Callback for `Dialog` close event",
          "type": {
            "required": true,
            "name": "function",
            "value": "(event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void"
          },
          "table": {
            "type": {
              "summary": "(event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"small\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "heading": {
          "name": "heading",
          "description": "Dialog heading",
          "type": {
            "required": true,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "title": {
          "name": "title",
          "description": "Dialog's description title",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "description": {
          "name": "description",
          "description": "Description inside `Dialog`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "primaryButtonLabel": {
          "name": "primaryButtonLabel",
          "description": "Label of first button inside `Dialog`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "primaryButtonAppearance": {
          "name": "primaryButtonAppearance",
          "description": "Color of second button inside `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": {
              "summary": "primary"
            }
          }
        },
        "primaryButtonCallback": {
          "name": "primaryButtonCallback",
          "description": "Handler to be called when first button is clicked",
          "type": {
            "required": true,
            "name": "function",
            "value": "() => void"
          },
          "table": {
            "type": {
              "summary": "() => void"
            },
            "defaultValue": null
          }
        },
        "secondaryButtonLabel": {
          "name": "secondaryButtonLabel",
          "description": "Label of second button inside `Dialog`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "secondaryButtonAppearance": {
          "name": "secondaryButtonAppearance",
          "description": "Color of second button inside `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": {
              "summary": "basic"
            }
          }
        },
        "secondaryButtonCallback": {
          "name": "secondaryButtonCallback",
          "description": "Handler to be called when second button is clicked",
          "type": {
            "required": true,
            "name": "function",
            "value": "() => void"
          },
          "table": {
            "type": {
              "summary": "() => void"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dialog-variants-primarybutton-alert--alert": {
    "id": "components-dialog-variants-primarybutton-alert--alert",
    "kind": "Components/Dialog/Variants/PrimaryButton/Alert",
    "name": "Alert",
    "story": "Alert",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const open = boolean('open', true);\n\n  const onClose = () => {\n    updateKnob('open', false);\n  };\n\n  const options = {\n    open,\n    onClose,\n    icon: 'pan_tool',\n    heading: 'Heading',\n    title: 'Description Title/Variants',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    primaryButtonLabel: 'Primary',\n    primaryButtonCallback: action('primary click'),\n    secondaryButtonLabel: 'Secondary',\n    secondaryButtonCallback: action('secondary click'),\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Dialog primaryButtonAppearance=\"alert\" {...options} />\n    </div>\n  );\n}"
      },
      "__id": "components-dialog-variants-primarybutton-alert--alert",
      "args": {},
      "argTypes": {
        "onClose": {
          "name": "onClose",
          "description": "Callback for `Dialog` close event",
          "type": {
            "required": true,
            "name": "function",
            "value": "(event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void"
          },
          "table": {
            "type": {
              "summary": "(event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"small\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "heading": {
          "name": "heading",
          "description": "Dialog heading",
          "type": {
            "required": true,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "title": {
          "name": "title",
          "description": "Dialog's description title",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "description": {
          "name": "description",
          "description": "Description inside `Dialog`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "primaryButtonLabel": {
          "name": "primaryButtonLabel",
          "description": "Label of first button inside `Dialog`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "primaryButtonAppearance": {
          "name": "primaryButtonAppearance",
          "description": "Color of second button inside `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": {
              "summary": "primary"
            }
          }
        },
        "primaryButtonCallback": {
          "name": "primaryButtonCallback",
          "description": "Handler to be called when first button is clicked",
          "type": {
            "required": true,
            "name": "function",
            "value": "() => void"
          },
          "table": {
            "type": {
              "summary": "() => void"
            },
            "defaultValue": null
          }
        },
        "secondaryButtonLabel": {
          "name": "secondaryButtonLabel",
          "description": "Label of second button inside `Dialog`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "secondaryButtonAppearance": {
          "name": "secondaryButtonAppearance",
          "description": "Color of second button inside `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": {
              "summary": "basic"
            }
          }
        },
        "secondaryButtonCallback": {
          "name": "secondaryButtonCallback",
          "description": "Handler to be called when second button is clicked",
          "type": {
            "required": true,
            "name": "function",
            "value": "() => void"
          },
          "table": {
            "type": {
              "summary": "() => void"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dialog-variants-primarybutton-basic--basic": {
    "id": "components-dialog-variants-primarybutton-basic--basic",
    "kind": "Components/Dialog/Variants/PrimaryButton/Basic",
    "name": "Basic",
    "story": "Basic",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const open = boolean('open', true);\n\n  const onClose = () => {\n    updateKnob('open', false);\n  };\n\n  const options = {\n    open,\n    onClose,\n    icon: 'pan_tool',\n    heading: 'Heading',\n    title: 'Description Title/Variants',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    primaryButtonLabel: 'Primary',\n    primaryButtonCallback: action('primary click'),\n    secondaryButtonLabel: 'Secondary',\n    secondaryButtonCallback: action('secondary click'),\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Dialog primaryButtonAppearance=\"basic\" {...options} />\n    </div>\n  );\n}"
      },
      "__id": "components-dialog-variants-primarybutton-basic--basic",
      "args": {},
      "argTypes": {
        "onClose": {
          "name": "onClose",
          "description": "Callback for `Dialog` close event",
          "type": {
            "required": true,
            "name": "function",
            "value": "(event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void"
          },
          "table": {
            "type": {
              "summary": "(event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"small\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "heading": {
          "name": "heading",
          "description": "Dialog heading",
          "type": {
            "required": true,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "title": {
          "name": "title",
          "description": "Dialog's description title",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "description": {
          "name": "description",
          "description": "Description inside `Dialog`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "primaryButtonLabel": {
          "name": "primaryButtonLabel",
          "description": "Label of first button inside `Dialog`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "primaryButtonAppearance": {
          "name": "primaryButtonAppearance",
          "description": "Color of second button inside `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": {
              "summary": "primary"
            }
          }
        },
        "primaryButtonCallback": {
          "name": "primaryButtonCallback",
          "description": "Handler to be called when first button is clicked",
          "type": {
            "required": true,
            "name": "function",
            "value": "() => void"
          },
          "table": {
            "type": {
              "summary": "() => void"
            },
            "defaultValue": null
          }
        },
        "secondaryButtonLabel": {
          "name": "secondaryButtonLabel",
          "description": "Label of second button inside `Dialog`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "secondaryButtonAppearance": {
          "name": "secondaryButtonAppearance",
          "description": "Color of second button inside `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": {
              "summary": "basic"
            }
          }
        },
        "secondaryButtonCallback": {
          "name": "secondaryButtonCallback",
          "description": "Handler to be called when second button is clicked",
          "type": {
            "required": true,
            "name": "function",
            "value": "() => void"
          },
          "table": {
            "type": {
              "summary": "() => void"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dialog-variants-primarybutton-primary--primary": {
    "id": "components-dialog-variants-primarybutton-primary--primary",
    "kind": "Components/Dialog/Variants/PrimaryButton/Primary",
    "name": "Primary",
    "story": "Primary",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const open = boolean('open', true);\n\n  const onClose = () => {\n    updateKnob('open', false);\n  };\n\n  const options = {\n    open,\n    onClose,\n    icon: 'pan_tool',\n    heading: 'Heading',\n    title: 'Description Title/Variants',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    primaryButtonLabel: 'Primary',\n    primaryButtonCallback: action('primary click'),\n    secondaryButtonLabel: 'Secondary',\n    secondaryButtonCallback: action('secondary click'),\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Dialog primaryButtonAppearance=\"primary\" {...options} />\n    </div>\n  );\n}"
      },
      "__id": "components-dialog-variants-primarybutton-primary--primary",
      "args": {},
      "argTypes": {
        "onClose": {
          "name": "onClose",
          "description": "Callback for `Dialog` close event",
          "type": {
            "required": true,
            "name": "function",
            "value": "(event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void"
          },
          "table": {
            "type": {
              "summary": "(event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"small\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "heading": {
          "name": "heading",
          "description": "Dialog heading",
          "type": {
            "required": true,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "title": {
          "name": "title",
          "description": "Dialog's description title",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "description": {
          "name": "description",
          "description": "Description inside `Dialog`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "primaryButtonLabel": {
          "name": "primaryButtonLabel",
          "description": "Label of first button inside `Dialog`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "primaryButtonAppearance": {
          "name": "primaryButtonAppearance",
          "description": "Color of second button inside `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": {
              "summary": "primary"
            }
          }
        },
        "primaryButtonCallback": {
          "name": "primaryButtonCallback",
          "description": "Handler to be called when first button is clicked",
          "type": {
            "required": true,
            "name": "function",
            "value": "() => void"
          },
          "table": {
            "type": {
              "summary": "() => void"
            },
            "defaultValue": null
          }
        },
        "secondaryButtonLabel": {
          "name": "secondaryButtonLabel",
          "description": "Label of second button inside `Dialog`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "secondaryButtonAppearance": {
          "name": "secondaryButtonAppearance",
          "description": "Color of second button inside `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": {
              "summary": "basic"
            }
          }
        },
        "secondaryButtonCallback": {
          "name": "secondaryButtonCallback",
          "description": "Handler to be called when second button is clicked",
          "type": {
            "required": true,
            "name": "function",
            "value": "() => void"
          },
          "table": {
            "type": {
              "summary": "() => void"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dialog-variants-primarybutton-success--success": {
    "id": "components-dialog-variants-primarybutton-success--success",
    "kind": "Components/Dialog/Variants/PrimaryButton/Success",
    "name": "Success",
    "story": "Success",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const open = boolean('open', true);\n\n  const onClose = () => {\n    updateKnob('open', false);\n  };\n\n  const options = {\n    open,\n    onClose,\n    icon: 'pan_tool',\n    heading: 'Heading',\n    title: 'Description Title/Variants',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    primaryButtonLabel: 'Primary',\n    primaryButtonCallback: action('primary click'),\n    secondaryButtonLabel: 'Secondary',\n    secondaryButtonCallback: action('secondary click'),\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Dialog primaryButtonAppearance=\"success\" {...options} />\n    </div>\n  );\n}"
      },
      "__id": "components-dialog-variants-primarybutton-success--success",
      "args": {},
      "argTypes": {
        "onClose": {
          "name": "onClose",
          "description": "Callback for `Dialog` close event",
          "type": {
            "required": true,
            "name": "function",
            "value": "(event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void"
          },
          "table": {
            "type": {
              "summary": "(event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"small\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "heading": {
          "name": "heading",
          "description": "Dialog heading",
          "type": {
            "required": true,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "title": {
          "name": "title",
          "description": "Dialog's description title",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "description": {
          "name": "description",
          "description": "Description inside `Dialog`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "primaryButtonLabel": {
          "name": "primaryButtonLabel",
          "description": "Label of first button inside `Dialog`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "primaryButtonAppearance": {
          "name": "primaryButtonAppearance",
          "description": "Color of second button inside `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": {
              "summary": "primary"
            }
          }
        },
        "primaryButtonCallback": {
          "name": "primaryButtonCallback",
          "description": "Handler to be called when first button is clicked",
          "type": {
            "required": true,
            "name": "function",
            "value": "() => void"
          },
          "table": {
            "type": {
              "summary": "() => void"
            },
            "defaultValue": null
          }
        },
        "secondaryButtonLabel": {
          "name": "secondaryButtonLabel",
          "description": "Label of second button inside `Dialog`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "secondaryButtonAppearance": {
          "name": "secondaryButtonAppearance",
          "description": "Color of second button inside `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": {
              "summary": "basic"
            }
          }
        },
        "secondaryButtonCallback": {
          "name": "secondaryButtonCallback",
          "description": "Handler to be called when second button is clicked",
          "type": {
            "required": true,
            "name": "function",
            "value": "() => void"
          },
          "table": {
            "type": {
              "summary": "() => void"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dialog-variants-primarybutton-transparent--transparent": {
    "id": "components-dialog-variants-primarybutton-transparent--transparent",
    "kind": "Components/Dialog/Variants/PrimaryButton/Transparent",
    "name": "Transparent",
    "story": "Transparent",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const open = boolean('open', true);\n\n  const onClose = () => {\n    updateKnob('open', false);\n  };\n\n  const options = {\n    open,\n    onClose,\n    icon: 'pan_tool',\n    heading: 'Heading',\n    title: 'Description Title/Variants',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    primaryButtonLabel: 'Primary',\n    primaryButtonCallback: action('primary click'),\n    secondaryButtonLabel: 'Secondary',\n    secondaryButtonCallback: action('secondary click'),\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Dialog primaryButtonAppearance=\"transparent\" {...options} />\n    </div>\n  );\n}"
      },
      "__id": "components-dialog-variants-primarybutton-transparent--transparent",
      "args": {},
      "argTypes": {
        "onClose": {
          "name": "onClose",
          "description": "Callback for `Dialog` close event",
          "type": {
            "required": true,
            "name": "function",
            "value": "(event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void"
          },
          "table": {
            "type": {
              "summary": "(event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"small\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "heading": {
          "name": "heading",
          "description": "Dialog heading",
          "type": {
            "required": true,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "title": {
          "name": "title",
          "description": "Dialog's description title",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "description": {
          "name": "description",
          "description": "Description inside `Dialog`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "primaryButtonLabel": {
          "name": "primaryButtonLabel",
          "description": "Label of first button inside `Dialog`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "primaryButtonAppearance": {
          "name": "primaryButtonAppearance",
          "description": "Color of second button inside `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": {
              "summary": "primary"
            }
          }
        },
        "primaryButtonCallback": {
          "name": "primaryButtonCallback",
          "description": "Handler to be called when first button is clicked",
          "type": {
            "required": true,
            "name": "function",
            "value": "() => void"
          },
          "table": {
            "type": {
              "summary": "() => void"
            },
            "defaultValue": null
          }
        },
        "secondaryButtonLabel": {
          "name": "secondaryButtonLabel",
          "description": "Label of second button inside `Dialog`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "secondaryButtonAppearance": {
          "name": "secondaryButtonAppearance",
          "description": "Color of second button inside `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": {
              "summary": "basic"
            }
          }
        },
        "secondaryButtonCallback": {
          "name": "secondaryButtonCallback",
          "description": "Handler to be called when second button is clicked",
          "type": {
            "required": true,
            "name": "function",
            "value": "() => void"
          },
          "table": {
            "type": {
              "summary": "() => void"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dialog-variants-secondarybutton-alert--alert": {
    "id": "components-dialog-variants-secondarybutton-alert--alert",
    "kind": "Components/Dialog/Variants/SecondaryButton/Alert",
    "name": "Alert",
    "story": "Alert",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const open = boolean('open', true);\n\n  const onClose = () => {\n    updateKnob('open', false);\n  };\n\n  const options = {\n    open,\n    onClose,\n    icon: 'pan_tool',\n    heading: 'Heading',\n    title: 'Description Title/Variants',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    primaryButtonLabel: 'Primary',\n    primaryButtonCallback: action('primary click'),\n    secondaryButtonLabel: 'Secondary',\n    secondaryButtonCallback: action('secondary click'),\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Dialog secondaryButtonAppearance=\"alert\" {...options} />\n    </div>\n  );\n}"
      },
      "__id": "components-dialog-variants-secondarybutton-alert--alert",
      "args": {},
      "argTypes": {
        "onClose": {
          "name": "onClose",
          "description": "Callback for `Dialog` close event",
          "type": {
            "required": true,
            "name": "function",
            "value": "(event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void"
          },
          "table": {
            "type": {
              "summary": "(event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"small\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "heading": {
          "name": "heading",
          "description": "Dialog heading",
          "type": {
            "required": true,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "title": {
          "name": "title",
          "description": "Dialog's description title",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "description": {
          "name": "description",
          "description": "Description inside `Dialog`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "primaryButtonLabel": {
          "name": "primaryButtonLabel",
          "description": "Label of first button inside `Dialog`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "primaryButtonAppearance": {
          "name": "primaryButtonAppearance",
          "description": "Color of second button inside `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": {
              "summary": "primary"
            }
          }
        },
        "primaryButtonCallback": {
          "name": "primaryButtonCallback",
          "description": "Handler to be called when first button is clicked",
          "type": {
            "required": true,
            "name": "function",
            "value": "() => void"
          },
          "table": {
            "type": {
              "summary": "() => void"
            },
            "defaultValue": null
          }
        },
        "secondaryButtonLabel": {
          "name": "secondaryButtonLabel",
          "description": "Label of second button inside `Dialog`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "secondaryButtonAppearance": {
          "name": "secondaryButtonAppearance",
          "description": "Color of second button inside `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": {
              "summary": "basic"
            }
          }
        },
        "secondaryButtonCallback": {
          "name": "secondaryButtonCallback",
          "description": "Handler to be called when second button is clicked",
          "type": {
            "required": true,
            "name": "function",
            "value": "() => void"
          },
          "table": {
            "type": {
              "summary": "() => void"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dialog-variants-secondarybutton-basic--basic": {
    "id": "components-dialog-variants-secondarybutton-basic--basic",
    "kind": "Components/Dialog/Variants/SecondaryButton/Basic",
    "name": "Basic",
    "story": "Basic",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const open = boolean('open', true);\n\n  const onClose = () => {\n    updateKnob('open', false);\n  };\n\n  const options = {\n    open,\n    onClose,\n    icon: 'pan_tool',\n    heading: 'Heading',\n    title: 'Description Title/Variants',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    primaryButtonLabel: 'Primary',\n    primaryButtonCallback: action('primary click'),\n    secondaryButtonLabel: 'Secondary',\n    secondaryButtonCallback: action('secondary click'),\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Dialog secondaryButtonAppearance=\"basic\" {...options} />\n    </div>\n  );\n}"
      },
      "__id": "components-dialog-variants-secondarybutton-basic--basic",
      "args": {},
      "argTypes": {
        "onClose": {
          "name": "onClose",
          "description": "Callback for `Dialog` close event",
          "type": {
            "required": true,
            "name": "function",
            "value": "(event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void"
          },
          "table": {
            "type": {
              "summary": "(event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"small\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "heading": {
          "name": "heading",
          "description": "Dialog heading",
          "type": {
            "required": true,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "title": {
          "name": "title",
          "description": "Dialog's description title",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "description": {
          "name": "description",
          "description": "Description inside `Dialog`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "primaryButtonLabel": {
          "name": "primaryButtonLabel",
          "description": "Label of first button inside `Dialog`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "primaryButtonAppearance": {
          "name": "primaryButtonAppearance",
          "description": "Color of second button inside `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": {
              "summary": "primary"
            }
          }
        },
        "primaryButtonCallback": {
          "name": "primaryButtonCallback",
          "description": "Handler to be called when first button is clicked",
          "type": {
            "required": true,
            "name": "function",
            "value": "() => void"
          },
          "table": {
            "type": {
              "summary": "() => void"
            },
            "defaultValue": null
          }
        },
        "secondaryButtonLabel": {
          "name": "secondaryButtonLabel",
          "description": "Label of second button inside `Dialog`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "secondaryButtonAppearance": {
          "name": "secondaryButtonAppearance",
          "description": "Color of second button inside `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": {
              "summary": "basic"
            }
          }
        },
        "secondaryButtonCallback": {
          "name": "secondaryButtonCallback",
          "description": "Handler to be called when second button is clicked",
          "type": {
            "required": true,
            "name": "function",
            "value": "() => void"
          },
          "table": {
            "type": {
              "summary": "() => void"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dialog-variants-secondarybutton-primary--primary": {
    "id": "components-dialog-variants-secondarybutton-primary--primary",
    "kind": "Components/Dialog/Variants/SecondaryButton/Primary",
    "name": "Primary",
    "story": "Primary",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const open = boolean('open', true);\n\n  const onClose = () => {\n    updateKnob('open', false);\n  };\n\n  const options = {\n    open,\n    onClose,\n    icon: 'pan_tool',\n    heading: 'Heading',\n    title: 'Description Title/Variants',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    primaryButtonLabel: 'Primary',\n    primaryButtonCallback: action('primary click'),\n    secondaryButtonLabel: 'Secondary',\n    secondaryButtonCallback: action('secondary click'),\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Dialog secondaryButtonAppearance=\"primary\" {...options} />\n    </div>\n  );\n}"
      },
      "__id": "components-dialog-variants-secondarybutton-primary--primary",
      "args": {},
      "argTypes": {
        "onClose": {
          "name": "onClose",
          "description": "Callback for `Dialog` close event",
          "type": {
            "required": true,
            "name": "function",
            "value": "(event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void"
          },
          "table": {
            "type": {
              "summary": "(event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"small\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "heading": {
          "name": "heading",
          "description": "Dialog heading",
          "type": {
            "required": true,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "title": {
          "name": "title",
          "description": "Dialog's description title",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "description": {
          "name": "description",
          "description": "Description inside `Dialog`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "primaryButtonLabel": {
          "name": "primaryButtonLabel",
          "description": "Label of first button inside `Dialog`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "primaryButtonAppearance": {
          "name": "primaryButtonAppearance",
          "description": "Color of second button inside `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": {
              "summary": "primary"
            }
          }
        },
        "primaryButtonCallback": {
          "name": "primaryButtonCallback",
          "description": "Handler to be called when first button is clicked",
          "type": {
            "required": true,
            "name": "function",
            "value": "() => void"
          },
          "table": {
            "type": {
              "summary": "() => void"
            },
            "defaultValue": null
          }
        },
        "secondaryButtonLabel": {
          "name": "secondaryButtonLabel",
          "description": "Label of second button inside `Dialog`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "secondaryButtonAppearance": {
          "name": "secondaryButtonAppearance",
          "description": "Color of second button inside `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": {
              "summary": "basic"
            }
          }
        },
        "secondaryButtonCallback": {
          "name": "secondaryButtonCallback",
          "description": "Handler to be called when second button is clicked",
          "type": {
            "required": true,
            "name": "function",
            "value": "() => void"
          },
          "table": {
            "type": {
              "summary": "() => void"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dialog-variants-secondarybutton-success--success": {
    "id": "components-dialog-variants-secondarybutton-success--success",
    "kind": "Components/Dialog/Variants/SecondaryButton/Success",
    "name": "Success",
    "story": "Success",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const open = boolean('open', true);\n\n  const onClose = () => {\n    updateKnob('open', false);\n  };\n\n  const options = {\n    open,\n    onClose,\n    icon: 'pan_tool',\n    heading: 'Heading',\n    title: 'Description Title/Variants',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    primaryButtonLabel: 'Primary',\n    primaryButtonCallback: action('primary click'),\n    secondaryButtonLabel: 'Secondary',\n    secondaryButtonCallback: action('secondary click'),\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Dialog secondaryButtonAppearance=\"success\" {...options} />\n    </div>\n  );\n}"
      },
      "__id": "components-dialog-variants-secondarybutton-success--success",
      "args": {},
      "argTypes": {
        "onClose": {
          "name": "onClose",
          "description": "Callback for `Dialog` close event",
          "type": {
            "required": true,
            "name": "function",
            "value": "(event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void"
          },
          "table": {
            "type": {
              "summary": "(event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"small\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "heading": {
          "name": "heading",
          "description": "Dialog heading",
          "type": {
            "required": true,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "title": {
          "name": "title",
          "description": "Dialog's description title",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "description": {
          "name": "description",
          "description": "Description inside `Dialog`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "primaryButtonLabel": {
          "name": "primaryButtonLabel",
          "description": "Label of first button inside `Dialog`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "primaryButtonAppearance": {
          "name": "primaryButtonAppearance",
          "description": "Color of second button inside `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": {
              "summary": "primary"
            }
          }
        },
        "primaryButtonCallback": {
          "name": "primaryButtonCallback",
          "description": "Handler to be called when first button is clicked",
          "type": {
            "required": true,
            "name": "function",
            "value": "() => void"
          },
          "table": {
            "type": {
              "summary": "() => void"
            },
            "defaultValue": null
          }
        },
        "secondaryButtonLabel": {
          "name": "secondaryButtonLabel",
          "description": "Label of second button inside `Dialog`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "secondaryButtonAppearance": {
          "name": "secondaryButtonAppearance",
          "description": "Color of second button inside `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": {
              "summary": "basic"
            }
          }
        },
        "secondaryButtonCallback": {
          "name": "secondaryButtonCallback",
          "description": "Handler to be called when second button is clicked",
          "type": {
            "required": true,
            "name": "function",
            "value": "() => void"
          },
          "table": {
            "type": {
              "summary": "() => void"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dialog-variants-secondarybutton-transparent--transparent": {
    "id": "components-dialog-variants-secondarybutton-transparent--transparent",
    "kind": "Components/Dialog/Variants/SecondaryButton/Transparent",
    "name": "Transparent",
    "story": "Transparent",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const open = boolean('open', true);\n\n  const onClose = () => {\n    updateKnob('open', false);\n  };\n\n  const options = {\n    open,\n    onClose,\n    icon: 'pan_tool',\n    heading: 'Heading',\n    title: 'Description Title/Variants',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    primaryButtonLabel: 'Primary',\n    primaryButtonCallback: action('primary click'),\n    secondaryButtonLabel: 'Secondary',\n    secondaryButtonCallback: action('secondary click'),\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Dialog secondaryButtonAppearance=\"transparent\" {...options} />\n    </div>\n  );\n}"
      },
      "__id": "components-dialog-variants-secondarybutton-transparent--transparent",
      "args": {},
      "argTypes": {
        "onClose": {
          "name": "onClose",
          "description": "Callback for `Dialog` close event",
          "type": {
            "required": true,
            "name": "function",
            "value": "(event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void"
          },
          "table": {
            "type": {
              "summary": "(event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"small\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "heading": {
          "name": "heading",
          "description": "Dialog heading",
          "type": {
            "required": true,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "title": {
          "name": "title",
          "description": "Dialog's description title",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "description": {
          "name": "description",
          "description": "Description inside `Dialog`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "primaryButtonLabel": {
          "name": "primaryButtonLabel",
          "description": "Label of first button inside `Dialog`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "primaryButtonAppearance": {
          "name": "primaryButtonAppearance",
          "description": "Color of second button inside `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": {
              "summary": "primary"
            }
          }
        },
        "primaryButtonCallback": {
          "name": "primaryButtonCallback",
          "description": "Handler to be called when first button is clicked",
          "type": {
            "required": true,
            "name": "function",
            "value": "() => void"
          },
          "table": {
            "type": {
              "summary": "() => void"
            },
            "defaultValue": null
          }
        },
        "secondaryButtonLabel": {
          "name": "secondaryButtonLabel",
          "description": "Label of second button inside `Dialog`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "secondaryButtonAppearance": {
          "name": "secondaryButtonAppearance",
          "description": "Color of second button inside `Dialog`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "success",
              "basic",
              "transparent"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"success\" | \"basic\" | \"transparent\""
            },
            "defaultValue": {
              "summary": "basic"
            }
          }
        },
        "secondaryButtonCallback": {
          "name": "secondaryButtonCallback",
          "description": "Handler to be called when second button is clicked",
          "type": {
            "required": true,
            "name": "function",
            "value": "() => void"
          },
          "table": {
            "type": {
              "summary": "() => void"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-all--all": {
    "id": "components-dropdown-all--all",
    "kind": "Components/Dropdown/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const triggerSize = select('trigger size', ['regular', 'tiny'], undefined);\n\n  const align = select('align', ['right', 'left'], undefined);\n\n  const optionType = select('option type', ['DEFAULT', 'WITH_ICON', 'WITH_META', 'ICON_WITH_META'], undefined);\n\n  const error = boolean('error', false);\n\n  const disabled = boolean('disabled', false);\n\n  const menu = boolean('menu', false);\n\n  const withSearch = boolean('withSearch', false);\n\n  const withCheckbox = boolean('withCheckbox', false);\n\n  const showApplyButton = boolean('show apply button', false);\n\n  const closeOnSelect = boolean('close on select', true);\n\n  const icon = text('icon', '');\n\n  const placeholder = text('placeholder', 'Select');\n\n  const selectAllLabel = text('select all label', 'Select All');\n\n  const inlineLabel = text('inline label', '');\n\n  const labelLimit = number('trigger label limit', 2);\n\n  const maxHeight = number('maximum height', 200);\n\n  const loadersCount = number('Loaders Count', 10);\n\n  const getSearchedOptions = (options: any, searchTerm: string) => {\n    const result = options.filter((option: any) => option.label.toLowerCase().includes(searchTerm.toLowerCase()));\n    return result;\n  };\n\n  const fetchOptions = (searchTerm: string) => {\n    const searchedOptions = searchTerm ? getSearchedOptions(dropdownOptions, searchTerm) : dropdownOptions;\n    return new Promise<any>((resolve) => {\n      window.setTimeout(() => {\n        resolve({\n          searchTerm,\n          options: searchedOptions,\n          count: searchedOptions.length,\n        });\n      }, 1000);\n    });\n  };\n\n  const customLabel = (selectedLength: number, totalOptions?: number) => {\n    const optionsLength = totalOptions ? totalOptions : dropdownOptions.length;\n    return `${selectedLength} of ${optionsLength} are selected`;\n  };\n\n  const onChangeHandler = (selectedValues: any[]) => {\n    return action(`selected values length: ${selectedValues}`)();\n  };\n\n  const onClose = (selectedValues: any[]) => {\n    return action(`dropdown closed with selected values: ${selectedValues}`)();\n  };\n\n  const props = {\n    triggerSize,\n    align,\n    icon,\n    error,\n    placeholder,\n    inlineLabel,\n    disabled,\n    menu,\n    closeOnSelect,\n    withSearch,\n    withCheckbox,\n    showApplyButton,\n    maxHeight,\n    loadersCount,\n    onClose,\n    fetchOptions,\n    optionType,\n    selectAllLabel,\n    triggerOptions: { customLabel, labelLimit },\n    options: dropdownOptions,\n    onChange: onChangeHandler,\n  };\n\n  const key = `checkbox${withCheckbox} applyButton:${showApplyButton} search:${withSearch}`;\n\n  return (\n    <div style={{ width: '170px', marginLeft: '128px' }} key={key}>\n      <Dropdown {...props} />\n    </div>\n  );\n}"
      },
      "__id": "components-dropdown-all--all",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-dropdown-as-menu--dropdown-as-menu": {
    "id": "components-dropdown-dropdown-as-menu--dropdown-as-menu",
    "kind": "Components/Dropdown/Dropdown As Menu",
    "name": "Dropdown As Menu",
    "story": "Dropdown As Menu",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <div className=\"d-flex w-50\">\n    <Dropdown options={options} menu={true} className=\"mr-5\" align=\"right\" maxWidth={130} />\n    <Dropdown options={options} menu={true} align=\"left\" className=\"mr-5\" maxWidth={130} />\n  </div>\n)"
      },
      "__id": "components-dropdown-dropdown-as-menu--dropdown-as-menu",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-dropdown-items-with-checkbox--dropdown-items-with-checkbox": {
    "id": "components-dropdown-dropdown-items-with-checkbox--dropdown-items-with-checkbox",
    "kind": "Components/Dropdown/Dropdown Items With Checkbox",
    "name": "Dropdown Items With Checkbox",
    "story": "Dropdown Items With Checkbox",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Dropdown options={options} withCheckbox={true} className=\"w-25\" placeholder=\"Select\" />\n)"
      },
      "__id": "components-dropdown-dropdown-items-with-checkbox--dropdown-items-with-checkbox",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-dropdown-items-with-icon--dropdown-items-with-icon": {
    "id": "components-dropdown-dropdown-items-with-icon--dropdown-items-with-icon",
    "kind": "Components/Dropdown/Dropdown Items With Icon",
    "name": "Dropdown Items With Icon",
    "story": "Dropdown Items With Icon",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Dropdown options={options} optionType=\"WITH_ICON\" className=\"w-25\" placeholder=\"Select status\" />\n)"
      },
      "__id": "components-dropdown-dropdown-items-with-icon--dropdown-items-with-icon",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-dropdown-items-with-sub-info--dropdown-items-with-sub-info": {
    "id": "components-dropdown-dropdown-items-with-sub-info--dropdown-items-with-sub-info",
    "kind": "Components/Dropdown/Dropdown Items With Sub Info",
    "name": "Dropdown Items With Sub Info",
    "story": "Dropdown Items With Sub Info",
    "parameters": {
      "__id": "components-dropdown-dropdown-items-with-sub-info--dropdown-items-with-sub-info",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-dropdown-options-less-than-50--dropdown-options-less-than-50": {
    "id": "components-dropdown-dropdown-options-less-than-50--dropdown-options-less-than-50",
    "kind": "Components/Dropdown/Dropdown Options Less Than 50",
    "name": "Dropdown Options Less Than 50",
    "story": "Dropdown Options Less Than 50",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Dropdown options={options} withCheckbox={true} withSearch={true} className=\"w-25\" placeholder=\"Select\" />\n)"
      },
      "__id": "components-dropdown-dropdown-options-less-than-50--dropdown-options-less-than-50",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-dropdown-options-more-than-50--dropdown-options-more-than-50": {
    "id": "components-dropdown-dropdown-options-more-than-50--dropdown-options-more-than-50",
    "kind": "Components/Dropdown/Dropdown Options More Than 50",
    "name": "Dropdown Options More Than 50",
    "story": "Dropdown Options More Than 50",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const getSearchedOptions = (opts: DropdownProps['options'], searchTerm: string) => {\n    const result = opts.filter((option) => option.label.toLowerCase().includes(searchTerm.toLowerCase()));\n    return result;\n  };\n\n  const fetchOptions = (searchTerm: string) => {\n    const searchedOptions = searchTerm ? getSearchedOptions(options, searchTerm) : options;\n    return new Promise<any>((resolve) => {\n      window.setTimeout(() => {\n        resolve({\n          searchTerm,\n          options: searchedOptions,\n          count: searchedOptions.length,\n        });\n      }, 1000);\n    });\n  };\n\n  return <Dropdown fetchOptions={fetchOptions} withCheckbox={true} className=\"w-25\" placeholder=\"Select\" />;\n}"
      },
      "__id": "components-dropdown-dropdown-options-more-than-50--dropdown-options-more-than-50",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-dropdown-with-action-buttons--dropdown-with-action-buttons": {
    "id": "components-dropdown-dropdown-with-action-buttons--dropdown-with-action-buttons",
    "kind": "Components/Dropdown/Dropdown With Action Buttons",
    "name": "Dropdown With Action Buttons",
    "story": "Dropdown With Action Buttons",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Dropdown\n    options={options}\n    withSearch={true}\n    className=\"w-25\"\n    placeholder=\"Select problem\"\n    withCheckbox={true}\n    showApplyButton={true}\n  />\n)"
      },
      "__id": "components-dropdown-dropdown-with-action-buttons--dropdown-with-action-buttons",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-dropdown-with-caption--dropdown-with-caption": {
    "id": "components-dropdown-dropdown-with-caption--dropdown-with-caption",
    "kind": "Components/Dropdown/Dropdown With Caption",
    "name": "Dropdown With Caption",
    "story": "Dropdown With Caption",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <>\n    <Label withInput={true}>Area code</Label>\n    <Dropdown options={options} withSearch={true} className=\"w-25\" placeholder=\"Select an area code\" />\n    <Caption withInput={true}>If the number with this code is not available, we will use the next best match</Caption>\n  </>\n)"
      },
      "__id": "components-dropdown-dropdown-with-caption--dropdown-with-caption",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-dropdown-with-icon--dropdown-with-icon": {
    "id": "components-dropdown-dropdown-with-icon--dropdown-with-icon",
    "kind": "Components/Dropdown/Dropdown With Icon",
    "name": "Dropdown With Icon",
    "story": "Dropdown With Icon",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Dropdown options={options} icon=\"location_on\" className=\"w-25\" placeholder=\"Select state\" staticLimit={100} />\n)"
      },
      "__id": "components-dropdown-dropdown-with-icon--dropdown-with-icon",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-gender--gender": {
    "id": "components-dropdown-gender--gender",
    "kind": "Components/Dropdown/Gender",
    "name": "Gender",
    "story": "Gender",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <div className=\"mb-10 w-25\">\n    <Label withInput={true}>Gender</Label>\n    <Dropdown options={options} />\n  </div>\n)"
      },
      "__id": "components-dropdown-gender--gender",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-label-position-in-dropdown--label-position-in-dropdown": {
    "id": "components-dropdown-label-position-in-dropdown--label-position-in-dropdown",
    "kind": "Components/Dropdown/Label Position In Dropdown",
    "name": "Label Position In Dropdown",
    "story": "Label Position In Dropdown",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <div>\n    <div className=\"w-25 mb-9\">\n      <Label withInput={true}>Status</Label>\n      <Dropdown options={options} className=\"w-100\" withCheckbox={true} />\n    </div>\n    <Dropdown options={options} className=\"w-25\" inlineLabel=\"Status\" withCheckbox={true} />\n  </div>\n)"
      },
      "__id": "components-dropdown-label-position-in-dropdown--label-position-in-dropdown",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-languages--languages": {
    "id": "components-dropdown-languages--languages",
    "kind": "Components/Dropdown/Languages",
    "name": "Languages",
    "story": "Languages",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <div className=\"mb-11 w-25\">\n    <Label withInput={true}>Select Language</Label>\n    <Dropdown options={options} />\n  </div>\n)"
      },
      "__id": "components-dropdown-languages--languages",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-search-in-dropdown--search-in-dropdown": {
    "id": "components-dropdown-search-in-dropdown--search-in-dropdown",
    "kind": "Components/Dropdown/Search In Dropdown",
    "name": "Search In Dropdown",
    "story": "Search In Dropdown",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Dropdown options={options} withSearch={true} className=\"w-25\" placeholder=\"Select barriers\" />\n)"
      },
      "__id": "components-dropdown-search-in-dropdown--search-in-dropdown",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-standard-dropdown--standard-dropdown": {
    "id": "components-dropdown-standard-dropdown--standard-dropdown",
    "kind": "Components/Dropdown/Standard Dropdown",
    "name": "Standard Dropdown",
    "story": "Standard Dropdown",
    "parameters": {
      "storySource": {
        "source": "() => <Dropdown options={options} className=\"w-25\" placeholder=\"Status\" />"
      },
      "__id": "components-dropdown-standard-dropdown--standard-dropdown",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-status-without-label--status-without-label": {
    "id": "components-dropdown-status-without-label--status-without-label",
    "kind": "Components/Dropdown/Status Without Label",
    "name": "Status Without Label",
    "story": "Status Without Label",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <div className=\"mb-11 w-25\">\n    <Dropdown options={options} placeholder=\"All Categories\" />\n  </div>\n)"
      },
      "__id": "components-dropdown-status-without-label--status-without-label",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-variants-align--align": {
    "id": "components-dropdown-variants-align--align",
    "kind": "Components/Dropdown/Variants/Align",
    "name": "Align",
    "story": "Align",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const dropdownAlignments: DropdownAlign[] = ['right', 'left'];\n\n  return (\n    <div style={{ display: 'flex', minHeight: '280px' }}>\n      {dropdownAlignments.map((alignment, ind) => {\n        return (\n          <div key={ind} style={{ marginRight: '20%' }}>\n            <Text weight=\"strong\">{`Towards ${alignment.charAt(0).toUpperCase() + alignment.slice(1)}`}</Text>\n            <br />\n            <br />\n            <Dropdown align={alignment} options={storyOptions} menu={true} />\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-dropdown-variants-align--align",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-variants-controlleddropdown-bulk-multi-select-with-apply-button--bulk-multi-select-with-apply-button": {
    "id": "components-dropdown-variants-controlleddropdown-bulk-multi-select-with-apply-button--bulk-multi-select-with-apply-button",
    "kind": "Components/Dropdown/Variants/ControlledDropdown/Bulk Multi Select With Apply Button",
    "name": "Bulk Multi Select With Apply Button",
    "story": "Bulk Multi Select With Apply Button",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [selected, setSelected] = React.useState([dropdownOptions[3]]);\n  const [open, setOpen] = React.useState(false);\n\n  const getSearchedOptions = (options: any, searchTerm: string) => {\n    const result = options.filter((option: any) => option.label.toLowerCase().includes(searchTerm.toLowerCase()));\n    return result;\n  };\n\n  const fetchOptions = (searchTerm: string) => {\n    const searchedOptions = searchTerm ? getSearchedOptions(dropdownOptions, searchTerm) : dropdownOptions;\n    return new Promise<any>((resolve) => {\n      window.setTimeout(() => {\n        resolve({\n          searchTerm,\n          options: searchedOptions,\n          count: searchedOptions.length,\n        });\n      }, 1000);\n    });\n  };\n\n  const onChangeHandler = (selectedValues: any[]) => {\n    return action(`selected values length: ${selectedValues}`)();\n  };\n\n  const onPopperToggle = (popperIsOpen: boolean) => {\n    setOpen(popperIsOpen);\n  };\n\n  const onUpdate = (type: EventType, _options?: any, recentSelected?: any) => {\n    switch (type) {\n      case 'apply-selected':\n        setSelected(recentSelected);\n        return;\n      case 'cancel-selected':\n        return action('cancel event triggered')();\n      default:\n        return;\n    }\n  };\n\n  return (\n    <div className=\"w-25\">\n      <Text weight=\"strong\">{'Options > 50'}</Text>\n      <br />\n      <br />\n      <Dropdown\n        fetchOptions={fetchOptions}\n        onPopperToggle={onPopperToggle}\n        onUpdate={onUpdate}\n        selected={selected}\n        onChange={onChangeHandler}\n        withCheckbox={true}\n        showApplyButton={true}\n        open={open}\n      />\n    </div>\n  );\n}"
      },
      "__id": "components-dropdown-variants-controlleddropdown-bulk-multi-select-with-apply-button--bulk-multi-select-with-apply-button",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-variants-controlleddropdown-multi-select--multi-select": {
    "id": "components-dropdown-variants-controlleddropdown-multi-select--multi-select",
    "kind": "Components/Dropdown/Variants/ControlledDropdown/Multi Select",
    "name": "Multi Select",
    "story": "Multi Select",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [selectedMoreThan50, setSelectedMoreThan50] = React.useState([dropdownOptions[3]]);\n  const [selectedLessThan50, setSelectedLessThan50] = React.useState([dropdownOptions[3]]);\n\n  const getSearchedOptions = (options: any, searchTerm: string) => {\n    const result = options.filter((option: any) => option.label.toLowerCase().includes(searchTerm.toLowerCase()));\n    return result;\n  };\n\n  const fetchOptions = (searchTerm: string) => {\n    const searchedOptions = searchTerm ? getSearchedOptions(dropdownOptions, searchTerm) : dropdownOptions;\n    return new Promise<any>((resolve) => {\n      window.setTimeout(() => {\n        resolve({\n          searchTerm,\n          options: searchedOptions,\n          count: searchedOptions.length,\n        });\n      }, 1000);\n    });\n  };\n\n  const onChangeHandler = (selectedValues: any[]) => {\n    return action(`selected values length: ${selectedValues}`)();\n  };\n\n  const onSelectLessThan50 = (type: EventType, option?: any) => {\n    switch (type) {\n      case 'select-all':\n        const selectedDisabledArray = selectedLessThan50.filter((item) => item.disabled);\n        const selectedOptions = [\n          ...dropdownOptions.slice(0, 50).filter((item) => !item.disabled),\n          ...selectedDisabledArray,\n        ];\n\n        setSelectedLessThan50(selectedOptions);\n        return;\n      case 'deselect-all':\n        const selectedArr = selectedLessThan50.filter((item) => item.disabled);\n        setSelectedLessThan50(selectedArr);\n        return;\n      case 'select-option':\n        setSelectedLessThan50(selectedLessThan50.concat(option));\n        return;\n      case 'deselect-option':\n        const selectedArray = selectedLessThan50.slice();\n        const index = selectedArray.findIndex((item) => item.value === option.value);\n        selectedArray.splice(index, 1);\n        setSelectedLessThan50(selectedArray);\n      default:\n        return;\n    }\n  };\n\n  const onSelectMoreThan50 = (type: EventType, option?: any) => {\n    switch (type) {\n      case 'select-option':\n        setSelectedMoreThan50(selectedMoreThan50.concat(option));\n        return;\n      case 'deselect-option':\n        const selectedArray = selectedMoreThan50.slice();\n        const index = selectedArray.findIndex((item) => item.value === option.value);\n        selectedArray.splice(index, 1);\n        setSelectedMoreThan50(selectedArray);\n        return;\n      case 'clear-all':\n        const selectedArr = selectedMoreThan50.filter((item) => item.disabled);\n        setSelectedMoreThan50(selectedArr);\n        return;\n      default:\n        return;\n    }\n  };\n\n  const onClose = (options: any[], _name: any) => {\n    return action(`dropdown closed with selected values: ${options}`)();\n  };\n\n  return (\n    <div className=\"d-flex\">\n      <div style={{ width: '170px' }}>\n        <Text weight=\"strong\">{'Options > 50'}</Text>\n        <br />\n        <br />\n        <Dropdown\n          fetchOptions={fetchOptions}\n          onUpdate={onSelectMoreThan50}\n          selected={selectedMoreThan50}\n          onChange={onChangeHandler}\n          withCheckbox={true}\n        />\n      </div>\n      <div style={{ width: '170px', marginLeft: '128px' }}>\n        <Text weight=\"strong\">{'Options <= 50'}</Text>\n        <br />\n        <br />\n        <Dropdown\n          options={dropdownOptions.slice(0, 50)}\n          onUpdate={onSelectLessThan50}\n          selected={selectedLessThan50}\n          onChange={onChangeHandler}\n          onClose={onClose}\n          withCheckbox={true}\n          withSearch={true}\n        />\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-dropdown-variants-controlleddropdown-multi-select--multi-select",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-variants-controlleddropdown-multi-select-with-apply-button--multi-select-with-apply-button": {
    "id": "components-dropdown-variants-controlleddropdown-multi-select-with-apply-button--multi-select-with-apply-button",
    "kind": "Components/Dropdown/Variants/ControlledDropdown/Multi Select With Apply Button",
    "name": "Multi Select With Apply Button",
    "story": "Multi Select With Apply Button",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [selected, setSelected] = React.useState([dropdownOptions[3]]);\n  const [open, setOpen] = React.useState(false);\n\n  const onChangeHandler = (selectedValues: any[]) => {\n    return action(`selected values length: ${selectedValues}`)();\n  };\n\n  const onUpdate = (type: EventType, _options?: any, recentSelected?: any) => {\n    switch (type) {\n      case 'apply-selected':\n        setOpen(!open);\n        setSelected(recentSelected);\n        return;\n      case 'cancel-selected':\n        setOpen(!open);\n        return action('cancel event triggered')();\n      default:\n        return;\n    }\n  };\n\n  const onPopperToggle = (isPopperOpen: boolean) => {\n    setOpen(isPopperOpen);\n  };\n\n  return (\n    <div className=\"w-25\">\n      <Text weight=\"strong\">{'Options <= 50'}</Text>\n      <br />\n      <br />\n      <Dropdown\n        options={dropdownOptions.slice(0, 50)}\n        onPopperToggle={onPopperToggle}\n        onUpdate={onUpdate}\n        selected={selected}\n        onChange={onChangeHandler}\n        withCheckbox={true}\n        showApplyButton={true}\n        open={open}\n      />\n    </div>\n  );\n}"
      },
      "__id": "components-dropdown-variants-controlleddropdown-multi-select-with-apply-button--multi-select-with-apply-button",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-variants-controlleddropdown-single-select--single-select": {
    "id": "components-dropdown-variants-controlleddropdown-single-select--single-select",
    "kind": "Components/Dropdown/Variants/ControlledDropdown/Single Select",
    "name": "Single Select",
    "story": "Single Select",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [selected, setSelected] = React.useState([dropdownOptions[3]]);\n  const [open, setOpen] = React.useState(false);\n\n  const getSearchedOptions = (options: any, searchTerm: string) => {\n    const result = options.filter((option: any) => option.label.toLowerCase().includes(searchTerm.toLowerCase()));\n    return result;\n  };\n\n  const fetchOptions = (searchTerm: string) => {\n    const searchedOptions = searchTerm ? getSearchedOptions(dropdownOptions, searchTerm) : dropdownOptions;\n    return new Promise<any>((resolve) => {\n      window.setTimeout(() => {\n        resolve({\n          searchTerm,\n          options: searchedOptions,\n          count: searchedOptions.length,\n        });\n      }, 1000);\n    });\n  };\n\n  const onChangeHandler = (selectedValues: any[]) => {\n    return action(`selected values length: ${selectedValues}`)();\n  };\n\n  const onUpdate = (_type: EventType, option?: any) => {\n    window.setTimeout(() => {\n      setSelected([option]);\n    }, 2000);\n  };\n\n  const onPopperToggle = (updatedOpen: boolean) => {\n    setOpen(updatedOpen);\n  };\n\n  return (\n    <div className=\"w-25 mb-13\">\n      <Dropdown\n        fetchOptions={fetchOptions}\n        onUpdate={onUpdate}\n        selected={selected}\n        onChange={onChangeHandler}\n        onPopperToggle={onPopperToggle}\n        open={open}\n      />\n    </div>\n  );\n}"
      },
      "__id": "components-dropdown-variants-controlleddropdown-single-select--single-select",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-variants-custom-trigger--custom-trigger": {
    "id": "components-dropdown-variants-custom-trigger--custom-trigger",
    "kind": "Components/Dropdown/Variants/Custom Trigger",
    "name": "Custom Trigger",
    "story": "Custom Trigger",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const onChange = (e: any) => {\n    e.preventDefault();\n  };\n\n  const customTriggerFunc = (label: string) => {\n    return <Input type=\"text\" name=\"input\" value={label} onChange={onChange} />;\n  };\n\n  return (\n    <div style={{ display: 'flex', minHeight: '280px' }}>\n      <div style={{ marginRight: '20%', width: '256px' }}>\n        <Dropdown options={storyOptions} triggerOptions={{ customTrigger: customTriggerFunc }} />\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-dropdown-variants-custom-trigger--custom-trigger",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-variants-cutsom-option--cutsom-option": {
    "id": "components-dropdown-variants-cutsom-option--cutsom-option",
    "kind": "Components/Dropdown/Variants/Cutsom Option",
    "name": "Cutsom Option",
    "story": "Cutsom Option",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const optionStyle = {\n    paddingRight: 12,\n    paddingLeft: 12,\n    paddingTop: 6,\n    paddingBottom: 6,\n    display: 'flex',\n    cursor: 'pointer',\n    justifyContent: 'space-between',\n  };\n\n  const customOptionRenderer = (props: any) => {\n    const { label, icon } = props.optionData;\n    return (\n      <div style={optionStyle}>\n        <Text>{label}</Text>\n        <Icon name={props.selected ? 'done' : icon} />\n      </div>\n    );\n  };\n\n  const customCheckboxRenderer = (props: any) => {\n    const { label } = props.optionData;\n\n    return (\n      <div style={optionStyle}>\n        <Checkbox checked={props.selected} onChange={props.onChange} label={label} />\n        {props.selected && <Icon name=\"done\" />}\n      </div>\n    );\n  };\n\n  return (\n    <div style={{ display: 'flex', minHeight: '280px' }}>\n      <div style={{ marginRight: '20%', width: '200px' }}>\n        <Text weight=\"strong\">Without Checkbox</Text> <br />\n        <br />\n        <Dropdown options={storyOptions} optionRenderer={customOptionRenderer} />\n      </div>\n      <div style={{ marginRight: '20%', width: '200px' }}>\n        <Text weight=\"strong\">With Checkbox</Text> <br />\n        <br />\n        <Dropdown options={storyOptions} optionRenderer={customCheckboxRenderer} withCheckbox={true} />\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-dropdown-variants-cutsom-option--cutsom-option",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-variants-disabled--disabled": {
    "id": "components-dropdown-variants-disabled--disabled",
    "kind": "Components/Dropdown/Variants/Disabled",
    "name": "Disabled",
    "story": "Disabled",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const disabledStates = [true, false];\n\n  return (\n    <div style={{ display: 'flex', minHeight: '280px' }}>\n      {disabledStates.map((state, ind) => {\n        return (\n          <div className=\"w-25\" key={ind} style={{ marginRight: '5%' }}>\n            <Text weight=\"strong\">{state ? 'Disabled' : 'Enabled'}</Text> <br />\n            <br />\n            <Dropdown disabled={state} options={storyOptions} placeholder={'Select'} />\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-dropdown-variants-disabled--disabled",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-variants-disabled-option--disabled-option": {
    "id": "components-dropdown-variants-disabled-option--disabled-option",
    "kind": "Components/Dropdown/Variants/Disabled Option",
    "name": "Disabled Option",
    "story": "Disabled Option",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const onClose = (options: any) => {\n    return action(`dropdown closed with selected values: ${options}`)();\n  };\n\n  const onChangeHandler = (selectedValues: any[]) => {\n    return action(`selected values length: ${selectedValues}`)();\n  };\n\n  return (\n    <div className=\"d-flex\">\n      <div className=\"mr-9 w-25\">\n        <Text weight=\"strong\">{'With Checkbox'}</Text>\n        <br />\n        <br />\n        <Dropdown\n          withCheckbox={true}\n          withSelectAll={false}\n          options={disabledStoryOptions}\n          placeholder={'Select'}\n          onChange={onChangeHandler}\n          onClose={onClose}\n        />\n      </div>\n      <div className=\"mr-9 w-25\">\n        <Text weight=\"strong\">{'Without Checkbox'}</Text>\n        <br />\n        <br />\n        <Dropdown options={disabledStoryOptions} placeholder={'Select'} onChange={onChangeHandler} onClose={onClose} />\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-dropdown-variants-disabled-option--disabled-option",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-variants-loading-type--loading-type": {
    "id": "components-dropdown-variants-loading-type--loading-type",
    "kind": "Components/Dropdown/Variants/Loading Type",
    "name": "Loading Type",
    "story": "Loading Type",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const optionTypes = ['DEFAULT', 'WITH_ICON', 'WITH_META', 'ICON_WITH_META'];\n\n  const style = {\n    display: 'flex',\n    'flex-direction': 'column',\n    alignItems: 'center',\n    marginRight: '5%',\n    width: '150px',\n  };\n\n  return (\n    <div style={{ display: 'flex', flexWrap: 'wrap', minHeight: '270px' }}>\n      {optionTypes.map((type, ind) => {\n        return (\n          <div style={style} key={ind}>\n            <Text weight=\"strong\">{labelMapping[type]}</Text>\n            <br />\n            <Dropdown options={storyOptions.slice(0, 5)} optionType={type as OptionType} loading={true} />\n          </div>\n        );\n      })}\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', width: '150px' }}>\n        <Text weight=\"strong\">{'Checkboxes'}</Text>\n        <br />\n        <Dropdown options={storyOptions.slice(0, 5)} withCheckbox={true} loading={true} />\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-dropdown-variants-loading-type--loading-type",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-variants-multi-options--multi-options": {
    "id": "components-dropdown-variants-multi-options--multi-options",
    "kind": "Components/Dropdown/Variants/Multi Options",
    "name": "Multi Options",
    "story": "Multi Options",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const onClose = (options: any) => {\n    return action(`dropdown closed with selected values: ${options}`)();\n  };\n\n  const onChangeHandler = (selectedValues: any[]) => {\n    return action(`selected values length: ${selectedValues}`)();\n  };\n\n  return (\n    <div className=\"d-flex\">\n      <div className=\"mr-9 w-25\">\n        <Text weight=\"strong\">{'With Apply Button'}</Text>\n        <br />\n        <br />\n        <Dropdown\n          maxHeight={180}\n          withCheckbox={true}\n          showApplyButton={true}\n          options={storyOptions}\n          placeholder={'Select'}\n          onChange={onChangeHandler}\n          onClose={onClose}\n        />\n      </div>\n      <div className=\"mr-9 w-25\">\n        <Text weight=\"strong\">{'Without Apply Button'}</Text>\n        <br />\n        <br />\n        <Dropdown\n          withCheckbox={true}\n          options={storyOptions}\n          placeholder={'Select'}\n          onChange={onChangeHandler}\n          onClose={onClose}\n        />\n      </div>\n      <div className=\"mr-9 w-25\">\n        <Text weight=\"strong\">{'Without Select All (Options <= 50)'}</Text>\n        <br />\n        <br />\n        <Dropdown\n          withCheckbox={true}\n          withSelectAll={false}\n          options={storyOptions}\n          placeholder={'Select'}\n          onChange={onChangeHandler}\n          onClose={onClose}\n        />\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-dropdown-variants-multi-options--multi-options",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-variants-option-type--option-type": {
    "id": "components-dropdown-variants-option-type--option-type",
    "kind": "Components/Dropdown/Variants/Option Type",
    "name": "Option Type",
    "story": "Option Type",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const optionTypes = ['DEFAULT', 'WITH_ICON', 'WITH_META', 'ICON_WITH_META'];\n\n  return (\n    <div className=\"d-flex\">\n      {optionTypes.map((type, ind) => {\n        return (\n          <div className=\"d-flex flex-column mr-9 w-25\" key={ind}>\n            <Text weight=\"strong\">{labelMapping[type]}</Text>\n            <br />\n            <Dropdown options={optionsMapping[type].slice(0, 3)} />\n          </div>\n        );\n      })}\n      <div className=\"d-flex flex-column w-25\">\n        <Text weight=\"strong\">{'Checkboxes'}</Text>\n        <br />\n        <Dropdown options={storyOptions.slice(0, 3)} withCheckbox={true} />\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-dropdown-variants-option-type--option-type",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-variants-options-wrap--options-wrap": {
    "id": "components-dropdown-variants-options-wrap--options-wrap",
    "kind": "Components/Dropdown/Variants/Options Wrap",
    "name": "Options Wrap",
    "story": "Options Wrap",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div style={{ display: 'flex', minHeight: '240px' }}>\n      <div style={{ marginRight: '5%', width: '128px' }}>\n        <Text weight=\"strong\">{'Options Trimmed'}</Text> <br />\n        <br />\n        <Dropdown options={storyWrapOptions} placeholder={'Select'} />\n      </div>\n      <div style={{ marginRight: '5%', width: '128px' }}>\n        <Text weight=\"strong\">{'Options Wrapped'}</Text> <br />\n        <br />\n        <Dropdown options={storyWrapOptions} placeholder={'Select'} truncateOption={false} />\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-dropdown-variants-options-wrap--options-wrap",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-variants-pre-selection--pre-selection": {
    "id": "components-dropdown-variants-pre-selection--pre-selection",
    "kind": "Components/Dropdown/Variants/Pre Selection",
    "name": "Pre Selection",
    "story": "Pre Selection",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const BooleanValue = [true, false];\n\n  const getSearchedOptions = (options: any, searchTerm: string) => {\n    const result = options.filter((option: any) => option.label.toLowerCase().includes(searchTerm.toLowerCase()));\n    return result;\n  };\n\n  const fetchOptions = (searchTerm: string) => {\n    const searchedOptions = searchTerm ? getSearchedOptions(preSelectedOptions, searchTerm) : preSelectedOptions;\n    return new Promise<any>((resolve) => {\n      window.setTimeout(() => {\n        resolve({\n          searchTerm,\n          options: searchedOptions,\n          count: searchedOptions.length,\n        });\n      }, 1000);\n    });\n  };\n\n  return (\n    <div style={{ display: 'flex', minHeight: '280px' }}>\n      {BooleanValue.map((value, ind) => {\n        const options = value ? preSelectedOptions : preSelectedOptions.slice(0, 50);\n\n        return (\n          <div key={ind} style={{ marginRight: '10%', width: '170px' }}>\n            <Text weight=\"strong\">{value ? 'Options > 50 ' : 'Options <= 50'}</Text>\n            <br />\n            <br />\n            <Dropdown withCheckbox={true} options={options} {...(value && { fetchOptions })} />\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-dropdown-variants-pre-selection--pre-selection",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-variants-search--search": {
    "id": "components-dropdown-variants-search--search",
    "kind": "Components/Dropdown/Variants/Search",
    "name": "Search",
    "story": "Search",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div className=\"d-flex\">\n      <div className=\"mr-9 w-25\">\n        <Text weight=\"strong\">{'Search'}</Text>\n        <br />\n        <br />\n        <Dropdown withSearch={true} options={storyOptions} />\n      </div>\n      <div className=\"mr-9 w-25\">\n        <Text weight=\"strong\">{'Loading'}</Text>\n        <br />\n        <br />\n        <Dropdown withSearch={true} loading={true} />\n      </div>\n      <div className=\"mr-9 w-25\">\n        <Text weight=\"strong\">{'No Result'}</Text>\n        <br />\n        <br />\n        <Dropdown withSearch={true} noResultMessage={'No result found'} />\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-dropdown-variants-search--search",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-variants-sections--sections": {
    "id": "components-dropdown-variants-sections--sections",
    "kind": "Components/Dropdown/Variants/Sections",
    "name": "Sections",
    "story": "Sections",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const options: any[] = [];\n\n  for (let i = 1; i <= 10; i++) {\n    options.push({\n      label: `Option ${i}`,\n      value: `Option ${i}`,\n      group: 'Group',\n    });\n  }\n  const BooleanValue = [true, false];\n\n  return (\n    <div className=\"d-flex\">\n      {BooleanValue.map((value, index) => {\n        return (\n          <div key={index} className=\"d-flex flex-column align-items-center\">\n            <Text weight=\"strong\">{value ? ' Multi Select' : 'Single Select'}</Text>\n            <br />\n            <div className=\"d-flex\">\n              <div className=\"d-flex flex-column align-items-center mr-7\" style={{ width: '128px' }}>\n                <Text weight=\"strong\">{'With Sections'}</Text>\n                <br />\n                <Dropdown options={options} withCheckbox={value} />\n              </div>\n              <div className=\"d-flex flex-column align-items-center mr-7\" style={{ width: '128px' }}>\n                <Text weight=\"strong\">{'Without Sections'}</Text> <br />\n                <Dropdown options={storyOptions} withCheckbox={value} />\n              </div>\n            </div>\n            <br />\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-dropdown-variants-sections--sections",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-variants-size--size": {
    "id": "components-dropdown-variants-size--size",
    "kind": "Components/Dropdown/Variants/Size",
    "name": "Size",
    "story": "Size",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const sizes: Size[] = ['tiny', 'regular'];\n\n  return (\n    <div className=\"d-flex\">\n      {sizes.map((dropdownSize, ind) => {\n        return (\n          <div key={ind} className=\"mr-8 w-25\">\n            <Text weight=\"strong\">{dropdownSize.charAt(0).toUpperCase() + dropdownSize.slice(1)}</Text> <br />\n            <br />\n            <Dropdown triggerSize={dropdownSize} options={storyOptions} placeholder={'Select'} />\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-dropdown-variants-size--size",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-variants-static-limit--static-limit": {
    "id": "components-dropdown-variants-static-limit--static-limit",
    "kind": "Components/Dropdown/Variants/Static Limit",
    "name": "Static Limit",
    "story": "Static Limit",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const BooleanValue = [true, false];\n\n  const getSearchedOptions = (options: any, searchTerm: string) => {\n    const result = options.filter((option: any) => option.label.toLowerCase().includes(searchTerm.toLowerCase()));\n    return result;\n  };\n\n  const fetchOptions = (searchTerm: string) => {\n    const searchedOptions = searchTerm ? getSearchedOptions(dropdownOptions, searchTerm) : dropdownOptions;\n    return new Promise<any>((resolve) => {\n      window.setTimeout(() => {\n        resolve({\n          searchTerm,\n          options: searchedOptions,\n          count: searchedOptions.length,\n        });\n      }, 1000);\n    });\n  };\n\n  return (\n    <div style={{ display: 'flex', minHeight: '280px' }}>\n      {BooleanValue.map((value, ind) => {\n        const options = value ? dropdownOptions : dropdownOptions.slice(0, 50);\n        return (\n          <div key={ind} style={{ marginRight: '10%', width: '200px' }}>\n            <Text weight=\"strong\">{value ? 'Options length > staticLimit' : 'Options length <= staticLimit'}</Text>\n            <br />\n            <br />\n            <Dropdown withSearch={true} withCheckbox={true} options={options} {...(value && { fetchOptions })} />\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-dropdown-variants-static-limit--static-limit",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-variants-trigger-placeholder--placeholder": {
    "id": "components-dropdown-variants-trigger-placeholder--placeholder",
    "kind": "Components/Dropdown/Variants/Trigger/Placeholder",
    "name": "Placeholder",
    "story": "Placeholder",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const booleanValues = [true, false];\n\n  return (\n    <div style={{ display: 'flex', minHeight: '270px' }}>\n      {booleanValues.map((menu, ind) => {\n        return (\n          <div style={{ marginRight: '5%' }} key={ind}>\n            <Text weight=\"strong\">{!menu ? 'With Placeholder' : 'Without Placeholder'}</Text> <br />\n            <br />\n            <Dropdown menu={menu} options={storyOptions} />\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-dropdown-variants-trigger-placeholder--placeholder",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropdown-variants-trigger-state--state": {
    "id": "components-dropdown-variants-trigger-state--state",
    "kind": "Components/Dropdown/Variants/Trigger/State",
    "name": "State",
    "story": "State",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const disabled = [true, false];\n\n  return (\n    <div className=\"d-flex\" style={{ minHeight: '270px' }}>\n      <div className=\"d-flex mr-8\" style={{ flexDirection: 'column', alignItems: 'center' }}>\n        <div className=\"d-flex\">\n          {disabled.map((buttonState, ind) => {\n            return (\n              <div style={{ marginRight: '5%' }} key={ind}>\n                <Text weight=\"strong\">{buttonState ? 'Disabled' : 'Enabled'}</Text> <br />\n                <br />\n                <Dropdown icon={'events'} disabled={buttonState} options={storyOptions} placeholder={'Select'} />\n              </div>\n            );\n          })}\n        </div>\n        <br />\n        <Text weight=\"strong\">{'Icon'}</Text>\n      </div>\n      <div className=\"d-flex\" style={{ flexDirection: 'column', alignItems: 'center' }}>\n        <div className=\"d-flex\">\n          {disabled.map((buttonState, ind) => {\n            return (\n              <div className=\"mr-8\" key={ind}>\n                <Text weight=\"strong\">{buttonState ? 'Disabled' : 'Enabled'}</Text> <br />\n                <br />\n                <Dropdown inlineLabel={'label'} disabled={buttonState} options={storyOptions} placeholder={'Select'} />\n              </div>\n            );\n          })}\n        </div>\n        <br />\n        <Text weight=\"strong\">{'Label'}</Text>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-dropdown-variants-trigger-state--state",
      "args": {},
      "argTypes": {
        "selected": {
          "name": "selected",
          "description": "Array of selected options <br/>\n  **Denotes `Controlled Dropdown`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[] | undefined"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onUpdate": {
          "name": "onUpdate",
          "description": "Callback function to handle different event types in controlled dropdown <br/>\n**Event type here refers to `clicking on option` / `clicking on Clear, Cancel or Apply button`** <br/>\n**Only works if `selected` is not undefined**\n\n| EventType | options | recentSelected |\n| --- | --- | --- |\n| 'select-option' | Selected Option | undefined |\n| 'deselect-option' | Unselected Option | undefined |\n| 'select-all' | undefined | undefined |\n| 'deselect-all' | undefined | undefined |\n| 'clear-all' | undefined | undefined |\n| 'apply-selected' | Array of previously selected options | Array of recently selected options |\n| 'cancel-selected' | Array of previously selected options | Array of recently selected options |",
          "type": {
            "required": false,
            "name": "function",
            "value": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((type: EventType, options?: OptionSchema | OptionSchema[] | undefined, recentSelected?: OptionSchema[] | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "options": {
          "name": "options",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionSchema: {\n   label: string;\n   value: React.ReactText;\n   icon?: string;\n   subInfo?: string | [MetaListProps]\n    (https://innovaccer.github.io/design-system/?path=/docs/components-metalist-all--all);\n   optionType?: OptionType;\n   selected?: boolean;\n   disabled?: boolean;\n   group?: string;\n}\n</pre>\n\nOptionType: 'DEFAULT' | 'WITH\\_ICON' | 'WITH\\_META' | 'ICON\\_WITH\\_META'\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Describes Label of the option | |\n| value | Value of option | |\n| icon | Name of icon inside option | |\n| selected | Denotes default selection of option <br/>(works in case of uncontrolled component) | |\n| disabled | Disables the option, making it unable to be pressed | |\n| group | Defines group to which the option belongs | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OptionSchema[]"
          },
          "table": {
            "type": {
              "summary": "OptionSchema[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nAdds loaders inside `Dropdown` when waiting for an action to complete.\n(Loading is internally handled when options are fetched from API.)\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Unique name of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "totalOptions": {
          "name": "totalOptions",
          "description": "Count of options in `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnSelect": {
          "name": "closeOnSelect",
          "description": "Determines if dropdown closes on option selection (works in case of single select)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "triggerOptions": {
          "name": "triggerOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nTriggerProps:\n{\n    labelLimit?: number;\n    customLabel?: (selected: number, totalOptions?: number, selectedOptions?: Option[]) => string;\n    customTrigger?: (label: string) => React.ReactElement;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| labelLimit | Number of selected options <br />to be shown on `Dropdown trigger` | 2 |\n| customLabel | Callback function to change <br/>the label of trigger when options are selected | |\n| customTrigger | Adds custom trigger | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TriggerProps"
          },
          "table": {
            "type": {
              "summary": "TriggerProps"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Determines if the `Dropdown Popover` is open <br/>",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "staticLimit": {
          "name": "staticLimit",
          "description": "Static limit of options to be rendered in the Dropdown List\n\n**Max value supported: 100**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "50"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "300"
            }
          }
        },
        "onPopperToggle": {
          "name": "onPopperToggle",
          "description": "Callback function called to toggle the `Dropdown Popover`\n\ntype: 'onClick' | 'outsideClick' | 'optionClick' | 'applyClick' | 'cancelClick'\n\n**Works with `open` prop**\n\n**Type `optionClick` works in case of single select (closeOnSelect = true)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "getLabel": {
          "name": "getLabel",
          "description": "Callback to get the updated label of `Dropdown trigger`",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when selected options are updated. <br/>\n**In case of uncontrolled dropdown, it is called when user `clicks on option` /**\n**`clicks on Clear,or Apply button` while in case of controlled dropdown,**\n**it is called when selected options are updated**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any, name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any, name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback function called when dropdown is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((selected: any[], name?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((selected: any[], name?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "align": {
          "name": "align",
          "description": "Aligns the `Dropdown` left/right",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": null
          }
        },
        "noResultMessage": {
          "name": "noResultMessage",
          "description": "Display message when there is no result",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAllLabel": {
          "name": "selectAllLabel",
          "description": "Label of Select All checkbox",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "footerLabel": {
          "name": "footerLabel",
          "description": "Label of Footer inside `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "selectedSectionLabel": {
          "name": "selectedSectionLabel",
          "description": "Label for selected options section",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "applyButtonLabel": {
          "name": "applyButtonLabel",
          "description": "Label of Apply button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "cancelButtonLabel": {
          "name": "cancelButtonLabel",
          "description": "Label of Cancel button\n\n(visible in case of `withCheckbox` and `showApplyButton`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "withSearch": {
          "name": "withSearch",
          "description": "Determines if user can type to search for options (Always true for options count > staticLimit)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Determines if user can select more than one items",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withSelectAll": {
          "name": "withSelectAll",
          "description": "Determines if `Select All` option is visible\n**Applicable only in case of `withCheckbox` and `options <= staticLimit`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showApplyButton": {
          "name": "showApplyButton",
          "description": "Updates the value of selected array after apply button is clicked, applicable in case of multiple selections",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "truncateOption": {
          "name": "truncateOption",
          "description": "Trims label if it is too long",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "maxHeight": {
          "name": "maxHeight",
          "description": "Specifies max height of `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "width": {
          "name": "width",
          "description": "Adds custom width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxWidth": {
          "name": "maxWidth",
          "description": "Adds maximum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "Adds minimum width to `Dropdown Popper`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "loadersCount": {
          "name": "loadersCount",
          "description": "Number of loaders to be shown when loading is true",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "popoverOptions": {
          "name": "popoverOptions",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nPopoverOptions:\n{\n    appendToBody?: boolean;\n    hideOnReferenceEscape?: boolean;\n    boundaryElement?: Element;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| appendToBody | Appends `Dropdown` inside body element | true |\n| hideOnReferenceEscape | Hides the `Dropdown` when its reference element is outside the boundaries | true |\n| boundaryElement | Boundary of Popover | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "PopoverOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "PopoverOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "triggerSize": {
          "name": "triggerSize",
          "description": "Size of `Dropdown` trigger button",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Dropdown trigger` when no options are selected",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label inside `Dropdown trigger button`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines if `Dropdown` is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "menu": {
          "name": "menu",
          "description": "Determines if type of `dropdown` is a menu",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Determines if `Dropdown` has error",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optionRenderer": {
          "name": "optionRenderer",
          "description": "Adds custom option\n\n<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nOptionProps: {\n   optionData: Option;\n   selected: boolean;\n   active?: boolean;\n   index: number;\n   onChange?: (checked: boolean) => void;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
          },
          "table": {
            "type": {
              "summary": "((props: OptionProps) => ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>) | undefined"
            },
            "defaultValue": null
          }
        },
        "optionType": {
          "name": "optionType",
          "description": "Type of option",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "DEFAULT",
              "WITH_ICON",
              "WITH_META",
              "ICON_WITH_META"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"DEFAULT\" | \"WITH_ICON\" | \"WITH_META\" | \"ICON_WITH_META\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchOptions": {
          "name": "fetchOptions",
          "description": "Callback function to fetch options from API\n\n<pre className=\"DocPage-codeBlock\">\nfetchOptionsFunction: (searchTerm: string) => Promise<{\n      searchTerm?: string;\n      count: number,\n      option: Option[],\n}>;\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchOptionsFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchOptionsFunction | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropzone-all--all": {
    "id": "components-dropzone-all--all",
    "kind": "Components/Dropzone/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const type = select('type', ['standard', 'compressed', 'tight'], 'standard');\n\n  const formatLabel = text('formatLabel', 'Accepted formats: PDF, jpg');\n  const sizeLabel = text('sizeLabel', 'Maximum size: 25 MB');\n  const multiple = boolean('multiple', true);\n\n  const onDrop: DropzoneProps['onDrop'] = (_event, acceptedFiles) => {\n    return action(`Accepted Files: ${acceptedFiles}`)();\n  };\n\n  return (\n    <Dropzone\n      formatLabel={formatLabel}\n      sizeLabel={sizeLabel}\n      multiple={multiple}\n      type={type}\n      onDrop={onDrop}\n      sampleFileLink={\n        <Link\n          href=\"http://www.adobe.com/content/dam/Adobe/en/accessibility/pdfs/accessing-pdf-sr.pdf\"\n          download=\"Test.pdf\"\n          target=\"_blank\"\n        >\n          Download sample file\n        </Link>\n      }\n    />\n  );\n}"
      },
      "__id": "components-dropzone-all--all",
      "args": {},
      "argTypes": {
        "formatLabel": {
          "name": "formatLabel",
          "description": "Description of accepted formats in `FileUploader`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Size of `Dropzone`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "standard",
              "compressed",
              "tight"
            ]
          },
          "table": {
            "type": {
              "summary": "\"standard\" | \"compressed\" | \"tight\""
            },
            "defaultValue": {
              "summary": "\"standard\""
            }
          }
        },
        "sizeLabel": {
          "name": "sizeLabel",
          "description": "Description of maximum size in `FileUploader`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "sampleFileLink": {
          "name": "sampleFileLink",
          "description": "Link component to download sample file",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "accept": {
          "name": "accept",
          "description": "Set accepted file types.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | string[] | undefined"
          },
          "table": {
            "type": {
              "summary": "string | string[] | undefined"
            },
            "defaultValue": null
          }
        },
        "multiple": {
          "name": "multiple",
          "description": "Allow drag 'n' drop (or selection from the file dialog) of multiple files",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "preventDropOnDocument": {
          "name": "preventDropOnDocument",
          "description": "If false, allow dropped items to take over the current browser window",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "minSize": {
          "name": "minSize",
          "description": "Minimum file size (in bytes)",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "maxSize": {
          "name": "maxSize",
          "description": "Maximum file size (in bytes)",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "Infinity"
            }
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Enable/disable the dropzone",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "getFilesFromEvent": {
          "name": "getFilesFromEvent",
          "description": "Use this to provide a custom file aggregator",
          "type": {
            "required": true,
            "name": "function",
            "value": "(event: Event | DragEvent) => any"
          },
          "table": {
            "type": {
              "summary": "(event: Event | DragEvent) => any"
            },
            "defaultValue": {
              "summary": "fromEvent( ... )"
            }
          }
        },
        "onFileDialogCancel": {
          "name": "onFileDialogCancel",
          "description": "Callback for when closing the file dialog with no selection",
          "type": {
            "required": false,
            "name": "function",
            "value": "(() => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "(() => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onDragEnter": {
          "name": "onDragEnter",
          "description": "Callback for when the `dragenter` event occurs.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: DragEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: DragEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onDragLeave": {
          "name": "onDragLeave",
          "description": "Callback for when the `dragleave` event occurs",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: DragEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: DragEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onDragOver": {
          "name": "onDragOver",
          "description": "Callback for when the `dragover` event occurs",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: DragEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: DragEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onDrop": {
          "name": "onDrop",
          "description": "Callback for when the `drop` event occurs.\nNote that the `onDrop` callback will always be invoked regardless if the dropped files were accepted or rejected.\n\n<pre className=\"DocPage-codeBlock\">\nFileError: {\n   type: 'FILE_INVALID_TYPE' | 'FILE_TOO_LARGE' | 'FILE_TOO_SMALL' | 'TOO_MANY_FILES';\n   message: string;\n}\n\nFileRejection {\n  file: File;\n  errors: FileError[];\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: Event | DragEvent, acceptedFiles: File[], rejectedFiles: FileRejection[]) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: Event | DragEvent, acceptedFiles: File[], rejectedFiles: FileRejection[]) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onDropAccepted": {
          "name": "onDropAccepted",
          "description": "Callback for when the `drop` event occurs.\nNote that if no files are accepted, this callback is not invoked.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: Event | DragEvent, files: File[]) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: Event | DragEvent, files: File[]) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onDropRejected": {
          "name": "onDropRejected",
          "description": "Callback for when the `drop` event occurs.\nNote that if no files are rejected, this callback is not invoked.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: Event | DragEvent, rejectedFiles: FileRejection[]) => any) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: Event | DragEvent, rejectedFiles: FileRejection[]) => any) | undefined"
            },
            "defaultValue": null
          }
        },
        "validator": {
          "name": "validator",
          "description": "Custom validation function\nThe value must be a function that accepts File object and returns null if file should be accepted\nor error object/array of error objects if file should me rejected",
          "type": {
            "required": false,
            "name": "function",
            "value": "((file: File) => FileError | FileError[]) | undefined"
          },
          "table": {
            "type": {
              "summary": "((file: File) => FileError | FileError[]) | undefined"
            },
            "defaultValue": {
              "summary": "func"
            }
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropzone-variants-disabled--disabled": {
    "id": "components-dropzone-variants-disabled--disabled",
    "kind": "Components/Dropzone/Variants/Disabled",
    "name": "Disabled",
    "story": "Disabled",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const onDrop: DropzoneProps['onDrop'] = (_event, acceptedFiles) => {\n    return action(`Accepted Files: ${acceptedFiles}`)();\n  };\n\n  return (\n    <div className=\"w-50 d-flex flex-column align-items-center\">\n      <Dropzone\n        formatLabel=\"Accepted formats: PDF, jpg\"\n        sizeLabel=\"Maximum size: 25 MB\"\n        onDrop={onDrop}\n        disabled={true}\n        className=\"mb-3\"\n      />\n      <Text size=\"large\" weight=\"strong\">\n        Standard\n      </Text>\n      <Dropzone\n        formatLabel=\"Accepted formats: PDF, jpg\"\n        sizeLabel=\"Maximum size: 25 MB\"\n        onDrop={onDrop}\n        disabled={true}\n        type=\"compressed\"\n        className=\"mt-6 mb-3\"\n      />\n      <Text size=\"large\" weight=\"strong\">\n        Compressed\n      </Text>\n      <Dropzone\n        formatLabel=\"Accepted formats: PDF, jpg\"\n        sizeLabel=\"Maximum size: 25 MB\"\n        onDrop={onDrop}\n        disabled={true}\n        type=\"tight\"\n        className=\"mt-6 mb-3\"\n      />\n      <Text size=\"large\" weight=\"strong\">\n        Tight\n      </Text>\n    </div>\n  );\n}"
      },
      "__id": "components-dropzone-variants-disabled--disabled",
      "args": {},
      "argTypes": {
        "formatLabel": {
          "name": "formatLabel",
          "description": "Description of accepted formats in `FileUploader`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Size of `Dropzone`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "standard",
              "compressed",
              "tight"
            ]
          },
          "table": {
            "type": {
              "summary": "\"standard\" | \"compressed\" | \"tight\""
            },
            "defaultValue": {
              "summary": "\"standard\""
            }
          }
        },
        "sizeLabel": {
          "name": "sizeLabel",
          "description": "Description of maximum size in `FileUploader`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "sampleFileLink": {
          "name": "sampleFileLink",
          "description": "Link component to download sample file",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "accept": {
          "name": "accept",
          "description": "Set accepted file types.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | string[] | undefined"
          },
          "table": {
            "type": {
              "summary": "string | string[] | undefined"
            },
            "defaultValue": null
          }
        },
        "multiple": {
          "name": "multiple",
          "description": "Allow drag 'n' drop (or selection from the file dialog) of multiple files",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "preventDropOnDocument": {
          "name": "preventDropOnDocument",
          "description": "If false, allow dropped items to take over the current browser window",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "minSize": {
          "name": "minSize",
          "description": "Minimum file size (in bytes)",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "maxSize": {
          "name": "maxSize",
          "description": "Maximum file size (in bytes)",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "Infinity"
            }
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Enable/disable the dropzone",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "getFilesFromEvent": {
          "name": "getFilesFromEvent",
          "description": "Use this to provide a custom file aggregator",
          "type": {
            "required": true,
            "name": "function",
            "value": "(event: Event | DragEvent) => any"
          },
          "table": {
            "type": {
              "summary": "(event: Event | DragEvent) => any"
            },
            "defaultValue": {
              "summary": "fromEvent( ... )"
            }
          }
        },
        "onFileDialogCancel": {
          "name": "onFileDialogCancel",
          "description": "Callback for when closing the file dialog with no selection",
          "type": {
            "required": false,
            "name": "function",
            "value": "(() => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "(() => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onDragEnter": {
          "name": "onDragEnter",
          "description": "Callback for when the `dragenter` event occurs.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: DragEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: DragEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onDragLeave": {
          "name": "onDragLeave",
          "description": "Callback for when the `dragleave` event occurs",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: DragEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: DragEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onDragOver": {
          "name": "onDragOver",
          "description": "Callback for when the `dragover` event occurs",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: DragEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: DragEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onDrop": {
          "name": "onDrop",
          "description": "Callback for when the `drop` event occurs.\nNote that the `onDrop` callback will always be invoked regardless if the dropped files were accepted or rejected.\n\n<pre className=\"DocPage-codeBlock\">\nFileError: {\n   type: 'FILE_INVALID_TYPE' | 'FILE_TOO_LARGE' | 'FILE_TOO_SMALL' | 'TOO_MANY_FILES';\n   message: string;\n}\n\nFileRejection {\n  file: File;\n  errors: FileError[];\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: Event | DragEvent, acceptedFiles: File[], rejectedFiles: FileRejection[]) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: Event | DragEvent, acceptedFiles: File[], rejectedFiles: FileRejection[]) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onDropAccepted": {
          "name": "onDropAccepted",
          "description": "Callback for when the `drop` event occurs.\nNote that if no files are accepted, this callback is not invoked.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: Event | DragEvent, files: File[]) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: Event | DragEvent, files: File[]) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onDropRejected": {
          "name": "onDropRejected",
          "description": "Callback for when the `drop` event occurs.\nNote that if no files are rejected, this callback is not invoked.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: Event | DragEvent, rejectedFiles: FileRejection[]) => any) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: Event | DragEvent, rejectedFiles: FileRejection[]) => any) | undefined"
            },
            "defaultValue": null
          }
        },
        "validator": {
          "name": "validator",
          "description": "Custom validation function\nThe value must be a function that accepts File object and returns null if file should be accepted\nor error object/array of error objects if file should me rejected",
          "type": {
            "required": false,
            "name": "function",
            "value": "((file: File) => FileError | FileError[]) | undefined"
          },
          "table": {
            "type": {
              "summary": "((file: File) => FileError | FileError[]) | undefined"
            },
            "defaultValue": {
              "summary": "func"
            }
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropzone-variants-dropzone-with-filelist--dropzone-with-filelist": {
    "id": "components-dropzone-variants-dropzone-with-filelist--dropzone-with-filelist",
    "kind": "Components/Dropzone/Variants/Dropzone With Filelist",
    "name": "Dropzone With Filelist",
    "story": "Dropzone With Filelist",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [files, setFiles] = React.useState<any>([]);\n  const getSize = (size: number) => `${(size / (1024 * 1024)).toFixed(2)} MB`;\n\n  const onDelete = (id: number) => {\n    const updatedFiles = files.filter((file: any) => file.id !== id);\n    setFiles(updatedFiles);\n  };\n\n  const onDropHandler: DropzoneProps['onDrop'] = (_event, acceptedFiles, rejectedFiles) => {\n    const acceptedFileArray = acceptedFiles.map((file, id) => ({\n      file,\n      id: files.length + id,\n      fileSize: getSize(file.size),\n      networkError: false,\n    }));\n\n    const rejectedFilesArray = rejectedFiles.map((fileObj, id) => {\n      const { file, errors } = fileObj;\n      const errorMessageArray = errors.map((error: any) => error.message);\n      return {\n        file,\n        id: files.length + id,\n        fileSize: getSize(file.size),\n        status: 'error',\n        errorMessage: errorMessageArray.join(' and '),\n        networkError: false,\n      };\n    });\n    const updatedFiles = [...files, ...acceptedFileArray, ...rejectedFilesArray];\n    setFiles(updatedFiles);\n  };\n\n  const actionRenderer: FileListProps['actionRenderer'] = (fileItem) => {\n    return (\n      <React.Fragment>\n        {fileItem.networkError && (\n          <Button appearance=\"transparent\" icon=\"refresh\" size=\"regular\" className={'cursor-pointer'} />\n        )}\n        <Button\n          appearance=\"transparent\"\n          icon=\"close\"\n          size=\"regular\"\n          onClick={() => onDelete(fileItem.id)}\n          className={'cursor-pointer'}\n        />\n      </React.Fragment>\n    );\n  };\n\n  return (\n    <React.Fragment>\n      <Dropzone\n        accept=\"image/jpeg, image/png\"\n        formatLabel=\"Accepted formats: PDF, jpg\"\n        sizeLabel=\"Maximum size: 25 MB\"\n        multiple={true}\n        onDrop={onDropHandler}\n        className=\"mb-5\"\n        sampleFileLink={\n          <Link\n            href=\"http://www.adobe.com/content/dam/Adobe/en/accessibility/pdfs/accessing-pdf-sr.pdf\"\n            download=\"Test.pdf\"\n            target=\"_blank\"\n          >\n            Download sample file\n          </Link>\n        }\n      />\n      <FileList fileList={files} actionRenderer={actionRenderer} />\n    </React.Fragment>\n  );\n}"
      },
      "__id": "components-dropzone-variants-dropzone-with-filelist--dropzone-with-filelist",
      "args": {},
      "argTypes": {
        "formatLabel": {
          "name": "formatLabel",
          "description": "Description of accepted formats in `FileUploader`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Size of `Dropzone`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "standard",
              "compressed",
              "tight"
            ]
          },
          "table": {
            "type": {
              "summary": "\"standard\" | \"compressed\" | \"tight\""
            },
            "defaultValue": {
              "summary": "\"standard\""
            }
          }
        },
        "sizeLabel": {
          "name": "sizeLabel",
          "description": "Description of maximum size in `FileUploader`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "sampleFileLink": {
          "name": "sampleFileLink",
          "description": "Link component to download sample file",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "accept": {
          "name": "accept",
          "description": "Set accepted file types.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | string[] | undefined"
          },
          "table": {
            "type": {
              "summary": "string | string[] | undefined"
            },
            "defaultValue": null
          }
        },
        "multiple": {
          "name": "multiple",
          "description": "Allow drag 'n' drop (or selection from the file dialog) of multiple files",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "preventDropOnDocument": {
          "name": "preventDropOnDocument",
          "description": "If false, allow dropped items to take over the current browser window",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "minSize": {
          "name": "minSize",
          "description": "Minimum file size (in bytes)",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "maxSize": {
          "name": "maxSize",
          "description": "Maximum file size (in bytes)",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "Infinity"
            }
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Enable/disable the dropzone",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "getFilesFromEvent": {
          "name": "getFilesFromEvent",
          "description": "Use this to provide a custom file aggregator",
          "type": {
            "required": true,
            "name": "function",
            "value": "(event: Event | DragEvent) => any"
          },
          "table": {
            "type": {
              "summary": "(event: Event | DragEvent) => any"
            },
            "defaultValue": {
              "summary": "fromEvent( ... )"
            }
          }
        },
        "onFileDialogCancel": {
          "name": "onFileDialogCancel",
          "description": "Callback for when closing the file dialog with no selection",
          "type": {
            "required": false,
            "name": "function",
            "value": "(() => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "(() => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onDragEnter": {
          "name": "onDragEnter",
          "description": "Callback for when the `dragenter` event occurs.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: DragEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: DragEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onDragLeave": {
          "name": "onDragLeave",
          "description": "Callback for when the `dragleave` event occurs",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: DragEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: DragEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onDragOver": {
          "name": "onDragOver",
          "description": "Callback for when the `dragover` event occurs",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: DragEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: DragEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onDrop": {
          "name": "onDrop",
          "description": "Callback for when the `drop` event occurs.\nNote that the `onDrop` callback will always be invoked regardless if the dropped files were accepted or rejected.\n\n<pre className=\"DocPage-codeBlock\">\nFileError: {\n   type: 'FILE_INVALID_TYPE' | 'FILE_TOO_LARGE' | 'FILE_TOO_SMALL' | 'TOO_MANY_FILES';\n   message: string;\n}\n\nFileRejection {\n  file: File;\n  errors: FileError[];\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: Event | DragEvent, acceptedFiles: File[], rejectedFiles: FileRejection[]) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: Event | DragEvent, acceptedFiles: File[], rejectedFiles: FileRejection[]) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onDropAccepted": {
          "name": "onDropAccepted",
          "description": "Callback for when the `drop` event occurs.\nNote that if no files are accepted, this callback is not invoked.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: Event | DragEvent, files: File[]) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: Event | DragEvent, files: File[]) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onDropRejected": {
          "name": "onDropRejected",
          "description": "Callback for when the `drop` event occurs.\nNote that if no files are rejected, this callback is not invoked.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: Event | DragEvent, rejectedFiles: FileRejection[]) => any) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: Event | DragEvent, rejectedFiles: FileRejection[]) => any) | undefined"
            },
            "defaultValue": null
          }
        },
        "validator": {
          "name": "validator",
          "description": "Custom validation function\nThe value must be a function that accepts File object and returns null if file should be accepted\nor error object/array of error objects if file should me rejected",
          "type": {
            "required": false,
            "name": "function",
            "value": "((file: File) => FileError | FileError[]) | undefined"
          },
          "table": {
            "type": {
              "summary": "((file: File) => FileError | FileError[]) | undefined"
            },
            "defaultValue": {
              "summary": "func"
            }
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropzone-variants-format--format": {
    "id": "components-dropzone-variants-format--format",
    "kind": "Components/Dropzone/Variants/Format",
    "name": "Format",
    "story": "Format",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const onDrop: DropzoneProps['onDrop'] = (_event, acceptedFiles, rejectedFiles) => {\n    return action(`Accepted Files: ${acceptedFiles}, rejectedFiles: ${rejectedFiles}`)();\n  };\n\n  return (\n    <Dropzone\n      accept=\"image/jpeg, image/png\"\n      formatLabel=\"Accepted formats: PDF, jpg\"\n      sizeLabel=\"Maximum size: 25 MB\"\n      onDrop={onDrop}\n      className=\"mb-3\"\n      sampleFileLink={\n        <Link\n          href=\"http://www.adobe.com/content/dam/Adobe/en/accessibility/pdfs/accessing-pdf-sr.pdf\"\n          download=\"Test.pdf\"\n          target=\"_blank\"\n        >\n          Download sample file\n        </Link>\n      }\n    />\n  );\n}"
      },
      "__id": "components-dropzone-variants-format--format",
      "args": {},
      "argTypes": {
        "formatLabel": {
          "name": "formatLabel",
          "description": "Description of accepted formats in `FileUploader`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Size of `Dropzone`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "standard",
              "compressed",
              "tight"
            ]
          },
          "table": {
            "type": {
              "summary": "\"standard\" | \"compressed\" | \"tight\""
            },
            "defaultValue": {
              "summary": "\"standard\""
            }
          }
        },
        "sizeLabel": {
          "name": "sizeLabel",
          "description": "Description of maximum size in `FileUploader`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "sampleFileLink": {
          "name": "sampleFileLink",
          "description": "Link component to download sample file",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "accept": {
          "name": "accept",
          "description": "Set accepted file types.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | string[] | undefined"
          },
          "table": {
            "type": {
              "summary": "string | string[] | undefined"
            },
            "defaultValue": null
          }
        },
        "multiple": {
          "name": "multiple",
          "description": "Allow drag 'n' drop (or selection from the file dialog) of multiple files",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "preventDropOnDocument": {
          "name": "preventDropOnDocument",
          "description": "If false, allow dropped items to take over the current browser window",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "minSize": {
          "name": "minSize",
          "description": "Minimum file size (in bytes)",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "maxSize": {
          "name": "maxSize",
          "description": "Maximum file size (in bytes)",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "Infinity"
            }
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Enable/disable the dropzone",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "getFilesFromEvent": {
          "name": "getFilesFromEvent",
          "description": "Use this to provide a custom file aggregator",
          "type": {
            "required": true,
            "name": "function",
            "value": "(event: Event | DragEvent) => any"
          },
          "table": {
            "type": {
              "summary": "(event: Event | DragEvent) => any"
            },
            "defaultValue": {
              "summary": "fromEvent( ... )"
            }
          }
        },
        "onFileDialogCancel": {
          "name": "onFileDialogCancel",
          "description": "Callback for when closing the file dialog with no selection",
          "type": {
            "required": false,
            "name": "function",
            "value": "(() => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "(() => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onDragEnter": {
          "name": "onDragEnter",
          "description": "Callback for when the `dragenter` event occurs.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: DragEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: DragEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onDragLeave": {
          "name": "onDragLeave",
          "description": "Callback for when the `dragleave` event occurs",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: DragEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: DragEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onDragOver": {
          "name": "onDragOver",
          "description": "Callback for when the `dragover` event occurs",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: DragEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: DragEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onDrop": {
          "name": "onDrop",
          "description": "Callback for when the `drop` event occurs.\nNote that the `onDrop` callback will always be invoked regardless if the dropped files were accepted or rejected.\n\n<pre className=\"DocPage-codeBlock\">\nFileError: {\n   type: 'FILE_INVALID_TYPE' | 'FILE_TOO_LARGE' | 'FILE_TOO_SMALL' | 'TOO_MANY_FILES';\n   message: string;\n}\n\nFileRejection {\n  file: File;\n  errors: FileError[];\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: Event | DragEvent, acceptedFiles: File[], rejectedFiles: FileRejection[]) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: Event | DragEvent, acceptedFiles: File[], rejectedFiles: FileRejection[]) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onDropAccepted": {
          "name": "onDropAccepted",
          "description": "Callback for when the `drop` event occurs.\nNote that if no files are accepted, this callback is not invoked.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: Event | DragEvent, files: File[]) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: Event | DragEvent, files: File[]) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onDropRejected": {
          "name": "onDropRejected",
          "description": "Callback for when the `drop` event occurs.\nNote that if no files are rejected, this callback is not invoked.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: Event | DragEvent, rejectedFiles: FileRejection[]) => any) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: Event | DragEvent, rejectedFiles: FileRejection[]) => any) | undefined"
            },
            "defaultValue": null
          }
        },
        "validator": {
          "name": "validator",
          "description": "Custom validation function\nThe value must be a function that accepts File object and returns null if file should be accepted\nor error object/array of error objects if file should me rejected",
          "type": {
            "required": false,
            "name": "function",
            "value": "((file: File) => FileError | FileError[]) | undefined"
          },
          "table": {
            "type": {
              "summary": "((file: File) => FileError | FileError[]) | undefined"
            },
            "defaultValue": {
              "summary": "func"
            }
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-dropzone-variants-size--size": {
    "id": "components-dropzone-variants-size--size",
    "kind": "Components/Dropzone/Variants/Size",
    "name": "Size",
    "story": "Size",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const onDrop: DropzoneProps['onDrop'] = (_event, acceptedFiles) => {\n    return action(`Accepted Files: ${acceptedFiles}`)();\n  };\n\n  return (\n    <div className=\"w-50 d-flex flex-column align-items-center\">\n      <Dropzone\n        formatLabel=\"Accepted formats: PDF, jpg\"\n        sizeLabel=\"Maximum size: 25 MB\"\n        onDrop={onDrop}\n        className=\"mb-3\"\n        sampleFileLink={\n          <Link\n            href=\"http://www.adobe.com/content/dam/Adobe/en/accessibility/pdfs/accessing-pdf-sr.pdf\"\n            download=\"Test.pdf\"\n            target=\"_blank\"\n          >\n            Download sample file\n          </Link>\n        }\n      />\n      <Text size=\"large\" weight=\"strong\">\n        Standard\n      </Text>\n      <Dropzone\n        formatLabel=\"Accepted formats: PDF, jpg\"\n        sizeLabel=\"Maximum size: 25 MB\"\n        onDrop={onDrop}\n        type=\"compressed\"\n        className=\"mt-6 mb-3\"\n        sampleFileLink={\n          <Link\n            href=\"http://www.adobe.com/content/dam/Adobe/en/accessibility/pdfs/accessing-pdf-sr.pdf\"\n            download=\"Test.pdf\"\n            target=\"_blank\"\n          >\n            Download sample file\n          </Link>\n        }\n      />\n      <Text size=\"large\" weight=\"strong\">\n        Compressed\n      </Text>\n      <Dropzone\n        formatLabel=\"Accepted formats: PDF, jpg\"\n        sizeLabel=\"Maximum size: 25 MB\"\n        onDrop={onDrop}\n        type=\"tight\"\n        className=\"mt-6 mb-3\"\n        sampleFileLink={\n          <Link\n            href=\"http://www.adobe.com/content/dam/Adobe/en/accessibility/pdfs/accessing-pdf-sr.pdf\"\n            download=\"Test.pdf\"\n            target=\"_blank\"\n          >\n            Download sample file\n          </Link>\n        }\n      />\n      <Text size=\"large\" weight=\"strong\">\n        Tight\n      </Text>\n    </div>\n  );\n}"
      },
      "__id": "components-dropzone-variants-size--size",
      "args": {},
      "argTypes": {
        "formatLabel": {
          "name": "formatLabel",
          "description": "Description of accepted formats in `FileUploader`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Size of `Dropzone`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "standard",
              "compressed",
              "tight"
            ]
          },
          "table": {
            "type": {
              "summary": "\"standard\" | \"compressed\" | \"tight\""
            },
            "defaultValue": {
              "summary": "\"standard\""
            }
          }
        },
        "sizeLabel": {
          "name": "sizeLabel",
          "description": "Description of maximum size in `FileUploader`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "sampleFileLink": {
          "name": "sampleFileLink",
          "description": "Link component to download sample file",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "accept": {
          "name": "accept",
          "description": "Set accepted file types.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | string[] | undefined"
          },
          "table": {
            "type": {
              "summary": "string | string[] | undefined"
            },
            "defaultValue": null
          }
        },
        "multiple": {
          "name": "multiple",
          "description": "Allow drag 'n' drop (or selection from the file dialog) of multiple files",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "preventDropOnDocument": {
          "name": "preventDropOnDocument",
          "description": "If false, allow dropped items to take over the current browser window",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "minSize": {
          "name": "minSize",
          "description": "Minimum file size (in bytes)",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "maxSize": {
          "name": "maxSize",
          "description": "Maximum file size (in bytes)",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "Infinity"
            }
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Enable/disable the dropzone",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "getFilesFromEvent": {
          "name": "getFilesFromEvent",
          "description": "Use this to provide a custom file aggregator",
          "type": {
            "required": true,
            "name": "function",
            "value": "(event: Event | DragEvent) => any"
          },
          "table": {
            "type": {
              "summary": "(event: Event | DragEvent) => any"
            },
            "defaultValue": {
              "summary": "fromEvent( ... )"
            }
          }
        },
        "onFileDialogCancel": {
          "name": "onFileDialogCancel",
          "description": "Callback for when closing the file dialog with no selection",
          "type": {
            "required": false,
            "name": "function",
            "value": "(() => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "(() => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onDragEnter": {
          "name": "onDragEnter",
          "description": "Callback for when the `dragenter` event occurs.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: DragEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: DragEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onDragLeave": {
          "name": "onDragLeave",
          "description": "Callback for when the `dragleave` event occurs",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: DragEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: DragEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onDragOver": {
          "name": "onDragOver",
          "description": "Callback for when the `dragover` event occurs",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: DragEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: DragEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onDrop": {
          "name": "onDrop",
          "description": "Callback for when the `drop` event occurs.\nNote that the `onDrop` callback will always be invoked regardless if the dropped files were accepted or rejected.\n\n<pre className=\"DocPage-codeBlock\">\nFileError: {\n   type: 'FILE_INVALID_TYPE' | 'FILE_TOO_LARGE' | 'FILE_TOO_SMALL' | 'TOO_MANY_FILES';\n   message: string;\n}\n\nFileRejection {\n  file: File;\n  errors: FileError[];\n}\n</pre>",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: Event | DragEvent, acceptedFiles: File[], rejectedFiles: FileRejection[]) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: Event | DragEvent, acceptedFiles: File[], rejectedFiles: FileRejection[]) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onDropAccepted": {
          "name": "onDropAccepted",
          "description": "Callback for when the `drop` event occurs.\nNote that if no files are accepted, this callback is not invoked.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: Event | DragEvent, files: File[]) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: Event | DragEvent, files: File[]) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onDropRejected": {
          "name": "onDropRejected",
          "description": "Callback for when the `drop` event occurs.\nNote that if no files are rejected, this callback is not invoked.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: Event | DragEvent, rejectedFiles: FileRejection[]) => any) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: Event | DragEvent, rejectedFiles: FileRejection[]) => any) | undefined"
            },
            "defaultValue": null
          }
        },
        "validator": {
          "name": "validator",
          "description": "Custom validation function\nThe value must be a function that accepts File object and returns null if file should be accepted\nor error object/array of error objects if file should me rejected",
          "type": {
            "required": false,
            "name": "function",
            "value": "((file: File) => FileError | FileError[]) | undefined"
          },
          "table": {
            "type": {
              "summary": "((file: File) => FileError | FileError[]) | undefined"
            },
            "defaultValue": {
              "summary": "func"
            }
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-editablechipinput-all--all": {
    "id": "components-editablechipinput-all--all",
    "kind": "Components/EditableChipInput/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [value, setValue] = React.useState<string[]>();\n\n  const onChange = (updatedValue: string[]) => {\n    setValue(updatedValue);\n  };\n  const onClick = (item: any) => action(`onClick: ${item}`);\n\n  const placeholder = text('Placeholder', 'Add Value');\n  const chipOptions = { onClick, clearButton: true };\n  const chipInputOptions = {\n    chipOptions,\n    allowDuplicates: false,\n    defaultValue: [],\n    autoFocus: true,\n  };\n\n  const options = {\n    placeholder,\n    value,\n    onChange,\n    chipInputOptions,\n  };\n  return (\n    <div className=\"w-25\">\n      <EditableChipInput {...options} />\n    </div>\n  );\n}"
      },
      "__id": "components-editablechipinput-all--all",
      "args": {},
      "argTypes": {
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `EditableChipInput` when value is not defined",
          "type": {
            "required": false,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": {
              "summary": "\"\""
            }
          }
        },
        "value": {
          "name": "value",
          "description": "The chip labels to display.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string[] | undefined"
          },
          "table": {
            "type": {
              "summary": "string[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function that is called when the chips change.  Callback function called on save action click",
          "type": {
            "required": false,
            "name": "function",
            "value": "((chips: string[]) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((chips: string[]) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "disableSaveAction": {
          "name": "disableSaveAction",
          "description": "Determines if save action button is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "chipInputOptions": {
          "name": "chipInputOptions",
          "description": "Props to be used for `ChipInput`",
          "type": {
            "required": false,
            "name": "other",
            "value": "Pick<ChipInputProps, \"className\" | \"data-test\" | \"autoFocus\" | \"disabled\" | \"onFocus\" | \"onBlur\" | \"onChange\" | \"allowDuplicates\" | \"chipOptions\">"
          },
          "table": {
            "type": {
              "summary": "Pick<ChipInputProps, \"className\" | \"data-test\" | \"autoFocus\" | \"disabled\" | \"onFocus\" | \"onBlur\" | \"onChange\" | \"allowDuplicates\" | \"chipOptions\">"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-editablechipinput-uncontrolled--uncontrolled": {
    "id": "components-editablechipinput-uncontrolled--uncontrolled",
    "kind": "Components/EditableChipInput/Uncontrolled",
    "name": "Uncontrolled",
    "story": "Uncontrolled",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const onClick = (item: any) => action(`onClick: ${item}`);\n  const chipOptions = { onClick, clearButton: true };\n  const chipInputOptions = {\n    chipOptions,\n    allowDuplicates: false,\n    defaultValue: [],\n    autoFocus: true,\n  };\n\n  const options = {\n    chipInputOptions,\n    placeholder: 'Add Value',\n  };\n  return (\n    <div className=\"w-25\">\n      <EditableChipInput {...options} />\n    </div>\n  );\n}"
      },
      "__id": "components-editablechipinput-uncontrolled--uncontrolled",
      "args": {},
      "argTypes": {
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `EditableChipInput` when value is not defined",
          "type": {
            "required": false,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": {
              "summary": "\"\""
            }
          }
        },
        "value": {
          "name": "value",
          "description": "The chip labels to display.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string[] | undefined"
          },
          "table": {
            "type": {
              "summary": "string[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function that is called when the chips change.  Callback function called on save action click",
          "type": {
            "required": false,
            "name": "function",
            "value": "((chips: string[]) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((chips: string[]) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "disableSaveAction": {
          "name": "disableSaveAction",
          "description": "Determines if save action button is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "chipInputOptions": {
          "name": "chipInputOptions",
          "description": "Props to be used for `ChipInput`",
          "type": {
            "required": false,
            "name": "other",
            "value": "Pick<ChipInputProps, \"className\" | \"data-test\" | \"autoFocus\" | \"disabled\" | \"onFocus\" | \"onBlur\" | \"onChange\" | \"allowDuplicates\" | \"chipOptions\">"
          },
          "table": {
            "type": {
              "summary": "Pick<ChipInputProps, \"className\" | \"data-test\" | \"autoFocus\" | \"disabled\" | \"onFocus\" | \"onBlur\" | \"onChange\" | \"allowDuplicates\" | \"chipOptions\">"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-editabledropdown-all--all": {
    "id": "components-editabledropdown-all--all",
    "kind": "Components/EditableDropdown/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const placeholder = text('Placeholder', 'Select Option');\n\n  const getSearchedOptions = (options: any, searchTerm: string) => {\n    const result = options.filter((option: any) => option.label.toLowerCase().includes(searchTerm.toLowerCase()));\n    return result;\n  };\n\n  const fetchOptions = (searchTerm: string) => {\n    const searchedOptions = searchTerm ? getSearchedOptions(dropdownOptions, searchTerm) : dropdownOptions;\n    return new Promise<any>((resolve) => {\n      window.setTimeout(() => {\n        resolve({\n          options: searchedOptions,\n          count: searchedOptions.length,\n        });\n      }, 1000);\n    });\n  };\n\n  const onChange = (selectedValues: any) => {\n    return action(`selected values length: ${selectedValues}`)();\n  };\n\n  return (\n    <div className=\"w-25\">\n      <Label withInput={true} className=\"ml-5\">\n        Editable Dropdown\n      </Label>\n      <EditableDropdown\n        placeholder={placeholder}\n        dropdownOptions={{\n          fetchOptions,\n          onChange,\n        }}\n      />\n    </div>\n  );\n}"
      },
      "__id": "components-editabledropdown-all--all",
      "args": {},
      "argTypes": {
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Editable Dropdown` when no options are selected",
          "type": {
            "required": false,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": {
              "summary": "\"\""
            }
          }
        },
        "dropdownOptions": {
          "name": "dropdownOptions",
          "description": "Props to be used for `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "Pick<MakeOptional<ControlledDropdownProps, \"closeOnSelect\" | \"options\" | \"triggerOptions\" | \"staticLimit\" | \"searchDebounceDuration\">, \"open\" | ... 41 more ... | \"fetchOptions\">"
          },
          "table": {
            "type": {
              "summary": "Pick<MakeOptional<ControlledDropdownProps, \"closeOnSelect\" | \"options\" | \"triggerOptions\" | \"staticLimit\" | \"searchDebounceDuration\">, \"open\" | ... 41 more ... | \"fetchOptions\">"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "customTriggerRenderer": {
          "name": "customTriggerRenderer",
          "description": "Adds custom component",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => ReactNode) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => ReactNode) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-editabledropdown-variants-custom-render--custom-render": {
    "id": "components-editabledropdown-variants-custom-render--custom-render",
    "kind": "Components/EditableDropdown/Variants/Custom Render",
    "name": "Custom Render",
    "story": "Custom Render",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const onChange = (selectedValues: any) => {\n    return action(`selected values length: ${selectedValues}`)();\n  };\n\n  const customTrigger = (label: string) => {\n    return (\n      <div\n        className=\"d-flex align-items-center justify-content-between pl-5 pr-4 bg-secondary cursor-pointer w-100\"\n        style={{ height: 'var(--spacing-3)' }}\n      >\n        <StatusHint appearance=\"warning\">{label}</StatusHint>\n        <Icon name=\"keyboard_arrow_down\" />\n      </div>\n    );\n  };\n\n  const customRenderer = (label: string) => {\n    return <StatusHint appearance=\"warning\">{label}</StatusHint>;\n  };\n\n  const optionRenderer = (props: any) => {\n    const { label } = props.optionData;\n    return (\n      <StatusHint className=\"px-5 py-4 cursor-pointer\" appearance=\"warning\">\n        {label}\n      </StatusHint>\n    );\n  };\n\n  return (\n    <div className=\"w-25\">\n      <Label withInput={true} className=\"ml-5\">\n        Editable Dropdown\n      </Label>\n      <EditableDropdown\n        customTriggerRenderer={customRenderer}\n        dropdownOptions={{\n          options,\n          onChange,\n          optionRenderer,\n          triggerOptions: { customTrigger },\n        }}\n      />\n    </div>\n  );\n}"
      },
      "__id": "components-editabledropdown-variants-custom-render--custom-render",
      "args": {},
      "argTypes": {
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Editable Dropdown` when no options are selected",
          "type": {
            "required": false,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": {
              "summary": "\"\""
            }
          }
        },
        "dropdownOptions": {
          "name": "dropdownOptions",
          "description": "Props to be used for `Dropdown`",
          "type": {
            "required": false,
            "name": "other",
            "value": "Pick<MakeOptional<ControlledDropdownProps, \"closeOnSelect\" | \"options\" | \"triggerOptions\" | \"staticLimit\" | \"searchDebounceDuration\">, \"open\" | ... 41 more ... | \"fetchOptions\">"
          },
          "table": {
            "type": {
              "summary": "Pick<MakeOptional<ControlledDropdownProps, \"closeOnSelect\" | \"options\" | \"triggerOptions\" | \"staticLimit\" | \"searchDebounceDuration\">, \"open\" | ... 41 more ... | \"fetchOptions\">"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "customTriggerRenderer": {
          "name": "customTriggerRenderer",
          "description": "Adds custom component",
          "type": {
            "required": false,
            "name": "function",
            "value": "((label: string) => ReactNode) | undefined"
          },
          "table": {
            "type": {
              "summary": "((label: string) => ReactNode) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-editableinput-all--all": {
    "id": "components-editableinput-all--all",
    "kind": "Components/EditableInput/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const placeholder = text('Placeholder', 'First Name');\n  const error = boolean('error', false);\n  const errorMessage = text('Error Message', 'Error Message Description');\n\n  const [value, setValue] = React.useState('');\n\n  const size = select('size', ['regular', 'tiny'], 'regular');\n\n  const onChange = (updatedValue: string) => {\n    setValue(updatedValue);\n  };\n\n  const options = {\n    placeholder,\n    errorMessage,\n    onChange,\n    error,\n    size,\n    value,\n  };\n\n  return (\n    <div style={{ width: 'var(--spacing-9)' }}>\n      <EditableInput {...options} />\n    </div>\n  );\n}"
      },
      "__id": "components-editableinput-all--all",
      "args": {},
      "argTypes": {
        "value": {
          "name": "value",
          "description": "Value of the `Editable Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Editable Input` when value is not defined",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": {
              "summary": ""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Size of `Editable Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "\"regular\" | \"tiny\""
            },
            "defaultValue": {
              "summary": "\"regular\""
            }
          }
        },
        "disableSaveAction": {
          "name": "disableSaveAction",
          "description": "Determines if save action button is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "errorMessage": {
          "name": "errorMessage",
          "description": "Error message to be shown in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inputOptions": {
          "name": "inputOptions",
          "description": "Props to be used for `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "Pick<InputProps, \"open\" | \"children\" | \"className\" | \"data-test\" | \"accept\" | \"acceptCharset\" | \"action\" | \"allowFullScreen\" | \"allowTransparency\" | \"alt\" | \"as\" | ... 352 more ... | \"actionIcon\">"
          },
          "table": {
            "type": {
              "summary": "Pick<InputProps, \"open\" | \"children\" | \"className\" | \"data-test\" | \"accept\" | \"acceptCharset\" | \"action\" | \"allowFullScreen\" | \"allowTransparency\" | \"alt\" | \"as\" | ... 352 more ... | \"actionIcon\">"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called on save action click",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-editableinput-variants-error--error": {
    "id": "components-editableinput-variants-error--error",
    "kind": "Components/EditableInput/Variants/Error",
    "name": "Error",
    "story": "Error",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [value, setValue] = React.useState('');\n\n  const onChange = (updatedValue: string) => {\n    setValue(updatedValue);\n  };\n\n  return (\n    <div style={{ width: 'var(--spacing-9)' }}>\n      <EditableInput\n        placeholder=\"First Name\"\n        value={value}\n        onChange={onChange}\n        error={true}\n        errorMessage={'Error Message'}\n      />\n    </div>\n  );\n}"
      },
      "__id": "components-editableinput-variants-error--error",
      "args": {},
      "argTypes": {
        "value": {
          "name": "value",
          "description": "Value of the `Editable Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Editable Input` when value is not defined",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": {
              "summary": ""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Size of `Editable Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "\"regular\" | \"tiny\""
            },
            "defaultValue": {
              "summary": "\"regular\""
            }
          }
        },
        "disableSaveAction": {
          "name": "disableSaveAction",
          "description": "Determines if save action button is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "errorMessage": {
          "name": "errorMessage",
          "description": "Error message to be shown in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inputOptions": {
          "name": "inputOptions",
          "description": "Props to be used for `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "Pick<InputProps, \"open\" | \"children\" | \"className\" | \"data-test\" | \"accept\" | \"acceptCharset\" | \"action\" | \"allowFullScreen\" | \"allowTransparency\" | \"alt\" | \"as\" | ... 352 more ... | \"actionIcon\">"
          },
          "table": {
            "type": {
              "summary": "Pick<InputProps, \"open\" | \"children\" | \"className\" | \"data-test\" | \"accept\" | \"acceptCharset\" | \"action\" | \"allowFullScreen\" | \"allowTransparency\" | \"alt\" | \"as\" | ... 352 more ... | \"actionIcon\">"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called on save action click",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-editableinput-variants-size--size": {
    "id": "components-editableinput-variants-size--size",
    "kind": "Components/EditableInput/Variants/Size",
    "name": "Size",
    "story": "Size",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [name, setName] = React.useState('');\n  const [weight, setWeight] = React.useState('');\n\n  const onChangeName = (value: string) => {\n    setName(value);\n  };\n\n  const onChangeWeight = (value: string) => {\n    setWeight(value);\n  };\n\n  return (\n    <div className=\"d-flex\">\n      <div className=\"d-flex flex-column\" style={{ width: 'var(--spacing-9)' }}>\n        <Label withInput={true} className=\"ml-5\">\n          Regular\n        </Label>\n        <EditableInput placeholder=\"First Name\" value={name} onChange={onChangeName} className=\"mr-5\" />\n      </div>\n      <div className=\"d-flex flex-column\" style={{ width: 'var(--spacing-7)' }}>\n        <Label withInput={true} className=\"ml-5\">\n          Tiny\n        </Label>\n        <EditableInput placeholder=\"Add Weight\" value={weight} onChange={onChangeWeight} size=\"tiny\" />\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-editableinput-variants-size--size",
      "args": {},
      "argTypes": {
        "value": {
          "name": "value",
          "description": "Value of the `Editable Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Editable Input` when value is not defined",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": {
              "summary": ""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Size of `Editable Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "\"regular\" | \"tiny\""
            },
            "defaultValue": {
              "summary": "\"regular\""
            }
          }
        },
        "disableSaveAction": {
          "name": "disableSaveAction",
          "description": "Determines if save action button is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "errorMessage": {
          "name": "errorMessage",
          "description": "Error message to be shown in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inputOptions": {
          "name": "inputOptions",
          "description": "Props to be used for `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "Pick<InputProps, \"open\" | \"children\" | \"className\" | \"data-test\" | \"accept\" | \"acceptCharset\" | \"action\" | \"allowFullScreen\" | \"allowTransparency\" | \"alt\" | \"as\" | ... 352 more ... | \"actionIcon\">"
          },
          "table": {
            "type": {
              "summary": "Pick<InputProps, \"open\" | \"children\" | \"className\" | \"data-test\" | \"accept\" | \"acceptCharset\" | \"action\" | \"allowFullScreen\" | \"allowTransparency\" | \"alt\" | \"as\" | ... 352 more ... | \"actionIcon\">"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called on save action click",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-editableinput-variants-uncontrolled--uncontrolled": {
    "id": "components-editableinput-variants-uncontrolled--uncontrolled",
    "kind": "Components/EditableInput/Variants/Uncontrolled",
    "name": "Uncontrolled",
    "story": "Uncontrolled",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div style={{ width: 'var(--spacing-9)' }}>\n      <EditableInput placeholder=\"First Name\"/>\n    </div>\n  );\n}"
      },
      "__id": "components-editableinput-variants-uncontrolled--uncontrolled",
      "args": {},
      "argTypes": {
        "value": {
          "name": "value",
          "description": "Value of the `Editable Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "String to show inside `Editable Input` when value is not defined",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": {
              "summary": ""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Size of `Editable Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "\"regular\" | \"tiny\""
            },
            "defaultValue": {
              "summary": "\"regular\""
            }
          }
        },
        "disableSaveAction": {
          "name": "disableSaveAction",
          "description": "Determines if save action button is disabled",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "errorMessage": {
          "name": "errorMessage",
          "description": "Error message to be shown in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inputOptions": {
          "name": "inputOptions",
          "description": "Props to be used for `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "Pick<InputProps, \"open\" | \"children\" | \"className\" | \"data-test\" | \"accept\" | \"acceptCharset\" | \"action\" | \"allowFullScreen\" | \"allowTransparency\" | \"alt\" | \"as\" | ... 352 more ... | \"actionIcon\">"
          },
          "table": {
            "type": {
              "summary": "Pick<InputProps, \"open\" | \"children\" | \"className\" | \"data-test\" | \"accept\" | \"acceptCharset\" | \"action\" | \"allowFullScreen\" | \"allowTransparency\" | \"alt\" | \"as\" | ... 352 more ... | \"actionIcon\">"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called on save action click",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-emptystate-all--all": {
    "id": "components-emptystate-all--all",
    "kind": "Components/EmptyState/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const title = text('title', 'Manage your outreach campaigns');\n  const description = text(\n    'description',\n    'Campaigns let you reach out to patients with text messages, emails and voice calls'\n  );\n\n  return (\n    <div className=\"h-100\" style={{ backgroundColor: 'var(--secondary-lightest)' }}>\n      <EmptyState title={title} description={description} size=\"large\" imageSrc={noContent}>\n        <Button size=\"large\" appearance=\"primary\">\n          Add campaigns\n        </Button>\n      </EmptyState>\n    </div>\n  );\n}"
      },
      "__id": "components-emptystate-all--all",
      "args": {},
      "argTypes": {
        "imageSrc": {
          "name": "imageSrc",
          "description": "Illustration to be shown",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "title": {
          "name": "title",
          "description": "Heading of `EmptyState`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "description": {
          "name": "description",
          "description": "Description of `EmptyState`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of `EmptyState`\n\nSize: 'large' | 'small'",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "large",
              "small"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\""
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Button / ButtonGroups to be added inside `EmptyState`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-emptystate-variants-large-size--large-size": {
    "id": "components-emptystate-variants-large-size--large-size",
    "kind": "Components/EmptyState/Variants/Large Size",
    "name": "Large Size",
    "story": "Large Size",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <div className=\"h-100 pb-5\" style={{ backgroundColor: 'var(--secondary-lightest)' }}>\n    <EmptyState\n      title=\"There's a problem loading this page.\"\n      description=\"A technical problem is preventing the page from loading. Try reloading this page.\"\n      imageSrc={noContent}\n      size=\"large\"\n    >\n      <Button size=\"large\" appearance=\"primary\">\n        Reload page\n      </Button>\n    </EmptyState>\n  </div>\n)"
      },
      "__id": "components-emptystate-variants-large-size--large-size",
      "args": {},
      "argTypes": {
        "imageSrc": {
          "name": "imageSrc",
          "description": "Illustration to be shown",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "title": {
          "name": "title",
          "description": "Heading of `EmptyState`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "description": {
          "name": "description",
          "description": "Description of `EmptyState`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of `EmptyState`\n\nSize: 'large' | 'small'",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "large",
              "small"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\""
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Button / ButtonGroups to be added inside `EmptyState`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-emptystate-variants-small-size-with-button--small-size-with-button": {
    "id": "components-emptystate-variants-small-size-with-button--small-size-with-button",
    "kind": "Components/EmptyState/Variants/Small Size With Button",
    "name": "Small Size With Button",
    "story": "Small Size With Button",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <Card className=\"py-5\">\n      <EmptyState\n        title=\"We didn't find a match\"\n        description=\"Try adjusting your search to find what you are looking for.\"\n        size=\"small\"\n        imageSrc={noSearch}\n      >\n        <Button appearance=\"basic\">Try Again</Button>\n      </EmptyState>\n    </Card>\n  );\n}"
      },
      "__id": "components-emptystate-variants-small-size-with-button--small-size-with-button",
      "args": {},
      "argTypes": {
        "imageSrc": {
          "name": "imageSrc",
          "description": "Illustration to be shown",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "title": {
          "name": "title",
          "description": "Heading of `EmptyState`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "description": {
          "name": "description",
          "description": "Description of `EmptyState`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of `EmptyState`\n\nSize: 'large' | 'small'",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "large",
              "small"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\""
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Button / ButtonGroups to be added inside `EmptyState`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-emptystate-variants-small-size-without-button--small-size-without-button": {
    "id": "components-emptystate-variants-small-size-without-button--small-size-without-button",
    "kind": "Components/EmptyState/Variants/Small Size Without Button",
    "name": "Small Size Without Button",
    "story": "Small Size Without Button",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <Card className=\"py-5\">\n      <EmptyState\n        title=\"We didn't find a match\"\n        description=\"Try adjusting your search to find what you are looking for.\"\n        size=\"small\"\n        imageSrc={noSearch}\n      />\n    </Card>\n  );\n}"
      },
      "__id": "components-emptystate-variants-small-size-without-button--small-size-without-button",
      "args": {},
      "argTypes": {
        "imageSrc": {
          "name": "imageSrc",
          "description": "Illustration to be shown",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "title": {
          "name": "title",
          "description": "Heading of `EmptyState`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "description": {
          "name": "description",
          "description": "Description of `EmptyState`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of `EmptyState`\n\nSize: 'large' | 'small'",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "large",
              "small"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\""
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Button / ButtonGroups to be added inside `EmptyState`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-filelist-all--all": {
    "id": "components-filelist-all--all",
    "kind": "Components/FileList/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const onClick = (file: FileListItemProps) => {\n    return action(`Clicked ${file}`)();\n  };\n\n  return (\n    <FileList\n      onClick={onClick}\n      fileList={fileList}\n      className=\"mt-4 FileList\"\n      actionRenderer={(fileItem) => {\n        if (fileItem.id === 3) {\n          return (\n            <>\n              <Button\n                appearance=\"transparent\"\n                icon=\"refresh\"\n                size=\"regular\"\n                onClick={() => onClick(fileItem)}\n                className={'cursor-pointer'}\n              />\n              <Button\n                appearance=\"transparent\"\n                icon=\"close\"\n                size=\"regular\"\n                onClick={() => onClick(fileItem)}\n                className={'cursor-pointer ml-2'}\n              />\n            </>\n          );\n        }\n        return (\n          <Button\n            appearance=\"transparent\"\n            icon=\"close\"\n            size=\"regular\"\n            onClick={() => {}}\n            className={'cursor-pointer'}\n          />\n        );\n      }}\n    />\n  );\n}"
      },
      "__id": "components-filelist-all--all",
      "args": {},
      "argTypes": {
        "fileList": {
          "name": "fileList",
          "description": "<pre className=\"DocPage-codeBlock\">\nArray containing the list of file objects\nFileItem:\n{\n    file: File;\n    status: FileStatus;\n    progress: number;\n    icon: IconOptions\n    errorMessage: string;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| file | Attached file | |\n| status | Status of file | 'completed' |\n| progress | Progress percent of `Progress Ring` | 0 |\n| icon | Name of the icon to be rendered |\n| errorMessage | Error Message to be shown when status is `error` | 'Network Error' |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Pick<FileListItemProps[], number | \"length\" | \"toString\" | \"toLocaleString\" | \"pop\" | \"push\" | \"concat\" | \"join\" | \"reverse\" | \"shift\" | \"slice\" | \"sort\" | \"splice\" | ... 20 more ... | \"at\">"
          },
          "table": {
            "type": {
              "summary": "Pick<FileListItemProps[], number | \"length\" | \"toString\" | \"toLocaleString\" | \"pop\" | \"push\" | \"concat\" | \"join\" | \"reverse\" | \"shift\" | \"slice\" | \"sort\" | \"splice\" | ... 20 more ... | \"at\">"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Callback called when file item is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((file: FileListItemProps) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((file: FileListItemProps) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "actionRenderer": {
          "name": "actionRenderer",
          "description": "Actions to be rendered inside the file item",
          "type": {
            "required": false,
            "name": "other",
            "value": "FC<FileListItemProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FC<FileListItemProps> | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-fileuploader-all--all": {
    "id": "components-fileuploader-all--all",
    "kind": "Components/FileUploader/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [fileNames, setFileNames] = React.useState<any>([]);\n\n  const title = text('title', 'Upload files');\n  const formatLabel = text('formatLabel', 'Accepted formats: PDF, jpg');\n  const sizeLabel = text('sizeLabel', 'Maximum size: 25 MB');\n  const multiple = boolean('multiple', true);\n\n  const onChangeHandler = (fileList: File[]) => {\n    const files = fileList.map((file) => {\n      return {\n        file,\n        status: 'completed',\n      };\n    });\n\n    setFileNames(files);\n  };\n\n  return (\n    <div>\n      <FileUploader\n        onChange={onChangeHandler}\n        multiple={multiple}\n        title={title}\n        formatLabel={formatLabel}\n        sizeLabel={sizeLabel}\n        sampleFileLink={\n          <Link\n            href=\"http://www.adobe.com/content/dam/Adobe/en/accessibility/pdfs/accessing-pdf-sr.pdf\"\n            download=\"Test.pdf\"\n            target=\"_blank\"\n          >\n            Download sample file\n          </Link>\n        }\n      />\n      <FileUploaderList fileList={fileNames} className=\"mt-4\" />\n    </div>\n  );\n}"
      },
      "__id": "components-fileuploader-all--all",
      "args": {},
      "argTypes": {
        "title": {
          "name": "title",
          "description": "Describes the heading of `FileUploader`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": {
              "summary": "\"Upload files\""
            }
          }
        },
        "sizeLabel": {
          "name": "sizeLabel",
          "description": "Description of maximum size in `FileUploader`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": {
              "summary": "\"Maximum size: 25 MB\""
            }
          }
        },
        "sampleFileLink": {
          "name": "sampleFileLink",
          "description": "Link component to download sample file",
          "type": {
            "required": false,
            "name": "other",
            "value": "Element | undefined"
          },
          "table": {
            "type": {
              "summary": "Element | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Name of the `FileUploaderInput`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "id": {
          "name": "id",
          "description": "Id of `FileUploaderInput`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "accept": {
          "name": "accept",
          "description": "Describes the types of files that `FileUploader` should be able to receive",
          "type": {
            "required": false,
            "name": "other",
            "value": "string[] | undefined"
          },
          "table": {
            "type": {
              "summary": "string[] | undefined"
            },
            "defaultValue": null
          }
        },
        "multiple": {
          "name": "multiple",
          "description": "Describes if `FileUploader` should accept multiple files to upload",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "uploadButtonLabel": {
          "name": "uploadButtonLabel",
          "description": "Label of `FileUploaderButton`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": {
              "summary": "\"Upload files\""
            }
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Specify whether file input is disabled",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback called when file is selected",
          "type": {
            "required": false,
            "name": "function",
            "value": "((fileList: File[], event: ChangeEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((fileList: File[], event: ChangeEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "formatLabel": {
          "name": "formatLabel",
          "description": "Description of accepted formats in `FileUploader`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-fileuploader-file-uploader-list--file-uploader-list": {
    "id": "components-fileuploader-file-uploader-list--file-uploader-list",
    "kind": "Components/FileUploader/File Uploader List",
    "name": "File Uploader List",
    "story": "File Uploader List",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const onDelete = (file: File, id: any) => {\n    return action(`File Deleted: ${file} at index ${id}`)();\n  };\n\n  const onRetry = (file: File, id: any) => {\n    return action(`Retry ${file} at index ${id}`)();\n  };\n\n  const onClick = (file: File, id: any) => {\n    return action(`Clicked ${file} at index ${id}`)();\n  };\n\n  return (\n    <FileUploaderList onClick={onClick} onDelete={onDelete} onRetry={onRetry} fileList={fileList} className=\"mt-4\" />\n  );\n}"
      },
      "__id": "components-fileuploader-file-uploader-list--file-uploader-list",
      "args": {},
      "argTypes": {
        "fileList": {
          "name": "fileList",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nArray of FileItem object.\nFileItem:\n{\n    file: File;\n    id?: any;\n    status: FileStatus;\n    progress: number;\n    errorMessage: string;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| file | Attached file | |\n| id | Unique id/index of file | |\n| status | Status of file | 'completed' |\n| progress | Progress percent of `Progress Ring` | 0 |\n| errorMessage | Error Message to be shown when status is `error` | 'Network Error' |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FileItem[]"
          },
          "table": {
            "type": {
              "summary": "FileItem[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Callback called when file item is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((file: File, id?: any) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((file: File, id?: any) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onDelete": {
          "name": "onDelete",
          "description": "Callback called when remove icon is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((file: File, id?: any) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((file: File, id?: any) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onRetry": {
          "name": "onRetry",
          "description": "Callback called when retry icon is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((file: File, id?: any) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((file: File, id?: any) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-fullscreenmodal-all--all": {
    "id": "components-fullscreenmodal-all--all",
    "kind": "Components/FullscreenModal/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [open, setOpen] = React.useState(true);\n  const dimension = select('dimension', ['medium', 'large'], 'medium');\n\n  const knobOpen = boolean('open', open);\n\n  const onClose = () => {\n    setOpen(!open);\n    action('on close triggered')();\n    updateKnob('open', !open);\n  };\n\n  const openModal = () => {\n    setOpen(true);\n    updateKnob('open', !open);\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n\n      <Button appearance=\"primary\" onClick={openModal}>\n        Open modal\n      </Button>\n\n      <FullscreenModal\n        open={knobOpen}\n        dimension={dimension}\n        onClose={onClose}\n        headerOptions={{\n          heading: 'This is modal Heading',\n          subHeading: 'This is modal subheading',\n        }}\n        footerOptions={{\n          actions: [\n            {\n              children: 'Basic',\n              appearance: 'basic',\n              onClick: action('basic action'),\n            },\n            {\n              children: 'Primary',\n              appearance: 'primary',\n              className: 'ml-4',\n              onClick: action('primary action'),\n            },\n          ],\n        }}\n      >\n        <Text>Fullscreen Modal Body</Text>\n        <Heading size=\"s\">Description Title</Heading>\n        <Paragraph>Adding a subheading clearly indicates the hierarchy of the information.</Paragraph>\n        <Paragraph>\n          Card Sections include supporting text like an article summary or a restaurant description.\n        </Paragraph>\n      </FullscreenModal>\n    </div>\n  );\n}"
      },
      "__id": "components-fullscreenmodal-all--all",
      "args": {},
      "argTypes": {
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Fullscreen Modal`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"medium\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close state",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "onClose callback to be called on `Fullscreen Modal` close",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Header options (doesn't work if `header` prop is used)\n\nUse `header` prop if custom header is needed.\n\n<pre className=\"DocPage-codeBlock\">\nHeader:\n{\n    heading: string;\n    subHeading?: string;\n    backIcon?: boolean;\n    backIconCallback?: (e) => void;\n    backButton?: boolean;\n    backButtonCallback?: (e) => void;\n}\n</pre>\n\n**`backIcon` and `backIconCallback` will soon be deprecated**\n\n| Name | Description |\n| --- | --- |\n| heading | Heading of `Sidesheet` |\n| subHeading | Subheading of `Sidesheet` |\n| backButton | Determines if back button is visible |\n| backButtonCallback | Callback called when back button is clicked |\n| backIcon | Determines if back button is visible |\n| backIconCallback | Callback called when back button is clicked |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OverlayHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "OverlayHeaderProps | undefined"
            },
            "defaultValue": null
          }
        },
        "header": {
          "name": "header",
          "description": "header component to be used as modal header.\nclose button is not part of header so it will not be replaced.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footerOptions": {
          "name": "footerOptions",
          "description": "Footer options (doesn't work if `footer` prop is used).\n\nUse `footer` prop if custom footer is needed.\n\n<pre className=\"DocPage-codeBlock\">\n  OverlayFooterOptions {\n    actions: ButtonProps[];\n  }\n([ButtonProps](https://innovaccer.github.io/design-system/?path=/docs/components-button-all--all))\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FooterOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "FooterOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "footer": {
          "name": "footer",
          "description": "footer component to be used as modal footer.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered as modal body.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "closeOnEscape": {
          "name": "closeOnEscape",
          "description": "Closes `FullScreenModal` when `Escape` key is pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-fullscreenmodal-customized--customized": {
    "id": "components-fullscreenmodal-customized--customized",
    "kind": "Components/FullscreenModal/Customized",
    "name": "Customized",
    "story": "Customized",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [open, setOpen] = React.useState(true);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const openModal = () => {\n    setOpen(true);\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n\n      <Button appearance=\"primary\" onClick={openModal}>\n        Open modal\n      </Button>\n\n      <FullscreenModal\n        open={open}\n        dimension=\"medium\"\n        onClose={onClose}\n        header={\n          <>\n            <Heading>Custom Heading component</Heading>\n            <Text appearance=\"subtle\">This is subheading</Text>\n          </>\n        }\n        footer={\n          <>\n            <Button appearance=\"basic\" onClick={action('Basic button click')}>\n              Basic\n            </Button>\n            <Button appearance=\"primary\" className=\"ml-4\" onClick={action('Primary button click')}>\n              Primary\n            </Button>\n          </>\n        }\n      >\n        <Text>Fullscreen Modal Body</Text>\n        <Heading size=\"s\">Description Title</Heading>\n        <Paragraph>Adding a subheading clearly indicates the hierarchy of the information.</Paragraph>\n        <Paragraph>\n          Card Sections include supporting text like an article summary or a restaurant description.\n        </Paragraph>\n      </FullscreenModal>\n    </div>\n  );\n}"
      },
      "__id": "components-fullscreenmodal-customized--customized",
      "args": {},
      "argTypes": {
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Fullscreen Modal`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"medium\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close state",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "onClose callback to be called on `Fullscreen Modal` close",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Header options (doesn't work if `header` prop is used)\n\nUse `header` prop if custom header is needed.\n\n<pre className=\"DocPage-codeBlock\">\nHeader:\n{\n    heading: string;\n    subHeading?: string;\n    backIcon?: boolean;\n    backIconCallback?: (e) => void;\n    backButton?: boolean;\n    backButtonCallback?: (e) => void;\n}\n</pre>\n\n**`backIcon` and `backIconCallback` will soon be deprecated**\n\n| Name | Description |\n| --- | --- |\n| heading | Heading of `Sidesheet` |\n| subHeading | Subheading of `Sidesheet` |\n| backButton | Determines if back button is visible |\n| backButtonCallback | Callback called when back button is clicked |\n| backIcon | Determines if back button is visible |\n| backIconCallback | Callback called when back button is clicked |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OverlayHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "OverlayHeaderProps | undefined"
            },
            "defaultValue": null
          }
        },
        "header": {
          "name": "header",
          "description": "header component to be used as modal header.\nclose button is not part of header so it will not be replaced.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footerOptions": {
          "name": "footerOptions",
          "description": "Footer options (doesn't work if `footer` prop is used).\n\nUse `footer` prop if custom footer is needed.\n\n<pre className=\"DocPage-codeBlock\">\n  OverlayFooterOptions {\n    actions: ButtonProps[];\n  }\n([ButtonProps](https://innovaccer.github.io/design-system/?path=/docs/components-button-all--all))\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FooterOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "FooterOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "footer": {
          "name": "footer",
          "description": "footer component to be used as modal footer.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered as modal body.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "closeOnEscape": {
          "name": "closeOnEscape",
          "description": "Closes `FullScreenModal` when `Escape` key is pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-fullscreenmodal-default-width--default-width": {
    "id": "components-fullscreenmodal-default-width--default-width",
    "kind": "Components/FullscreenModal/Default Width",
    "name": "Default Width",
    "story": "Default Width",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [open, setOpen] = React.useState(true);\n\n  const onClose = () => {\n    setOpen(!open);\n    action('on close triggered')();\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <FullscreenModal\n        open={open}\n        dimension=\"medium\"\n        onClose={onClose}\n        headerOptions={{\n          heading: 'New group',\n        }}\n        footer={\n          <>\n            <Button onClick={action('Cancel button click')}>Cancel</Button>\n            <Button appearance=\"primary\" className=\"ml-4\" onClick={action('Next button click')}>\n              Create\n            </Button>\n          </>\n        }\n      >\n        <Label withInput={true} required={true}>\n          Name\n        </Label>\n        <Input placeholder=\"Admin\" className=\"mb-5\" />\n        <Label withInput={true}>Description</Label>\n        <Textarea placeholder=\"Write a description\" />\n      </FullscreenModal>\n    </div>\n  );\n}"
      },
      "__id": "components-fullscreenmodal-default-width--default-width",
      "args": {},
      "argTypes": {
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Fullscreen Modal`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"medium\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close state",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "onClose callback to be called on `Fullscreen Modal` close",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Header options (doesn't work if `header` prop is used)\n\nUse `header` prop if custom header is needed.\n\n<pre className=\"DocPage-codeBlock\">\nHeader:\n{\n    heading: string;\n    subHeading?: string;\n    backIcon?: boolean;\n    backIconCallback?: (e) => void;\n    backButton?: boolean;\n    backButtonCallback?: (e) => void;\n}\n</pre>\n\n**`backIcon` and `backIconCallback` will soon be deprecated**\n\n| Name | Description |\n| --- | --- |\n| heading | Heading of `Sidesheet` |\n| subHeading | Subheading of `Sidesheet` |\n| backButton | Determines if back button is visible |\n| backButtonCallback | Callback called when back button is clicked |\n| backIcon | Determines if back button is visible |\n| backIconCallback | Callback called when back button is clicked |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OverlayHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "OverlayHeaderProps | undefined"
            },
            "defaultValue": null
          }
        },
        "header": {
          "name": "header",
          "description": "header component to be used as modal header.\nclose button is not part of header so it will not be replaced.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footerOptions": {
          "name": "footerOptions",
          "description": "Footer options (doesn't work if `footer` prop is used).\n\nUse `footer` prop if custom footer is needed.\n\n<pre className=\"DocPage-codeBlock\">\n  OverlayFooterOptions {\n    actions: ButtonProps[];\n  }\n([ButtonProps](https://innovaccer.github.io/design-system/?path=/docs/components-button-all--all))\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FooterOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "FooterOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "footer": {
          "name": "footer",
          "description": "footer component to be used as modal footer.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered as modal body.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "closeOnEscape": {
          "name": "closeOnEscape",
          "description": "Closes `FullScreenModal` when `Escape` key is pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-fullscreenmodal-large-width--large-width": {
    "id": "components-fullscreenmodal-large-width--large-width",
    "kind": "Components/FullscreenModal/Large Width",
    "name": "Large Width",
    "story": "Large Width",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [open, setOpen] = React.useState(true);\n\n  const onClose = () => {\n    setOpen(!open);\n    action('on close triggered')();\n  };\n\n  const data = [\n    { iconName: 'message', textMessage: 'Text Message' },\n    { iconName: 'chat_bubble', textMessage: 'Portal Message' },\n    { iconName: 'email', textMessage: 'E-mail' },\n    { iconName: 'markunread_mailbox', textMessage: 'Letter' },\n    { iconName: 'mic', textMessage: 'Voice Recording' },\n  ];\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <FullscreenModal\n        open={open}\n        dimension=\"large\"\n        onClose={onClose}\n        headerOptions={{\n          heading: 'New outreach',\n        }}\n        footer={\n          <>\n            <Button onClick={action('Cancel button click')}>Cancel</Button>\n            <Button appearance=\"primary\" className=\"ml-3\" onClick={action('Next button click')}>\n              Create\n            </Button>\n          </>\n        }\n      >\n        <Label withInput={true}>Type</Label>\n        <div className=\"d-flex\">\n          <Radio\n            defaultChecked={true}\n            label=\"Message outreach\"\n            name=\"Outreach\"\n            size=\"regular\"\n            value=\"Message outreach\"\n          />\n          <Radio label=\"Surevey outreach\" name=\"Outreach\" size=\"regular\" value=\"Surevey outreach\" className=\"ml-8\" />\n        </div>\n        <Label withInput={true} className=\"mt-6\">\n          Name\n        </Label>\n        <Input placeholder=\"e.g. Annual Welness Visit outreach, etc.\" className=\"mb-5 w-50\" />\n        <Label withInput={true}>Medium</Label>\n        <div className=\"d-flex\">\n          {data.map((obj, index) => {\n            return (\n              <Card\n                key={index}\n                shadow=\"none\"\n                style={{ height: '85px', width: '110px' }}\n                className=\"mr-4 d-flex flex-column align-items-center justify-content-center\"\n              >\n                <Icon name={obj.iconName} size={25} />\n                <Text className=\"pt-5\" size=\"small\" weight=\"strong\">\n                  {obj.textMessage}\n                </Text>\n              </Card>\n            );\n          })}\n        </div>\n      </FullscreenModal>\n    </div>\n  );\n}"
      },
      "__id": "components-fullscreenmodal-large-width--large-width",
      "args": {},
      "argTypes": {
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Fullscreen Modal`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"medium\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close state",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "onClose callback to be called on `Fullscreen Modal` close",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Header options (doesn't work if `header` prop is used)\n\nUse `header` prop if custom header is needed.\n\n<pre className=\"DocPage-codeBlock\">\nHeader:\n{\n    heading: string;\n    subHeading?: string;\n    backIcon?: boolean;\n    backIconCallback?: (e) => void;\n    backButton?: boolean;\n    backButtonCallback?: (e) => void;\n}\n</pre>\n\n**`backIcon` and `backIconCallback` will soon be deprecated**\n\n| Name | Description |\n| --- | --- |\n| heading | Heading of `Sidesheet` |\n| subHeading | Subheading of `Sidesheet` |\n| backButton | Determines if back button is visible |\n| backButtonCallback | Callback called when back button is clicked |\n| backIcon | Determines if back button is visible |\n| backIconCallback | Callback called when back button is clicked |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OverlayHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "OverlayHeaderProps | undefined"
            },
            "defaultValue": null
          }
        },
        "header": {
          "name": "header",
          "description": "header component to be used as modal header.\nclose button is not part of header so it will not be replaced.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footerOptions": {
          "name": "footerOptions",
          "description": "Footer options (doesn't work if `footer` prop is used).\n\nUse `footer` prop if custom footer is needed.\n\n<pre className=\"DocPage-codeBlock\">\n  OverlayFooterOptions {\n    actions: ButtonProps[];\n  }\n([ButtonProps](https://innovaccer.github.io/design-system/?path=/docs/components-button-all--all))\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FooterOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "FooterOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "footer": {
          "name": "footer",
          "description": "footer component to be used as modal footer.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered as modal body.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "closeOnEscape": {
          "name": "closeOnEscape",
          "description": "Closes `FullScreenModal` when `Escape` key is pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-fullscreenmodal-layering--layering": {
    "id": "components-fullscreenmodal-layering--layering",
    "kind": "Components/FullscreenModal/Layering",
    "name": "Layering",
    "story": "Layering",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [open, setOpen] = React.useState(true);\n  const [openSecondOverlay, setOpenSecondOverlay] = React.useState(false);\n  const dimension = select('dimension', ['medium', 'large'], 'medium');\n\n  const knobOpen = boolean('open', open);\n  const knobSecondOpen = boolean('openSecondOverlay', openSecondOverlay);\n\n  const onClose = () => {\n    setOpen(!open);\n    action('on close triggered')();\n    updateKnob('open', !open);\n  };\n\n  const onCloseSecondOverlay = () => {\n    setOpenSecondOverlay(!openSecondOverlay);\n    action('on close triggered')();\n    updateKnob('openSecondOverlay', !openSecondOverlay);\n  }\n\n  const openModal = () => {\n    setOpen(true);\n    updateKnob('open', !open);\n  };\n\n  const openSecondModal = () => {\n    setOpenSecondOverlay(true);\n    updateKnob('openSecondOverlay', true);\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n\n      <Button appearance=\"primary\" onClick={openModal}>\n        Open modal\n      </Button>\n\n      <FullscreenModal\n        closeOnEscape={true}\n        open={knobOpen}\n        dimension={dimension}\n        onClose={onClose}\n        headerOptions={{\n          heading: 'This is modal Heading',\n          subHeading: 'This is modal subheading',\n        }}\n        footerOptions={{\n          actions: [\n            {\n              children: 'Basic',\n              appearance: 'basic',\n              onClick: action('basic action'),\n            },\n            {\n              children: 'Open',\n              appearance: 'primary',\n              className: 'ml-4',\n              onClick: openSecondModal,\n            },\n          ],\n        }}\n      >\n        <Text>Fullscreen Modal Body</Text>\n        <Heading size=\"s\">Description Title</Heading>\n        <Paragraph>Adding a subheading clearly indicates the hierarchy of the information.</Paragraph>\n        <Paragraph>\n          Card Sections include supporting text like an article summary or a restaurant description.\n        </Paragraph>\n      </FullscreenModal>\n\n      <FullscreenModal\n        closeOnEscape={true}\n        open={knobSecondOpen}\n        dimension={dimension}\n        onClose={onCloseSecondOverlay}\n        headerOptions={{\n          heading: 'This is second modal Heading',\n          subHeading: 'This is second modal subheading',\n        }}\n        footerOptions={{\n          actions: [\n            {\n              children: 'Basic',\n              appearance: 'basic',\n              onClick: action('basic action'),\n            }\n          ],\n        }}\n      >\n        <Text>Fullscreen Modal Body Type Two</Text>\n        <Heading size=\"s\">Description Title Second</Heading>\n        <Paragraph>\n          Card Sections include supporting text like an article summary or a restaurant description.\n        </Paragraph>\n      </FullscreenModal>\n    </div>\n  );\n}"
      },
      "__id": "components-fullscreenmodal-layering--layering",
      "args": {},
      "argTypes": {
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Fullscreen Modal`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"medium\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close state",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "onClose callback to be called on `Fullscreen Modal` close",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Header options (doesn't work if `header` prop is used)\n\nUse `header` prop if custom header is needed.\n\n<pre className=\"DocPage-codeBlock\">\nHeader:\n{\n    heading: string;\n    subHeading?: string;\n    backIcon?: boolean;\n    backIconCallback?: (e) => void;\n    backButton?: boolean;\n    backButtonCallback?: (e) => void;\n}\n</pre>\n\n**`backIcon` and `backIconCallback` will soon be deprecated**\n\n| Name | Description |\n| --- | --- |\n| heading | Heading of `Sidesheet` |\n| subHeading | Subheading of `Sidesheet` |\n| backButton | Determines if back button is visible |\n| backButtonCallback | Callback called when back button is clicked |\n| backIcon | Determines if back button is visible |\n| backIconCallback | Callback called when back button is clicked |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OverlayHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "OverlayHeaderProps | undefined"
            },
            "defaultValue": null
          }
        },
        "header": {
          "name": "header",
          "description": "header component to be used as modal header.\nclose button is not part of header so it will not be replaced.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footerOptions": {
          "name": "footerOptions",
          "description": "Footer options (doesn't work if `footer` prop is used).\n\nUse `footer` prop if custom footer is needed.\n\n<pre className=\"DocPage-codeBlock\">\n  OverlayFooterOptions {\n    actions: ButtonProps[];\n  }\n([ButtonProps](https://innovaccer.github.io/design-system/?path=/docs/components-button-all--all))\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FooterOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "FooterOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "footer": {
          "name": "footer",
          "description": "footer component to be used as modal footer.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered as modal body.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "closeOnEscape": {
          "name": "closeOnEscape",
          "description": "Closes `FullScreenModal` when `Escape` key is pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-fullscreenmodal-scrolling--scrolling": {
    "id": "components-fullscreenmodal-scrolling--scrolling",
    "kind": "Components/FullscreenModal/Scrolling",
    "name": "Scrolling",
    "story": "Scrolling",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [open, setOpen] = React.useState(true);\n\n  const onClose = () => {\n    setOpen(!open);\n    action('on close triggered')();\n  };\n\n  const data = [\n    {\n      question: 'Do you experience any of the following in your current place of residence? [Select all that apply]',\n      options: [\n        'Deteriorating appearance',\n        'Inoperable plumbing',\n        'Inadequate wining',\n        'Leaking roofs',\n        'Crumbling foundations',\n        'Unsafe steps',\n        'in poor condition',\n        'None of the above',\n      ],\n    },\n    {\n      question: 'In last 12 months, were you worried that your food would run out before you got money to buy more?',\n      options: ['Yes', 'No'],\n    },\n    {\n      question:\n        'Moving or speaking so slowly that other people could have noticed? Or the opposite - being so fidgety or restless that you have been moving around a lot more than usual',\n      options: ['Not at all', 'Several Days', 'More than half the days', 'Nearly every day'],\n    },\n    { question: 'Feeling tired or having little energy?', options: ['Yes', 'No'] },\n    {\n      question:\n        'Moving or speaking so slowly that other people could have noticed? Or the opposite - being so fidgety or restless that you have been moving around a lot more than usual',\n      options: ['Not at all', 'Several Days', 'More than half the days', 'Nearly every day'],\n    },\n    {\n      question:\n        'Moving or speaking so slowly that other people could have noticed? Or the opposite - being so fidgety or restless that you have been moving around a lot more than usual',\n      options: ['Not at all', 'Several Days', 'More than half the days', 'Nearly every day'],\n    },\n    {\n      question:\n        'Moving or speaking so slowly that other people could have noticed? Or the opposite - being so fidgety or restless that you have been moving around a lot more than usual',\n      options: ['Not at all', 'Several Days', 'More than half the days', 'Nearly every day'],\n    },\n  ];\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <FullscreenModal\n        open={open}\n        dimension=\"large\"\n        onClose={onClose}\n        headerOptions={{\n          heading: 'Survey',\n        }}\n        footer={\n          <>\n            <Button onClick={action('Cancel button click')}>Cancel</Button>\n            <Button appearance=\"primary\" className=\"ml-4\" onClick={action('Next button click')}>\n              Next\n            </Button>\n          </>\n        }\n      >\n        <div className=\"mt-5\">\n          <Text weight=\"strong\">All questions must be answered, unless marked</Text>\n          <br />\n          {data.map((object, index) => {\n            return (\n              <div key={index} className=\"mt-5 d-flex\">\n                <div>\n                  <Text size=\"small\" className=\"mr-4\">\n                    {`${index + 1}.`}\n                  </Text>\n                </div>\n                <div className=\"d-inline-block ml-2\">\n                  <Text size=\"small\">{object.question}</Text>\n                  <div className=\"mb-5 mt-3\">\n                    {object.options.map((option: string, ind: number) => {\n                      return (\n                        <Button key={ind} className=\"mr-4 mt-4 d-inline\" size=\"tiny\">\n                          {option}\n                        </Button>\n                      );\n                    })}\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </FullscreenModal>\n    </div>\n  );\n}"
      },
      "__id": "components-fullscreenmodal-scrolling--scrolling",
      "args": {},
      "argTypes": {
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Fullscreen Modal`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"medium\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close state",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "onClose callback to be called on `Fullscreen Modal` close",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Header options (doesn't work if `header` prop is used)\n\nUse `header` prop if custom header is needed.\n\n<pre className=\"DocPage-codeBlock\">\nHeader:\n{\n    heading: string;\n    subHeading?: string;\n    backIcon?: boolean;\n    backIconCallback?: (e) => void;\n    backButton?: boolean;\n    backButtonCallback?: (e) => void;\n}\n</pre>\n\n**`backIcon` and `backIconCallback` will soon be deprecated**\n\n| Name | Description |\n| --- | --- |\n| heading | Heading of `Sidesheet` |\n| subHeading | Subheading of `Sidesheet` |\n| backButton | Determines if back button is visible |\n| backButtonCallback | Callback called when back button is clicked |\n| backIcon | Determines if back button is visible |\n| backIconCallback | Callback called when back button is clicked |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OverlayHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "OverlayHeaderProps | undefined"
            },
            "defaultValue": null
          }
        },
        "header": {
          "name": "header",
          "description": "header component to be used as modal header.\nclose button is not part of header so it will not be replaced.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footerOptions": {
          "name": "footerOptions",
          "description": "Footer options (doesn't work if `footer` prop is used).\n\nUse `footer` prop if custom footer is needed.\n\n<pre className=\"DocPage-codeBlock\">\n  OverlayFooterOptions {\n    actions: ButtonProps[];\n  }\n([ButtonProps](https://innovaccer.github.io/design-system/?path=/docs/components-button-all--all))\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FooterOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "FooterOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "footer": {
          "name": "footer",
          "description": "footer component to be used as modal footer.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered as modal body.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "closeOnEscape": {
          "name": "closeOnEscape",
          "description": "Closes `FullScreenModal` when `Escape` key is pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-fullscreenmodal-two-steps--two-steps": {
    "id": "components-fullscreenmodal-two-steps--two-steps",
    "kind": "Components/FullscreenModal/Two Steps",
    "name": "Two Steps",
    "story": "Two Steps",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [open, setOpen] = React.useState(true);\n  const [page, setPage] = React.useState(0);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const openModal = () => {\n    setOpen(true);\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n\n      <Button appearance=\"primary\" onClick={openModal}>\n        Open modal\n      </Button>\n\n      <FullscreenModal\n        open={open}\n        dimension=\"medium\"\n        onClose={onClose}\n        headerOptions={{\n          heading: 'This is modal Heading',\n          subHeading: 'This is modal subheading',\n          backButton: !!page,\n          backButtonCallback: () => setPage(0),\n        }}\n        footer={\n          <>\n            {page === 0 && (\n              <Button appearance=\"primary\" onClick={() => setPage(1)}>\n                Next\n              </Button>\n            )}\n            {page === 1 && (\n              <>\n                <Button appearance=\"primary\">Submit</Button>\n                <Button appearance=\"basic\" onClick={() => setPage(0)} className=\"ml-4\">\n                  Back\n                </Button>\n              </>\n            )}\n          </>\n        }\n      >\n        {page === 0 && (\n          <>\n            <Text>Fullscreen Modal Body</Text>\n            <Heading size=\"s\">Description Title</Heading>\n            <Paragraph>Adding a subheading clearly indicates the hierarchy of the information.</Paragraph>\n            <Paragraph>\n              Card Sections include supporting text like an article summary or a restaurant description.\n            </Paragraph>\n          </>\n        )}\n        {page === 1 && (\n          <>\n            <Text>This is some info</Text>\n            <Heading size=\"s\">Second screen</Heading>\n            <Paragraph>\n              This screen may be used as info screen or read more, for multiple step forms please use steppers.\n            </Paragraph>\n            <Paragraph>\n              Card Sections include supporting text like an article summary or a restaurant description.\n            </Paragraph>\n          </>\n        )}\n      </FullscreenModal>\n    </div>\n  );\n}"
      },
      "__id": "components-fullscreenmodal-two-steps--two-steps",
      "args": {},
      "argTypes": {
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Fullscreen Modal`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"medium\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close state",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "onClose callback to be called on `Fullscreen Modal` close",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Header options (doesn't work if `header` prop is used)\n\nUse `header` prop if custom header is needed.\n\n<pre className=\"DocPage-codeBlock\">\nHeader:\n{\n    heading: string;\n    subHeading?: string;\n    backIcon?: boolean;\n    backIconCallback?: (e) => void;\n    backButton?: boolean;\n    backButtonCallback?: (e) => void;\n}\n</pre>\n\n**`backIcon` and `backIconCallback` will soon be deprecated**\n\n| Name | Description |\n| --- | --- |\n| heading | Heading of `Sidesheet` |\n| subHeading | Subheading of `Sidesheet` |\n| backButton | Determines if back button is visible |\n| backButtonCallback | Callback called when back button is clicked |\n| backIcon | Determines if back button is visible |\n| backIconCallback | Callback called when back button is clicked |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OverlayHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "OverlayHeaderProps | undefined"
            },
            "defaultValue": null
          }
        },
        "header": {
          "name": "header",
          "description": "header component to be used as modal header.\nclose button is not part of header so it will not be replaced.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footerOptions": {
          "name": "footerOptions",
          "description": "Footer options (doesn't work if `footer` prop is used).\n\nUse `footer` prop if custom footer is needed.\n\n<pre className=\"DocPage-codeBlock\">\n  OverlayFooterOptions {\n    actions: ButtonProps[];\n  }\n([ButtonProps](https://innovaccer.github.io/design-system/?path=/docs/components-button-all--all))\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FooterOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "FooterOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "footer": {
          "name": "footer",
          "description": "footer component to be used as modal footer.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered as modal body.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "closeOnEscape": {
          "name": "closeOnEscape",
          "description": "Closes `FullScreenModal` when `Escape` key is pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-fullscreenmodal-two-steps-workflow--two-steps-workflow": {
    "id": "components-fullscreenmodal-two-steps-workflow--two-steps-workflow",
    "kind": "Components/FullscreenModal/Two Steps Workflow",
    "name": "Two Steps Workflow",
    "story": "Two Steps Workflow",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [open, setOpen] = React.useState(true);\n  const [page, setPage] = React.useState(0);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const openModal = () => {\n    setOpen(true);\n  };\n\n  const headerOptions = () => {\n    if (page === 0) {\n      return {\n        heading: 'New Care Plan',\n      };\n    }\n    return {\n      heading: 'Name the care Plan',\n      backButton: true,\n      backButtonCallback: () => setPage(0),\n    };\n  };\n\n  const data = [\n    { name: 'Cultural and language barriers', icon: 'cancel' },\n    { name: 'Patient does not show Emotion', icon: 'cancel' },\n  ];\n\n  const schema: TableProps['schema'] = [\n    {\n      name: 'name',\n      displayName: 'name',\n      width: '80%',\n    },\n    {\n      name: 'icon',\n      displayName: 'icon',\n      width: '20%',\n      minWidth: '10',\n      cellType: 'ICON',\n      align: 'right',\n    },\n  ];\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n\n      <Button appearance=\"primary\" onClick={openModal}>\n        Open modal\n      </Button>\n\n      <FullscreenModal\n        open={open}\n        dimension=\"medium\"\n        onClose={onClose}\n        headerOptions={headerOptions()}\n        footer={\n          <>\n            {page === 0 && (\n              <>\n                <Button>Cancel</Button>\n                <Button appearance=\"primary\" onClick={() => setPage(1)} className=\"ml-4\">\n                  Continue\n                </Button>\n              </>\n            )}\n            {page === 1 && (\n              <>\n                <Button>Cancel</Button>\n                <Button appearance=\"primary\" className=\"ml-4\">\n                  Continue\n                </Button>\n              </>\n            )}\n          </>\n        }\n      >\n        {page === 0 && (\n          <>\n            <Text weight=\"strong\" size=\"regular\">\n              Identify patient needs\n            </Text>\n            <br />\n            <Text size=\"small\">Identify the patient needs to create a care plan for the patient</Text>\n            <Input placeholder=\"Add patient needs\" size=\"tiny\" className=\"my-5\" />\n            <Text weight=\"strong\" size=\"regular\">\n              2 Selected\n            </Text>\n            <br />\n            <Card className=\"w-100\" shadow=\"none\">\n              <List data={data} schema={schema} size=\"tight\" />\n            </Card>\n          </>\n        )}\n        {page === 1 && (\n          <>\n            <Text size=\"small\">Give a meaningful and easy to understand name to the care plan.</Text>\n            <br />\n            <Label required={true} className=\"mt-5\">\n              Name\n            </Label>\n            <Input placeholder=\"Name\" size=\"tiny\" className=\"mt-2\" />\n          </>\n        )}\n      </FullscreenModal>\n    </div>\n  );\n}"
      },
      "__id": "components-fullscreenmodal-two-steps-workflow--two-steps-workflow",
      "args": {},
      "argTypes": {
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Fullscreen Modal`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"medium\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close state",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "onClose callback to be called on `Fullscreen Modal` close",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Header options (doesn't work if `header` prop is used)\n\nUse `header` prop if custom header is needed.\n\n<pre className=\"DocPage-codeBlock\">\nHeader:\n{\n    heading: string;\n    subHeading?: string;\n    backIcon?: boolean;\n    backIconCallback?: (e) => void;\n    backButton?: boolean;\n    backButtonCallback?: (e) => void;\n}\n</pre>\n\n**`backIcon` and `backIconCallback` will soon be deprecated**\n\n| Name | Description |\n| --- | --- |\n| heading | Heading of `Sidesheet` |\n| subHeading | Subheading of `Sidesheet` |\n| backButton | Determines if back button is visible |\n| backButtonCallback | Callback called when back button is clicked |\n| backIcon | Determines if back button is visible |\n| backIconCallback | Callback called when back button is clicked |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OverlayHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "OverlayHeaderProps | undefined"
            },
            "defaultValue": null
          }
        },
        "header": {
          "name": "header",
          "description": "header component to be used as modal header.\nclose button is not part of header so it will not be replaced.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footerOptions": {
          "name": "footerOptions",
          "description": "Footer options (doesn't work if `footer` prop is used).\n\nUse `footer` prop if custom footer is needed.\n\n<pre className=\"DocPage-codeBlock\">\n  OverlayFooterOptions {\n    actions: ButtonProps[];\n  }\n([ButtonProps](https://innovaccer.github.io/design-system/?path=/docs/components-button-all--all))\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FooterOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "FooterOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "footer": {
          "name": "footer",
          "description": "footer component to be used as modal footer.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered as modal body.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "closeOnEscape": {
          "name": "closeOnEscape",
          "description": "Closes `FullScreenModal` when `Escape` key is pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-fullscreenmodal-variants-dimesion-large--large": {
    "id": "components-fullscreenmodal-variants-dimesion-large--large",
    "kind": "Components/FullscreenModal/Variants/Dimesion/Large",
    "name": "Large",
    "story": "Large",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [open, setOpen] = React.useState(true);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const openModal = () => {\n    setOpen(true);\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n\n      <Button appearance=\"primary\" onClick={openModal}>\n        Open modal\n      </Button>\n\n      <FullscreenModal\n        open={open}\n        dimension=\"large\"\n        onClose={onClose}\n        headerOptions={{\n          heading: 'This is modal Heading',\n          subHeading: 'This is modal subheading',\n        }}\n        footerOptions={{\n          actions: [\n            {\n              children: 'Basic',\n              appearance: 'basic',\n              onClick: action('Basic button click'),\n            },\n            {\n              children: 'Primary',\n              appearance: 'primary',\n              className: 'ml-4',\n              onClick: action('Primary button click'),\n            },\n          ],\n        }}\n      >\n        <Text>Fullscreen Modal Body</Text>\n        <Heading size=\"s\">Description Title</Heading>\n        <Paragraph>Adding a subheading clearly indicates the hierarchy of the information.</Paragraph>\n        <Paragraph>\n          Card Sections include supporting text like an article summary or a restaurant description.\n        </Paragraph>\n      </FullscreenModal>\n    </div>\n  );\n}"
      },
      "__id": "components-fullscreenmodal-variants-dimesion-large--large",
      "args": {},
      "argTypes": {
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Fullscreen Modal`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"medium\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close state",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "onClose callback to be called on `Fullscreen Modal` close",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Header options (doesn't work if `header` prop is used)\n\nUse `header` prop if custom header is needed.\n\n<pre className=\"DocPage-codeBlock\">\nHeader:\n{\n    heading: string;\n    subHeading?: string;\n    backIcon?: boolean;\n    backIconCallback?: (e) => void;\n    backButton?: boolean;\n    backButtonCallback?: (e) => void;\n}\n</pre>\n\n**`backIcon` and `backIconCallback` will soon be deprecated**\n\n| Name | Description |\n| --- | --- |\n| heading | Heading of `Sidesheet` |\n| subHeading | Subheading of `Sidesheet` |\n| backButton | Determines if back button is visible |\n| backButtonCallback | Callback called when back button is clicked |\n| backIcon | Determines if back button is visible |\n| backIconCallback | Callback called when back button is clicked |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OverlayHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "OverlayHeaderProps | undefined"
            },
            "defaultValue": null
          }
        },
        "header": {
          "name": "header",
          "description": "header component to be used as modal header.\nclose button is not part of header so it will not be replaced.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footerOptions": {
          "name": "footerOptions",
          "description": "Footer options (doesn't work if `footer` prop is used).\n\nUse `footer` prop if custom footer is needed.\n\n<pre className=\"DocPage-codeBlock\">\n  OverlayFooterOptions {\n    actions: ButtonProps[];\n  }\n([ButtonProps](https://innovaccer.github.io/design-system/?path=/docs/components-button-all--all))\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FooterOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "FooterOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "footer": {
          "name": "footer",
          "description": "footer component to be used as modal footer.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered as modal body.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "closeOnEscape": {
          "name": "closeOnEscape",
          "description": "Closes `FullScreenModal` when `Escape` key is pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-fullscreenmodal-variants-dimesion-medium--medium": {
    "id": "components-fullscreenmodal-variants-dimesion-medium--medium",
    "kind": "Components/FullscreenModal/Variants/Dimesion/Medium",
    "name": "Medium",
    "story": "Medium",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [open, setOpen] = React.useState(true);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const openModal = () => {\n    setOpen(true);\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n\n      <Button appearance=\"primary\" onClick={openModal}>\n        Open modal\n      </Button>\n\n      <FullscreenModal\n        open={open}\n        dimension=\"medium\"\n        onClose={onClose}\n        headerOptions={{\n          heading: 'This is modal Heading',\n          subHeading: 'This is modal subheading',\n        }}\n        footerOptions={{\n          actions: [\n            {\n              children: 'Basic',\n              appearance: 'basic',\n              onClick: action('Basic button click'),\n            },\n            {\n              children: 'Primary',\n              appearance: 'primary',\n              className: 'ml-4',\n              onClick: action('Primary button click'),\n            },\n          ],\n        }}\n      >\n        <Text>Fullscreen Modal Body</Text>\n        <Heading size=\"s\">Description Title</Heading>\n        <Paragraph>Adding a subheading clearly indicates the hierarchy of the information.</Paragraph>\n        <Paragraph>\n          Card Sections include supporting text like an article summary or a restaurant description.\n        </Paragraph>\n      </FullscreenModal>\n    </div>\n  );\n}"
      },
      "__id": "components-fullscreenmodal-variants-dimesion-medium--medium",
      "args": {},
      "argTypes": {
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Fullscreen Modal`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"medium\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close state",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "onClose callback to be called on `Fullscreen Modal` close",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Header options (doesn't work if `header` prop is used)\n\nUse `header` prop if custom header is needed.\n\n<pre className=\"DocPage-codeBlock\">\nHeader:\n{\n    heading: string;\n    subHeading?: string;\n    backIcon?: boolean;\n    backIconCallback?: (e) => void;\n    backButton?: boolean;\n    backButtonCallback?: (e) => void;\n}\n</pre>\n\n**`backIcon` and `backIconCallback` will soon be deprecated**\n\n| Name | Description |\n| --- | --- |\n| heading | Heading of `Sidesheet` |\n| subHeading | Subheading of `Sidesheet` |\n| backButton | Determines if back button is visible |\n| backButtonCallback | Callback called when back button is clicked |\n| backIcon | Determines if back button is visible |\n| backIconCallback | Callback called when back button is clicked |",
          "type": {
            "required": false,
            "name": "other",
            "value": "OverlayHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "OverlayHeaderProps | undefined"
            },
            "defaultValue": null
          }
        },
        "header": {
          "name": "header",
          "description": "header component to be used as modal header.\nclose button is not part of header so it will not be replaced.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footerOptions": {
          "name": "footerOptions",
          "description": "Footer options (doesn't work if `footer` prop is used).\n\nUse `footer` prop if custom footer is needed.\n\n<pre className=\"DocPage-codeBlock\">\n  OverlayFooterOptions {\n    actions: ButtonProps[];\n  }\n([ButtonProps](https://innovaccer.github.io/design-system/?path=/docs/components-button-all--all))\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FooterOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "FooterOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "footer": {
          "name": "footer",
          "description": "footer component to be used as modal footer.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered as modal body.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "closeOnEscape": {
          "name": "closeOnEscape",
          "description": "Closes `FullScreenModal` when `Escape` key is pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-grid-all--all": {
    "id": "components-grid-all--all",
    "kind": "Components/Grid/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const applyLoaderSchema = boolean('applyLoaderSchema', true);\n\n  const loading = boolean('loading', false);\n\n  const error = boolean('error', false);\n\n  const applySchema = boolean('applySchema', true);\n\n  const applyData = boolean('applyData', true);\n\n  const totalRecords = number('totalRecords', data.length);\n\n  const type = select('type', ['resource', 'data'], 'resource');\n\n  const size = select('size', ['comfortable', 'standard', 'compressed', 'tight'], 'comfortable');\n\n  const draggable = boolean('draggable', true);\n\n  const nestedRows = boolean('nestedRows', false);\n\n  const withCheckbox = boolean('withCheckbox', false);\n\n  const showMenu = boolean('showMenu', true);\n\n  const withPagination = boolean('withPagination', false);\n\n  const page = number('page', 1);\n\n  const pageSize = number('pageSize', 12);\n\n  const headCellTooltip = boolean('headCellTooltip', false);\n\n  const separator = boolean('separator', false);\n\n  return (\n    <div\n      style={{\n        height: '350px',\n      }}\n    >\n      <Card className=\"h-100 overflow-hidden\">\n        <Grid\n          schema={applySchema ? schema : undefined}\n          data={applyData ? data : undefined}\n          loading={loading}\n          error={error}\n          errorTemplate={errorTemplate}\n          totalRecords={totalRecords}\n          withCheckbox={withCheckbox}\n          showMenu={showMenu}\n          type={type}\n          size={size}\n          headCellTooltip={headCellTooltip}\n          separator={separator}\n          draggable={draggable}\n          nestedRows={nestedRows}\n          nestedRowRenderer={nestedRowRenderer}\n          withPagination={withPagination}\n          page={page}\n          pageSize={pageSize}\n          loaderSchema={applyLoaderSchema ? loaderSchema : undefined}\n          onRowClick={(rowData, rowIndex) =>\n            action(`on-row-click:- rowIndex: ${rowIndex} data: ${JSON.stringify(rowData)}`)()\n          }\n          onSelect={(rowIndex, selected) => action(`on-select:- rowIndex: ${rowIndex} selected: ${selected}`)()}\n          onSelectAll={(selected, selectedAll) => {\n            action(`on-select:- selected: ${selected} selectedAll: ${selectedAll}`)();\n          }}\n          sortingList={[{ name: 'name', type: 'desc' }]}\n          filterList={{\n            name: ['h-r', 's-z'],\n          }}\n        />\n      </Card>\n    </div>\n  );\n}"
      },
      "__id": "components-grid-all--all",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Controls spacing of `Grid`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "standard",
              "compressed",
              "tight",
              "comfortable"
            ]
          },
          "table": {
            "type": {
              "summary": "\"standard\" | \"compressed\" | \"tight\" | \"comfortable\""
            },
            "defaultValue": {
              "summary": "\"standard\""
            }
          }
        },
        "type": {
          "name": "type",
          "description": "Grid type",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "data",
              "resource"
            ]
          },
          "table": {
            "type": {
              "summary": "\"data\" | \"resource\""
            },
            "defaultValue": {
              "summary": "\"data\""
            }
          }
        },
        "onRowClick": {
          "name": "onRowClick",
          "description": "Callback on Row click in case of `Resource Grid`",
          "type": {
            "required": false,
            "name": "other",
            "value": "onRowClickFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "onRowClickFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "loaderSchema": {
          "name": "loaderSchema",
          "description": "Schema used to render `loading` state",
          "type": {
            "required": true,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "schema": {
          "name": "schema",
          "description": "Schema used to render `data` object",
          "type": {
            "required": true,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "data": {
          "name": "data",
          "description": "Data object",
          "type": {
            "required": true,
            "name": "other",
            "value": "Data"
          },
          "table": {
            "type": {
              "summary": "Data"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "totalRecords": {
          "name": "totalRecords",
          "description": "Total records in grid",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "Loading state of Grid",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "error": {
          "name": "error",
          "description": "Error state of Grid",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "updateData": {
          "name": "updateData",
          "description": "Callback to be called to get the updated data",
          "type": {
            "required": false,
            "name": "function",
            "value": "(() => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "(() => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "updateSchema": {
          "name": "updateSchema",
          "description": "Callback to be called to get the updated data",
          "type": {
            "required": false,
            "name": "other",
            "value": "updateSchemaFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "updateSchemaFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "showHead": {
          "name": "showHead",
          "description": "Shows grid head",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "showMenu": {
          "name": "showMenu",
          "description": "Shows menu in head cell",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "draggable": {
          "name": "draggable",
          "description": "Allows dragging of column",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "nestedRows": {
          "name": "nestedRows",
          "description": "Allows nested rows",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "nestedRowRenderer": {
          "name": "nestedRowRenderer",
          "description": "Renderer to be used for nested rows",
          "type": {
            "required": false,
            "name": "other",
            "value": "FC<NestedRowProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FC<NestedRowProps> | undefined"
            },
            "defaultValue": null
          }
        },
        "withPagination": {
          "name": "withPagination",
          "description": "Shows pagination component",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "page": {
          "name": "page",
          "description": "Current page",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "pageSize": {
          "name": "pageSize",
          "description": "Number of rows on a page",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "15"
            }
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Shows checkbox in the left most column",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onSelect": {
          "name": "onSelect",
          "description": "Callback on row select",
          "type": {
            "required": false,
            "name": "other",
            "value": "onSelectFn | undefined"
          },
          "table": {
            "type": {
              "summary": "onSelectFn | undefined"
            },
            "defaultValue": null
          }
        },
        "onSelectAll": {
          "name": "onSelectAll",
          "description": "Callback on column head select",
          "type": {
            "required": false,
            "name": "other",
            "value": "onSelectAllFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "onSelectAllFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "errorTemplate": {
          "name": "errorTemplate",
          "description": "Error Template\n**Functional Component will be deprecated soon**",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | boolean | {} | ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | ... 4 more ... | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | boolean | {} | ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | ... 4 more ... | undefined"
            },
            "defaultValue": null
          }
        },
        "sortingList": {
          "name": "sortingList",
          "description": "Sorting List",
          "type": {
            "required": true,
            "name": "other",
            "value": "{ name: string; type: SortType; }[]"
          },
          "table": {
            "type": {
              "summary": "{ name: string; type: SortType; }[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "updateSortingList": {
          "name": "updateSortingList",
          "description": "update Sorting List Callback",
          "type": {
            "required": false,
            "name": "other",
            "value": "updateSortingListFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "updateSortingListFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "filterList": {
          "name": "filterList",
          "description": "Filter List",
          "type": {
            "required": true,
            "name": "other",
            "value": "Record<string, Filter>"
          },
          "table": {
            "type": {
              "summary": "Record<string, Filter>"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "updateFilterList": {
          "name": "updateFilterList",
          "description": "update Filter List Callback",
          "type": {
            "required": false,
            "name": "other",
            "value": "updateFilterListFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "updateFilterListFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "selectAll": {
          "name": "selectAll",
          "description": "Select All",
          "type": {
            "required": false,
            "name": "other",
            "value": "{ checked: boolean; indeterminate: boolean; } | undefined"
          },
          "table": {
            "type": {
              "summary": "{ checked: boolean; indeterminate: boolean; } | undefined"
            },
            "defaultValue": null
          }
        },
        "headCellTooltip": {
          "name": "headCellTooltip",
          "description": "Shows tooltip on Head Cell hover",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "separator": {
          "name": "separator",
          "description": "Shows left separator to all columns\n\n**Can be override by Column Schema**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showFilters": {
          "name": "showFilters",
          "description": "Show filters in Head Cell",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-grid-grid-cell--grid-cell": {
    "id": "components-grid-grid-cell--grid-cell",
    "kind": "Components/Grid/Grid Cell",
    "name": "Grid Cell",
    "story": "Grid Cell",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const schema = {\n    name: 'name',\n    displayName: 'Name',\n  };\n\n  const size = select('size', ['comfortable', 'standard', 'compressed', 'tight'], 'comfortable');\n\n  const width = number('width', 250);\n\n  const cellType = select(\n    'cellType',\n    ['DEFAULT', 'WITH_META_LIST', 'AVATAR', 'AVATAR_WITH_TEXT', 'AVATAR_WITH_META_LIST', 'STATUS_HINT', 'ICON'],\n    undefined\n  );\n\n  const align = select('align', ['left', 'center', 'right'], 'left');\n\n  const tooltip = boolean('tooltip', true);\n\n  const loading = boolean('loading', false);\n\n  return (\n    <div className=\"Grid-cell Grid-cell--body\" style={{ width, border: 'var(--border)' }}>\n      <div className=\"Grid-cellContent\">\n        <GridCell\n          size={size}\n          rowIndex={1}\n          colIndex={1}\n          loading={loading}\n          data={{\n            name: {\n              title: 'Schreiber Brynn',\n              metaList: ['Meta Item 1', 'Meta Item 2'],\n              icon: 'events',\n            },\n          }}\n          schema={{\n            ...schema,\n            width,\n            cellType,\n            align,\n            tooltip,\n          }}\n        />\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-grid-grid-cell--grid-cell",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Grid size",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "standard",
              "compressed",
              "tight",
              "comfortable"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"standard\" | \"compressed\" | \"tight\" | \"comfortable\""
            },
            "defaultValue": null
          }
        },
        "rowIndex": {
          "name": "rowIndex",
          "description": "Row index for cell",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "colIndex": {
          "name": "colIndex",
          "description": "Column index for cell",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "data": {
          "name": "data",
          "description": "Row data",
          "type": {
            "required": true,
            "name": "other",
            "value": "RowData"
          },
          "table": {
            "type": {
              "summary": "RowData"
            },
            "defaultValue": null
          }
        },
        "schema": {
          "name": "schema",
          "description": "Column schema",
          "type": {
            "required": true,
            "name": "other",
            "value": "ColumnSchema"
          },
          "table": {
            "type": {
              "summary": "ColumnSchema"
            },
            "defaultValue": null
          }
        },
        "loading": {
          "name": "loading",
          "description": "Loading state of cell",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Expanded state of row",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-grid-variants-loading--loading": {
    "id": "components-grid-variants-loading--loading",
    "kind": "Components/Grid/Variants/Loading",
    "name": "Loading",
    "story": "Loading",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const schema = [\n    {\n      name: 'name',\n      displayName: 'Name',\n      width: '50%',\n    },\n    {\n      name: 'gender',\n      displayName: 'Gender',\n      width: '50%',\n    },\n  ];\n\n  return <Grid totalRecords={10} pageSize={5} schema={schema} loading={true} />;\n}"
      },
      "__id": "components-grid-variants-loading--loading",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-heading-all--all": {
    "id": "components-heading-all--all",
    "kind": "Components/Heading/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const appearance = optionsKnob(\n    'appearance',\n    { undefined, default: 'default', subtle: 'subtle', disabled: 'disabled', white: 'white' },\n    undefined,\n    {\n      display: 'inline-radio',\n    }\n  );\n\n  const size = optionsKnob('size', { s: 's', m: 'm', l: 'l', xl: 'xl', xxl: 'xxl' }, undefined, {\n    display: 'inline-radio',\n  });\n\n  return (\n    <div style={{ background: appearance === 'white' ? 'black' : 'transparent' }}>\n      <Heading appearance={appearance} size={size}>\n        Heading component have different varients, look for options in knobs tab.\n      </Heading>\n    </div>\n  );\n}"
      },
      "__id": "components-heading-all--all",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "Text to be rendered",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Heading`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "default",
              "disabled",
              "subtle",
              "white"
            ]
          },
          "table": {
            "type": {
              "summary": "\"default\" | \"disabled\" | \"subtle\" | \"white\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "size of `Heading`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "m",
              "s",
              "l",
              "xl",
              "xxl"
            ]
          },
          "table": {
            "type": {
              "summary": "\"m\" | \"s\" | \"l\" | \"xl\" | \"xxl\""
            },
            "defaultValue": {
              "summary": "\"m\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-heading-variants-appearance--appearance": {
    "id": "components-heading-variants-appearance--appearance",
    "kind": "Components/Heading/Variants/Appearance",
    "name": "Appearance",
    "story": "Appearance",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const appearances: Appearance[] = ['default', 'subtle', 'disabled', 'white'];\n  return (\n    <div className=\"Row\">\n      {appearances.map((appear, ind) => {\n        return (\n          <div key={ind} className=\"mr-7\">\n            <div style={{ background: appear === 'white' ? 'black' : 'transparent' }}>\n              <Heading appearance={appear}>Heading</Heading>\n            </div>\n            <br />\n            <Text weight=\"strong\">{appear.charAt(0).toUpperCase() + appear.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-heading-variants-appearance--appearance",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "Text to be rendered",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Heading`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "default",
              "disabled",
              "subtle",
              "white"
            ]
          },
          "table": {
            "type": {
              "summary": "\"default\" | \"disabled\" | \"subtle\" | \"white\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "size of `Heading`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "m",
              "s",
              "l",
              "xl",
              "xxl"
            ]
          },
          "table": {
            "type": {
              "summary": "\"m\" | \"s\" | \"l\" | \"xl\" | \"xxl\""
            },
            "defaultValue": {
              "summary": "\"m\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-heading-variants-size--size": {
    "id": "components-heading-variants-size--size",
    "kind": "Components/Heading/Variants/Size",
    "name": "Size",
    "story": "Size",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const sizes: Size[] = ['s', 'm', 'l', 'xl', 'xxl'];\n\n  return (\n    <div className=\"Row\">\n      {sizes.map((HeadingSize, ind) => {\n        return (\n          <div key={ind} className=\"mr-7\">\n            <div className=\"h-50\">\n              <Heading size={HeadingSize}>Heading</Heading>\n            </div>\n            <br />\n            <Text weight=\"strong\">{HeadingSize}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-heading-variants-size--size",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "Text to be rendered",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Heading`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "default",
              "disabled",
              "subtle",
              "white"
            ]
          },
          "table": {
            "type": {
              "summary": "\"default\" | \"disabled\" | \"subtle\" | \"white\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "size of `Heading`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "m",
              "s",
              "l",
              "xl",
              "xxl"
            ]
          },
          "table": {
            "type": {
              "summary": "\"m\" | \"s\" | \"l\" | \"xl\" | \"xxl\""
            },
            "defaultValue": {
              "summary": "\"m\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-horizontalnav-all--all": {
    "id": "components-horizontalnav-all--all",
    "kind": "Components/HorizontalNav/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const data = [\n    {\n      name: 'menu_1',\n      label: 'Menu 1',\n      icon: 'event',\n    },\n    {\n      name: 'menu_2',\n      label: 'Menu 2',\n      count: 10,\n    },\n    {\n      name: 'menu_3',\n      label: 'Menu 3',\n      disabled: true,\n    },\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'menu_1',\n  });\n\n  const onClickHandler = (menu: Menu) => {\n    action(`menu-clicked: ${JSON.stringify(menu)}`)();\n\n    setActive(menu);\n  };\n\n  return (\n    <div style={{ height: '200px', background: 'var(--secondary-lightest)' }}>\n      <div\n        style={{\n          background: 'white',\n          padding: 'var(--spacing-m)',\n          borderTop: 'var(--border)',\n          borderBottom: 'var(--border)',\n        }}\n      >\n        <HorizontalNav className=\"w-100 justify-content-center\" menus={data} active={active} onClick={onClickHandler} />\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-horizontalnav-all--all",
      "args": {},
      "argTypes": {
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Callback to be called on Menu click**(only if it's not disabled)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((menu: Menu) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((menu: Menu) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "menus": {
          "name": "menus",
          "description": "List of menus to be rendered\n\n<pre className=\"DocPage-codeBlock\">\nMenu: {\n    name: string;\n    label: string;\n    link?: string;\n    group?: string;\n    disabled?: boolean;\n    count?: number;\n    subMenu?: Menu[];\n    icon?: string;\n};\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | Menu name | |\n| label | Menu display name | |\n| link | Menu link | |\n| disabled | Set menu as disabled | false |\n| count | Value of Count (Max value 99) | |\n| group | Section of menu | |\n| subMenu | Menu submenus of type `Menu[]` | |\n| icon | Menu icon | |",
          "type": {
            "required": true,
            "name": "other",
            "value": "Menu[]"
          },
          "table": {
            "type": {
              "summary": "Menu[]"
            },
            "defaultValue": null
          }
        },
        "active": {
          "name": "active",
          "description": "Sets menu as active",
          "type": {
            "required": false,
            "name": "other",
            "value": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
          },
          "table": {
            "type": {
              "summary": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-horizontalnav-default-horizontal-navigation--default-horizontal-navigation": {
    "id": "components-horizontalnav-default-horizontal-navigation--default-horizontal-navigation",
    "kind": "Components/HorizontalNav/Default Horizontal Navigation",
    "name": "Default Horizontal Navigation",
    "story": "Default Horizontal Navigation",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const data = [\n    {\n      name: 'engagements',\n      label: 'Engagements',\n    },\n    {\n      name: 'no_linked_activities',\n      label: 'No Linked Activities',\n    },\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'engagements',\n  });\n\n  const onClickHandler = (menu: Menu) => {\n    action(`menu-clicked: ${JSON.stringify(menu)}`)();\n    setActive(menu);\n  };\n\n  return (\n    <div className=\"d-flex align-items-center py-6\" style={{ background: 'var(--secondary-lightest)' }}>\n      <HorizontalNav className=\"w-100 justify-content-center\" menus={data} active={active} onClick={onClickHandler} />\n    </div>\n  );\n}"
      },
      "__id": "components-horizontalnav-default-horizontal-navigation--default-horizontal-navigation",
      "args": {},
      "argTypes": {
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Callback to be called on Menu click**(only if it's not disabled)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((menu: Menu) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((menu: Menu) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "menus": {
          "name": "menus",
          "description": "List of menus to be rendered\n\n<pre className=\"DocPage-codeBlock\">\nMenu: {\n    name: string;\n    label: string;\n    link?: string;\n    group?: string;\n    disabled?: boolean;\n    count?: number;\n    subMenu?: Menu[];\n    icon?: string;\n};\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | Menu name | |\n| label | Menu display name | |\n| link | Menu link | |\n| disabled | Set menu as disabled | false |\n| count | Value of Count (Max value 99) | |\n| group | Section of menu | |\n| subMenu | Menu submenus of type `Menu[]` | |\n| icon | Menu icon | |",
          "type": {
            "required": true,
            "name": "other",
            "value": "Menu[]"
          },
          "table": {
            "type": {
              "summary": "Menu[]"
            },
            "defaultValue": null
          }
        },
        "active": {
          "name": "active",
          "description": "Sets menu as active",
          "type": {
            "required": false,
            "name": "other",
            "value": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
          },
          "table": {
            "type": {
              "summary": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-horizontalnav-horizontal-navigation-with-count--horizontal-navigation-with-count": {
    "id": "components-horizontalnav-horizontal-navigation-with-count--horizontal-navigation-with-count",
    "kind": "Components/HorizontalNav/Horizontal Navigation With Count",
    "name": "Horizontal Navigation With Count",
    "story": "Horizontal Navigation With Count",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const data = [\n    {\n      name: 'to-dos',\n      label: 'To-dos',\n      count: 15,\n    },\n    {\n      name: 'activity_received',\n      label: 'Activity received',\n      count: 7,\n    },\n    {\n      name: 'activity_sent',\n      label: 'Activity sent',\n      count: 9,\n    },\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'to-dos',\n  });\n\n  const onClickHandler = (menu: Menu) => {\n    action(`menu-clicked: ${JSON.stringify(menu)}`)();\n    setActive(menu);\n  };\n\n  return (\n    <div className=\"d-flex align-items-center py-6\" style={{ background: 'var(--secondary-lightest)' }}>\n      <HorizontalNav className=\"w-100 justify-content-center\" menus={data} active={active} onClick={onClickHandler} />\n    </div>\n  );\n}"
      },
      "__id": "components-horizontalnav-horizontal-navigation-with-count--horizontal-navigation-with-count",
      "args": {},
      "argTypes": {
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Callback to be called on Menu click**(only if it's not disabled)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((menu: Menu) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((menu: Menu) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "menus": {
          "name": "menus",
          "description": "List of menus to be rendered\n\n<pre className=\"DocPage-codeBlock\">\nMenu: {\n    name: string;\n    label: string;\n    link?: string;\n    group?: string;\n    disabled?: boolean;\n    count?: number;\n    subMenu?: Menu[];\n    icon?: string;\n};\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | Menu name | |\n| label | Menu display name | |\n| link | Menu link | |\n| disabled | Set menu as disabled | false |\n| count | Value of Count (Max value 99) | |\n| group | Section of menu | |\n| subMenu | Menu submenus of type `Menu[]` | |\n| icon | Menu icon | |",
          "type": {
            "required": true,
            "name": "other",
            "value": "Menu[]"
          },
          "table": {
            "type": {
              "summary": "Menu[]"
            },
            "defaultValue": null
          }
        },
        "active": {
          "name": "active",
          "description": "Sets menu as active",
          "type": {
            "required": false,
            "name": "other",
            "value": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
          },
          "table": {
            "type": {
              "summary": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-horizontalnav-horizontal-navigation-with-icon--horizontal-navigation-with-icon": {
    "id": "components-horizontalnav-horizontal-navigation-with-icon--horizontal-navigation-with-icon",
    "kind": "Components/HorizontalNav/Horizontal Navigation With Icon",
    "name": "Horizontal Navigation With Icon",
    "story": "Horizontal Navigation With Icon",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const data = [\n    {\n      name: 'text',\n      label: 'Text',\n      icon: 'message',\n    },\n    {\n      name: 'voice',\n      label: 'Voice',\n      icon: 'mic',\n    },\n    {\n      name: 'mail',\n      label: 'Mail',\n      icon: 'email',\n    },\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'text',\n  });\n\n  const onClickHandler = (menu: Menu) => {\n    action(`menu-clicked: ${JSON.stringify(menu)}`)();\n    setActive(menu);\n  };\n\n  return (\n    <div className=\"d-flex align-items-center py-6\" style={{ background: 'var(--secondary-lightest)' }}>\n      <HorizontalNav className=\"w-100 justify-content-center\" menus={data} active={active} onClick={onClickHandler} />\n    </div>\n  );\n}"
      },
      "__id": "components-horizontalnav-horizontal-navigation-with-icon--horizontal-navigation-with-icon",
      "args": {},
      "argTypes": {
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Callback to be called on Menu click**(only if it's not disabled)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((menu: Menu) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((menu: Menu) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "menus": {
          "name": "menus",
          "description": "List of menus to be rendered\n\n<pre className=\"DocPage-codeBlock\">\nMenu: {\n    name: string;\n    label: string;\n    link?: string;\n    group?: string;\n    disabled?: boolean;\n    count?: number;\n    subMenu?: Menu[];\n    icon?: string;\n};\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | Menu name | |\n| label | Menu display name | |\n| link | Menu link | |\n| disabled | Set menu as disabled | false |\n| count | Value of Count (Max value 99) | |\n| group | Section of menu | |\n| subMenu | Menu submenus of type `Menu[]` | |\n| icon | Menu icon | |",
          "type": {
            "required": true,
            "name": "other",
            "value": "Menu[]"
          },
          "table": {
            "type": {
              "summary": "Menu[]"
            },
            "defaultValue": null
          }
        },
        "active": {
          "name": "active",
          "description": "Sets menu as active",
          "type": {
            "required": false,
            "name": "other",
            "value": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
          },
          "table": {
            "type": {
              "summary": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-horizontalnav-left-aligned-navigation-tabs--left-aligned-navigation-tabs": {
    "id": "components-horizontalnav-left-aligned-navigation-tabs--left-aligned-navigation-tabs",
    "kind": "Components/HorizontalNav/Left Aligned Navigation Tabs",
    "name": "Left Aligned Navigation Tabs",
    "story": "Left Aligned Navigation Tabs",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const options = [];\n  for (let i = 1; i <= 10; i++) {\n    options.push({\n      label: `Option ${i}`,\n      value: `Option ${i}`,\n    });\n  }\n\n  const data = [\n    {\n      name: 'medicine',\n      label: 'Medicine',\n    },\n    {\n      name: 'period',\n      label: 'Period',\n    },\n    {\n      name: 'alias',\n      label: 'Alias',\n    },\n    {\n      name: 'priority',\n      label: 'Priority',\n    },\n  ];\n\n  const [open, setOpen] = React.useState(true);\n  const [active, setActive] = React.useState({\n    name: 'medicine',\n  });\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const onClickHandler = (menu: Menu) => {\n    action(`menu-clicked: ${JSON.stringify(menu)}`)();\n    setActive(menu);\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Button\n        appearance=\"primary\"\n        className=\"mt-3\"\n        onClick={() => {\n          setOpen(true);\n        }}\n      >\n        Open\n      </Button>\n      <Modal\n        open={open}\n        dimension=\"large\"\n        onClose={onClose}\n        headerOptions={{\n          heading: 'Medication',\n        }}\n        footer={\n          <>\n            <Button appearance=\"basic\">Discard</Button>\n            <Button appearance=\"primary\" className=\"ml-4\">\n              Create\n            </Button>\n          </>\n        }\n      >\n        <div className=\"pb-4\" style={{ borderBottom: 'var(--border)' }}>\n          <HorizontalNav menus={data} active={active} onClick={onClickHandler} />\n        </div>\n        <div className=\"pt-5 w-50\">\n          <Label withInput={true} required={true}>\n            Type\n          </Label>\n          <Dropdown options={options} />\n          <Label withInput={true} className=\"mt-6\">\n            Active Date\n          </Label>\n          <Dropdown options={options} />\n          <Label withInput={true} className=\"mt-6\" required={true}>\n            Diagnosis Diseases\n          </Label>\n          <Dropdown options={options} />\n        </div>\n      </Modal>\n    </div>\n  );\n}"
      },
      "__id": "components-horizontalnav-left-aligned-navigation-tabs--left-aligned-navigation-tabs",
      "args": {},
      "argTypes": {
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Callback to be called on Menu click**(only if it's not disabled)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((menu: Menu) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((menu: Menu) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "menus": {
          "name": "menus",
          "description": "List of menus to be rendered\n\n<pre className=\"DocPage-codeBlock\">\nMenu: {\n    name: string;\n    label: string;\n    link?: string;\n    group?: string;\n    disabled?: boolean;\n    count?: number;\n    subMenu?: Menu[];\n    icon?: string;\n};\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | Menu name | |\n| label | Menu display name | |\n| link | Menu link | |\n| disabled | Set menu as disabled | false |\n| count | Value of Count (Max value 99) | |\n| group | Section of menu | |\n| subMenu | Menu submenus of type `Menu[]` | |\n| icon | Menu icon | |",
          "type": {
            "required": true,
            "name": "other",
            "value": "Menu[]"
          },
          "table": {
            "type": {
              "summary": "Menu[]"
            },
            "defaultValue": null
          }
        },
        "active": {
          "name": "active",
          "description": "Sets menu as active",
          "type": {
            "required": false,
            "name": "other",
            "value": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
          },
          "table": {
            "type": {
              "summary": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-icon-all--all": {
    "id": "components-icon-all--all",
    "kind": "Components/Icon/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const appearance = select(\n    'appearance',\n    ['destructive', 'white', 'subtle', 'disabled', 'info', 'alert', 'warning', 'success'],\n    undefined\n  );\n\n  const iconType = select('type', ['filled', 'outlined', 'round', 'two-tone', 'sharp'], undefined);\n\n  const size = number('size', 50);\n\n  const name = text('Name', 'info');\n\n  return (\n    <div style={{ background: appearance === 'white' ? 'black' : 'transparent' }}>\n      <Icon appearance={appearance} type={iconType} size={size} name={name} onClick={action('click-event')} />\n    </div>\n  );\n}"
      },
      "__id": "components-icon-all--all",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of `Icon`",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "16"
            }
          }
        },
        "type": {
          "name": "type",
          "description": "Type of material `Icon`\n\n** `'outline' | 'rounded'` will be deprecated**",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "round",
              "filled",
              "outlined",
              "outline",
              "rounded",
              "two-tone",
              "sharp"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"round\" | \"filled\" | \"outlined\" | \"outline\" | \"rounded\" | \"two-tone\" | \"sharp\""
            },
            "defaultValue": {
              "summary": "round"
            }
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Icon`    // 'info' appearance will be deprecated soon.",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "warning",
              "success",
              "accent1",
              "accent2",
              "accent3",
              "accent4",
              "default",
              "disabled",
              "info",
              "subtle",
              "white",
              "destructive",
              "primary_lighter",
              "primary_dark",
              "alert_lighter",
              "alert_dark",
              "warning_lighter",
              "warning_dark",
              "success_lighter",
              "success_dark",
              "accent1_lighter",
              "accent1_dark",
              "accent2_lighter",
              "accent2_dark",
              "accent3_lighter",
              "accent3_dark",
              "accent4_lighter",
              "accent4_dark",
              "inverse"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"warning\" | \"success\" | \"accent1\" | \"accent2\" | \"accent3\" | \"accent4\" | \"default\" | \"disabled\" | \"info\" | \"subtle\" | \"white\" | \"destructive\" | \"primary_lighter\" | \"primary_dark\" | \"alert_lighter\" | \"alert_dark\" | \"warning_lighter\" | \"warning_dark\" | \"success_lighter\" | \"success_dark\" | \"accent1_lighter\" | \"accent1_dark\" | \"accent2_lighter\" | \"accent2_dark\" | \"accent3_lighter\" | \"accent3_dark\" | \"accent4_lighter\" | \"accent4_dark\" | \"inverse\""
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when icon is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "DOM node to be passed as child to the component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-icon-variants-appearance--appearance": {
    "id": "components-icon-variants-appearance--appearance",
    "kind": "Components/Icon/Variants/Appearance",
    "name": "Appearance",
    "story": "Appearance",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const appearances = [\n    ['primary', 'primary_dark', 'primary_lighter'],\n    ['alert', 'alert_dark', 'alert_lighter'],\n    ['success', 'success_dark', 'success_lighter'],\n    ['warning', 'warning_dark', 'warning_lighter'],\n    ['accent1', 'accent1_dark', 'accent1_lighter'],\n    ['accent2', 'accent2_dark', 'accent2_lighter'],\n    ['accent3', 'accent3_dark', 'accent3_lighter'],\n    ['accent4', 'accent4_dark', 'accent4_lighter'],\n    ['inverse', 'subtle', 'disabled'],\n  ];\n\n  const name = text('Name', 'events');\n  return (\n    <div>\n      {appearances.map((appearance, ind) => {\n        return (\n          <>\n            <div key={ind} className=\"d-flex mb-5\">\n              <div>\n                <div className=\"mr-12\">\n                  <Icon appearance={appearance[0]} size={50} name={name} />\n                </div>\n                <br />\n                <Text weight=\"strong\">{appearance[0]}</Text>\n              </div>\n              <div>\n                <div className=\"mr-12\">\n                  <Icon appearance={appearance[1]} size={50} name={name} />\n                </div>\n                <br />\n                <Text weight=\"strong\">{appearance[1]}</Text>\n              </div>\n              <div>\n                <div className=\"mr-12\">\n                  <Icon appearance={appearance[2]} size={50} name={name} />\n                </div>\n                <br />\n                <Text weight=\"strong\">{appearance[2]}</Text>\n              </div>\n            </div>\n          </>\n        );\n      })}\n      <div className=\"bg-dark\" style={{ width: '50px' }}>\n        <Icon appearance=\"white\" size={50} name={name} />\n      </div>\n      <br />\n      <Text weight=\"strong\">white</Text>\n      <div className=\"mt-5\">\n        <Icon appearance=\"destructive\" size={50} name={name} />\n      </div>\n      <br />\n      <Text weight=\"strong\">destructive</Text>\n    </div>\n  );\n}"
      },
      "__id": "components-icon-variants-appearance--appearance",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of `Icon`",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "16"
            }
          }
        },
        "type": {
          "name": "type",
          "description": "Type of material `Icon`\n\n** `'outline' | 'rounded'` will be deprecated**",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "round",
              "filled",
              "outlined",
              "outline",
              "rounded",
              "two-tone",
              "sharp"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"round\" | \"filled\" | \"outlined\" | \"outline\" | \"rounded\" | \"two-tone\" | \"sharp\""
            },
            "defaultValue": {
              "summary": "round"
            }
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Icon`    // 'info' appearance will be deprecated soon.",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "warning",
              "success",
              "accent1",
              "accent2",
              "accent3",
              "accent4",
              "default",
              "disabled",
              "info",
              "subtle",
              "white",
              "destructive",
              "primary_lighter",
              "primary_dark",
              "alert_lighter",
              "alert_dark",
              "warning_lighter",
              "warning_dark",
              "success_lighter",
              "success_dark",
              "accent1_lighter",
              "accent1_dark",
              "accent2_lighter",
              "accent2_dark",
              "accent3_lighter",
              "accent3_dark",
              "accent4_lighter",
              "accent4_dark",
              "inverse"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"warning\" | \"success\" | \"accent1\" | \"accent2\" | \"accent3\" | \"accent4\" | \"default\" | \"disabled\" | \"info\" | \"subtle\" | \"white\" | \"destructive\" | \"primary_lighter\" | \"primary_dark\" | \"alert_lighter\" | \"alert_dark\" | \"warning_lighter\" | \"warning_dark\" | \"success_lighter\" | \"success_dark\" | \"accent1_lighter\" | \"accent1_dark\" | \"accent2_lighter\" | \"accent2_dark\" | \"accent3_lighter\" | \"accent3_dark\" | \"accent4_lighter\" | \"accent4_dark\" | \"inverse\""
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when icon is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "DOM node to be passed as child to the component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-icon-variants-image--image": {
    "id": "components-icon-variants-image--image",
    "kind": "Components/Icon/Variants/Image",
    "name": "Image",
    "story": "Image",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <Icon size={50}>\n      <img src=\"https://innovaccer.com/static/image/site-logo/innovaccer-logo-black.svg\" width=\"150\" height=\"150\" />\n    </Icon>\n  );\n}"
      },
      "__id": "components-icon-variants-image--image",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of `Icon`",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "16"
            }
          }
        },
        "type": {
          "name": "type",
          "description": "Type of material `Icon`\n\n** `'outline' | 'rounded'` will be deprecated**",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "round",
              "filled",
              "outlined",
              "outline",
              "rounded",
              "two-tone",
              "sharp"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"round\" | \"filled\" | \"outlined\" | \"outline\" | \"rounded\" | \"two-tone\" | \"sharp\""
            },
            "defaultValue": {
              "summary": "round"
            }
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Icon`    // 'info' appearance will be deprecated soon.",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "warning",
              "success",
              "accent1",
              "accent2",
              "accent3",
              "accent4",
              "default",
              "disabled",
              "info",
              "subtle",
              "white",
              "destructive",
              "primary_lighter",
              "primary_dark",
              "alert_lighter",
              "alert_dark",
              "warning_lighter",
              "warning_dark",
              "success_lighter",
              "success_dark",
              "accent1_lighter",
              "accent1_dark",
              "accent2_lighter",
              "accent2_dark",
              "accent3_lighter",
              "accent3_dark",
              "accent4_lighter",
              "accent4_dark",
              "inverse"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"warning\" | \"success\" | \"accent1\" | \"accent2\" | \"accent3\" | \"accent4\" | \"default\" | \"disabled\" | \"info\" | \"subtle\" | \"white\" | \"destructive\" | \"primary_lighter\" | \"primary_dark\" | \"alert_lighter\" | \"alert_dark\" | \"warning_lighter\" | \"warning_dark\" | \"success_lighter\" | \"success_dark\" | \"accent1_lighter\" | \"accent1_dark\" | \"accent2_lighter\" | \"accent2_dark\" | \"accent3_lighter\" | \"accent3_dark\" | \"accent4_lighter\" | \"accent4_dark\" | \"inverse\""
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when icon is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "DOM node to be passed as child to the component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-icon-variants-type--type": {
    "id": "components-icon-variants-type--type",
    "kind": "Components/Icon/Variants/Type",
    "name": "Type",
    "story": "Type",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const types: IconType[] = ['filled', 'outlined', 'round', 'two-tone', 'sharp'];\n\n  const name = text('Name', 'assignment');\n  return (\n    <div className=\"d-flex\">\n      {types.map((IconShape, ind) => {\n        return (\n          <div key={ind} className=\"mr-9\">\n            <div>\n              <Icon type={IconShape} size={50} name={name} />\n            </div>\n            <br />\n            <Text weight=\"strong\">{IconShape.charAt(0).toUpperCase() + IconShape.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-icon-variants-type--type",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of `Icon`",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "16"
            }
          }
        },
        "type": {
          "name": "type",
          "description": "Type of material `Icon`\n\n** `'outline' | 'rounded'` will be deprecated**",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "round",
              "filled",
              "outlined",
              "outline",
              "rounded",
              "two-tone",
              "sharp"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"round\" | \"filled\" | \"outlined\" | \"outline\" | \"rounded\" | \"two-tone\" | \"sharp\""
            },
            "defaultValue": {
              "summary": "round"
            }
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Icon`    // 'info' appearance will be deprecated soon.",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "warning",
              "success",
              "accent1",
              "accent2",
              "accent3",
              "accent4",
              "default",
              "disabled",
              "info",
              "subtle",
              "white",
              "destructive",
              "primary_lighter",
              "primary_dark",
              "alert_lighter",
              "alert_dark",
              "warning_lighter",
              "warning_dark",
              "success_lighter",
              "success_dark",
              "accent1_lighter",
              "accent1_dark",
              "accent2_lighter",
              "accent2_dark",
              "accent3_lighter",
              "accent3_dark",
              "accent4_lighter",
              "accent4_dark",
              "inverse"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"warning\" | \"success\" | \"accent1\" | \"accent2\" | \"accent3\" | \"accent4\" | \"default\" | \"disabled\" | \"info\" | \"subtle\" | \"white\" | \"destructive\" | \"primary_lighter\" | \"primary_dark\" | \"alert_lighter\" | \"alert_dark\" | \"warning_lighter\" | \"warning_dark\" | \"success_lighter\" | \"success_dark\" | \"accent1_lighter\" | \"accent1_dark\" | \"accent2_lighter\" | \"accent2_dark\" | \"accent3_lighter\" | \"accent3_dark\" | \"accent4_lighter\" | \"accent4_dark\" | \"inverse\""
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when icon is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "DOM node to be passed as child to the component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-input-all--all": {
    "id": "components-input-all--all",
    "kind": "Components/Input/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const inputType = select('type', ['text', 'password', 'number', 'email', 'tel', 'url'], undefined);\n\n  const value = text('value', '');\n\n  const size = select('size', ['tiny', 'regular', 'large'], undefined);\n\n  const placeholder = text('placeholder', 'Placeholder');\n\n  const disabled = boolean('disabled', false);\n\n  const readOnly = boolean('readOnly', false);\n\n  const icon = text('icon', '');\n\n  const required = boolean('required', false);\n\n  const inlineLabel = text('inlineLabel', '');\n\n  const error = boolean('error', false);\n\n  const info = text('info', 'sample info popover');\n\n  const pattern = text('pattern', '');\n\n  const min = number('min', 1);\n\n  const max = number('max', 30);\n\n  const minLength = number('minLength', 1);\n\n  const maxLength = number('maxLength', 30);\n\n  return (\n    <div className=\"w-25\">\n      <Input\n        name=\"input\"\n        type={inputType}\n        value={value}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={action('on-change')}\n        onClick={action('on-click')}\n        onClear={action('on-clear')}\n        placeholder={placeholder}\n        inlineLabel={inlineLabel}\n        size={size}\n        icon={icon}\n        required={required}\n        error={error}\n        info={info}\n        pattern={pattern}\n        min={min}\n        max={max}\n        minLength={minLength}\n        maxLength={maxLength}\n      />\n    </div>\n  );\n}"
      },
      "__id": "components-input-all--all",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Name of the `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of text inside `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "number",
              "text",
              "tel",
              "url",
              "email",
              "password"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"number\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"password\""
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Input` (Used in case of controlled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "Adds default value to `Input` (Used in case of uncontrolled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when input is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of the `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label to be displayed inside `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "required": {
          "name": "required",
          "description": "Shows the user that this field id required",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoComplete": {
          "name": "autoComplete",
          "description": "Specifies whether `input field should have autocomplete enabled",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "on",
              "off"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"on\" | \"off\""
            },
            "defaultValue": null
          }
        },
        "readOnly": {
          "name": "readOnly",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "min": {
          "name": "min",
          "description": "Valid for number it defines the most negative value in the range of permitted values.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minLength": {
          "name": "minLength",
          "description": "Valid for text, url, tel, email, and password, it defines the minimum number of characters\n(as UTF-16 code units) the user can enter into the entry field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxLength": {
          "name": "maxLength",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "pattern": {
          "name": "pattern",
          "description": "The pattern attribute, when specified, is a regular expression that the input's value\nmust match in order for the value to pass constraint validation.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "info": {
          "name": "info",
          "description": "Text to be rendered in info `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "minimum width of `Input` component\n\n**No default value for `type='number'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onClear": {
          "name": "onClear",
          "description": "Callback function when user clicks the clear button",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function when `Input` text changes",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Input` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Input` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Input` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "actionIcon": {
          "name": "actionIcon",
          "description": "Custom Icon Component to be passed to Input to replace Clear Icon in the right",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
          },
          "table": {
            "type": {
              "summary": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-input-basic-input--basic-input": {
    "id": "components-input-basic-input--basic-input",
    "kind": "Components/Input/Basic Input",
    "name": "Basic Input",
    "story": "Basic Input",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [value, setValue] = React.useState('Joy Lawson');\n\n  const onChange = React.useCallback((e) => {\n    setValue(e.target.value);\n  }, []);\n\n  const onClear = React.useCallback(() => {\n    setValue('');\n  }, []);\n\n  return <Input name=\"input\" className=\"w-25\" value={value} onChange={onChange} onClear={onClear} />;\n}"
      },
      "__id": "components-input-basic-input--basic-input",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Name of the `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of text inside `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "number",
              "text",
              "tel",
              "url",
              "email",
              "password"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"number\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"password\""
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Input` (Used in case of controlled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "Adds default value to `Input` (Used in case of uncontrolled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when input is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of the `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label to be displayed inside `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "required": {
          "name": "required",
          "description": "Shows the user that this field id required",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoComplete": {
          "name": "autoComplete",
          "description": "Specifies whether `input field should have autocomplete enabled",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "on",
              "off"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"on\" | \"off\""
            },
            "defaultValue": null
          }
        },
        "readOnly": {
          "name": "readOnly",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "min": {
          "name": "min",
          "description": "Valid for number it defines the most negative value in the range of permitted values.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minLength": {
          "name": "minLength",
          "description": "Valid for text, url, tel, email, and password, it defines the minimum number of characters\n(as UTF-16 code units) the user can enter into the entry field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxLength": {
          "name": "maxLength",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "pattern": {
          "name": "pattern",
          "description": "The pattern attribute, when specified, is a regular expression that the input's value\nmust match in order for the value to pass constraint validation.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "info": {
          "name": "info",
          "description": "Text to be rendered in info `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "minimum width of `Input` component\n\n**No default value for `type='number'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onClear": {
          "name": "onClear",
          "description": "Callback function when user clicks the clear button",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function when `Input` text changes",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Input` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Input` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Input` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "actionIcon": {
          "name": "actionIcon",
          "description": "Custom Icon Component to be passed to Input to replace Clear Icon in the right",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
          },
          "table": {
            "type": {
              "summary": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-input-icon-left-input--icon-left-input": {
    "id": "components-input-icon-left-input--icon-left-input",
    "kind": "Components/Input/Icon Left Input",
    "name": "Icon Left Input",
    "story": "Icon Left Input",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Input name=\"input\" placeholder=\"Search\" className=\"w-25\" onChange={action('on-change')} icon={'search'} />\n)"
      },
      "__id": "components-input-icon-left-input--icon-left-input",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Name of the `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of text inside `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "number",
              "text",
              "tel",
              "url",
              "email",
              "password"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"number\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"password\""
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Input` (Used in case of controlled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "Adds default value to `Input` (Used in case of uncontrolled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when input is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of the `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label to be displayed inside `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "required": {
          "name": "required",
          "description": "Shows the user that this field id required",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoComplete": {
          "name": "autoComplete",
          "description": "Specifies whether `input field should have autocomplete enabled",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "on",
              "off"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"on\" | \"off\""
            },
            "defaultValue": null
          }
        },
        "readOnly": {
          "name": "readOnly",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "min": {
          "name": "min",
          "description": "Valid for number it defines the most negative value in the range of permitted values.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minLength": {
          "name": "minLength",
          "description": "Valid for text, url, tel, email, and password, it defines the minimum number of characters\n(as UTF-16 code units) the user can enter into the entry field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxLength": {
          "name": "maxLength",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "pattern": {
          "name": "pattern",
          "description": "The pattern attribute, when specified, is a regular expression that the input's value\nmust match in order for the value to pass constraint validation.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "info": {
          "name": "info",
          "description": "Text to be rendered in info `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "minimum width of `Input` component\n\n**No default value for `type='number'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onClear": {
          "name": "onClear",
          "description": "Callback function when user clicks the clear button",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function when `Input` text changes",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Input` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Input` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Input` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "actionIcon": {
          "name": "actionIcon",
          "description": "Custom Icon Component to be passed to Input to replace Clear Icon in the right",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
          },
          "table": {
            "type": {
              "summary": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-input-input-with-caption--input-with-caption": {
    "id": "components-input-input-with-caption--input-with-caption",
    "kind": "Components/Input/Input With Caption",
    "name": "Input With Caption",
    "story": "Input With Caption",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div className=\"d-flex\">\n      <div>\n        <Label withInput={true}>Password</Label>\n        <Input\n          name=\"input\"\n          value=\"Value\"\n          type=\"password\"\n          actionIcon={<Icon name=\"visibility_off\" className=\"cursor-pointer\" />}\n        />\n        <Caption withInput={true}>Create a string, unique password</Caption>\n      </div>\n      <div className=\"ml-6\">\n        <Label withInput={true}>Password</Label>\n        <Input\n          name=\"input\"\n          value=\"Value\"\n          type=\"password\"\n          actionIcon={<Icon name=\"visibility_off\" className=\"cursor-pointer\" />}\n        />\n        <Caption withInput={true} error={true}>\n          Create a password with atleat 8 characters\n        </Caption>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-input-input-with-caption--input-with-caption",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Name of the `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of text inside `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "number",
              "text",
              "tel",
              "url",
              "email",
              "password"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"number\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"password\""
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Input` (Used in case of controlled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "Adds default value to `Input` (Used in case of uncontrolled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when input is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of the `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label to be displayed inside `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "required": {
          "name": "required",
          "description": "Shows the user that this field id required",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoComplete": {
          "name": "autoComplete",
          "description": "Specifies whether `input field should have autocomplete enabled",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "on",
              "off"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"on\" | \"off\""
            },
            "defaultValue": null
          }
        },
        "readOnly": {
          "name": "readOnly",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "min": {
          "name": "min",
          "description": "Valid for number it defines the most negative value in the range of permitted values.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minLength": {
          "name": "minLength",
          "description": "Valid for text, url, tel, email, and password, it defines the minimum number of characters\n(as UTF-16 code units) the user can enter into the entry field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxLength": {
          "name": "maxLength",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "pattern": {
          "name": "pattern",
          "description": "The pattern attribute, when specified, is a regular expression that the input's value\nmust match in order for the value to pass constraint validation.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "info": {
          "name": "info",
          "description": "Text to be rendered in info `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "minimum width of `Input` component\n\n**No default value for `type='number'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onClear": {
          "name": "onClear",
          "description": "Callback function when user clicks the clear button",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function when `Input` text changes",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Input` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Input` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Input` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "actionIcon": {
          "name": "actionIcon",
          "description": "Custom Icon Component to be passed to Input to replace Clear Icon in the right",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
          },
          "table": {
            "type": {
              "summary": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-input-input-with-label--input-with-label": {
    "id": "components-input-input-with-label--input-with-label",
    "kind": "Components/Input/Input With Label",
    "name": "Input With Label",
    "story": "Input With Label",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [value, setValue] = React.useState('lawsonjoy@gmail.com');\n\n  const onChange = React.useCallback((e) => {\n    setValue(e.target.value);\n  }, []);\n\n  return (\n    <>\n      <Label withInput={true}>Email</Label>\n      <Input name=\"input\" className=\"w-25\" value={value} onChange={onChange} />\n    </>\n  );\n}"
      },
      "__id": "components-input-input-with-label--input-with-label",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Name of the `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of text inside `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "number",
              "text",
              "tel",
              "url",
              "email",
              "password"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"number\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"password\""
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Input` (Used in case of controlled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "Adds default value to `Input` (Used in case of uncontrolled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when input is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of the `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label to be displayed inside `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "required": {
          "name": "required",
          "description": "Shows the user that this field id required",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoComplete": {
          "name": "autoComplete",
          "description": "Specifies whether `input field should have autocomplete enabled",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "on",
              "off"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"on\" | \"off\""
            },
            "defaultValue": null
          }
        },
        "readOnly": {
          "name": "readOnly",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "min": {
          "name": "min",
          "description": "Valid for number it defines the most negative value in the range of permitted values.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minLength": {
          "name": "minLength",
          "description": "Valid for text, url, tel, email, and password, it defines the minimum number of characters\n(as UTF-16 code units) the user can enter into the entry field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxLength": {
          "name": "maxLength",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "pattern": {
          "name": "pattern",
          "description": "The pattern attribute, when specified, is a regular expression that the input's value\nmust match in order for the value to pass constraint validation.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "info": {
          "name": "info",
          "description": "Text to be rendered in info `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "minimum width of `Input` component\n\n**No default value for `type='number'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onClear": {
          "name": "onClear",
          "description": "Callback function when user clicks the clear button",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function when `Input` text changes",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Input` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Input` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Input` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "actionIcon": {
          "name": "actionIcon",
          "description": "Custom Icon Component to be passed to Input to replace Clear Icon in the right",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
          },
          "table": {
            "type": {
              "summary": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-input-label-position--label-position": {
    "id": "components-input-label-position--label-position",
    "kind": "Components/Input/Label Position",
    "name": "Label Position",
    "story": "Label Position",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div className=\"d-flex align-items-end\">\n      <div>\n        <Label withInput={true}>Full Name</Label>\n        <Input name=\"input\" value=\"Joy Lawson\" />\n      </div>\n      <div className=\"d-flex align-items-center ml-9\">\n        <Label className=\"mr-6\">Full Name</Label>\n        <Input name=\"input\" value=\"Joy Lawson\" />\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-input-label-position--label-position",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Name of the `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of text inside `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "number",
              "text",
              "tel",
              "url",
              "email",
              "password"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"number\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"password\""
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Input` (Used in case of controlled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "Adds default value to `Input` (Used in case of uncontrolled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when input is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of the `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label to be displayed inside `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "required": {
          "name": "required",
          "description": "Shows the user that this field id required",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoComplete": {
          "name": "autoComplete",
          "description": "Specifies whether `input field should have autocomplete enabled",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "on",
              "off"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"on\" | \"off\""
            },
            "defaultValue": null
          }
        },
        "readOnly": {
          "name": "readOnly",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "min": {
          "name": "min",
          "description": "Valid for number it defines the most negative value in the range of permitted values.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minLength": {
          "name": "minLength",
          "description": "Valid for text, url, tel, email, and password, it defines the minimum number of characters\n(as UTF-16 code units) the user can enter into the entry field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxLength": {
          "name": "maxLength",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "pattern": {
          "name": "pattern",
          "description": "The pattern attribute, when specified, is a regular expression that the input's value\nmust match in order for the value to pass constraint validation.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "info": {
          "name": "info",
          "description": "Text to be rendered in info `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "minimum width of `Input` component\n\n**No default value for `type='number'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onClear": {
          "name": "onClear",
          "description": "Callback function when user clicks the clear button",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function when `Input` text changes",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Input` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Input` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Input` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "actionIcon": {
          "name": "actionIcon",
          "description": "Custom Icon Component to be passed to Input to replace Clear Icon in the right",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
          },
          "table": {
            "type": {
              "summary": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-input-required-vs-optional-marking--required-vs-optional-marking": {
    "id": "components-input-required-vs-optional-marking--required-vs-optional-marking",
    "kind": "Components/Input/Required Vs Optional Marking",
    "name": "Required Vs Optional Marking",
    "story": "Required Vs Optional Marking",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div>\n      <div className=\"d-flex\">\n        <div>\n          <Label withInput={true} required={true}>\n            Email\n          </Label>\n          <Input name=\"input\" placeholder=\"e.g lawsonjoy@gmail.com\" />\n          <div className=\"d-flex align-items-center justify-content-center mt-5\">\n            <Text weight=\"medium\">Required Field</Text>\n          </div>\n        </div>\n        <div className=\"ml-9\">\n          <Label withInput={true}>Email</Label>\n          <Input name=\"input\" placeholder=\"e.g lawsonjoy@gmail.com\" />\n          <div className=\"d-flex align-items-center justify-content-center mt-5\">\n            <Text weight=\"medium\">Optional Field</Text>\n          </div>\n        </div>\n      </div>\n      <div className=\"d-flex mt-9\">\n        <div>\n          <Label withInput={true}>Email</Label>\n          <Input name=\"input\" placeholder=\"e.g lawsonjoy@gmail.com\" />\n          <div className=\"d-flex align-items-center justify-content-center mt-5\">\n            <Text weight=\"medium\">Required Field</Text>\n          </div>\n        </div>\n        <div className=\"ml-9\">\n          <Label withInput={true} optional={true}>\n            Email\n          </Label>\n          <Input name=\"input\" placeholder=\"e.g lawsonjoy@gmail.com\" />\n          <div className=\"d-flex align-items-center justify-content-center mt-5\">\n            <Text weight=\"medium\">Optional Field</Text>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-input-required-vs-optional-marking--required-vs-optional-marking",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Name of the `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of text inside `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "number",
              "text",
              "tel",
              "url",
              "email",
              "password"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"number\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"password\""
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Input` (Used in case of controlled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "Adds default value to `Input` (Used in case of uncontrolled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when input is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of the `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label to be displayed inside `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "required": {
          "name": "required",
          "description": "Shows the user that this field id required",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoComplete": {
          "name": "autoComplete",
          "description": "Specifies whether `input field should have autocomplete enabled",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "on",
              "off"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"on\" | \"off\""
            },
            "defaultValue": null
          }
        },
        "readOnly": {
          "name": "readOnly",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "min": {
          "name": "min",
          "description": "Valid for number it defines the most negative value in the range of permitted values.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minLength": {
          "name": "minLength",
          "description": "Valid for text, url, tel, email, and password, it defines the minimum number of characters\n(as UTF-16 code units) the user can enter into the entry field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxLength": {
          "name": "maxLength",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "pattern": {
          "name": "pattern",
          "description": "The pattern attribute, when specified, is a regular expression that the input's value\nmust match in order for the value to pass constraint validation.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "info": {
          "name": "info",
          "description": "Text to be rendered in info `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "minimum width of `Input` component\n\n**No default value for `type='number'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onClear": {
          "name": "onClear",
          "description": "Callback function when user clicks the clear button",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function when `Input` text changes",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Input` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Input` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Input` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "actionIcon": {
          "name": "actionIcon",
          "description": "Custom Icon Component to be passed to Input to replace Clear Icon in the right",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
          },
          "table": {
            "type": {
              "summary": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-input-variants-action-icon--action-icon": {
    "id": "components-input-variants-action-icon--action-icon",
    "kind": "Components/Input/Variants/Action Icon",
    "name": "Action Icon",
    "story": "Action Icon",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const customIcon = <Icon name=\"events\" onClick={action('custom action icon')} />;\n\n  return <Input name=\"input\" actionIcon={customIcon} />;\n}"
      },
      "__id": "components-input-variants-action-icon--action-icon",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Name of the `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of text inside `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "number",
              "text",
              "tel",
              "url",
              "email",
              "password"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"number\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"password\""
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Input` (Used in case of controlled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "Adds default value to `Input` (Used in case of uncontrolled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when input is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of the `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label to be displayed inside `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "required": {
          "name": "required",
          "description": "Shows the user that this field id required",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoComplete": {
          "name": "autoComplete",
          "description": "Specifies whether `input field should have autocomplete enabled",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "on",
              "off"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"on\" | \"off\""
            },
            "defaultValue": null
          }
        },
        "readOnly": {
          "name": "readOnly",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "min": {
          "name": "min",
          "description": "Valid for number it defines the most negative value in the range of permitted values.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minLength": {
          "name": "minLength",
          "description": "Valid for text, url, tel, email, and password, it defines the minimum number of characters\n(as UTF-16 code units) the user can enter into the entry field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxLength": {
          "name": "maxLength",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "pattern": {
          "name": "pattern",
          "description": "The pattern attribute, when specified, is a regular expression that the input's value\nmust match in order for the value to pass constraint validation.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "info": {
          "name": "info",
          "description": "Text to be rendered in info `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "minimum width of `Input` component\n\n**No default value for `type='number'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onClear": {
          "name": "onClear",
          "description": "Callback function when user clicks the clear button",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function when `Input` text changes",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Input` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Input` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Input` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "actionIcon": {
          "name": "actionIcon",
          "description": "Custom Icon Component to be passed to Input to replace Clear Icon in the right",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
          },
          "table": {
            "type": {
              "summary": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-input-variants-controlled-input--controlled-input": {
    "id": "components-input-variants-controlled-input--controlled-input",
    "kind": "Components/Input/Variants/Controlled Input",
    "name": "Controlled Input",
    "story": "Controlled Input",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [value, setValue] = React.useState('Value');\n  const handleParentChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const updatedValue = event.target.value;\n    window.setTimeout(() => {\n      setValue(updatedValue);\n    }, 1000);\n  };\n  const [value1, setValue1] = React.useState('Value');\n  const onChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const updatedValue = event.target.value;\n    window.setTimeout(() => {\n      setValue1(updatedValue);\n    }, 1000);\n  };\n  const onClearHandler = () => {\n    const updatedValue = '';\n    window.setTimeout(() => {\n      setValue1(updatedValue);\n    }, 1000);\n  };\n  return (\n    <div className=\"d-flex\">\n      <Input\n        name=\"input\"\n        value={value}\n        type=\"text\"\n        placeholder=\"Placeholder\"\n        actionIcon={<Icon name=\"visibility_off\" />}\n        onChange={handleParentChange}\n      />\n      <Input\n        name=\"input\"\n        value={value1}\n        type=\"text\"\n        placeholder=\"PlaceHolder\"\n        onChange={onChangeHandler}\n        onClear={onClearHandler}\n      />\n    </div>\n  );\n}"
      },
      "__id": "components-input-variants-controlled-input--controlled-input",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Name of the `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of text inside `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "number",
              "text",
              "tel",
              "url",
              "email",
              "password"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"number\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"password\""
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Input` (Used in case of controlled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "Adds default value to `Input` (Used in case of uncontrolled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when input is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of the `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label to be displayed inside `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "required": {
          "name": "required",
          "description": "Shows the user that this field id required",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoComplete": {
          "name": "autoComplete",
          "description": "Specifies whether `input field should have autocomplete enabled",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "on",
              "off"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"on\" | \"off\""
            },
            "defaultValue": null
          }
        },
        "readOnly": {
          "name": "readOnly",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "min": {
          "name": "min",
          "description": "Valid for number it defines the most negative value in the range of permitted values.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minLength": {
          "name": "minLength",
          "description": "Valid for text, url, tel, email, and password, it defines the minimum number of characters\n(as UTF-16 code units) the user can enter into the entry field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxLength": {
          "name": "maxLength",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "pattern": {
          "name": "pattern",
          "description": "The pattern attribute, when specified, is a regular expression that the input's value\nmust match in order for the value to pass constraint validation.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "info": {
          "name": "info",
          "description": "Text to be rendered in info `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "minimum width of `Input` component\n\n**No default value for `type='number'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onClear": {
          "name": "onClear",
          "description": "Callback function when user clicks the clear button",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function when `Input` text changes",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Input` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Input` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Input` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "actionIcon": {
          "name": "actionIcon",
          "description": "Custom Icon Component to be passed to Input to replace Clear Icon in the right",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
          },
          "table": {
            "type": {
              "summary": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-input-variants-metric-input--metric-input": {
    "id": "components-input-variants-metric-input--metric-input",
    "kind": "Components/Input/Variants/Metric Input",
    "name": "Metric Input",
    "story": "Metric Input",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div>\n      <div className=\"w-25\">\n        <Input name=\"input\" type=\"number\" size=\"regular\" onChange={action('on-change')} />\n        <br />\n        <Text weight=\"strong\">Regular</Text>\n      </div>\n      <br />\n      <div className=\"w-25\">\n        <Input name=\"input\" type=\"number\" size=\"large\" onChange={action('on-change')} />\n        <br />\n        <Text weight=\"strong\">Large</Text>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-input-variants-metric-input--metric-input",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Name of the `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of text inside `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "number",
              "text",
              "tel",
              "url",
              "email",
              "password"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"number\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"password\""
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Input` (Used in case of controlled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "Adds default value to `Input` (Used in case of uncontrolled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when input is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of the `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label to be displayed inside `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "required": {
          "name": "required",
          "description": "Shows the user that this field id required",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoComplete": {
          "name": "autoComplete",
          "description": "Specifies whether `input field should have autocomplete enabled",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "on",
              "off"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"on\" | \"off\""
            },
            "defaultValue": null
          }
        },
        "readOnly": {
          "name": "readOnly",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "min": {
          "name": "min",
          "description": "Valid for number it defines the most negative value in the range of permitted values.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minLength": {
          "name": "minLength",
          "description": "Valid for text, url, tel, email, and password, it defines the minimum number of characters\n(as UTF-16 code units) the user can enter into the entry field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxLength": {
          "name": "maxLength",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "pattern": {
          "name": "pattern",
          "description": "The pattern attribute, when specified, is a regular expression that the input's value\nmust match in order for the value to pass constraint validation.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "info": {
          "name": "info",
          "description": "Text to be rendered in info `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "minimum width of `Input` component\n\n**No default value for `type='number'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onClear": {
          "name": "onClear",
          "description": "Callback function when user clicks the clear button",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function when `Input` text changes",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Input` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Input` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Input` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "actionIcon": {
          "name": "actionIcon",
          "description": "Custom Icon Component to be passed to Input to replace Clear Icon in the right",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
          },
          "table": {
            "type": {
              "summary": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-input-variants-size--size": {
    "id": "components-input-variants-size--size",
    "kind": "Components/Input/Variants/Size",
    "name": "Size",
    "story": "Size",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const value = text('value', '');\n\n  const sizes: Size[] = ['tiny', 'regular', 'large'];\n\n  const placeholder = text('placeholder', 'Placeholder');\n\n  return (\n    <div className=\"d-flex\">\n      {sizes.map((InputSize, ind) => {\n        return (\n          <div key={ind} className=\"mr-9 w-25\">\n            <div className=\"h-50\">\n              <Input\n                name=\"input\"\n                value={value}\n                onChange={action('on-change')}\n                onClick={action('on-click')}\n                onClear={action('on-clear')}\n                placeholder={placeholder}\n                size={InputSize}\n              />\n            </div>\n            <br />\n            <Text weight=\"strong\">{InputSize.charAt(0).toUpperCase() + InputSize.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-input-variants-size--size",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Name of the `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of text inside `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "number",
              "text",
              "tel",
              "url",
              "email",
              "password"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"number\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"password\""
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Input` (Used in case of controlled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "Adds default value to `Input` (Used in case of uncontrolled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when input is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of the `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label to be displayed inside `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "required": {
          "name": "required",
          "description": "Shows the user that this field id required",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoComplete": {
          "name": "autoComplete",
          "description": "Specifies whether `input field should have autocomplete enabled",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "on",
              "off"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"on\" | \"off\""
            },
            "defaultValue": null
          }
        },
        "readOnly": {
          "name": "readOnly",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "min": {
          "name": "min",
          "description": "Valid for number it defines the most negative value in the range of permitted values.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minLength": {
          "name": "minLength",
          "description": "Valid for text, url, tel, email, and password, it defines the minimum number of characters\n(as UTF-16 code units) the user can enter into the entry field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxLength": {
          "name": "maxLength",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "pattern": {
          "name": "pattern",
          "description": "The pattern attribute, when specified, is a regular expression that the input's value\nmust match in order for the value to pass constraint validation.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "info": {
          "name": "info",
          "description": "Text to be rendered in info `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "minimum width of `Input` component\n\n**No default value for `type='number'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onClear": {
          "name": "onClear",
          "description": "Callback function when user clicks the clear button",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function when `Input` text changes",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Input` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Input` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Input` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "actionIcon": {
          "name": "actionIcon",
          "description": "Custom Icon Component to be passed to Input to replace Clear Icon in the right",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
          },
          "table": {
            "type": {
              "summary": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-input-variants-types-basic--basic": {
    "id": "components-input-variants-types-basic--basic",
    "kind": "Components/Input/Variants/Types/Basic",
    "name": "Basic",
    "story": "Basic",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div className=\"Row\">\n      <div className=\"mr-9 mb-8 w-25\">\n        <Input name=\"input\" value=\"Value\" onChange={action('on-change')} onClear={action('on-clear')} />\n        <br />\n        <Text weight=\"strong\">Default</Text>\n      </div>\n      <div className=\"mr-9 mb-8 w-25\">\n        <Input\n          name=\"input\"\n          value=\"\"\n          placeholder=\"Placeholder\"\n          onChange={action('on-change')}\n          onClear={action('on-clear')}\n          info=\"sample info popover\"\n        />\n        <br />\n        <Text weight=\"strong\">Placeholder</Text>\n      </div>\n      <div className=\"mr-9 mb-8 w-25\">\n        <Input name=\"input\" value=\"Value\" onChange={action('on-change')} onClear={action('on-clear')} error={true} />\n        <br />\n        <Text weight=\"strong\">Error</Text>\n      </div>\n      <div className=\"mr-9 mb-8 w-25\">\n        <Input name=\"input\" value=\"Value\" onChange={action('on-change')} disabled={true} />\n        <br />\n        <Text weight=\"strong\">Disabled</Text>\n      </div>\n      <div className=\"mr-9 mb-8 w-25\">\n        <Input name=\"input\" value=\"Value\" />\n        <br />\n        <Text weight=\"strong\">Read Only</Text>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-input-variants-types-basic--basic",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Name of the `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of text inside `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "number",
              "text",
              "tel",
              "url",
              "email",
              "password"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"number\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"password\""
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Input` (Used in case of controlled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "Adds default value to `Input` (Used in case of uncontrolled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when input is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of the `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label to be displayed inside `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "required": {
          "name": "required",
          "description": "Shows the user that this field id required",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoComplete": {
          "name": "autoComplete",
          "description": "Specifies whether `input field should have autocomplete enabled",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "on",
              "off"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"on\" | \"off\""
            },
            "defaultValue": null
          }
        },
        "readOnly": {
          "name": "readOnly",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "min": {
          "name": "min",
          "description": "Valid for number it defines the most negative value in the range of permitted values.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minLength": {
          "name": "minLength",
          "description": "Valid for text, url, tel, email, and password, it defines the minimum number of characters\n(as UTF-16 code units) the user can enter into the entry field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxLength": {
          "name": "maxLength",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "pattern": {
          "name": "pattern",
          "description": "The pattern attribute, when specified, is a regular expression that the input's value\nmust match in order for the value to pass constraint validation.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "info": {
          "name": "info",
          "description": "Text to be rendered in info `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "minimum width of `Input` component\n\n**No default value for `type='number'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onClear": {
          "name": "onClear",
          "description": "Callback function when user clicks the clear button",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function when `Input` text changes",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Input` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Input` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Input` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "actionIcon": {
          "name": "actionIcon",
          "description": "Custom Icon Component to be passed to Input to replace Clear Icon in the right",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
          },
          "table": {
            "type": {
              "summary": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-input-variants-types-icon-left--icon-left": {
    "id": "components-input-variants-types-icon-left--icon-left",
    "kind": "Components/Input/Variants/Types/Icon Left",
    "name": "Icon Left",
    "story": "Icon Left",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const icon = 'search';\n  return (\n    <div className=\"Row\">\n      <div className=\"mr-9 mb-8 w-25\">\n        <Input name=\"input\" value=\"Value\" onChange={action('on-change')} onClear={action('on-clear')} icon={icon} />\n        <br />\n        <Text weight=\"strong\">Default</Text>\n      </div>\n      <div className=\"mr-9 mb-8 w-25\">\n        <Input\n          name=\"input\"\n          value=\"\"\n          placeholder=\"Placeholder\"\n          onChange={action('on-change')}\n          onClear={action('on-clear')}\n          info=\"sample info popover\"\n          icon={icon}\n        />\n        <br />\n        <Text weight=\"strong\">Placeholder</Text>\n      </div>\n      <div className=\"mr-9 mb-8 w-25\">\n        <Input\n          name=\"input\"\n          value=\"Value\"\n          onChange={action('on-change')}\n          onClear={action('on-clear')}\n          error={true}\n          icon={icon}\n        />\n        <br />\n        <Text weight=\"strong\">Error</Text>\n      </div>\n      <div className=\"mr-9 mb-8 w-25\">\n        <Input name=\"input\" value=\"Value\" onChange={action('on-change')} disabled={true} icon={icon} />\n        <br />\n        <Text weight=\"strong\">Disabled</Text>\n      </div>\n      <div className=\"mr-9 mb-8 w-25\">\n        <Input name=\"input\" value=\"Value\" icon={icon} />\n        <br />\n        <Text weight=\"strong\">Read Only</Text>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-input-variants-types-icon-left--icon-left",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Name of the `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of text inside `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "number",
              "text",
              "tel",
              "url",
              "email",
              "password"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"number\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"password\""
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Input` (Used in case of controlled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "Adds default value to `Input` (Used in case of uncontrolled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when input is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of the `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label to be displayed inside `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "required": {
          "name": "required",
          "description": "Shows the user that this field id required",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoComplete": {
          "name": "autoComplete",
          "description": "Specifies whether `input field should have autocomplete enabled",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "on",
              "off"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"on\" | \"off\""
            },
            "defaultValue": null
          }
        },
        "readOnly": {
          "name": "readOnly",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "min": {
          "name": "min",
          "description": "Valid for number it defines the most negative value in the range of permitted values.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minLength": {
          "name": "minLength",
          "description": "Valid for text, url, tel, email, and password, it defines the minimum number of characters\n(as UTF-16 code units) the user can enter into the entry field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxLength": {
          "name": "maxLength",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "pattern": {
          "name": "pattern",
          "description": "The pattern attribute, when specified, is a regular expression that the input's value\nmust match in order for the value to pass constraint validation.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "info": {
          "name": "info",
          "description": "Text to be rendered in info `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "minimum width of `Input` component\n\n**No default value for `type='number'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onClear": {
          "name": "onClear",
          "description": "Callback function when user clicks the clear button",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function when `Input` text changes",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Input` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Input` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Input` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "actionIcon": {
          "name": "actionIcon",
          "description": "Custom Icon Component to be passed to Input to replace Clear Icon in the right",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
          },
          "table": {
            "type": {
              "summary": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-input-variants-types-inline-label--inline-label": {
    "id": "components-input-variants-types-inline-label--inline-label",
    "kind": "Components/Input/Variants/Types/Inline Label",
    "name": "Inline Label",
    "story": "Inline Label",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const label = 'USD';\n  return (\n    <div>\n      <div className=\"w-25\">\n        <Input name=\"input\" type=\"number\" size=\"regular\" inlineLabel={label} onChange={action('on-change')} />\n        <br />\n        <Text weight=\"strong\">Regular</Text>\n      </div>\n      <br />\n      <div className=\"w-25\">\n        <Input name=\"input\" type=\"number\" size=\"large\" inlineLabel={label} onChange={action('on-change')} />\n        <br />\n        <Text weight=\"strong\">Large</Text>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-input-variants-types-inline-label--inline-label",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Name of the `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of text inside `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "number",
              "text",
              "tel",
              "url",
              "email",
              "password"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"number\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"password\""
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Input` (Used in case of controlled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "Adds default value to `Input` (Used in case of uncontrolled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when input is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of the `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label to be displayed inside `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "required": {
          "name": "required",
          "description": "Shows the user that this field id required",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoComplete": {
          "name": "autoComplete",
          "description": "Specifies whether `input field should have autocomplete enabled",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "on",
              "off"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"on\" | \"off\""
            },
            "defaultValue": null
          }
        },
        "readOnly": {
          "name": "readOnly",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "min": {
          "name": "min",
          "description": "Valid for number it defines the most negative value in the range of permitted values.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minLength": {
          "name": "minLength",
          "description": "Valid for text, url, tel, email, and password, it defines the minimum number of characters\n(as UTF-16 code units) the user can enter into the entry field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxLength": {
          "name": "maxLength",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "pattern": {
          "name": "pattern",
          "description": "The pattern attribute, when specified, is a regular expression that the input's value\nmust match in order for the value to pass constraint validation.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "info": {
          "name": "info",
          "description": "Text to be rendered in info `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "minimum width of `Input` component\n\n**No default value for `type='number'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onClear": {
          "name": "onClear",
          "description": "Callback function when user clicks the clear button",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function when `Input` text changes",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Input` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Input` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Input` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "actionIcon": {
          "name": "actionIcon",
          "description": "Custom Icon Component to be passed to Input to replace Clear Icon in the right",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
          },
          "table": {
            "type": {
              "summary": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-input-variants-types-with-label--with-label": {
    "id": "components-input-variants-types-with-label--with-label",
    "kind": "Components/Input/Variants/Types/With Label",
    "name": "With Label",
    "story": "With Label",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div className=\"Row\">\n      <div className=\"mr-9 mb-8 w-25\">\n        <div style={{ height: '72px' }}>\n          <Label withInput={true} required={true}>\n            Full Name\n          </Label>\n          <Input\n            name=\"input\"\n            value=\"Value\"\n            onChange={action('on-change')}\n            onClear={action('on-clear')}\n            required={true}\n          />\n        </div>\n        <br />\n        <Text weight=\"strong\">No Caption</Text>\n      </div>\n      <div className=\"mr-9 mb-8 w-25\">\n        <Label withInput={true} required={true}>\n          Password\n        </Label>\n        <Input\n          name=\"input\"\n          value=\"Value\"\n          type=\"password\"\n          onChange={action('on-change')}\n          onClear={action('on-clear')}\n          required={true}\n        />\n        <Caption withInput={true}>Pick a strong, unique password</Caption>\n        <br />\n        <Text weight=\"strong\">Caption Default</Text>\n      </div>\n      <div className=\"mr-9 mb-8 w-25\">\n        <Label withInput={true} required={true}>\n          Password\n        </Label>\n        <Input\n          name=\"input\"\n          value=\"Value\"\n          type=\"password\"\n          onChange={action('on-change')}\n          onClear={action('on-clear')}\n          required={true}\n          error={true}\n        />\n        <Caption error={true} withInput={true}>\n          Pick a strong, unique password\n        </Caption>\n        <br />\n        <Text weight=\"strong\">Caption Error</Text>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-input-variants-types-with-label--with-label",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Name of the `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of text inside `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "number",
              "text",
              "tel",
              "url",
              "email",
              "password"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"number\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"password\""
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Input` (Used in case of controlled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "Adds default value to `Input` (Used in case of uncontrolled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when input is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of the `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label to be displayed inside `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "required": {
          "name": "required",
          "description": "Shows the user that this field id required",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoComplete": {
          "name": "autoComplete",
          "description": "Specifies whether `input field should have autocomplete enabled",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "on",
              "off"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"on\" | \"off\""
            },
            "defaultValue": null
          }
        },
        "readOnly": {
          "name": "readOnly",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "min": {
          "name": "min",
          "description": "Valid for number it defines the most negative value in the range of permitted values.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minLength": {
          "name": "minLength",
          "description": "Valid for text, url, tel, email, and password, it defines the minimum number of characters\n(as UTF-16 code units) the user can enter into the entry field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxLength": {
          "name": "maxLength",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "pattern": {
          "name": "pattern",
          "description": "The pattern attribute, when specified, is a regular expression that the input's value\nmust match in order for the value to pass constraint validation.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "info": {
          "name": "info",
          "description": "Text to be rendered in info `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "minimum width of `Input` component\n\n**No default value for `type='number'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onClear": {
          "name": "onClear",
          "description": "Callback function when user clicks the clear button",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function when `Input` text changes",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Input` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Input` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Input` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "actionIcon": {
          "name": "actionIcon",
          "description": "Custom Icon Component to be passed to Input to replace Clear Icon in the right",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
          },
          "table": {
            "type": {
              "summary": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-inputmask-all--all": {
    "id": "components-inputmask-all--all",
    "kind": "Components/InputMask/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const inputType = select('type', ['text', 'password', 'number'], undefined);\n\n  const value = text('value', '');\n  const defaultValue = text('defaultValue', '');\n\n  const size = select('size', ['tiny', 'regular', 'large'], undefined);\n\n  const placeholder = text('placeholder', 'mm/dd/yyyy');\n\n  const disabled = boolean('disabled', false);\n\n  const icon = text('icon', '');\n\n  const required = boolean('required', false);\n\n  const inlineLabel = text('inlineLabel', '');\n\n  const error = boolean('error', false);\n\n  const caption = text('caption', '');\n\n  const info = text('info', 'sample info tooltip');\n\n  const inputValidator = (val: string) => {\n    return Utils.validators.date(val, 'mm/dd/yyyy');\n  };\n\n  return (\n    <div className=\"w-25\">\n      <InputMask\n        name=\"input\"\n        type={inputType}\n        value={value}\n        defaultValue={defaultValue}\n        disabled={disabled}\n        onChange={action('on-change')}\n        onClick={action('on-click')}\n        onBlur={action('on-blur')}\n        onClear={action('on-clear')}\n        placeholder={placeholder}\n        inlineLabel={inlineLabel}\n        size={size}\n        icon={icon}\n        required={required}\n        error={error}\n        caption={caption}\n        info={info}\n        mask={Utils.masks.date['mm/dd/yyyy']}\n        validators={inputValidator}\n      />\n    </div>\n  );\n}"
      },
      "__id": "components-inputmask-all--all",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Name of the `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of text inside `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "number",
              "text",
              "tel",
              "url",
              "email",
              "password"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"number\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"password\""
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Input` (Used in case of controlled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "Adds default value to `Input` (Used in case of uncontrolled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when input is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of the `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label to be displayed inside `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "required": {
          "name": "required",
          "description": "Shows the user that this field id required",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoComplete": {
          "name": "autoComplete",
          "description": "Specifies whether `input field should have autocomplete enabled",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "on",
              "off"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"on\" | \"off\""
            },
            "defaultValue": null
          }
        },
        "readOnly": {
          "name": "readOnly",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "min": {
          "name": "min",
          "description": "Valid for number it defines the most negative value in the range of permitted values.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minLength": {
          "name": "minLength",
          "description": "Valid for text, url, tel, email, and password, it defines the minimum number of characters\n(as UTF-16 code units) the user can enter into the entry field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxLength": {
          "name": "maxLength",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "pattern": {
          "name": "pattern",
          "description": "The pattern attribute, when specified, is a regular expression that the input's value\nmust match in order for the value to pass constraint validation.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "info": {
          "name": "info",
          "description": "Text to be rendered in info `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "minimum width of `Input` component\n\n**No default value for `type='number'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onClear": {
          "name": "onClear",
          "description": "Callback function when user clicks the clear button",
          "type": {
            "required": false,
            "name": "function",
            "value": "(((e: MouseEvent<HTMLElement, MouseEvent>) => void) & ((e: MouseEvent<HTMLElement, MouseEvent>) => void)) | undefined"
          },
          "table": {
            "type": {
              "summary": "(((e: MouseEvent<HTMLElement, MouseEvent>) => void) & ((e: MouseEvent<HTMLElement, MouseEvent>) => void)) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function when `Input` text changes\n<br/>**Second argument will be the masked value**",
          "type": {
            "required": false,
            "name": "function",
            "value": "(((e: ChangeEvent<HTMLInputElement>) => void) & ((e: ChangeEvent<HTMLInputElement>, maskedVal: string) => void)) | undefined"
          },
          "table": {
            "type": {
              "summary": "(((e: ChangeEvent<HTMLInputElement>) => void) & ((e: ChangeEvent<HTMLInputElement>, maskedVal: string) => void)) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Input` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Input` loses focus\n<br/>**Second argument will be the masked value**",
          "type": {
            "required": false,
            "name": "function",
            "value": "(((e: FocusEvent<HTMLInputElement>) => void) & ((e: ChangeEvent<HTMLInputElement>, maskedVal: string) => void)) | undefined"
          },
          "table": {
            "type": {
              "summary": "(((e: FocusEvent<HTMLInputElement>) => void) & ((e: ChangeEvent<HTMLInputElement>, maskedVal: string) => void)) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Input` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "actionIcon": {
          "name": "actionIcon",
          "description": "Custom Icon Component to be passed to Input to replace Clear Icon in the right",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
          },
          "table": {
            "type": {
              "summary": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "mask": {
          "name": "mask",
          "description": "Every value of Array represent either fixed char or regular expression for particular index\n\n<pre className=\"DocPage-codeBlock\">\nMask: (string | RegExp)[]\n</pre>",
          "type": {
            "required": true,
            "name": "other",
            "value": "Mask"
          },
          "table": {
            "type": {
              "summary": "Mask"
            },
            "defaultValue": null
          }
        },
        "placeholderChar": {
          "name": "placeholderChar",
          "description": "Character to be used for empty value at particular index in `Mask`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "caption": {
          "name": "caption",
          "description": "Adds caption to `input` on error",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "validators": {
          "name": "validators",
          "description": "custom Validator for `InputMask`\n\n`ValidatorFn: (val: string) => boolean`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ValidatorFn<any[]> | ValidatorFn<any[]>[] | undefined"
          },
          "table": {
            "type": {
              "summary": "ValidatorFn<any[]> | ValidatorFn<any[]>[] | undefined"
            },
            "defaultValue": null
          }
        },
        "clearOnEmptyBlur": {
          "name": "clearOnEmptyBlur",
          "description": "Clear the `Input` on blur if value === defaultPlaceholderValue",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-inputmask-card-number--card-number": {
    "id": "components-inputmask-card-number--card-number",
    "kind": "Components/InputMask/Card Number",
    "name": "Card Number",
    "story": "Card Number",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div className=\"w-25\">\n      <Label className=\"mb-3\">Card Number</Label>\n      <InputMask\n        mask={[\n          /\\d/,\n          /\\d/,\n          /\\d/,\n          /\\d/,\n          ' ',\n          /\\d/,\n          /\\d/,\n          /\\d/,\n          /\\d/,\n          ' ',\n          /\\d/,\n          /\\d/,\n          /\\d/,\n          /\\d/,\n          ' ',\n          /\\d/,\n          /\\d/,\n          /\\d/,\n          /\\d/,\n        ]}\n        placeholder=\"____ ____ ____ ____\"\n        name=\"card_number\"\n        icon=\"credit_card\"\n      />\n    </div>\n  );\n}"
      },
      "__id": "components-inputmask-card-number--card-number",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Name of the `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of text inside `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "number",
              "text",
              "tel",
              "url",
              "email",
              "password"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"number\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"password\""
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Input` (Used in case of controlled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "Adds default value to `Input` (Used in case of uncontrolled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when input is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of the `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label to be displayed inside `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "required": {
          "name": "required",
          "description": "Shows the user that this field id required",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoComplete": {
          "name": "autoComplete",
          "description": "Specifies whether `input field should have autocomplete enabled",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "on",
              "off"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"on\" | \"off\""
            },
            "defaultValue": null
          }
        },
        "readOnly": {
          "name": "readOnly",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "min": {
          "name": "min",
          "description": "Valid for number it defines the most negative value in the range of permitted values.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minLength": {
          "name": "minLength",
          "description": "Valid for text, url, tel, email, and password, it defines the minimum number of characters\n(as UTF-16 code units) the user can enter into the entry field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxLength": {
          "name": "maxLength",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "pattern": {
          "name": "pattern",
          "description": "The pattern attribute, when specified, is a regular expression that the input's value\nmust match in order for the value to pass constraint validation.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "info": {
          "name": "info",
          "description": "Text to be rendered in info `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "minimum width of `Input` component\n\n**No default value for `type='number'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onClear": {
          "name": "onClear",
          "description": "Callback function when user clicks the clear button",
          "type": {
            "required": false,
            "name": "function",
            "value": "(((e: MouseEvent<HTMLElement, MouseEvent>) => void) & ((e: MouseEvent<HTMLElement, MouseEvent>) => void)) | undefined"
          },
          "table": {
            "type": {
              "summary": "(((e: MouseEvent<HTMLElement, MouseEvent>) => void) & ((e: MouseEvent<HTMLElement, MouseEvent>) => void)) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function when `Input` text changes\n<br/>**Second argument will be the masked value**",
          "type": {
            "required": false,
            "name": "function",
            "value": "(((e: ChangeEvent<HTMLInputElement>) => void) & ((e: ChangeEvent<HTMLInputElement>, maskedVal: string) => void)) | undefined"
          },
          "table": {
            "type": {
              "summary": "(((e: ChangeEvent<HTMLInputElement>) => void) & ((e: ChangeEvent<HTMLInputElement>, maskedVal: string) => void)) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Input` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Input` loses focus\n<br/>**Second argument will be the masked value**",
          "type": {
            "required": false,
            "name": "function",
            "value": "(((e: FocusEvent<HTMLInputElement>) => void) & ((e: ChangeEvent<HTMLInputElement>, maskedVal: string) => void)) | undefined"
          },
          "table": {
            "type": {
              "summary": "(((e: FocusEvent<HTMLInputElement>) => void) & ((e: ChangeEvent<HTMLInputElement>, maskedVal: string) => void)) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Input` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "actionIcon": {
          "name": "actionIcon",
          "description": "Custom Icon Component to be passed to Input to replace Clear Icon in the right",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
          },
          "table": {
            "type": {
              "summary": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "mask": {
          "name": "mask",
          "description": "Every value of Array represent either fixed char or regular expression for particular index\n\n<pre className=\"DocPage-codeBlock\">\nMask: (string | RegExp)[]\n</pre>",
          "type": {
            "required": true,
            "name": "other",
            "value": "Mask"
          },
          "table": {
            "type": {
              "summary": "Mask"
            },
            "defaultValue": null
          }
        },
        "placeholderChar": {
          "name": "placeholderChar",
          "description": "Character to be used for empty value at particular index in `Mask`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "caption": {
          "name": "caption",
          "description": "Adds caption to `input` on error",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "validators": {
          "name": "validators",
          "description": "custom Validator for `InputMask`\n\n`ValidatorFn: (val: string) => boolean`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ValidatorFn<any[]> | ValidatorFn<any[]>[] | undefined"
          },
          "table": {
            "type": {
              "summary": "ValidatorFn<any[]> | ValidatorFn<any[]>[] | undefined"
            },
            "defaultValue": null
          }
        },
        "clearOnEmptyBlur": {
          "name": "clearOnEmptyBlur",
          "description": "Clear the `Input` on blur if value === defaultPlaceholderValue",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-inputmask-phone-number--phone-number": {
    "id": "components-inputmask-phone-number--phone-number",
    "kind": "Components/InputMask/Phone Number",
    "name": "Phone Number",
    "story": "Phone Number",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div className=\"w-25\">\n      <Label withInput={true}>Phone Number</Label>\n      <InputMask\n        mask={['(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/]}\n        placeholder=\"(___) ___-____\"\n        name=\"primary_phone\"\n        icon=\"call\"\n      />\n    </div>\n  );\n}"
      },
      "__id": "components-inputmask-phone-number--phone-number",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Name of the `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of text inside `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "number",
              "text",
              "tel",
              "url",
              "email",
              "password"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"number\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"password\""
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Input` (Used in case of controlled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "Adds default value to `Input` (Used in case of uncontrolled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when input is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of the `Input`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "inlineLabel": {
          "name": "inlineLabel",
          "description": "Label to be displayed inside `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "required": {
          "name": "required",
          "description": "Shows the user that this field id required",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoComplete": {
          "name": "autoComplete",
          "description": "Specifies whether `input field should have autocomplete enabled",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "on",
              "off"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"on\" | \"off\""
            },
            "defaultValue": null
          }
        },
        "readOnly": {
          "name": "readOnly",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "min": {
          "name": "min",
          "description": "Valid for number it defines the most negative value in the range of permitted values.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "minLength": {
          "name": "minLength",
          "description": "Valid for text, url, tel, email, and password, it defines the minimum number of characters\n(as UTF-16 code units) the user can enter into the entry field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "maxLength": {
          "name": "maxLength",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "pattern": {
          "name": "pattern",
          "description": "The pattern attribute, when specified, is a regular expression that the input's value\nmust match in order for the value to pass constraint validation.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "info": {
          "name": "info",
          "description": "Text to be rendered in info `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "minimum width of `Input` component\n\n**No default value for `type='number'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onClear": {
          "name": "onClear",
          "description": "Callback function when user clicks the clear button",
          "type": {
            "required": false,
            "name": "function",
            "value": "(((e: MouseEvent<HTMLElement, MouseEvent>) => void) & ((e: MouseEvent<HTMLElement, MouseEvent>) => void)) | undefined"
          },
          "table": {
            "type": {
              "summary": "(((e: MouseEvent<HTMLElement, MouseEvent>) => void) & ((e: MouseEvent<HTMLElement, MouseEvent>) => void)) | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function when `Input` text changes\n<br/>**Second argument will be the masked value**",
          "type": {
            "required": false,
            "name": "function",
            "value": "(((e: ChangeEvent<HTMLInputElement>) => void) & ((e: ChangeEvent<HTMLInputElement>, maskedVal: string) => void)) | undefined"
          },
          "table": {
            "type": {
              "summary": "(((e: ChangeEvent<HTMLInputElement>) => void) & ((e: ChangeEvent<HTMLInputElement>, maskedVal: string) => void)) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Input` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Input` loses focus\n<br/>**Second argument will be the masked value**",
          "type": {
            "required": false,
            "name": "function",
            "value": "(((e: FocusEvent<HTMLInputElement>) => void) & ((e: ChangeEvent<HTMLInputElement>, maskedVal: string) => void)) | undefined"
          },
          "table": {
            "type": {
              "summary": "(((e: FocusEvent<HTMLInputElement>) => void) & ((e: ChangeEvent<HTMLInputElement>, maskedVal: string) => void)) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Input` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "actionIcon": {
          "name": "actionIcon",
          "description": "Custom Icon Component to be passed to Input to replace Clear Icon in the right",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
          },
          "table": {
            "type": {
              "summary": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "mask": {
          "name": "mask",
          "description": "Every value of Array represent either fixed char or regular expression for particular index\n\n<pre className=\"DocPage-codeBlock\">\nMask: (string | RegExp)[]\n</pre>",
          "type": {
            "required": true,
            "name": "other",
            "value": "Mask"
          },
          "table": {
            "type": {
              "summary": "Mask"
            },
            "defaultValue": null
          }
        },
        "placeholderChar": {
          "name": "placeholderChar",
          "description": "Character to be used for empty value at particular index in `Mask`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "caption": {
          "name": "caption",
          "description": "Adds caption to `input` on error",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "validators": {
          "name": "validators",
          "description": "custom Validator for `InputMask`\n\n`ValidatorFn: (val: string) => boolean`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ValidatorFn<any[]> | ValidatorFn<any[]>[] | undefined"
          },
          "table": {
            "type": {
              "summary": "ValidatorFn<any[]> | ValidatorFn<any[]>[] | undefined"
            },
            "defaultValue": null
          }
        },
        "clearOnEmptyBlur": {
          "name": "clearOnEmptyBlur",
          "description": "Clear the `Input` on blur if value === defaultPlaceholderValue",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-label-all--all": {
    "id": "components-label-all--all",
    "kind": "Components/Label/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const disabled = boolean('disabled', false);\n  const required = boolean('required', false);\n  const optional = boolean('optional', false);\n\n  const options = {\n    disabled,\n    required,\n    optional,\n  };\n\n  return <Label {...options}>Label</Label>;\n}"
      },
      "__id": "components-label-all--all",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "Text to be rendered",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Label`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "required": {
          "name": "required",
          "description": "Shows the user that this field is required",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optional": {
          "name": "optional",
          "description": "Shows the user that this field is optional",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withInput": {
          "name": "withInput",
          "description": "Adds default bottom margin of 4px",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-label-variants-required--required": {
    "id": "components-label-variants-required--required",
    "kind": "Components/Label/Variants/Required",
    "name": "Required",
    "story": "Required",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div>\n      <div className=\"mr-5 mb-8\">\n        <Label optional={true}>Not required</Label>\n      </div>\n      <div>\n        <Label required={true}>Required</Label>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-label-variants-required--required",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "Text to be rendered",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Label`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "required": {
          "name": "required",
          "description": "Shows the user that this field is required",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optional": {
          "name": "optional",
          "description": "Shows the user that this field is optional",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withInput": {
          "name": "withInput",
          "description": "Adds default bottom margin of 4px",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-label-variants-state--state": {
    "id": "components-label-variants-state--state",
    "kind": "Components/Label/Variants/State",
    "name": "State",
    "story": "State",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div className=\"d-flex\">\n      <div className=\"mr-5\">\n        <Label>Enabled Label</Label>\n      </div>\n      <div>\n        <Label disabled={true}>Disabled Label</Label>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-label-variants-state--state",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "Text to be rendered",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Label`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "required": {
          "name": "required",
          "description": "Shows the user that this field is required",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "optional": {
          "name": "optional",
          "description": "Shows the user that this field is optional",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "withInput": {
          "name": "withInput",
          "description": "Adds default bottom margin of 4px",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-legend-all--all": {
    "id": "components-legend-all--all",
    "kind": "Components/Legend/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const children = text('children', 'Legend');\n\n  const iconAppearance = text('Icon Appearance', 'inverse');\n\n  const labelAppearance = select(\n    'Label Appearance',\n    ['default', 'white', 'destructive', 'subtle', 'disabled'],\n    undefined\n  );\n\n  const labelWeight = optionsKnob('weight', { strong: 'strong', medium: 'medium' }, undefined, {\n    display: 'inline-radio',\n  });\n\n  const iconSize = number('iconSize', 14);\n\n  const options = {\n    iconAppearance,\n    labelAppearance,\n    labelWeight,\n    iconSize,\n  };\n  return (\n    <div style={{ background: labelAppearance === 'white' ? 'black' : 'transparent' }}>\n      <Legend {...options}>{children}</Legend>\n    </div>\n  );\n}"
      },
      "__id": "components-legend-all--all",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "Describes label of the `Legend`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "iconAppearance": {
          "name": "iconAppearance",
          "description": "Color of Icon",
          "type": {
            "required": false,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": {
              "summary": "\"inverse\""
            }
          }
        },
        "labelAppearance": {
          "name": "labelAppearance",
          "description": "Color of label",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "success",
              "default",
              "disabled",
              "link",
              "subtle",
              "white",
              "destructive"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"success\" | \"default\" | \"disabled\" | \"link\" | \"subtle\" | \"white\" | \"destructive\""
            },
            "defaultValue": null
          }
        },
        "iconSize": {
          "name": "iconSize",
          "description": "Size of Icon",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "16"
            }
          }
        },
        "labelWeight": {
          "name": "labelWeight",
          "description": "Denotes weight of `text`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "medium",
              "strong"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"medium\" | \"strong\""
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Legend` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Legend`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Legend`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-legend-variants-icon-appearance--icon-appearance": {
    "id": "components-legend-variants-icon-appearance--icon-appearance",
    "kind": "Components/Legend/Variants/Icon Appearance",
    "name": "Icon Appearance",
    "story": "Icon Appearance",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const appearances = [\n    'primary',\n    'secondary',\n    'success',\n    'alert',\n    'warning',\n    'accent1',\n    'accent2',\n    'accent3',\n    'accent4',\n    'inverse',\n  ];\n\n  return (\n    <div>\n      {appearances.map((appearance, i) => {\n        return (\n          <div key={i} className=\"mb-4\">\n            <Legend iconAppearance={appearance}>{appearance}</Legend>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-legend-variants-icon-appearance--icon-appearance",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "Describes label of the `Legend`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "iconAppearance": {
          "name": "iconAppearance",
          "description": "Color of Icon",
          "type": {
            "required": false,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": {
              "summary": "\"inverse\""
            }
          }
        },
        "labelAppearance": {
          "name": "labelAppearance",
          "description": "Color of label",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "success",
              "default",
              "disabled",
              "link",
              "subtle",
              "white",
              "destructive"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"success\" | \"default\" | \"disabled\" | \"link\" | \"subtle\" | \"white\" | \"destructive\""
            },
            "defaultValue": null
          }
        },
        "iconSize": {
          "name": "iconSize",
          "description": "Size of Icon",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "16"
            }
          }
        },
        "labelWeight": {
          "name": "labelWeight",
          "description": "Denotes weight of `text`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "medium",
              "strong"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"medium\" | \"strong\""
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Legend` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Legend`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Legend`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-legend-variants-label-appearance--label-appearance": {
    "id": "components-legend-variants-label-appearance--label-appearance",
    "kind": "Components/Legend/Variants/Label Appearance",
    "name": "Label Appearance",
    "story": "Label Appearance",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const appearances: Appearance[] = ['default', 'white', 'destructive', 'subtle', 'disabled'];\n  return (\n    <div>\n      {appearances.map((appearance, i) => {\n        return (\n          <div key={i} style={{ background: appearance === 'white' ? 'black' : 'transparent' }} className=\"mb-4 w-25\">\n            <Legend labelAppearance={appearance} iconAppearance={appearance === 'white' ? 'secondary' : 'inverse'}>\n              {appearance}\n            </Legend>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-legend-variants-label-appearance--label-appearance",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "Describes label of the `Legend`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "iconAppearance": {
          "name": "iconAppearance",
          "description": "Color of Icon",
          "type": {
            "required": false,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": {
              "summary": "\"inverse\""
            }
          }
        },
        "labelAppearance": {
          "name": "labelAppearance",
          "description": "Color of label",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "success",
              "default",
              "disabled",
              "link",
              "subtle",
              "white",
              "destructive"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"success\" | \"default\" | \"disabled\" | \"link\" | \"subtle\" | \"white\" | \"destructive\""
            },
            "defaultValue": null
          }
        },
        "iconSize": {
          "name": "iconSize",
          "description": "Size of Icon",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "16"
            }
          }
        },
        "labelWeight": {
          "name": "labelWeight",
          "description": "Denotes weight of `text`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "medium",
              "strong"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"medium\" | \"strong\""
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Legend` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Legend`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Legend`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-legend-variants-label-weight--label-weight": {
    "id": "components-legend-variants-label-weight--label-weight",
    "kind": "Components/Legend/Variants/Label Weight",
    "name": "Label Weight",
    "story": "Label Weight",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div className=\"d-flex\">\n      <div className=\"mr-5\">\n        <Legend labelWeight={'strong'}>Strong</Legend>\n      </div>\n      <div>\n        <Legend labelWeight={'medium'}>Medium</Legend>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-legend-variants-label-weight--label-weight",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "Describes label of the `Legend`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "iconAppearance": {
          "name": "iconAppearance",
          "description": "Color of Icon",
          "type": {
            "required": false,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": {
              "summary": "\"inverse\""
            }
          }
        },
        "labelAppearance": {
          "name": "labelAppearance",
          "description": "Color of label",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "success",
              "default",
              "disabled",
              "link",
              "subtle",
              "white",
              "destructive"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"success\" | \"default\" | \"disabled\" | \"link\" | \"subtle\" | \"white\" | \"destructive\""
            },
            "defaultValue": null
          }
        },
        "iconSize": {
          "name": "iconSize",
          "description": "Size of Icon",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "16"
            }
          }
        },
        "labelWeight": {
          "name": "labelWeight",
          "description": "Denotes weight of `text`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "medium",
              "strong"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"medium\" | \"strong\""
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Legend` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Legend`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Legend`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-link-all--all": {
    "id": "components-link-all--all",
    "kind": "Components/Link/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const href = text('href', 'http://innovaccer.com');\n  const target = select('target', ['_blank', '_self', '_parent', '_top'], '_blank');\n  const size = select('size', ['regular', 'tiny'], 'regular');\n  const appearance = select('appearance', ['default', 'subtle'], 'default');\n  const disabled = boolean('disabled', false);\n\n  const options = {\n    href,\n    target,\n    size,\n    appearance,\n    disabled,\n  };\n\n  return (\n    <Link {...options} onClick={action('link click')}>\n      Click this link.\n    </Link>\n  );\n}"
      },
      "__id": "components-link-all--all",
      "args": {},
      "argTypes": {
        "id": {
          "name": "id",
          "description": "HTML ID of `Link`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Link`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "default",
              "subtle"
            ]
          },
          "table": {
            "type": {
              "summary": "\"default\" | \"subtle\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Size of `Link`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "\"regular\" | \"tiny\""
            },
            "defaultValue": {
              "summary": "\"regular\""
            }
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Link`, making it unable to be clicked",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "href": {
          "name": "href",
          "description": "The URL to navigate to when the `Link` is clicked",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "target": {
          "name": "target",
          "description": "Specifies where to open the navigated document",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "_blank",
              "_self",
              "_parent",
              "_top"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"_blank\" | \"_self\" | \"_parent\" | \"_top\""
            },
            "defaultValue": null
          }
        },
        "rel": {
          "name": "rel",
          "description": "The relationship of the linked URL as space-separated link types.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "download": {
          "name": "download",
          "description": "Prompts the user to save the linked URL instead of navigating to it. Can be used with or without a value",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "hreflang": {
          "name": "hreflang",
          "description": "Hints at the human language of the linked URL",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Link` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-link-variants-appearance--appearance": {
    "id": "components-link-variants-appearance--appearance",
    "kind": "Components/Link/Variants/Appearance",
    "name": "Appearance",
    "story": "Appearance",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div className=\"d-flex\">\n      <Link appearance=\"default\" href=\"http://innovaccer.com\">\n        Default Link.\n      </Link>\n      <Link appearance=\"subtle\" href=\"http://innovaccer.com\" className=\"ml-7\">\n        Subtle Link.\n      </Link>\n    </div>\n  );\n}"
      },
      "__id": "components-link-variants-appearance--appearance",
      "args": {},
      "argTypes": {
        "id": {
          "name": "id",
          "description": "HTML ID of `Link`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Link`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "default",
              "subtle"
            ]
          },
          "table": {
            "type": {
              "summary": "\"default\" | \"subtle\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Size of `Link`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "\"regular\" | \"tiny\""
            },
            "defaultValue": {
              "summary": "\"regular\""
            }
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Link`, making it unable to be clicked",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "href": {
          "name": "href",
          "description": "The URL to navigate to when the `Link` is clicked",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "target": {
          "name": "target",
          "description": "Specifies where to open the navigated document",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "_blank",
              "_self",
              "_parent",
              "_top"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"_blank\" | \"_self\" | \"_parent\" | \"_top\""
            },
            "defaultValue": null
          }
        },
        "rel": {
          "name": "rel",
          "description": "The relationship of the linked URL as space-separated link types.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "download": {
          "name": "download",
          "description": "Prompts the user to save the linked URL instead of navigating to it. Can be used with or without a value",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "hreflang": {
          "name": "hreflang",
          "description": "Hints at the human language of the linked URL",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Link` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-link-variants-disabled--disabled": {
    "id": "components-link-variants-disabled--disabled",
    "kind": "Components/Link/Variants/Disabled",
    "name": "Disabled",
    "story": "Disabled",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div className=\"d-flex\">\n      <Link href=\"http://innovaccer.com\" disabled={false}>\n        Link Enabled.\n      </Link>\n      <Link href=\"http://innovaccer.com\" disabled={true} className=\"ml-7\">\n        Link Disabled.\n      </Link>\n    </div>\n  );\n}"
      },
      "__id": "components-link-variants-disabled--disabled",
      "args": {},
      "argTypes": {
        "id": {
          "name": "id",
          "description": "HTML ID of `Link`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Link`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "default",
              "subtle"
            ]
          },
          "table": {
            "type": {
              "summary": "\"default\" | \"subtle\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Size of `Link`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "\"regular\" | \"tiny\""
            },
            "defaultValue": {
              "summary": "\"regular\""
            }
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Link`, making it unable to be clicked",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "href": {
          "name": "href",
          "description": "The URL to navigate to when the `Link` is clicked",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "target": {
          "name": "target",
          "description": "Specifies where to open the navigated document",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "_blank",
              "_self",
              "_parent",
              "_top"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"_blank\" | \"_self\" | \"_parent\" | \"_top\""
            },
            "defaultValue": null
          }
        },
        "rel": {
          "name": "rel",
          "description": "The relationship of the linked URL as space-separated link types.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "download": {
          "name": "download",
          "description": "Prompts the user to save the linked URL instead of navigating to it. Can be used with or without a value",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "hreflang": {
          "name": "hreflang",
          "description": "Hints at the human language of the linked URL",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Link` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-link-variants-size--size": {
    "id": "components-link-variants-size--size",
    "kind": "Components/Link/Variants/Size",
    "name": "Size",
    "story": "Size",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div className=\"d-flex\">\n      <Link href=\"http://innovaccer.com\" size=\"regular\">\n        Regular Link.\n      </Link>\n      <Link href=\"http://innovaccer.com\" size=\"tiny\" className=\"ml-7\">\n        Tiny Link.\n      </Link>\n    </div>\n  );\n}"
      },
      "__id": "components-link-variants-size--size",
      "args": {},
      "argTypes": {
        "id": {
          "name": "id",
          "description": "HTML ID of `Link`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Link`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "default",
              "subtle"
            ]
          },
          "table": {
            "type": {
              "summary": "\"default\" | \"subtle\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Size of `Link`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "\"regular\" | \"tiny\""
            },
            "defaultValue": {
              "summary": "\"regular\""
            }
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Link`, making it unable to be clicked",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "href": {
          "name": "href",
          "description": "The URL to navigate to when the `Link` is clicked",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "target": {
          "name": "target",
          "description": "Specifies where to open the navigated document",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "_blank",
              "_self",
              "_parent",
              "_top"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"_blank\" | \"_self\" | \"_parent\" | \"_top\""
            },
            "defaultValue": null
          }
        },
        "rel": {
          "name": "rel",
          "description": "The relationship of the linked URL as space-separated link types.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "download": {
          "name": "download",
          "description": "Prompts the user to save the linked URL instead of navigating to it. Can be used with or without a value",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "hreflang": {
          "name": "hreflang",
          "description": "Hints at the human language of the linked URL",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Link` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-list-all--all": {
    "id": "components-list-all--all",
    "kind": "Components/List/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const async = boolean('async', true);\n\n  let loading;\n  let error;\n  let applyData;\n  let applySchema;\n  const applyLoaderSchema = boolean('applyLoaderSchema', true);\n\n  if (!async) {\n    loading = boolean('loading', false);\n\n    error = boolean('error', false);\n\n    applySchema = boolean('applySchema', true);\n\n    applyData = boolean('applyData', true);\n  }\n\n  const type = select('type', ['resource', 'data'], 'resource');\n\n  const size = select('size', ['comfortable', 'standard', 'compressed', 'tight'], 'comfortable');\n\n  const withHeader = boolean('withHeader', false);\n\n  const withCheckbox = boolean('withCheckbox', false);\n\n  const withPagination = boolean('withPagination', true);\n\n  const page = number('page', 1);\n\n  const paginationType = select('paginationType', ['basic', 'jump'], 'jump');\n\n  const pageSize = number('pageSize', 12);\n\n  const multipleSorting = boolean('multipleSorting', false);\n\n  const headCellTooltip = boolean('headCellTooltip', false);\n\n  const separator = boolean('separator', false);\n\n  let dataAttr = {};\n  if (async) {\n    dataAttr = {\n      fetchData,\n    };\n  } else {\n    dataAttr = {\n      schema,\n      data,\n    };\n  }\n\n  return (\n    <div\n      style={{\n        height: '350px',\n        // overflow: 'hidden'\n      }}\n    >\n      <Card className=\"h-100 overflow-hidden\">\n        <List\n          {...dataAttr}\n          withHeader={withHeader}\n          headerOptions={{\n            withSearch: true,\n          }}\n          withCheckbox={withCheckbox}\n          type={type}\n          size={size}\n          separator={separator}\n          withPagination={withPagination}\n          paginationType={paginationType}\n          page={page}\n          pageSize={pageSize}\n          loaderSchema={applyLoaderSchema ? loaderSchema : undefined}\n          onRowClick={(rowData, rowIndex) =>\n            action(`on-row-click:- rowIndex: ${rowIndex} data: ${JSON.stringify(rowData)}`)()\n          }\n          onSelect={(rowIndex, selected, selectedList) =>\n            action(\n              `on-select:- rowIndex: ${rowIndex} selected: ${selected} selectedList: ${JSON.stringify(selectedList)}`\n            )()\n          }\n          onPageChange={(newPage) => action(`on-page-change:- ${newPage}`)()}\n          multipleSorting={multipleSorting}\n          sortingList={[{ name: 'name', type: 'desc' }]}\n          filterList={{\n            name: ['h-r', 's-z'],\n          }}\n        />\n      </Card>\n    </div>\n  );\n}"
      },
      "__id": "components-list-all--all",
      "args": {},
      "argTypes": {
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Table cell size",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "standard",
              "compressed",
              "tight",
              "comfortable"
            ]
          },
          "table": {
            "type": {
              "summary": "\"standard\" | \"compressed\" | \"tight\" | \"comfortable\""
            },
            "defaultValue": {
              "summary": "\"standard\""
            }
          }
        },
        "data": {
          "name": "data",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Data: RowData[]\n\n    RowData: Record<string, any> & {\n      _selected?: boolean\n    }\n\n    `_selected`  Denotes row selection\n</pre>",
          "type": {
            "required": true,
            "name": "other",
            "value": "Data"
          },
          "table": {
            "type": {
              "summary": "Data"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "type": {
          "name": "type",
          "description": "Type of Table\n\n**Requires `onRowClick` for 'resource' Table**",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "data",
              "resource"
            ]
          },
          "table": {
            "type": {
              "summary": "\"data\" | \"resource\""
            },
            "defaultValue": {
              "summary": "\"data\""
            }
          }
        },
        "onSelect": {
          "name": "onSelect",
          "description": "Callback to be called when a row is selected",
          "type": {
            "required": false,
            "name": "function",
            "value": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "loading": {
          "name": "loading",
          "description": "Set for loading state of Table(in case of sync)",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "separator": {
          "name": "separator",
          "description": "Shows left separator to all columns\n\n**Can be override by Column Schema**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "page": {
          "name": "page",
          "description": "Initial page passed to `Table`",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "error": {
          "name": "error",
          "description": "Set for error state of Table(in case of sync)",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "750"
            }
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Set for Row checkboxes",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Options to be passed if using `withHeader: true`\n\n<pre className=\"DocPage-codeBlock\">\nExternalHeaderProps: {\n    children?: React.ReactNode;\n    withSearch?: boolean;\n    searchPlaceholder?: string;\n    dynamicColumn?: boolean;\n    allowSelectAll?: boolean;\n}\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| children | Header actions to be rendered | |\n| withSearch | Set to use Search Input | |\n| searchPlaceholder | Placeholder of Search Input | \"Search\" |\n| dynamicColumn | Set to use Column controlling dropdown | true |\n| allowSelectAll | Set to show Select All button | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "ExternalHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "ExternalHeaderProps | undefined"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "onRowClick": {
          "name": "onRowClick",
          "description": "Callback to be called when a row is clicked in case of Table type: \"resource\"\n\n`onRowClickFunction: (data: RowData, rowIndexes?: number) => void`",
          "type": {
            "required": false,
            "name": "other",
            "value": "onRowClickFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "onRowClickFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "loaderSchema": {
          "name": "loaderSchema",
          "description": "Schema to be used for loading state **only when `schema: undefined`**",
          "type": {
            "required": true,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "schema": {
          "name": "schema",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Schema: ColumnSchema[]\n\n    ColumnSchema: {\n        name: string;\n        displayName: string;\n        width?: React.ReactText;\n        minWidth?: React.ReactText;\n        maxWidth?: React.ReactText;\n        resizable?: boolean;\n        sorting?: boolean;\n        comparator?: (a: RowData, b: RowData) => -1 | 0 | 1;\n        separator?: boolean;\n        pinned?: 'left' | 'right';\n        hidden?: boolean;\n        filters?: DropdownProps['options'];\n        onFilterChange?: (data: RowData, filters: Filter) => boolean;\n        translate?: (data: RowData) => RowData,\n        cellType?: CellType;\n        cellRenderer?: React.FunctionComponent\\<GridCellProps\\>;\n        align?: Alignment;\n    }\n\n    GridCellProps: {\n        size: GridSize;\n        rowIndex: number;\n        colIndex: number;\n        data: RowData;\n        schema: ColumnSchema;\n        loading: boolean;\n        expanded: boolean;\n    }\n\n| CellType | CellData | Default Width |\n| --- | --- | --- |\n| DEFAULT | string \\| { title: string } | { width: 200 } |\n| WITH\\_META\\_LIST | { title: string, metaList: string[] } | { width: 200 } |\n| AVATAR | { firstName?: string, lastName?: string, title?: string } | { width: 50, minWidth: 50 } |\n| AVATAR\\_WITH\\_TEXT | { firstName?: string, lastName?: string, title: string } | { width: 250 } |\n| AVATAR\\_WITH\\_META\\_LIST | { firstName?: string, lastName?: string, title: string, metaList: string[] } | { width: 250 } |\n| ICON | { icon: string } | { width: 50, minWidth: 50 } |\n| STATUS_HINT | { title: string, statusAppearance: string } | { width: 100 } |\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | key of the value in `RowData` | |\n| displayName | Column Head Label | |\n| width | width of the column(px or %) | |\n| minWidth | min-width of the column(px or %) | 100 |\n| maxWidth | max-width of the column(px or %) | 800 |\n| resizable | Denotes if column is resizable | |\n| sorting | Enables sorting in column | true |\n| comparator | Sorting Function to be passed(in case of sync) | Default string comparator(localeCompare) |\n| separator | Shows Left separator | |\n| tooltip | Shows tooltip on hover | |\n| pinned | Pin column | |\n| hidden | Denotes if column is hidden | |\n| filters | Filter options for the column | |\n| onFilterChange | Callback to be called on Filter Change | |\n| translate | Translate Cell Data | |\n| cellType | Cell Type | 'DEFAULT' |\n| cellRenderer | Custom Cell Renderer | |\n| align | Align cell content<br>**Align applicable only for following cellTypes:<br>DEFAULT, AVATAR, ICON, STATUS_HINT** | \"left\" |",
          "type": {
            "required": true,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "nestedRows": {
          "name": "nestedRows",
          "description": "Allow nested rows",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "nestedRowRenderer": {
          "name": "nestedRowRenderer",
          "description": "Renderer to be used for nested rows\n\n<pre className=\"DocPage-codeBlock\">\nNestedRowProps: {\n    rowIndex: number;\n    data: RowData;\n    schema: GridProps['schema'];\n    loading: boolean;\n    expanded: boolean;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FC<NestedRowProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FC<NestedRowProps> | undefined"
            },
            "defaultValue": null
          }
        },
        "withPagination": {
          "name": "withPagination",
          "description": "Set for `Pagination` component in `Table`(**Not applied if pageSize >= totalRecords**)",
          "type": {
            "required": true,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "pageSize": {
          "name": "pageSize",
          "description": "Number of rows to be rendered on a page\n\n**Also used to control number of rows to be rendered while loading: true**",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "15"
            }
          }
        },
        "errorTemplate": {
          "name": "errorTemplate",
          "description": "Template to be rendered when **error: true**\n\n<pre className=\"DocPage-codeBlock\">\nErrorTemplateProps: {\n    errorType: TableProps['errorType']\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FunctionComponent<ErrorTemplateProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FunctionComponent<ErrorTemplateProps> | undefined"
            },
            "defaultValue": {
              "summary": "defaultErrorTemplate( ... )"
            }
          }
        },
        "sortingList": {
          "name": "sortingList",
          "description": "Initial sortingList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nSortType: 'asc' | 'desc'\n</pre>",
          "type": {
            "required": true,
            "name": "other",
            "value": "{ name: string; type: SortType; }[]"
          },
          "table": {
            "type": {
              "summary": "{ name: string; type: SortType; }[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "filterList": {
          "name": "filterList",
          "description": "Initial filterList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nFilter: Array of selected values passed in dropdown\n`any[]`\n</pre>",
          "type": {
            "required": true,
            "name": "other",
            "value": "Record<string, Filter>"
          },
          "table": {
            "type": {
              "summary": "Record<string, Filter>"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "withHeader": {
          "name": "withHeader",
          "description": "Set to use `Header`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "paginationType": {
          "name": "paginationType",
          "description": "`Pagination` component type",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "basic",
              "jump"
            ]
          },
          "table": {
            "type": {
              "summary": "\"basic\" | \"jump\""
            },
            "defaultValue": {
              "summary": "\"jump\""
            }
          }
        },
        "multipleSorting": {
          "name": "multipleSorting",
          "description": "Set to allow multiple column sorting",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "onPageChange": {
          "name": "onPageChange",
          "description": "Callback to be called on page change in case of withPagination: true",
          "type": {
            "required": false,
            "name": "function",
            "value": "((page: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((page: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchData": {
          "name": "fetchData",
          "description": "Callback to be called in case of async `Table`\n\n<pre className=\"DocPage-codeBlock\">\nfetchDataFunction: (options: FetchDataOptions) => Promise<{\n      searchTerm?: string,\n      count: number,\n      data: Data,\n      schema: Schema\n}>;\n\nFetchDataOptions: {\n      page?: number;\n      pageSize?: number;\n      filterList?: TableProps['sortingList'];\n      sortingList?: TableProps['filterList'];\n      searchTerm?: string;\n  }\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchDataFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchDataFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "errorType": {
          "name": "errorType",
          "description": "Error type to be passed to errorTemplate props",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onSearch": {
          "name": "onSearch",
          "description": "Callback to be called on searchTerm change(in case of sync)",
          "type": {
            "required": false,
            "name": "function",
            "value": "((data: Data, searchTerm: string) => Data) | undefined"
          },
          "table": {
            "type": {
              "summary": "((data: Data, searchTerm: string) => Data) | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-loaders-placeholder-all--all": {
    "id": "components-loaders-placeholder-all--all",
    "kind": "Components/Loaders/Placeholder/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const withImage = boolean('withImage', false);\n  const round = boolean('round', false);\n  const imageSize = select('imageSize', ['small', 'medium', 'large'], undefined);\n\n  const options = {\n    withImage,\n    round,\n    imageSize,\n  };\n\n  return (\n    <Placeholder {...options}>\n      <PlaceholderParagraph length=\"small\" />\n      <PlaceholderParagraph length=\"medium\" />\n    </Placeholder>\n  );\n}"
      },
      "__id": "components-loaders-placeholder-all--all",
      "args": {},
      "argTypes": {
        "withImage": {
          "name": "withImage",
          "description": "Shows `Placeholder` along with image",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "round": {
          "name": "round",
          "description": "Changes shape of `Placeholder` to circle",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "imageSize": {
          "name": "imageSize",
          "description": "Specifies dimension of `Placeholder`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"small\""
            }
          }
        },
        "children": {
          "name": "children",
          "description": "To be rendered in `Placeholder` wrapper",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactElement<PlaceholderParagraphProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | ReactElement<...>[] | undefined"
          },
          "table": {
            "type": {
              "summary": "ReactElement<PlaceholderParagraphProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | ReactElement<...>[] | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-loaders-placeholder-image-all--all": {
    "id": "components-loaders-placeholder-image-all--all",
    "kind": "Components/Loaders/Placeholder/Image/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const round = boolean('round', false);\n  const size = select('size', ['small', 'medium', 'large'], 'small');\n\n  const options = {\n    round,\n    size,\n  };\n\n  return <PlaceholderImage {...options} />;\n}"
      },
      "__id": "components-loaders-placeholder-image-all--all",
      "args": {},
      "argTypes": {
        "round": {
          "name": "round",
          "description": "Changes shape of `Placeholder` to circle",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Specifies dimension of `Placeholder`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"small\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-loaders-placeholder-image-variants-round--round": {
    "id": "components-loaders-placeholder-image-variants-round--round",
    "kind": "Components/Loaders/Placeholder/Image/Variants/Round",
    "name": "Round",
    "story": "Round",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const size = 'medium';\n\n  return (\n    <div className=\"d-flex\">\n      <div className=\"mr-6\">\n        <PlaceholderImage size={size} round={false} />\n        <br />\n        <Text weight=\"strong\">Square</Text>\n      </div>\n      <div>\n        <PlaceholderImage size={size} round={true} />\n        <br />\n        <Text weight=\"strong\">Round</Text>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-loaders-placeholder-image-variants-round--round",
      "args": {},
      "argTypes": {
        "round": {
          "name": "round",
          "description": "Changes shape of `Placeholder` to circle",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Specifies dimension of `Placeholder`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"small\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-loaders-placeholder-image-variants-size--size": {
    "id": "components-loaders-placeholder-image-variants-size--size",
    "kind": "Components/Loaders/Placeholder/Image/Variants/Size",
    "name": "Size",
    "story": "Size",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const round = boolean('round', false);\n  const sizes: Size[] = ['small', 'medium', 'large'];\n  const options = {\n    round,\n  };\n\n  return (\n    <div className=\"d-flex\">\n      {sizes.map((PlaceholderSize, ind) => {\n        return (\n          <div key={ind} className=\"mr-7\">\n            <div style={{ height: '50px' }}>\n              <PlaceholderImage size={PlaceholderSize} {...options} />\n            </div>\n            <br />\n            <Text weight=\"strong\">{PlaceholderSize.charAt(0).toUpperCase() + PlaceholderSize.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-loaders-placeholder-image-variants-size--size",
      "args": {},
      "argTypes": {
        "round": {
          "name": "round",
          "description": "Changes shape of `Placeholder` to circle",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Specifies dimension of `Placeholder`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"small\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-loaders-placeholder-paragraph-all--all": {
    "id": "components-loaders-placeholder-paragraph-all--all",
    "kind": "Components/Loaders/Placeholder/Paragraph/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const length = select('length', ['small', 'medium', 'large'], undefined);\n\n  const size = select('size', ['xxs', 'xs', 's', 'm', 'l', 'xl', 'xxl', 'xxxl'], undefined);\n\n  return <PlaceholderParagraph size={size} length={length} />;\n}"
      },
      "__id": "components-loaders-placeholder-paragraph-all--all",
      "args": {},
      "argTypes": {
        "length": {
          "name": "length",
          "description": "Length of `Placeholder`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"medium\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Height of `Placeholder`\n\nundefined: `Text`\n\nxxs: `Text` small: true\n\nxs: `Subheading`\n\ns: `Label`\n\nm: `Heading` size: s\n\nl: `Heading` size: m\n\nxl: `Heading` size: l\n\nxxl: `Heading` size: xl\n\nxxxl: `Heading` size: xxl",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "m",
              "s",
              "l",
              "xl",
              "xxl",
              "xxs",
              "xs",
              "xxxl"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"m\" | \"s\" | \"l\" | \"xl\" | \"xxl\" | \"xxs\" | \"xs\" | \"xxxl\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-loaders-placeholder-paragraph-variants-length--length": {
    "id": "components-loaders-placeholder-paragraph-variants-length--length",
    "kind": "Components/Loaders/Placeholder/Paragraph/Variants/Length",
    "name": "Length",
    "story": "Length",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const lengths: Length[] = ['small', 'medium', 'large'];\n\n  return (\n    <div>\n      {lengths.map((len, ind) => {\n        return (\n          <div key={ind} className=\"mb-7\">\n            <PlaceholderParagraph length={len} />\n            <Text weight=\"strong\">{len.charAt(0).toUpperCase() + len.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-loaders-placeholder-paragraph-variants-length--length",
      "args": {},
      "argTypes": {
        "length": {
          "name": "length",
          "description": "Length of `Placeholder`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"medium\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Height of `Placeholder`\n\nundefined: `Text`\n\nxxs: `Text` small: true\n\nxs: `Subheading`\n\ns: `Label`\n\nm: `Heading` size: s\n\nl: `Heading` size: m\n\nxl: `Heading` size: l\n\nxxl: `Heading` size: xl\n\nxxxl: `Heading` size: xxl",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "m",
              "s",
              "l",
              "xl",
              "xxl",
              "xxs",
              "xs",
              "xxxl"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"m\" | \"s\" | \"l\" | \"xl\" | \"xxl\" | \"xxs\" | \"xs\" | \"xxxl\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-loaders-placeholder-paragraph-variants-size--size": {
    "id": "components-loaders-placeholder-paragraph-variants-size--size",
    "kind": "Components/Loaders/Placeholder/Paragraph/Variants/Size",
    "name": "Size",
    "story": "Size",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const sizes: Size[] = ['xxs', 'xs', 's', 'm', 'l', 'xl', 'xxl', 'xxxl'];\n\n  return (\n    <div>\n      {sizes.map((s, ind) => {\n        return (\n          <div key={ind} className=\"mb-7\">\n            <PlaceholderParagraph size={s} />\n            <Text weight=\"strong\">{s}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-loaders-placeholder-paragraph-variants-size--size",
      "args": {},
      "argTypes": {
        "length": {
          "name": "length",
          "description": "Length of `Placeholder`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"medium\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Height of `Placeholder`\n\nundefined: `Text`\n\nxxs: `Text` small: true\n\nxs: `Subheading`\n\ns: `Label`\n\nm: `Heading` size: s\n\nl: `Heading` size: m\n\nxl: `Heading` size: l\n\nxxl: `Heading` size: xl\n\nxxxl: `Heading` size: xxl",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "m",
              "s",
              "l",
              "xl",
              "xxl",
              "xxs",
              "xs",
              "xxxl"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"m\" | \"s\" | \"l\" | \"xl\" | \"xxl\" | \"xxs\" | \"xs\" | \"xxxl\""
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-loaders-placeholder-skeleton-loaders--skeleton-loaders": {
    "id": "components-loaders-placeholder-skeleton-loaders--skeleton-loaders",
    "kind": "Components/Loaders/Placeholder/Skeleton Loaders",
    "name": "Skeleton Loaders",
    "story": "Skeleton Loaders",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <Card>\n      <div className=\"px-6 py-5\">\n        <Placeholder round={true} imageSize=\"large\">\n          <PlaceholderParagraph length=\"large\" size=\"m\" />\n          <PlaceholderParagraph size=\"m\" />\n        </Placeholder>\n      </div>\n      <div style={{ borderTop: 'var(--border)' }} className=\"px-6 py-5\">\n        <Placeholder round={true} imageSize=\"large\">\n          <PlaceholderParagraph length=\"large\" size=\"m\" />\n          <PlaceholderParagraph size=\"m\" />\n        </Placeholder>\n      </div>\n      <div style={{ borderTop: 'var(--border)' }} className=\"px-6 py-5\">\n        <Placeholder round={true} imageSize=\"large\">\n          <PlaceholderParagraph length=\"large\" size=\"m\" />\n          <PlaceholderParagraph size=\"m\" />\n        </Placeholder>\n      </div>\n      <div style={{ borderTop: 'var(--border)' }} className=\"px-6 py-5\">\n        <Placeholder round={true} imageSize=\"large\">\n          <PlaceholderParagraph length=\"large\" size=\"m\" />\n          <PlaceholderParagraph size=\"m\" />\n        </Placeholder>\n      </div>\n    </Card>\n  );\n}"
      },
      "__id": "components-loaders-placeholder-skeleton-loaders--skeleton-loaders",
      "args": {},
      "argTypes": {
        "withImage": {
          "name": "withImage",
          "description": "Shows `Placeholder` along with image",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "round": {
          "name": "round",
          "description": "Changes shape of `Placeholder` to circle",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "imageSize": {
          "name": "imageSize",
          "description": "Specifies dimension of `Placeholder`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"small\""
            }
          }
        },
        "children": {
          "name": "children",
          "description": "To be rendered in `Placeholder` wrapper",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactElement<PlaceholderParagraphProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | ReactElement<...>[] | undefined"
          },
          "table": {
            "type": {
              "summary": "ReactElement<PlaceholderParagraphProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | ReactElement<...>[] | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-loaders-placeholder-variants-image--image": {
    "id": "components-loaders-placeholder-variants-image--image",
    "kind": "Components/Loaders/Placeholder/Variants/Image",
    "name": "Image",
    "story": "Image",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div className=\"d-flex\">\n      <div className=\"w-25 mr-8\">\n        <Placeholder withImage={true}>\n          <PlaceholderParagraph length=\"large\" />\n        </Placeholder>\n        <Text weight=\"strong\">With Image</Text>\n      </div>\n      <div className=\"w-25\">\n        <Placeholder withImage={false}>\n          <PlaceholderParagraph length=\"large\" />\n        </Placeholder>\n        <Text weight=\"strong\">Without Image</Text>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-loaders-placeholder-variants-image--image",
      "args": {},
      "argTypes": {
        "withImage": {
          "name": "withImage",
          "description": "Shows `Placeholder` along with image",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "round": {
          "name": "round",
          "description": "Changes shape of `Placeholder` to circle",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "imageSize": {
          "name": "imageSize",
          "description": "Specifies dimension of `Placeholder`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"small\""
            }
          }
        },
        "children": {
          "name": "children",
          "description": "To be rendered in `Placeholder` wrapper",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactElement<PlaceholderParagraphProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | ReactElement<...>[] | undefined"
          },
          "table": {
            "type": {
              "summary": "ReactElement<PlaceholderParagraphProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | ReactElement<...>[] | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-loaders-placeholder-variants-image-shape--image-shape": {
    "id": "components-loaders-placeholder-variants-image-shape--image-shape",
    "kind": "Components/Loaders/Placeholder/Variants/Image Shape",
    "name": "Image Shape",
    "story": "Image Shape",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div className=\"d-flex\">\n      <div className=\"w-25 mr-8\">\n        <Placeholder withImage={true} round={true}>\n          <PlaceholderParagraph length=\"large\" />\n        </Placeholder>\n        <Text weight=\"strong\">Round</Text>\n      </div>\n      <div className=\"w-25\">\n        <Placeholder withImage={true}>\n          <PlaceholderParagraph length=\"large\" />\n        </Placeholder>\n        <Text weight=\"strong\">Square</Text>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-loaders-placeholder-variants-image-shape--image-shape",
      "args": {},
      "argTypes": {
        "withImage": {
          "name": "withImage",
          "description": "Shows `Placeholder` along with image",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "round": {
          "name": "round",
          "description": "Changes shape of `Placeholder` to circle",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "imageSize": {
          "name": "imageSize",
          "description": "Specifies dimension of `Placeholder`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"small\""
            }
          }
        },
        "children": {
          "name": "children",
          "description": "To be rendered in `Placeholder` wrapper",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactElement<PlaceholderParagraphProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | ReactElement<...>[] | undefined"
          },
          "table": {
            "type": {
              "summary": "ReactElement<PlaceholderParagraphProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | ReactElement<...>[] | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-loaders-placeholder-variants-image-size--image-size": {
    "id": "components-loaders-placeholder-variants-image-size--image-size",
    "kind": "Components/Loaders/Placeholder/Variants/Image Size",
    "name": "Image Size",
    "story": "Image Size",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const sizes: Size[] = ['small', 'medium', 'large'];\n\n  return (\n    <div className=\"d-flex\">\n      {sizes.map((size, ind) => {\n        return (\n          <div key={ind} className=\"w-25 mr-8\">\n            <Placeholder imageSize={size} withImage={true}>\n              <PlaceholderParagraph length=\"large\" />\n            </Placeholder>\n            <Text weight=\"strong\">{size.charAt(0).toUpperCase() + size.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-loaders-placeholder-variants-image-size--image-size",
      "args": {},
      "argTypes": {
        "withImage": {
          "name": "withImage",
          "description": "Shows `Placeholder` along with image",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "round": {
          "name": "round",
          "description": "Changes shape of `Placeholder` to circle",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "imageSize": {
          "name": "imageSize",
          "description": "Specifies dimension of `Placeholder`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"small\""
            }
          }
        },
        "children": {
          "name": "children",
          "description": "To be rendered in `Placeholder` wrapper",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactElement<PlaceholderParagraphProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | ReactElement<...>[] | undefined"
          },
          "table": {
            "type": {
              "summary": "ReactElement<PlaceholderParagraphProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | ReactElement<...>[] | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-loaders-spinner-all--all": {
    "id": "components-loaders-spinner-all--all",
    "kind": "Components/Loaders/Spinner/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const appearance = select('appearance', ['primary', 'secondary', 'white'], undefined);\n\n  const size = select('size', ['small', 'medium', 'large'], undefined);\n\n  const options = {\n    appearance,\n    size,\n  };\n\n  return (\n    <div style={{ background: appearance === 'white' ? 'black' : 'transparent' }}>\n      <Spinner {...options} />\n    </div>\n  );\n}"
      },
      "__id": "components-loaders-spinner-all--all",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "Color of `Spinner`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "primary",
              "secondary",
              "white"
            ]
          },
          "table": {
            "type": {
              "summary": "\"primary\" | \"secondary\" | \"white\""
            },
            "defaultValue": {
              "summary": "\"primary\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Size of `Spinner`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"medium\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-loaders-spinner-inline-loader--inline-loader": {
    "id": "components-loaders-spinner-inline-loader--inline-loader",
    "kind": "Components/Loaders/Spinner/Inline Loader",
    "name": "Inline Loader",
    "story": "Inline Loader",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <div className=\"d-flex\">\n    <Spinner appearance=\"primary\" size=\"small\" className=\"mr-3\" />\n    <Text>uploading...</Text>\n  </div>\n)"
      },
      "__id": "components-loaders-spinner-inline-loader--inline-loader",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "Color of `Spinner`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "primary",
              "secondary",
              "white"
            ]
          },
          "table": {
            "type": {
              "summary": "\"primary\" | \"secondary\" | \"white\""
            },
            "defaultValue": {
              "summary": "\"primary\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Size of `Spinner`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"medium\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-loaders-spinner-modal-loader--modal-loader": {
    "id": "components-loaders-spinner-modal-loader--modal-loader",
    "kind": "Components/Loaders/Spinner/Modal Loader",
    "name": "Modal Loader",
    "story": "Modal Loader",
    "parameters": {
      "storySource": {
        "source": "() => <Spinner appearance=\"primary\" size=\"medium\" />"
      },
      "__id": "components-loaders-spinner-modal-loader--modal-loader",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "Color of `Spinner`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "primary",
              "secondary",
              "white"
            ]
          },
          "table": {
            "type": {
              "summary": "\"primary\" | \"secondary\" | \"white\""
            },
            "defaultValue": {
              "summary": "\"primary\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Size of `Spinner`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"medium\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-loaders-spinner-variants-appearance--appearance": {
    "id": "components-loaders-spinner-variants-appearance--appearance",
    "kind": "Components/Loaders/Spinner/Variants/Appearance",
    "name": "Appearance",
    "story": "Appearance",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const appearances: Appearance[] = ['primary', 'secondary', 'white'];\n  return (\n    <div className=\"d-flex\">\n      {appearances.map((appear, ind) => {\n        return (\n          <div key={ind} className=\"mr-8\">\n            <div style={{ background: appear === 'white' ? 'black' : 'transparent' }}>\n              <Spinner appearance={appear} />\n            </div>\n            <Text weight=\"strong\">{appear.charAt(0).toUpperCase() + appear.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-loaders-spinner-variants-appearance--appearance",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "Color of `Spinner`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "primary",
              "secondary",
              "white"
            ]
          },
          "table": {
            "type": {
              "summary": "\"primary\" | \"secondary\" | \"white\""
            },
            "defaultValue": {
              "summary": "\"primary\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Size of `Spinner`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"medium\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-loaders-spinner-variants-size--size": {
    "id": "components-loaders-spinner-variants-size--size",
    "kind": "Components/Loaders/Spinner/Variants/Size",
    "name": "Size",
    "story": "Size",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const sizes: Size[] = ['small', 'medium', 'large'];\n  return (\n    <div className=\"d-flex\">\n      {sizes.map((SpinnerSize, ind) => {\n        return (\n          <div key={ind} className=\"mr-8\">\n            <div className=\"h-75\">\n              <Spinner size={SpinnerSize} />\n            </div>\n            <Text weight=\"strong\">{SpinnerSize.charAt(0).toUpperCase() + SpinnerSize.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-loaders-spinner-variants-size--size",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "Color of `Spinner`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "primary",
              "secondary",
              "white"
            ]
          },
          "table": {
            "type": {
              "summary": "\"primary\" | \"secondary\" | \"white\""
            },
            "defaultValue": {
              "summary": "\"primary\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Size of `Spinner`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"medium\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-message-all--all": {
    "id": "components-message-all--all",
    "kind": "Components/Message/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const appearance = select('appearance', ['default', 'alert', 'info', 'success', 'warning'], undefined);\n\n  const title = text('title', 'Design System');\n\n  const description = text('description', 'Design System is a library of reusable components');\n\n  return (\n    <Message\n      appearance={appearance}\n      title={title}\n      description={description}\n      actions={\n        <>\n          <Text className=\"cursor-pointer\" appearance=\"link\">\n            Action 1\n          </Text>\n          <Text className=\"ml-5 cursor-pointer\" appearance=\"link\">\n            Action 2\n          </Text>\n        </>\n      }\n    />\n  );\n}"
      },
      "__id": "components-message-all--all",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "Color of `Message`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "alert",
              "warning",
              "success",
              "default",
              "info"
            ]
          },
          "table": {
            "type": {
              "summary": "\"alert\" | \"warning\" | \"success\" | \"default\" | \"info\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "title": {
          "name": "title",
          "description": "Title of the `Message`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered\n\n**Soon to be deprecated. Please use description prop**",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "description": {
          "name": "description",
          "description": "Description of `Message`",
          "type": {
            "required": false,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": {
              "summary": "\"\""
            }
          }
        },
        "actions": {
          "name": "actions",
          "description": "Action links to be added inside `Message`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-message-alert-message--alert-message": {
    "id": "components-message-alert-message--alert-message",
    "kind": "Components/Message/Alert Message",
    "name": "Alert Message",
    "story": "Alert Message",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Row>\n    <Column size=\"4\">\n      <Message appearance=\"alert\" description=\"Could not start verification. Please try again later.\" />\n    </Column>\n  </Row>\n)"
      },
      "__id": "components-message-alert-message--alert-message",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "Color of `Message`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "alert",
              "warning",
              "success",
              "default",
              "info"
            ]
          },
          "table": {
            "type": {
              "summary": "\"alert\" | \"warning\" | \"success\" | \"default\" | \"info\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "title": {
          "name": "title",
          "description": "Title of the `Message`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered\n\n**Soon to be deprecated. Please use description prop**",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "description": {
          "name": "description",
          "description": "Description of `Message`",
          "type": {
            "required": false,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": {
              "summary": "\"\""
            }
          }
        },
        "actions": {
          "name": "actions",
          "description": "Action links to be added inside `Message`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-message-default-message--default-message": {
    "id": "components-message-default-message--default-message",
    "kind": "Components/Message/Default Message",
    "name": "Default Message",
    "story": "Default Message",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Row>\n    <Column size=\"4\">\n      <Message description=\"Message will be accessible through a password protected link.\" />\n    </Column>\n  </Row>\n)"
      },
      "__id": "components-message-default-message--default-message",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "Color of `Message`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "alert",
              "warning",
              "success",
              "default",
              "info"
            ]
          },
          "table": {
            "type": {
              "summary": "\"alert\" | \"warning\" | \"success\" | \"default\" | \"info\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "title": {
          "name": "title",
          "description": "Title of the `Message`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered\n\n**Soon to be deprecated. Please use description prop**",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "description": {
          "name": "description",
          "description": "Description of `Message`",
          "type": {
            "required": false,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": {
              "summary": "\"\""
            }
          }
        },
        "actions": {
          "name": "actions",
          "description": "Action links to be added inside `Message`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-message-info-message--info-message": {
    "id": "components-message-info-message--info-message",
    "kind": "Components/Message/Info Message",
    "name": "Info Message",
    "story": "Info Message",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Row>\n    <Column size=\"4\">\n      <Message appearance=\"info\" description=\"Patient profile has been updated with new records.\" />\n    </Column>\n  </Row>\n)"
      },
      "__id": "components-message-info-message--info-message",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "Color of `Message`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "alert",
              "warning",
              "success",
              "default",
              "info"
            ]
          },
          "table": {
            "type": {
              "summary": "\"alert\" | \"warning\" | \"success\" | \"default\" | \"info\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "title": {
          "name": "title",
          "description": "Title of the `Message`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered\n\n**Soon to be deprecated. Please use description prop**",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "description": {
          "name": "description",
          "description": "Description of `Message`",
          "type": {
            "required": false,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": {
              "summary": "\"\""
            }
          }
        },
        "actions": {
          "name": "actions",
          "description": "Action links to be added inside `Message`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-message-message-with-actions--message-with-actions": {
    "id": "components-message-message-with-actions--message-with-actions",
    "kind": "Components/Message/Message With Actions",
    "name": "Message With Actions",
    "story": "Message With Actions",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Row>\n    <Column size=\"4\">\n      <Message\n        appearance=\"alert\"\n        description=\"Sorry we couldn't subscribe you. Please try again.\"\n        actions={\n          <>\n            <Text className=\"cursor-pointer\" appearance=\"link\">\n              Try again\n            </Text>\n          </>\n        }\n      />\n    </Column>\n  </Row>\n)"
      },
      "__id": "components-message-message-with-actions--message-with-actions",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "Color of `Message`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "alert",
              "warning",
              "success",
              "default",
              "info"
            ]
          },
          "table": {
            "type": {
              "summary": "\"alert\" | \"warning\" | \"success\" | \"default\" | \"info\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "title": {
          "name": "title",
          "description": "Title of the `Message`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered\n\n**Soon to be deprecated. Please use description prop**",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "description": {
          "name": "description",
          "description": "Description of `Message`",
          "type": {
            "required": false,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": {
              "summary": "\"\""
            }
          }
        },
        "actions": {
          "name": "actions",
          "description": "Action links to be added inside `Message`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-message-message-with-title--message-with-title": {
    "id": "components-message-message-with-title--message-with-title",
    "kind": "Components/Message/Message With Title",
    "name": "Message With Title",
    "story": "Message With Title",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Row>\n    <Column size=\"5\">\n      <Message\n        appearance=\"warning\"\n        title=\"Sender 'Alta Wells' already exists \"\n        description=\"Based on the details you've entered, we found that this sender might already be on our platform.\"\n        actions={\n          <>\n            <Text className=\"cursor-pointer\" appearance=\"link\">\n              Edit details\n            </Text>\n          </>\n        }\n      />\n    </Column>\n  </Row>\n)"
      },
      "__id": "components-message-message-with-title--message-with-title",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "Color of `Message`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "alert",
              "warning",
              "success",
              "default",
              "info"
            ]
          },
          "table": {
            "type": {
              "summary": "\"alert\" | \"warning\" | \"success\" | \"default\" | \"info\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "title": {
          "name": "title",
          "description": "Title of the `Message`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered\n\n**Soon to be deprecated. Please use description prop**",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "description": {
          "name": "description",
          "description": "Description of `Message`",
          "type": {
            "required": false,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": {
              "summary": "\"\""
            }
          }
        },
        "actions": {
          "name": "actions",
          "description": "Action links to be added inside `Message`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-message-success-message--success-message": {
    "id": "components-message-success-message--success-message",
    "kind": "Components/Message/Success Message",
    "name": "Success Message",
    "story": "Success Message",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Row>\n    <Column size=\"4\">\n      <Message appearance=\"success\" description=\"Password updated. Login with your updated credentials.\" />\n    </Column>\n  </Row>\n)"
      },
      "__id": "components-message-success-message--success-message",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "Color of `Message`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "alert",
              "warning",
              "success",
              "default",
              "info"
            ]
          },
          "table": {
            "type": {
              "summary": "\"alert\" | \"warning\" | \"success\" | \"default\" | \"info\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "title": {
          "name": "title",
          "description": "Title of the `Message`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered\n\n**Soon to be deprecated. Please use description prop**",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "description": {
          "name": "description",
          "description": "Description of `Message`",
          "type": {
            "required": false,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": {
              "summary": "\"\""
            }
          }
        },
        "actions": {
          "name": "actions",
          "description": "Action links to be added inside `Message`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-message-variants-appearance-with-title--appearance-with-title": {
    "id": "components-message-variants-appearance-with-title--appearance-with-title",
    "kind": "Components/Message/Variants/Appearance With Title",
    "name": "Appearance With Title",
    "story": "Appearance With Title",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const appearances: MessageProps['appearance'][] = ['default', 'alert', 'info', 'success', 'warning'];\n  const innerStyle = {\n    display: 'flex',\n    'align-items': 'center',\n    'flex-direction': 'column',\n  };\n\n  const title = text('title', 'Outreach was not saved');\n\n  return (\n    <div className=\"Row\">\n      {appearances.map((appear, ind) => {\n        return (\n          <div key={ind} style={innerStyle} className=\"mr-7 mb-7 w-25 d-flex\">\n            <Message\n              appearance={appear}\n              title={title}\n              description=\"Patient record has been updated with new records.\"\n              actions={\n                <>\n                  <Text className=\"cursor-pointer\" appearance=\"link\">\n                    Action 1\n                  </Text>\n                  <Text className=\"ml-5 cursor-pointer\" appearance=\"link\">\n                    Action 2\n                  </Text>\n                </>\n              }\n            />\n            <br />\n            <Text weight=\"strong\">{appear.charAt(0).toUpperCase() + appear.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-message-variants-appearance-with-title--appearance-with-title",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "Color of `Message`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "alert",
              "warning",
              "success",
              "default",
              "info"
            ]
          },
          "table": {
            "type": {
              "summary": "\"alert\" | \"warning\" | \"success\" | \"default\" | \"info\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "title": {
          "name": "title",
          "description": "Title of the `Message`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered\n\n**Soon to be deprecated. Please use description prop**",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "description": {
          "name": "description",
          "description": "Description of `Message`",
          "type": {
            "required": false,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": {
              "summary": "\"\""
            }
          }
        },
        "actions": {
          "name": "actions",
          "description": "Action links to be added inside `Message`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-message-variants-appearance-without-title--appearance-without-title": {
    "id": "components-message-variants-appearance-without-title--appearance-without-title",
    "kind": "Components/Message/Variants/Appearance Without Title",
    "name": "Appearance Without Title",
    "story": "Appearance Without Title",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const appearances: MessageProps['appearance'][] = ['default', 'alert', 'info', 'success', 'warning'];\n  const innerStyle = {\n    display: 'flex',\n    'align-items': 'center',\n    'flex-direction': 'column',\n  };\n  return (\n    <div className=\"Row\">\n      {appearances.map((appear, ind) => {\n        return (\n          <div key={ind} style={innerStyle} className=\"mr-7 mb-7 w-25 d-flex\">\n            <Message\n              appearance={appear}\n              description=\"Patient record has been updated with new records.\"\n              actions={\n                <>\n                  <Text className=\"cursor-pointer\" appearance=\"link\">\n                    Action 1\n                  </Text>\n                  <Text className=\"ml-5 cursor-pointer\" appearance=\"link\">\n                    Action 2\n                  </Text>\n                </>\n              }\n            />\n            <br />\n            <Text weight=\"strong\">{appear.charAt(0).toUpperCase() + appear.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-message-variants-appearance-without-title--appearance-without-title",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "Color of `Message`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "alert",
              "warning",
              "success",
              "default",
              "info"
            ]
          },
          "table": {
            "type": {
              "summary": "\"alert\" | \"warning\" | \"success\" | \"default\" | \"info\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "title": {
          "name": "title",
          "description": "Title of the `Message`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered\n\n**Soon to be deprecated. Please use description prop**",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "description": {
          "name": "description",
          "description": "Description of `Message`",
          "type": {
            "required": false,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": {
              "summary": "\"\""
            }
          }
        },
        "actions": {
          "name": "actions",
          "description": "Action links to be added inside `Message`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-message-warning-message--warning-message": {
    "id": "components-message-warning-message--warning-message",
    "kind": "Components/Message/Warning Message",
    "name": "Warning Message",
    "story": "Warning Message",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Row>\n    <Column size=\"4\">\n      <Message appearance=\"warning\" description=\"Try to save again. If it continues to fail, please raise a ticket.\" />\n    </Column>\n  </Row>\n)"
      },
      "__id": "components-message-warning-message--warning-message",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "Color of `Message`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "alert",
              "warning",
              "success",
              "default",
              "info"
            ]
          },
          "table": {
            "type": {
              "summary": "\"alert\" | \"warning\" | \"success\" | \"default\" | \"info\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "title": {
          "name": "title",
          "description": "Title of the `Message`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered\n\n**Soon to be deprecated. Please use description prop**",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "description": {
          "name": "description",
          "description": "Description of `Message`",
          "type": {
            "required": false,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": {
              "summary": "\"\""
            }
          }
        },
        "actions": {
          "name": "actions",
          "description": "Action links to be added inside `Message`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-metalist-all--all": {
    "id": "components-metalist-all--all",
    "kind": "Components/MetaList/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const seperator = boolean('seperator', true);\n\n  const list = [\n    {\n      label: 'Meta data',\n      icon: 'assessment',\n    },\n    {\n      label: 'Meta data',\n      icon: 'assessment',\n    },\n  ];\n\n  return (\n    <div>\n      <MetaList list={list} seperator={seperator} />\n    </div>\n  );\n}"
      },
      "__id": "components-metalist-all--all",
      "args": {},
      "argTypes": {
        "list": {
          "name": "list",
          "description": "<pre style=\"font-family: monospace; font-size: 13px; background: #f8f8f8\">\nMetaProps:\n{\n   label: string;\n   icon?: string;\n}\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Label of Meta component |  |\n| icon | Icon of Meta component | |\n</pre>",
          "type": {
            "required": true,
            "name": "other",
            "value": "MetaProps[]"
          },
          "table": {
            "type": {
              "summary": "MetaProps[]"
            },
            "defaultValue": null
          }
        },
        "seperator": {
          "name": "seperator",
          "description": "Shows left seperator",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "seperatorAppearance": {
          "name": "seperatorAppearance",
          "description": "Color of seperator",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "warning",
              "success",
              "accent1",
              "accent2",
              "accent3",
              "accent4",
              "default",
              "disabled",
              "info",
              "subtle",
              "white",
              "destructive",
              "primary_lighter",
              "primary_dark",
              "alert_lighter",
              "alert_dark",
              "warning_lighter",
              "warning_dark",
              "success_lighter",
              "success_dark",
              "accent1_lighter",
              "accent1_dark",
              "accent2_lighter",
              "accent2_dark",
              "accent3_lighter",
              "accent3_dark",
              "accent4_lighter",
              "accent4_dark",
              "inverse"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"warning\" | \"success\" | \"accent1\" | \"accent2\" | \"accent3\" | \"accent4\" | \"default\" | \"disabled\" | \"info\" | \"subtle\" | \"white\" | \"destructive\" | \"primary_lighter\" | \"primary_dark\" | \"alert_lighter\" | \"alert_dark\" | \"warning_lighter\" | \"warning_dark\" | \"success_lighter\" | \"success_dark\" | \"accent1_lighter\" | \"accent1_dark\" | \"accent2_lighter\" | \"accent2_dark\" | \"accent3_lighter\" | \"accent3_dark\" | \"accent4_lighter\" | \"accent4_dark\" | \"inverse\""
            },
            "defaultValue": {
              "summary": "disabled"
            }
          }
        },
        "iconAppearance": {
          "name": "iconAppearance",
          "description": "Appearance of icon in `Meta` component",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "warning",
              "success",
              "accent1",
              "accent2",
              "accent3",
              "accent4",
              "default",
              "disabled",
              "info",
              "subtle",
              "white",
              "destructive",
              "primary_lighter",
              "primary_dark",
              "alert_lighter",
              "alert_dark",
              "warning_lighter",
              "warning_dark",
              "success_lighter",
              "success_dark",
              "accent1_lighter",
              "accent1_dark",
              "accent2_lighter",
              "accent2_dark",
              "accent3_lighter",
              "accent3_dark",
              "accent4_lighter",
              "accent4_dark",
              "inverse"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"warning\" | \"success\" | \"accent1\" | \"accent2\" | \"accent3\" | \"accent4\" | \"default\" | \"disabled\" | \"info\" | \"subtle\" | \"white\" | \"destructive\" | \"primary_lighter\" | \"primary_dark\" | \"alert_lighter\" | \"alert_dark\" | \"warning_lighter\" | \"warning_dark\" | \"success_lighter\" | \"success_dark\" | \"accent1_lighter\" | \"accent1_dark\" | \"accent2_lighter\" | \"accent2_dark\" | \"accent3_lighter\" | \"accent3_dark\" | \"accent4_lighter\" | \"accent4_dark\" | \"inverse\""
            },
            "defaultValue": {
              "summary": "disabled"
            }
          }
        },
        "labelAppearance": {
          "name": "labelAppearance",
          "description": "Appearance of label in `Meta` component",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "success",
              "default",
              "disabled",
              "link",
              "subtle",
              "white",
              "destructive"
            ]
          },
          "table": {
            "type": {
              "summary": "\"success\" | \"default\" | \"disabled\" | \"link\" | \"subtle\" | \"white\" | \"destructive\""
            },
            "defaultValue": {
              "summary": "\"subtle\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-metricinput-all--all": {
    "id": "components-metricinput-all--all",
    "kind": "Components/MetricInput/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const size = select('size', ['regular', 'large'], undefined);\n\n  const placeholder = text('placeholder', 'Placeholder');\n\n  const disabled = boolean('disabled', false);\n\n  const readOnly = boolean('readOnly', false);\n\n  const icon = text('icon', '');\n\n  const prefix = text('prefix', '');\n\n  const suffix = text('suffix', '');\n\n  const error = boolean('error', false);\n\n  return (\n    <div style={{ width: 'var(--spacing-8)' }}>\n      <MetricInput\n        name=\"input\"\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={action('on-change')}\n        onClick={action('on-click')}\n        placeholder={placeholder}\n        prefix={prefix}\n        suffix={suffix}\n        size={size}\n        icon={icon}\n        error={error}\n      />\n    </div>\n  );\n}"
      },
      "__id": "components-metricinput-all--all",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Name of the `MetricInput`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `MetricInput` (Used in case of controlled `MetricInput`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "Adds default value to `MetricInput` (Used in case of uncontrolled `MetricInput`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when `MetricInput` is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of the `MetricInput`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "prefix": {
          "name": "prefix",
          "description": "Label to be displayed inside `MetricInput` before value",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "suffix": {
          "name": "suffix",
          "description": "Label to be displayed inside `MetricInput` after value",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `MetricInput`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoComplete": {
          "name": "autoComplete",
          "description": "Specifies whether `input field should have autocomplete enabled",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "on",
              "off"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"on\" | \"off\""
            },
            "defaultValue": null
          }
        },
        "readOnly": {
          "name": "readOnly",
          "description": "Disables the `MetricInput`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "min": {
          "name": "min",
          "description": "Valid for number it defines the most negative value in the range of permitted values.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function when `MetricInput` text changes",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `MetricInput` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `MetricInput` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `MetricInput` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-metricinput-default-metric--default-metric": {
    "id": "components-metricinput-default-metric--default-metric",
    "kind": "Components/MetricInput/Default Metric",
    "name": "Default Metric",
    "story": "Default Metric",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [value, setValue] = React.useState<React.ReactText>(15);\n\n  return (\n    <div className=\"d-flex align-items-center\">\n      <Label className=\"mr-5\">No. of Days</Label>\n      <div style={{ width: 'var(--spacing-6)' }}>\n        <MetricInput\n          size=\"regular\"\n          value={value}\n          onChange={(e) => {\n            setValue(e.target.value);\n          }}\n        />\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-metricinput-default-metric--default-metric",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Name of the `MetricInput`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `MetricInput` (Used in case of controlled `MetricInput`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "Adds default value to `MetricInput` (Used in case of uncontrolled `MetricInput`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when `MetricInput` is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of the `MetricInput`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "prefix": {
          "name": "prefix",
          "description": "Label to be displayed inside `MetricInput` before value",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "suffix": {
          "name": "suffix",
          "description": "Label to be displayed inside `MetricInput` after value",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `MetricInput`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoComplete": {
          "name": "autoComplete",
          "description": "Specifies whether `input field should have autocomplete enabled",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "on",
              "off"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"on\" | \"off\""
            },
            "defaultValue": null
          }
        },
        "readOnly": {
          "name": "readOnly",
          "description": "Disables the `MetricInput`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "min": {
          "name": "min",
          "description": "Valid for number it defines the most negative value in the range of permitted values.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function when `MetricInput` text changes",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `MetricInput` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `MetricInput` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `MetricInput` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-metricinput-variants-controlled-metric-input--controlled-metric-input": {
    "id": "components-metricinput-variants-controlled-metric-input--controlled-metric-input",
    "kind": "Components/MetricInput/Variants/Controlled Metric Input",
    "name": "Controlled Metric Input",
    "story": "Controlled Metric Input",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [value, setValue] = React.useState<React.ReactText>(10);\n\n  return (\n    <div style={{ width: 'var(--spacing-6)' }}>\n      <MetricInput\n        value={value}\n        onChange={(e) => {\n          setValue(e.target.value);\n        }}\n      />\n    </div>\n  );\n}"
      },
      "__id": "components-metricinput-variants-controlled-metric-input--controlled-metric-input",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Name of the `MetricInput`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `MetricInput` (Used in case of controlled `MetricInput`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "Adds default value to `MetricInput` (Used in case of uncontrolled `MetricInput`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when `MetricInput` is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of the `MetricInput`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "prefix": {
          "name": "prefix",
          "description": "Label to be displayed inside `MetricInput` before value",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "suffix": {
          "name": "suffix",
          "description": "Label to be displayed inside `MetricInput` after value",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `MetricInput`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoComplete": {
          "name": "autoComplete",
          "description": "Specifies whether `input field should have autocomplete enabled",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "on",
              "off"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"on\" | \"off\""
            },
            "defaultValue": null
          }
        },
        "readOnly": {
          "name": "readOnly",
          "description": "Disables the `MetricInput`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "min": {
          "name": "min",
          "description": "Valid for number it defines the most negative value in the range of permitted values.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function when `MetricInput` text changes",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `MetricInput` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `MetricInput` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `MetricInput` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-metricinput-variants-size--size": {
    "id": "components-metricinput-variants-size--size",
    "kind": "Components/MetricInput/Variants/Size",
    "name": "Size",
    "story": "Size",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <div className=\"d-flex\" style={{ width: 'var(--spacing-8)' }}>\n    <div className=\"d-flex flex-column align-items-center mr-8\">\n      <MetricInput size=\"regular\" className=\"mb-3\" />\n      <Text>Regular</Text>\n    </div>\n    <div className=\"d-flex flex-column align-items-center\">\n      <MetricInput size=\"large\" className=\"mb-3\" />\n      <Text>Large</Text>\n    </div>\n  </div>\n)"
      },
      "__id": "components-metricinput-variants-size--size",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Name of the `MetricInput`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `MetricInput` (Used in case of controlled `MetricInput`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "Adds default value to `MetricInput` (Used in case of uncontrolled `MetricInput`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when `MetricInput` is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of the `MetricInput`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "prefix": {
          "name": "prefix",
          "description": "Label to be displayed inside `MetricInput` before value",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "suffix": {
          "name": "suffix",
          "description": "Label to be displayed inside `MetricInput` after value",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `MetricInput`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoComplete": {
          "name": "autoComplete",
          "description": "Specifies whether `input field should have autocomplete enabled",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "on",
              "off"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"on\" | \"off\""
            },
            "defaultValue": null
          }
        },
        "readOnly": {
          "name": "readOnly",
          "description": "Disables the `MetricInput`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "min": {
          "name": "min",
          "description": "Valid for number it defines the most negative value in the range of permitted values.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function when `MetricInput` text changes",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `MetricInput` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `MetricInput` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `MetricInput` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-metricinput-with-prefix--with-prefix": {
    "id": "components-metricinput-with-prefix--with-prefix",
    "kind": "Components/MetricInput/With Prefix",
    "name": "With Prefix",
    "story": "With Prefix",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [value, setValue] = React.useState<React.ReactText>(625);\n\n  return (\n    <div className=\"d-flex align-items-center\">\n      <Label className=\"mr-5\">Cost</Label>\n      <div style={{ width: 'var(--spacing-7)' }}>\n        <MetricInput\n          prefix=\"USD\"\n          value={value}\n          onChange={(e) => {\n            setValue(e.target.value);\n          }}\n        />\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-metricinput-with-prefix--with-prefix",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Name of the `MetricInput`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `MetricInput` (Used in case of controlled `MetricInput`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "Adds default value to `MetricInput` (Used in case of uncontrolled `MetricInput`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when `MetricInput` is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of the `MetricInput`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "prefix": {
          "name": "prefix",
          "description": "Label to be displayed inside `MetricInput` before value",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "suffix": {
          "name": "suffix",
          "description": "Label to be displayed inside `MetricInput` after value",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `MetricInput`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoComplete": {
          "name": "autoComplete",
          "description": "Specifies whether `input field should have autocomplete enabled",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "on",
              "off"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"on\" | \"off\""
            },
            "defaultValue": null
          }
        },
        "readOnly": {
          "name": "readOnly",
          "description": "Disables the `MetricInput`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "min": {
          "name": "min",
          "description": "Valid for number it defines the most negative value in the range of permitted values.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function when `MetricInput` text changes",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `MetricInput` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `MetricInput` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `MetricInput` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-metricinput-with-suffix--with-suffix": {
    "id": "components-metricinput-with-suffix--with-suffix",
    "kind": "Components/MetricInput/With Suffix",
    "name": "With Suffix",
    "story": "With Suffix",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [value, setValue] = React.useState<React.ReactText>(65);\n\n  return (\n    <div className=\"d-flex align-items-center\">\n      <Label className=\"mr-5\">Body Height</Label>\n      <div style={{ width: 'var(--spacing-6)' }}>\n        <MetricInput\n          suffix=\"in\"\n          value={value}\n          onChange={(e) => {\n            setValue(e.target.value);\n          }}\n        />\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-metricinput-with-suffix--with-suffix",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Name of the `MetricInput`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `MetricInput` (Used in case of controlled `MetricInput`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "Adds default value to `MetricInput` (Used in case of uncontrolled `MetricInput`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when `MetricInput` is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "size": {
          "name": "size",
          "description": "Size of the `MetricInput`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "icon": {
          "name": "icon",
          "description": "Material icon name",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "prefix": {
          "name": "prefix",
          "description": "Label to be displayed inside `MetricInput` before value",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "suffix": {
          "name": "suffix",
          "description": "Label to be displayed inside `MetricInput` after value",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `MetricInput`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "autoComplete": {
          "name": "autoComplete",
          "description": "Specifies whether `input field should have autocomplete enabled",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "on",
              "off"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"on\" | \"off\""
            },
            "defaultValue": null
          }
        },
        "readOnly": {
          "name": "readOnly",
          "description": "Disables the `MetricInput`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "min": {
          "name": "min",
          "description": "Valid for number it defines the most negative value in the range of permitted values.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function when `MetricInput` text changes",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: ChangeEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `MetricInput` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `MetricInput` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `MetricInput` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-modal-all--all": {
    "id": "components-modal-all--all",
    "kind": "Components/Modal/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const open = boolean('open', true);\n  const backdropClose = boolean('backdropClose', false);\n  const dimension = select('dimension', ['small', 'medium', 'large'], 'medium');\n\n  const onClose = () => {\n    updateKnob('open', false);\n    action('on close triggered')();\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Modal\n        open={open}\n        dimension={dimension}\n        backdropClose={backdropClose}\n        onClose={onClose}\n        headerOptions={{\n          heading: 'Heading',\n          subHeading: 'Subheading',\n        }}\n        footer={\n          <>\n            <Button appearance=\"basic\" onClick={action('Basic button click')}>\n              Basic\n            </Button>\n            <Button appearance=\"primary\" className=\"ml-4\" onClick={action('Primary button click')}>\n              Primary\n            </Button>\n          </>\n        }\n      >\n        <Text>Modal Body</Text>\n        <ModalDescription\n          title=\"Description Title\"\n          description=\"Adding a subheading clearly indicates the hierarchy of the information.\"\n        />\n        <ModalDescription description=\"Card Sections include supporting text like an article summary or a restaurant description.\" />\n      </Modal>\n    </div>\n  );\n}"
      },
      "__id": "components-modal-all--all",
      "args": {},
      "argTypes": {
        "backdropClose": {
          "name": "backdropClose",
          "description": "Callback for `Modal` close event on backdrop click\n\n** Callback will be deprecated soon. Will only support boolean value. **\n\n** Use `boolean` value if you are using `headerOptions` and `onClose` **",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | ((event?: Event | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | ((event?: Event | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Modal`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"medium\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close state",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "onClose callback to be called on `Modal` close",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Header options (doesn't work if `header` prop is used)\n\nUse `header` prop if custom header is needed.\n\n<pre className=\"DocPage-codeBlock\">\nHeader:\n{\n    heading: string;\n    subHeading?: string;\n    backIcon?: boolean;\n    backIconCallback?: (e) => void;\n    backButton?: boolean;\n    backButtonCallback?: (e) => void;\n}\n</pre>\n\n**`backIcon` and `backIconCallback` will soon be deprecated**\n\n| Name | Description |\n| --- | --- |\n| heading | Heading of `Sidesheet` |\n| subHeading | Subheading of `Sidesheet` |\n| backButton | Determines if back button is visible |\n| backButtonCallback | Callback called when back button is clicked |\n| backIcon | Determines if back button is visible |\n| backIconCallback | Callback called when back button is clicked |\n\n** Don't use composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "OverlayHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "OverlayHeaderProps | undefined"
            },
            "defaultValue": null
          }
        },
        "header": {
          "name": "header",
          "description": "header component to be used as modal header.\nclose button is not part of header so it will not be replaced.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footer": {
          "name": "footer",
          "description": "Custom `footer` component\n\n** Don't use composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footerOptions": {
          "name": "footerOptions",
          "description": "Footer options (doesn't work if `footer` prop is used).\n\nUse `footer` prop if custom footer is needed.\n\n<pre className=\"DocPage-codeBlock\">\n  OverlayFooterOptions {\n    actions: ButtonProps[];\n  }\n([ButtonProps](https://innovaccer.github.io/design-system/?path=/docs/components-button-all--all))\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FooterOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "FooterOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered\n\n** No need to write `ModalHeader`, `ModalBody` and `ModalFooter` anymore **\n** if you are using `headerOptions` and `footer` **\n** Just pass the content to be rendered in the `Modal` body. **\n\n** Support for composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "seperator": {
          "name": "seperator",
          "description": "Show dividers in the header and the footer.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnEscape": {
          "name": "closeOnEscape",
          "description": "Closes `Modal` when `Escape` key is pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-modal-alerts--alerts": {
    "id": "components-modal-alerts--alerts",
    "kind": "Components/Modal/Alerts",
    "name": "Alerts",
    "story": "Alerts",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [open, setOpen] = React.useState(true);\n  const backdropClose = false;\n  const dimension = 'small';\n\n  const onClose = () => {\n    setOpen(!open);\n    action('on close triggered')();\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Modal\n        open={open}\n        dimension={dimension}\n        backdropClose={backdropClose}\n        onClose={onClose}\n        headerOptions={{\n          heading: 'Discard Changes',\n        }}\n        footer={\n          <>\n            <Button appearance=\"basic\" onClick={action('Cancel button click')}>\n              Cancel\n            </Button>\n            <Button appearance=\"alert\" className=\"ml-3\" onClick={action('Discard button click')}>\n              Discard\n            </Button>\n          </>\n        }\n      >\n        <Paragraph>\n          You are about to discard all the saved filters. Once discarded, this action cannot be undone. Please be sure\n          of it.\n        </Paragraph>\n      </Modal>\n    </div>\n  );\n}"
      },
      "__id": "components-modal-alerts--alerts",
      "args": {},
      "argTypes": {
        "backdropClose": {
          "name": "backdropClose",
          "description": "Callback for `Modal` close event on backdrop click\n\n** Callback will be deprecated soon. Will only support boolean value. **\n\n** Use `boolean` value if you are using `headerOptions` and `onClose` **",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | ((event?: Event | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | ((event?: Event | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Modal`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"medium\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close state",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "onClose callback to be called on `Modal` close",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Header options (doesn't work if `header` prop is used)\n\nUse `header` prop if custom header is needed.\n\n<pre className=\"DocPage-codeBlock\">\nHeader:\n{\n    heading: string;\n    subHeading?: string;\n    backIcon?: boolean;\n    backIconCallback?: (e) => void;\n    backButton?: boolean;\n    backButtonCallback?: (e) => void;\n}\n</pre>\n\n**`backIcon` and `backIconCallback` will soon be deprecated**\n\n| Name | Description |\n| --- | --- |\n| heading | Heading of `Sidesheet` |\n| subHeading | Subheading of `Sidesheet` |\n| backButton | Determines if back button is visible |\n| backButtonCallback | Callback called when back button is clicked |\n| backIcon | Determines if back button is visible |\n| backIconCallback | Callback called when back button is clicked |\n\n** Don't use composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "OverlayHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "OverlayHeaderProps | undefined"
            },
            "defaultValue": null
          }
        },
        "header": {
          "name": "header",
          "description": "header component to be used as modal header.\nclose button is not part of header so it will not be replaced.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footer": {
          "name": "footer",
          "description": "Custom `footer` component\n\n** Don't use composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footerOptions": {
          "name": "footerOptions",
          "description": "Footer options (doesn't work if `footer` prop is used).\n\nUse `footer` prop if custom footer is needed.\n\n<pre className=\"DocPage-codeBlock\">\n  OverlayFooterOptions {\n    actions: ButtonProps[];\n  }\n([ButtonProps](https://innovaccer.github.io/design-system/?path=/docs/components-button-all--all))\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FooterOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "FooterOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered\n\n** No need to write `ModalHeader`, `ModalBody` and `ModalFooter` anymore **\n** if you are using `headerOptions` and `footer` **\n** Just pass the content to be rendered in the `Modal` body. **\n\n** Support for composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "seperator": {
          "name": "seperator",
          "description": "Show dividers in the header and the footer.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnEscape": {
          "name": "closeOnEscape",
          "description": "Closes `Modal` when `Escape` key is pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-modal-confirmations--confirmations": {
    "id": "components-modal-confirmations--confirmations",
    "kind": "Components/Modal/Confirmations",
    "name": "Confirmations",
    "story": "Confirmations",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [open, setOpen] = React.useState(true);\n  const backdropClose = false;\n  const dimension = 'small';\n\n  const onClose = () => {\n    setOpen(!open);\n    action('on close triggered')();\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Modal\n        open={open}\n        dimension={dimension}\n        backdropClose={backdropClose}\n        onClose={onClose}\n        headerOptions={{\n          heading: 'Edit filters',\n        }}\n        footer={\n          <>\n            <Button appearance=\"basic\" onClick={action('Cancel button click')}>\n              Cancel\n            </Button>\n            <Button appearance=\"primary\" className=\"ml-3\" onClick={action('Discard button click')}>\n              Create version\n            </Button>\n          </>\n        }\n      >\n        <Paragraph>\n          Currently, Version 1.0 is published. This will create a new version of the registry which will be saved as\n          draft untill published.\n          <br />\n        </Paragraph>\n        <br />\n        <Text>Do you want to continue?</Text>\n      </Modal>\n    </div>\n  );\n}"
      },
      "__id": "components-modal-confirmations--confirmations",
      "args": {},
      "argTypes": {
        "backdropClose": {
          "name": "backdropClose",
          "description": "Callback for `Modal` close event on backdrop click\n\n** Callback will be deprecated soon. Will only support boolean value. **\n\n** Use `boolean` value if you are using `headerOptions` and `onClose` **",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | ((event?: Event | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | ((event?: Event | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Modal`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"medium\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close state",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "onClose callback to be called on `Modal` close",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Header options (doesn't work if `header` prop is used)\n\nUse `header` prop if custom header is needed.\n\n<pre className=\"DocPage-codeBlock\">\nHeader:\n{\n    heading: string;\n    subHeading?: string;\n    backIcon?: boolean;\n    backIconCallback?: (e) => void;\n    backButton?: boolean;\n    backButtonCallback?: (e) => void;\n}\n</pre>\n\n**`backIcon` and `backIconCallback` will soon be deprecated**\n\n| Name | Description |\n| --- | --- |\n| heading | Heading of `Sidesheet` |\n| subHeading | Subheading of `Sidesheet` |\n| backButton | Determines if back button is visible |\n| backButtonCallback | Callback called when back button is clicked |\n| backIcon | Determines if back button is visible |\n| backIconCallback | Callback called when back button is clicked |\n\n** Don't use composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "OverlayHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "OverlayHeaderProps | undefined"
            },
            "defaultValue": null
          }
        },
        "header": {
          "name": "header",
          "description": "header component to be used as modal header.\nclose button is not part of header so it will not be replaced.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footer": {
          "name": "footer",
          "description": "Custom `footer` component\n\n** Don't use composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footerOptions": {
          "name": "footerOptions",
          "description": "Footer options (doesn't work if `footer` prop is used).\n\nUse `footer` prop if custom footer is needed.\n\n<pre className=\"DocPage-codeBlock\">\n  OverlayFooterOptions {\n    actions: ButtonProps[];\n  }\n([ButtonProps](https://innovaccer.github.io/design-system/?path=/docs/components-button-all--all))\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FooterOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "FooterOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered\n\n** No need to write `ModalHeader`, `ModalBody` and `ModalFooter` anymore **\n** if you are using `headerOptions` and `footer` **\n** Just pass the content to be rendered in the `Modal` body. **\n\n** Support for composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "seperator": {
          "name": "seperator",
          "description": "Show dividers in the header and the footer.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnEscape": {
          "name": "closeOnEscape",
          "description": "Closes `Modal` when `Escape` key is pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-modal-dialogs--dialogs": {
    "id": "components-modal-dialogs--dialogs",
    "kind": "Components/Modal/Dialogs",
    "name": "Dialogs",
    "story": "Dialogs",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [open, setOpen] = React.useState(true);\n  const backdropClose = true;\n  const dimension = 'medium';\n  const onClose = () => {\n    setOpen(!open);\n    action('on close triggered')();\n  };\n\n  const data = [\n    { Name: 'ER Education' },\n    { Name: 'HbA1c Test Due' },\n    { Name: 'Flu Vaccination' },\n    { Name: 'Well-Child Visit' },\n    { Name: 'Cervical Screening' },\n    { Name: 'HbA1c Test Due' },\n    { Name: 'Flu Vaccination' },\n    { Name: 'Well-Child Visit' },\n    { Name: 'Cervical Screening' },\n    { Name: 'HbA1c Test Due' },\n    { Name: 'Flu Vaccination' },\n    { Name: 'Well-Child Visit' },\n  ];\n\n  const schema: TableProps['schema'] = [\n    {\n      name: 'data',\n      displayName: 'data',\n      cellRenderer: (props: GridCellProps) => {\n        return <Text className=\" ml-4\">{`${props.data.Name}`}</Text>;\n      },\n    },\n  ];\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Modal\n        open={open}\n        dimension={dimension}\n        backdropClose={backdropClose}\n        onClose={onClose}\n        headerOptions={{\n          heading: 'Cannot delete Leona Lucas',\n        }}\n        footer={\n          <>\n            <Button className=\"ml-4\" onClick={action('Close button click')}>\n              Close\n            </Button>\n          </>\n        }\n      >\n        <div>\n          <Message\n            appearance=\"warning\"\n            description=\"Following 11 outreaches are currently scheduled using this sender's details.\"\n          />\n        </div>\n        <div style={{ border: 'var(--border)', height: '185px' }} className=\"my-5 overflow-auto\">\n          <List data={data} schema={schema} size=\"compressed\" />\n        </div>\n        <Text weight=\"strong\" className=\"mt-2\">\n          What to do next?\n        </Text>\n        <br />\n        <Text>You cannot delete this sender until the scheduled outreaches have been completed or cancelled.</Text>\n      </Modal>\n    </div>\n  );\n}"
      },
      "__id": "components-modal-dialogs--dialogs",
      "args": {},
      "argTypes": {
        "backdropClose": {
          "name": "backdropClose",
          "description": "Callback for `Modal` close event on backdrop click\n\n** Callback will be deprecated soon. Will only support boolean value. **\n\n** Use `boolean` value if you are using `headerOptions` and `onClose` **",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | ((event?: Event | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | ((event?: Event | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Modal`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"medium\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close state",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "onClose callback to be called on `Modal` close",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Header options (doesn't work if `header` prop is used)\n\nUse `header` prop if custom header is needed.\n\n<pre className=\"DocPage-codeBlock\">\nHeader:\n{\n    heading: string;\n    subHeading?: string;\n    backIcon?: boolean;\n    backIconCallback?: (e) => void;\n    backButton?: boolean;\n    backButtonCallback?: (e) => void;\n}\n</pre>\n\n**`backIcon` and `backIconCallback` will soon be deprecated**\n\n| Name | Description |\n| --- | --- |\n| heading | Heading of `Sidesheet` |\n| subHeading | Subheading of `Sidesheet` |\n| backButton | Determines if back button is visible |\n| backButtonCallback | Callback called when back button is clicked |\n| backIcon | Determines if back button is visible |\n| backIconCallback | Callback called when back button is clicked |\n\n** Don't use composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "OverlayHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "OverlayHeaderProps | undefined"
            },
            "defaultValue": null
          }
        },
        "header": {
          "name": "header",
          "description": "header component to be used as modal header.\nclose button is not part of header so it will not be replaced.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footer": {
          "name": "footer",
          "description": "Custom `footer` component\n\n** Don't use composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footerOptions": {
          "name": "footerOptions",
          "description": "Footer options (doesn't work if `footer` prop is used).\n\nUse `footer` prop if custom footer is needed.\n\n<pre className=\"DocPage-codeBlock\">\n  OverlayFooterOptions {\n    actions: ButtonProps[];\n  }\n([ButtonProps](https://innovaccer.github.io/design-system/?path=/docs/components-button-all--all))\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FooterOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "FooterOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered\n\n** No need to write `ModalHeader`, `ModalBody` and `ModalFooter` anymore **\n** if you are using `headerOptions` and `footer` **\n** Just pass the content to be rendered in the `Modal` body. **\n\n** Support for composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "seperator": {
          "name": "seperator",
          "description": "Show dividers in the header and the footer.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnEscape": {
          "name": "closeOnEscape",
          "description": "Closes `Modal` when `Escape` key is pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-modal-input-modals--input-modals": {
    "id": "components-modal-input-modals--input-modals",
    "kind": "Components/Modal/Input Modals",
    "name": "Input Modals",
    "story": "Input Modals",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [open, setOpen] = React.useState(true);\n  const backdropClose = false;\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const options = [\n    {\n      label: 'Option1',\n      value: 'Option1',\n    },\n    {\n      label: 'Option2',\n      value: 'Option2',\n    },\n  ];\n\n  const data = [\n    {\n      label: 'Medicine',\n      name: 'Tab1',\n    },\n    {\n      label: 'Period',\n      name: 'Tab2',\n    },\n    {\n      label: 'Alias',\n      name: 'Tab3',\n    },\n    {\n      label: 'Priority',\n      name: 'Tab4',\n    },\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'Tab1',\n  });\n\n  const onClickHandler = (menu: any) => {\n    setActive(menu);\n  };\n\n  const subHeading = (\n    <Navigation align=\"left\" menus={data} active={active} onClick={onClickHandler} className=\"ml-5 mt-4\" />\n  );\n\n  const header = (\n    <div>\n      <Heading className=\"ml-7 mb-3\">Medication</Heading>\n      {subHeading}\n    </div>\n  );\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Modal\n        open={open}\n        dimension=\"large\"\n        backdropClose={backdropClose}\n        onClose={onClose}\n        header={header}\n        footer={\n          <>\n            <Button appearance=\"basic\" onClick={action('Cancel button click')}>\n              Discard\n            </Button>\n            <Button appearance=\"primary\" className=\"ml-4\" onClick={action('Discard button click')}>\n              Create operand\n            </Button>\n          </>\n        }\n        seperator={true}\n      >\n        <div className=\"my-5\">\n          <Label withInput={true} required={true}>\n            Type\n          </Label>\n          <Dropdown options={options} className=\"w-50\" />\n          <Label withInput={true} className=\"mt-5\">\n            Active Date\n          </Label>\n          <Dropdown options={options} className=\"w-50\" />\n          <div className=\"d-flex pb-4\">\n            <div className=\"d-block w-75\">\n              <Label withInput={true} required={true} className=\"mt-5\">\n                Diagnosis Diseases\n              </Label>\n              <Dropdown options={options} />\n            </div>\n            <div className=\"ml-5 d-block w-25\">\n              <Label withInput={true} required={true} className=\"mt-5\">\n                Version\n              </Label>\n              <Dropdown options={options} />\n            </div>\n          </div>\n        </div>\n      </Modal>\n    </div>\n  );\n}"
      },
      "__id": "components-modal-input-modals--input-modals",
      "args": {},
      "argTypes": {
        "backdropClose": {
          "name": "backdropClose",
          "description": "Callback for `Modal` close event on backdrop click\n\n** Callback will be deprecated soon. Will only support boolean value. **\n\n** Use `boolean` value if you are using `headerOptions` and `onClose` **",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | ((event?: Event | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | ((event?: Event | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Modal`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"medium\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close state",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "onClose callback to be called on `Modal` close",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Header options (doesn't work if `header` prop is used)\n\nUse `header` prop if custom header is needed.\n\n<pre className=\"DocPage-codeBlock\">\nHeader:\n{\n    heading: string;\n    subHeading?: string;\n    backIcon?: boolean;\n    backIconCallback?: (e) => void;\n    backButton?: boolean;\n    backButtonCallback?: (e) => void;\n}\n</pre>\n\n**`backIcon` and `backIconCallback` will soon be deprecated**\n\n| Name | Description |\n| --- | --- |\n| heading | Heading of `Sidesheet` |\n| subHeading | Subheading of `Sidesheet` |\n| backButton | Determines if back button is visible |\n| backButtonCallback | Callback called when back button is clicked |\n| backIcon | Determines if back button is visible |\n| backIconCallback | Callback called when back button is clicked |\n\n** Don't use composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "OverlayHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "OverlayHeaderProps | undefined"
            },
            "defaultValue": null
          }
        },
        "header": {
          "name": "header",
          "description": "header component to be used as modal header.\nclose button is not part of header so it will not be replaced.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footer": {
          "name": "footer",
          "description": "Custom `footer` component\n\n** Don't use composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footerOptions": {
          "name": "footerOptions",
          "description": "Footer options (doesn't work if `footer` prop is used).\n\nUse `footer` prop if custom footer is needed.\n\n<pre className=\"DocPage-codeBlock\">\n  OverlayFooterOptions {\n    actions: ButtonProps[];\n  }\n([ButtonProps](https://innovaccer.github.io/design-system/?path=/docs/components-button-all--all))\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FooterOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "FooterOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered\n\n** No need to write `ModalHeader`, `ModalBody` and `ModalFooter` anymore **\n** if you are using `headerOptions` and `footer` **\n** Just pass the content to be rendered in the `Modal` body. **\n\n** Support for composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "seperator": {
          "name": "seperator",
          "description": "Show dividers in the header and the footer.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnEscape": {
          "name": "closeOnEscape",
          "description": "Closes `Modal` when `Escape` key is pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-modal-layering--layering": {
    "id": "components-modal-layering--layering",
    "kind": "Components/Modal/Layering",
    "name": "Layering",
    "story": "Layering",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const open = boolean('open', true);\n  const openSecondOverlay = boolean('openSecondOverlay', false);\n  const backdropClose = boolean('backdropClose', false);\n  const dimension = select('dimension', ['small', 'medium', 'large'], 'medium');\n\n  const onClose = () => {\n    updateKnob('open', false);\n    action('on close triggered')();\n  };\n\n  const onCloseSecondOverlay = () => {\n    updateKnob('openSecondOverlay', false);\n    action('on close triggered')();\n  }\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Modal\n        closeOnEscape={true}\n        open={open}\n        dimension={dimension}\n        backdropClose={backdropClose}\n        onClose={onClose}\n        headerOptions={{\n          heading: 'Heading',\n          subHeading: 'Subheading',\n        }}\n        footer={\n          <>\n            <Button appearance=\"basic\" onClick={action('Basic button click')}>\n              Basic\n            </Button>\n            <Button appearance=\"primary\" className=\"ml-4\" onClick={() => updateKnob('openSecondOverlay', true)}>\n              Open\n            </Button>\n          </>\n        }\n      >\n        <Text>Modal Body</Text>\n        <ModalDescription\n          title=\"Description Title\"\n          description=\"Adding a subheading clearly indicates the hierarchy of the information.\"\n        />\n        <ModalDescription description=\"Card Sections include supporting text like an article summary or a restaurant description.\" />\n      </Modal>\n\n      <Modal\n        closeOnEscape={true}\n        open={openSecondOverlay}\n        dimension={dimension}\n        backdropClose={backdropClose}\n        onClose={onCloseSecondOverlay}\n        headerOptions={{\n          heading: 'Heading Part Two',\n          subHeading: 'Subheading Part Two',\n        }}\n        footer={\n          <>\n            <Button appearance=\"primary\" className=\"ml-4\" onClick={action('Primary button Two click')}>\n              Primary\n            </Button>\n          </>\n        }\n      >\n        <Text>Modal Part Two Body</Text>\n        <ModalDescription description=\"Card Sections include supporting text like an article summary or a restaurant description.\" />\n      </Modal>\n    </div>\n  );\n}"
      },
      "__id": "components-modal-layering--layering",
      "args": {},
      "argTypes": {
        "backdropClose": {
          "name": "backdropClose",
          "description": "Callback for `Modal` close event on backdrop click\n\n** Callback will be deprecated soon. Will only support boolean value. **\n\n** Use `boolean` value if you are using `headerOptions` and `onClose` **",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | ((event?: Event | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | ((event?: Event | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Modal`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"medium\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close state",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "onClose callback to be called on `Modal` close",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Header options (doesn't work if `header` prop is used)\n\nUse `header` prop if custom header is needed.\n\n<pre className=\"DocPage-codeBlock\">\nHeader:\n{\n    heading: string;\n    subHeading?: string;\n    backIcon?: boolean;\n    backIconCallback?: (e) => void;\n    backButton?: boolean;\n    backButtonCallback?: (e) => void;\n}\n</pre>\n\n**`backIcon` and `backIconCallback` will soon be deprecated**\n\n| Name | Description |\n| --- | --- |\n| heading | Heading of `Sidesheet` |\n| subHeading | Subheading of `Sidesheet` |\n| backButton | Determines if back button is visible |\n| backButtonCallback | Callback called when back button is clicked |\n| backIcon | Determines if back button is visible |\n| backIconCallback | Callback called when back button is clicked |\n\n** Don't use composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "OverlayHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "OverlayHeaderProps | undefined"
            },
            "defaultValue": null
          }
        },
        "header": {
          "name": "header",
          "description": "header component to be used as modal header.\nclose button is not part of header so it will not be replaced.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footer": {
          "name": "footer",
          "description": "Custom `footer` component\n\n** Don't use composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footerOptions": {
          "name": "footerOptions",
          "description": "Footer options (doesn't work if `footer` prop is used).\n\nUse `footer` prop if custom footer is needed.\n\n<pre className=\"DocPage-codeBlock\">\n  OverlayFooterOptions {\n    actions: ButtonProps[];\n  }\n([ButtonProps](https://innovaccer.github.io/design-system/?path=/docs/components-button-all--all))\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FooterOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "FooterOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered\n\n** No need to write `ModalHeader`, `ModalBody` and `ModalFooter` anymore **\n** if you are using `headerOptions` and `footer` **\n** Just pass the content to be rendered in the `Modal` body. **\n\n** Support for composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "seperator": {
          "name": "seperator",
          "description": "Show dividers in the header and the footer.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnEscape": {
          "name": "closeOnEscape",
          "description": "Closes `Modal` when `Escape` key is pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-modal-no-footer--no-footer": {
    "id": "components-modal-no-footer--no-footer",
    "kind": "Components/Modal/No Footer",
    "name": "No Footer",
    "story": "No Footer",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const open = boolean('open', true);\n  const backdropClose = boolean('backdropClose', false);\n  const dimension = select('dimension', ['small', 'medium', 'large'], 'medium');\n\n  const onClose = () => {\n    updateKnob('open', false);\n    action('on close triggered')();\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Modal\n        open={open}\n        dimension={dimension}\n        backdropClose={backdropClose}\n        onClose={onClose}\n        headerOptions={{\n          heading: 'Heading',\n          subHeading: 'Subheading',\n        }}\n\n      >\n        <Text>Modal Body</Text>\n        <ModalDescription\n          title=\"Description Title\"\n          description=\"Adding a subheading clearly indicates the hierarchy of the information.\"\n        />\n        <ModalDescription description=\"Card Sections include supporting text like an article summary or a restaurant description.\" />\n      </Modal>\n    </div>\n  );\n}"
      },
      "__id": "components-modal-no-footer--no-footer",
      "args": {},
      "argTypes": {
        "backdropClose": {
          "name": "backdropClose",
          "description": "Callback for `Modal` close event on backdrop click\n\n** Callback will be deprecated soon. Will only support boolean value. **\n\n** Use `boolean` value if you are using `headerOptions` and `onClose` **",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | ((event?: Event | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | ((event?: Event | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Modal`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"medium\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close state",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "onClose callback to be called on `Modal` close",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Header options (doesn't work if `header` prop is used)\n\nUse `header` prop if custom header is needed.\n\n<pre className=\"DocPage-codeBlock\">\nHeader:\n{\n    heading: string;\n    subHeading?: string;\n    backIcon?: boolean;\n    backIconCallback?: (e) => void;\n    backButton?: boolean;\n    backButtonCallback?: (e) => void;\n}\n</pre>\n\n**`backIcon` and `backIconCallback` will soon be deprecated**\n\n| Name | Description |\n| --- | --- |\n| heading | Heading of `Sidesheet` |\n| subHeading | Subheading of `Sidesheet` |\n| backButton | Determines if back button is visible |\n| backButtonCallback | Callback called when back button is clicked |\n| backIcon | Determines if back button is visible |\n| backIconCallback | Callback called when back button is clicked |\n\n** Don't use composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "OverlayHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "OverlayHeaderProps | undefined"
            },
            "defaultValue": null
          }
        },
        "header": {
          "name": "header",
          "description": "header component to be used as modal header.\nclose button is not part of header so it will not be replaced.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footer": {
          "name": "footer",
          "description": "Custom `footer` component\n\n** Don't use composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footerOptions": {
          "name": "footerOptions",
          "description": "Footer options (doesn't work if `footer` prop is used).\n\nUse `footer` prop if custom footer is needed.\n\n<pre className=\"DocPage-codeBlock\">\n  OverlayFooterOptions {\n    actions: ButtonProps[];\n  }\n([ButtonProps](https://innovaccer.github.io/design-system/?path=/docs/components-button-all--all))\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FooterOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "FooterOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered\n\n** No need to write `ModalHeader`, `ModalBody` and `ModalFooter` anymore **\n** if you are using `headerOptions` and `footer` **\n** Just pass the content to be rendered in the `Modal` body. **\n\n** Support for composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "seperator": {
          "name": "seperator",
          "description": "Show dividers in the header and the footer.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnEscape": {
          "name": "closeOnEscape",
          "description": "Closes `Modal` when `Escape` key is pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-modal-old--old": {
    "id": "components-modal-old--old",
    "kind": "Components/Modal/Old",
    "name": "Old",
    "story": "Old",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const open = boolean('open', true);\n  const backdropClose = boolean('backdropClose', false);\n  const dimension = select('dimension', ['small', 'medium', 'large'], 'medium');\n\n  const onClose = () => {\n    updateKnob('open', false);\n    action('on close triggered')();\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Modal open={open} dimension={dimension} backdropClose={backdropClose ? onClose : undefined}>\n        <ModalHeader onClose={onClose} heading=\"Heading\" subHeading=\"Subheading\" />\n        <ModalBody>\n          <Text>Modal Body</Text>\n          <ModalDescription\n            title=\"Description Title\"\n            description=\"Adding a subheading clearly indicates the hierarchy of the information.\"\n          />\n          <ModalDescription description=\"Card Sections include supporting text like an article summary or a restaurant description.\" />\n        </ModalBody>\n        <ModalFooter open={open}>\n          <Button appearance=\"basic\" onClick={action('Basic button click')}>\n            Basic\n          </Button>\n          <Button appearance=\"primary\" className=\"ml-4\" onClick={action('Primary button click')}>\n            Primary\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </div>\n  );\n}"
      },
      "__id": "components-modal-old--old",
      "args": {},
      "argTypes": {
        "backdropClose": {
          "name": "backdropClose",
          "description": "Callback for `Modal` close event on backdrop click\n\n** Callback will be deprecated soon. Will only support boolean value. **\n\n** Use `boolean` value if you are using `headerOptions` and `onClose` **",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | ((event?: Event | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | ((event?: Event | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Modal`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"medium\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close state",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "onClose callback to be called on `Modal` close",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Header options (doesn't work if `header` prop is used)\n\nUse `header` prop if custom header is needed.\n\n<pre className=\"DocPage-codeBlock\">\nHeader:\n{\n    heading: string;\n    subHeading?: string;\n    backIcon?: boolean;\n    backIconCallback?: (e) => void;\n    backButton?: boolean;\n    backButtonCallback?: (e) => void;\n}\n</pre>\n\n**`backIcon` and `backIconCallback` will soon be deprecated**\n\n| Name | Description |\n| --- | --- |\n| heading | Heading of `Sidesheet` |\n| subHeading | Subheading of `Sidesheet` |\n| backButton | Determines if back button is visible |\n| backButtonCallback | Callback called when back button is clicked |\n| backIcon | Determines if back button is visible |\n| backIconCallback | Callback called when back button is clicked |\n\n** Don't use composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "OverlayHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "OverlayHeaderProps | undefined"
            },
            "defaultValue": null
          }
        },
        "header": {
          "name": "header",
          "description": "header component to be used as modal header.\nclose button is not part of header so it will not be replaced.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footer": {
          "name": "footer",
          "description": "Custom `footer` component\n\n** Don't use composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footerOptions": {
          "name": "footerOptions",
          "description": "Footer options (doesn't work if `footer` prop is used).\n\nUse `footer` prop if custom footer is needed.\n\n<pre className=\"DocPage-codeBlock\">\n  OverlayFooterOptions {\n    actions: ButtonProps[];\n  }\n([ButtonProps](https://innovaccer.github.io/design-system/?path=/docs/components-button-all--all))\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FooterOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "FooterOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered\n\n** No need to write `ModalHeader`, `ModalBody` and `ModalFooter` anymore **\n** if you are using `headerOptions` and `footer` **\n** Just pass the content to be rendered in the `Modal` body. **\n\n** Support for composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "seperator": {
          "name": "seperator",
          "description": "Show dividers in the header and the footer.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnEscape": {
          "name": "closeOnEscape",
          "description": "Closes `Modal` when `Escape` key is pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-modal-scrolling--scrolling": {
    "id": "components-modal-scrolling--scrolling",
    "kind": "Components/Modal/Scrolling",
    "name": "Scrolling",
    "story": "Scrolling",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [open, setOpen] = React.useState(true);\n  const backdropClose = false;\n\n  const onClose = () => {\n    setOpen(!open);\n    action('on close triggered')();\n  };\n\n  const data = [\n    {\n      question: 'Do you experience any of the following in your current place of residence? [Select all that apply]',\n      options: [\n        'Deteriorating appearance',\n        'Inoperable plumbing',\n        'Inadequate wining',\n        'Leaking roofs',\n        'Crumbling foundations',\n        'Unsafe steps',\n        'Porches in poor condition',\n        'None of the above',\n      ],\n    },\n    {\n      question: 'In last 12 months, were you worried that your food would run out before you got money to buy more?',\n      options: ['Yes', 'No'],\n    },\n    {\n      question:\n      'Moving or speaking so slowly that other people could have noticed? Or the opposite - being so fidgety or restless that you have been moving around a lot more than usual',\n      options: ['Not at all', 'Several Days', 'More than half the days', 'Nearly every day'],\n    },\n    {\n      question: 'Feeling tired or having little energy?', options: ['Yes', 'No']\n    },\n    {\n      question: 'Which of the following refers to a programme that aims to enable patients to make better use of information and communication technology for health and health care?',\n      options: [\n        'Patient informatics',\n        'ICT health',\n        'Health-tech',\n        'None of these',\n      ],\n    },\n    {\n      question: 'The way messages are framed influences people’s intentions and willingness to change their behaviour. Which of the following refers to the type of message framing that gives information about a health behaviour that emphasizes the costs of failing to take action?',\n      options: [\n        'Gain-framed messages',\n        'Loss-framed messages',\n        'Neutrally-framed messages',\n        'None of these',\n      ],\n    },\n    {\n      question: 'Which of the following refers to the capacity to access, understand, appraise and apply health information and services, and to make appropriate health decisions to promote and maintain health?',\n      options: [\n        'health accessibility',\n        'health appraisal',\n        'health literacy',\n        'health promotion',\n      ],\n    },\n    {\n      question: 'Frederich Engels’ book entitled The Condition of the Working Class in England in 1844 provided a detailed description of the appalling living and working conditions and the limited health care of working-class residents in which of the following English cities?',\n      options: [\n        'London',\n        'Manchester',\n        'Liverpool',\n        'None of these',\n      ],\n    },\n    {\n      question: 'Which of the following explanations for health inequalities focus on the individual as the unit of analysis, emphasizing unthinking, reckless or irresponsible behaviour or incautious lifestyle as the moving determinant?',\n      options: [\n        'Individualist explanations',\n        'Natural and social selection',\n        'Materialist and structuralist explanations',\n        'Cultural and/or behavioural differences',\n      ],\n    },\n    {\n      question: 'This approach to health promotion is based on the assumption that humans are rational decision-makers, this approach relies heavily upon the provision of information about risks and benefits of certain behaviours.',\n      options: [\n        'Behaviour change approach',\n        'Community development approach',\n        'Biomedical approach',\n        'None of these',\n      ],\n    },\n  ];\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Modal\n        open={open}\n        dimension=\"large\"\n        backdropClose={backdropClose}\n        onClose={onClose}\n        headerOptions={{\n          heading: 'Survey',\n        }}\n        footer={\n          <>\n            <Button onClick={action('Cancel button click')}>Cancel</Button>\n            <Button appearance=\"primary\" className=\"ml-4\" onClick={action('Next button click')}>\n              Next\n            </Button>\n          </>\n        }\n        seperator={true}\n      >\n        <div className=\"mt-5\">\n          <Text weight=\"strong\">All questions must be answered, unless marked</Text>\n          <br />\n          {data.map((object, index) => {\n            return (\n              <div key={index} className=\"mt-5 d-flex\">\n                <div>\n                  <Text size=\"small\" className=\"mr-4\">\n                    {`${index + 1}.`}\n                  </Text>\n                </div>\n                <div className=\"d-inline-block ml-2\">\n                  <Text size=\"small\">{object.question}</Text>\n                  <div className=\"mb-5 mt-3\">\n                    {object.options.map((option: string, ind: number) => {\n                      return (\n                        <Button key={ind} className=\"mr-4 mt-4 d-inline\" size=\"tiny\">\n                          {option}\n                        </Button>\n                      );\n                    })}\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </Modal>\n    </div>\n  );\n}"
      },
      "__id": "components-modal-scrolling--scrolling",
      "args": {},
      "argTypes": {
        "backdropClose": {
          "name": "backdropClose",
          "description": "Callback for `Modal` close event on backdrop click\n\n** Callback will be deprecated soon. Will only support boolean value. **\n\n** Use `boolean` value if you are using `headerOptions` and `onClose` **",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | ((event?: Event | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | ((event?: Event | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Modal`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"medium\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close state",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "onClose callback to be called on `Modal` close",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Header options (doesn't work if `header` prop is used)\n\nUse `header` prop if custom header is needed.\n\n<pre className=\"DocPage-codeBlock\">\nHeader:\n{\n    heading: string;\n    subHeading?: string;\n    backIcon?: boolean;\n    backIconCallback?: (e) => void;\n    backButton?: boolean;\n    backButtonCallback?: (e) => void;\n}\n</pre>\n\n**`backIcon` and `backIconCallback` will soon be deprecated**\n\n| Name | Description |\n| --- | --- |\n| heading | Heading of `Sidesheet` |\n| subHeading | Subheading of `Sidesheet` |\n| backButton | Determines if back button is visible |\n| backButtonCallback | Callback called when back button is clicked |\n| backIcon | Determines if back button is visible |\n| backIconCallback | Callback called when back button is clicked |\n\n** Don't use composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "OverlayHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "OverlayHeaderProps | undefined"
            },
            "defaultValue": null
          }
        },
        "header": {
          "name": "header",
          "description": "header component to be used as modal header.\nclose button is not part of header so it will not be replaced.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footer": {
          "name": "footer",
          "description": "Custom `footer` component\n\n** Don't use composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footerOptions": {
          "name": "footerOptions",
          "description": "Footer options (doesn't work if `footer` prop is used).\n\nUse `footer` prop if custom footer is needed.\n\n<pre className=\"DocPage-codeBlock\">\n  OverlayFooterOptions {\n    actions: ButtonProps[];\n  }\n([ButtonProps](https://innovaccer.github.io/design-system/?path=/docs/components-button-all--all))\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FooterOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "FooterOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered\n\n** No need to write `ModalHeader`, `ModalBody` and `ModalFooter` anymore **\n** if you are using `headerOptions` and `footer` **\n** Just pass the content to be rendered in the `Modal` body. **\n\n** Support for composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "seperator": {
          "name": "seperator",
          "description": "Show dividers in the header and the footer.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnEscape": {
          "name": "closeOnEscape",
          "description": "Closes `Modal` when `Escape` key is pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-modal-variants-dimesion-large--large": {
    "id": "components-modal-variants-dimesion-large--large",
    "kind": "Components/Modal/Variants/Dimesion/Large",
    "name": "Large",
    "story": "Large",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const open = boolean('open', true);\n  const backdropClose = boolean('backdropClose', false);\n  const dimension = 'large';\n\n  const onClose = () => {\n    updateKnob('open', false);\n    action('on close triggered')();\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Modal\n        open={open}\n        dimension={dimension}\n        backdropClose={backdropClose}\n        onClose={onClose}\n        headerOptions={{\n          heading: 'Heading',\n          subHeading: 'Subheading',\n        }}\n        footer={\n          <>\n            <Button appearance=\"basic\" onClick={action('Basic button click')}>\n              Basic\n            </Button>\n            <Button appearance=\"primary\" className=\"ml-4\" onClick={action('Primary button click')}>\n              Primary\n            </Button>\n          </>\n        }\n      >\n        <ModalDescription\n          title=\"Description Title\"\n          description=\"Adding a subheading clearly indicates the hierarchy of the information.\"\n        />\n        <ModalDescription description=\"Card Sections include supporting text like an article summary or a restaurant description.\" />\n      </Modal>\n    </div>\n  );\n}"
      },
      "__id": "components-modal-variants-dimesion-large--large",
      "args": {},
      "argTypes": {
        "backdropClose": {
          "name": "backdropClose",
          "description": "Callback for `Modal` close event on backdrop click\n\n** Callback will be deprecated soon. Will only support boolean value. **\n\n** Use `boolean` value if you are using `headerOptions` and `onClose` **",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | ((event?: Event | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | ((event?: Event | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Modal`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"medium\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close state",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "onClose callback to be called on `Modal` close",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Header options (doesn't work if `header` prop is used)\n\nUse `header` prop if custom header is needed.\n\n<pre className=\"DocPage-codeBlock\">\nHeader:\n{\n    heading: string;\n    subHeading?: string;\n    backIcon?: boolean;\n    backIconCallback?: (e) => void;\n    backButton?: boolean;\n    backButtonCallback?: (e) => void;\n}\n</pre>\n\n**`backIcon` and `backIconCallback` will soon be deprecated**\n\n| Name | Description |\n| --- | --- |\n| heading | Heading of `Sidesheet` |\n| subHeading | Subheading of `Sidesheet` |\n| backButton | Determines if back button is visible |\n| backButtonCallback | Callback called when back button is clicked |\n| backIcon | Determines if back button is visible |\n| backIconCallback | Callback called when back button is clicked |\n\n** Don't use composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "OverlayHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "OverlayHeaderProps | undefined"
            },
            "defaultValue": null
          }
        },
        "header": {
          "name": "header",
          "description": "header component to be used as modal header.\nclose button is not part of header so it will not be replaced.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footer": {
          "name": "footer",
          "description": "Custom `footer` component\n\n** Don't use composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footerOptions": {
          "name": "footerOptions",
          "description": "Footer options (doesn't work if `footer` prop is used).\n\nUse `footer` prop if custom footer is needed.\n\n<pre className=\"DocPage-codeBlock\">\n  OverlayFooterOptions {\n    actions: ButtonProps[];\n  }\n([ButtonProps](https://innovaccer.github.io/design-system/?path=/docs/components-button-all--all))\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FooterOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "FooterOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered\n\n** No need to write `ModalHeader`, `ModalBody` and `ModalFooter` anymore **\n** if you are using `headerOptions` and `footer` **\n** Just pass the content to be rendered in the `Modal` body. **\n\n** Support for composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "seperator": {
          "name": "seperator",
          "description": "Show dividers in the header and the footer.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnEscape": {
          "name": "closeOnEscape",
          "description": "Closes `Modal` when `Escape` key is pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-modal-variants-dimesion-medium--medium": {
    "id": "components-modal-variants-dimesion-medium--medium",
    "kind": "Components/Modal/Variants/Dimesion/Medium",
    "name": "Medium",
    "story": "Medium",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const open = boolean('open', true);\n  const backdropClose = boolean('backdropClose', false);\n  const dimension = 'medium';\n\n  const onClose = () => {\n    updateKnob('open', false);\n    action('on close triggered')();\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Modal\n        open={open}\n        dimension={dimension}\n        backdropClose={backdropClose}\n        onClose={onClose}\n        headerOptions={{\n          heading: 'Heading',\n          subHeading: 'Subheading',\n        }}\n        footer={\n          <>\n            <Button appearance=\"basic\" onClick={action('Basic button click')}>\n              Basic\n            </Button>\n            <Button appearance=\"primary\" className=\"ml-4\" onClick={action('Primary button click')}>\n              Primary\n            </Button>\n          </>\n        }\n      >\n        <ModalDescription\n          title=\"Description Title\"\n          description=\"Adding a subheading clearly indicates the hierarchy of the information.\"\n        />\n        <ModalDescription description=\"Card Sections include supporting text like an article summary or a restaurant description.\" />\n      </Modal>\n    </div>\n  );\n}"
      },
      "__id": "components-modal-variants-dimesion-medium--medium",
      "args": {},
      "argTypes": {
        "backdropClose": {
          "name": "backdropClose",
          "description": "Callback for `Modal` close event on backdrop click\n\n** Callback will be deprecated soon. Will only support boolean value. **\n\n** Use `boolean` value if you are using `headerOptions` and `onClose` **",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | ((event?: Event | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | ((event?: Event | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Modal`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"medium\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close state",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "onClose callback to be called on `Modal` close",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Header options (doesn't work if `header` prop is used)\n\nUse `header` prop if custom header is needed.\n\n<pre className=\"DocPage-codeBlock\">\nHeader:\n{\n    heading: string;\n    subHeading?: string;\n    backIcon?: boolean;\n    backIconCallback?: (e) => void;\n    backButton?: boolean;\n    backButtonCallback?: (e) => void;\n}\n</pre>\n\n**`backIcon` and `backIconCallback` will soon be deprecated**\n\n| Name | Description |\n| --- | --- |\n| heading | Heading of `Sidesheet` |\n| subHeading | Subheading of `Sidesheet` |\n| backButton | Determines if back button is visible |\n| backButtonCallback | Callback called when back button is clicked |\n| backIcon | Determines if back button is visible |\n| backIconCallback | Callback called when back button is clicked |\n\n** Don't use composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "OverlayHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "OverlayHeaderProps | undefined"
            },
            "defaultValue": null
          }
        },
        "header": {
          "name": "header",
          "description": "header component to be used as modal header.\nclose button is not part of header so it will not be replaced.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footer": {
          "name": "footer",
          "description": "Custom `footer` component\n\n** Don't use composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footerOptions": {
          "name": "footerOptions",
          "description": "Footer options (doesn't work if `footer` prop is used).\n\nUse `footer` prop if custom footer is needed.\n\n<pre className=\"DocPage-codeBlock\">\n  OverlayFooterOptions {\n    actions: ButtonProps[];\n  }\n([ButtonProps](https://innovaccer.github.io/design-system/?path=/docs/components-button-all--all))\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FooterOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "FooterOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered\n\n** No need to write `ModalHeader`, `ModalBody` and `ModalFooter` anymore **\n** if you are using `headerOptions` and `footer` **\n** Just pass the content to be rendered in the `Modal` body. **\n\n** Support for composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "seperator": {
          "name": "seperator",
          "description": "Show dividers in the header and the footer.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnEscape": {
          "name": "closeOnEscape",
          "description": "Closes `Modal` when `Escape` key is pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-modal-variants-dimesion-small--small": {
    "id": "components-modal-variants-dimesion-small--small",
    "kind": "Components/Modal/Variants/Dimesion/Small",
    "name": "Small",
    "story": "Small",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const open = boolean('open', true);\n  const backdropClose = boolean('backdropClose', false);\n  const dimension = 'small';\n\n  const onClose = () => {\n    updateKnob('open', false);\n    action('on close triggered')();\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Modal\n        open={open}\n        dimension={dimension}\n        backdropClose={backdropClose}\n        onClose={onClose}\n        headerOptions={{\n          heading: 'Heading',\n          subHeading: 'Subheading',\n        }}\n        footer={\n          <>\n            <Button appearance=\"basic\" onClick={action('Basic button click')}>\n              Basic\n            </Button>\n            <Button appearance=\"primary\" className=\"ml-4\" onClick={action('Primary button click')}>\n              Primary\n            </Button>\n          </>\n        }\n      >\n        <ModalDescription\n          title=\"Description Title\"\n          description=\"Adding a subheading clearly indicates the hierarchy of the information.\"\n        />\n        <ModalDescription description=\"Card Sections include supporting text like an article summary or a restaurant description.\" />\n      </Modal>\n    </div>\n  );\n}"
      },
      "__id": "components-modal-variants-dimesion-small--small",
      "args": {},
      "argTypes": {
        "backdropClose": {
          "name": "backdropClose",
          "description": "Callback for `Modal` close event on backdrop click\n\n** Callback will be deprecated soon. Will only support boolean value. **\n\n** Use `boolean` value if you are using `headerOptions` and `onClose` **",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | ((event?: Event | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | ((event?: Event | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Modal`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"medium\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close state",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "onClose callback to be called on `Modal` close",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Header options (doesn't work if `header` prop is used)\n\nUse `header` prop if custom header is needed.\n\n<pre className=\"DocPage-codeBlock\">\nHeader:\n{\n    heading: string;\n    subHeading?: string;\n    backIcon?: boolean;\n    backIconCallback?: (e) => void;\n    backButton?: boolean;\n    backButtonCallback?: (e) => void;\n}\n</pre>\n\n**`backIcon` and `backIconCallback` will soon be deprecated**\n\n| Name | Description |\n| --- | --- |\n| heading | Heading of `Sidesheet` |\n| subHeading | Subheading of `Sidesheet` |\n| backButton | Determines if back button is visible |\n| backButtonCallback | Callback called when back button is clicked |\n| backIcon | Determines if back button is visible |\n| backIconCallback | Callback called when back button is clicked |\n\n** Don't use composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "OverlayHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "OverlayHeaderProps | undefined"
            },
            "defaultValue": null
          }
        },
        "header": {
          "name": "header",
          "description": "header component to be used as modal header.\nclose button is not part of header so it will not be replaced.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footer": {
          "name": "footer",
          "description": "Custom `footer` component\n\n** Don't use composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footerOptions": {
          "name": "footerOptions",
          "description": "Footer options (doesn't work if `footer` prop is used).\n\nUse `footer` prop if custom footer is needed.\n\n<pre className=\"DocPage-codeBlock\">\n  OverlayFooterOptions {\n    actions: ButtonProps[];\n  }\n([ButtonProps](https://innovaccer.github.io/design-system/?path=/docs/components-button-all--all))\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FooterOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "FooterOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered\n\n** No need to write `ModalHeader`, `ModalBody` and `ModalFooter` anymore **\n** if you are using `headerOptions` and `footer` **\n** Just pass the content to be rendered in the `Modal` body. **\n\n** Support for composition of `ModalHeader`, `ModalBody` and `ModalFooter` will be deprecated soon. **",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "seperator": {
          "name": "seperator",
          "description": "Show dividers in the header and the footer.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnEscape": {
          "name": "closeOnEscape",
          "description": "Closes `Modal` when `Escape` key is pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-navigation-navigation-tabs--navigation-tabs": {
    "id": "components-navigation-navigation-tabs--navigation-tabs",
    "kind": "Components/Navigation/Navigation Tabs",
    "name": "Navigation Tabs",
    "story": "Navigation Tabs",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const data = [\n    {\n      name: 'tab1',\n      label: 'Tab #1',\n    },\n    {\n      name: 'tab2',\n      label: 'Tab #2',\n    },\n    {\n      name: 'tab3',\n      label: 'Tab #3',\n    },\n    {\n      name: 'tab4',\n      label: 'Tab #3',\n    },\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'tab1',\n  });\n\n  const onClickHandler = (menu: Menu) => {\n    setActive(menu);\n  };\n\n  const align = select('align', ['left', 'center'], 'center');\n\n  return <Navigation align={align} menus={data} active={active} onClick={onClickHandler} />;\n}"
      },
      "__id": "components-navigation-navigation-tabs--navigation-tabs",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "`Navigation` component type\n\n`LayoutType: 'horizontal' | 'vertical'`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "horizontal",
              "vertical"
            ]
          },
          "table": {
            "type": {
              "summary": "\"horizontal\" | \"vertical\""
            },
            "defaultValue": {
              "summary": "\"horizontal\""
            }
          }
        },
        "align": {
          "name": "align",
          "description": "Alignment of `Navigation` component\n\n**Applicable only in case of type: `horizontal`**\n\n`Align: 'left' | 'center'`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "left",
              "center"
            ]
          },
          "table": {
            "type": {
              "summary": "\"left\" | \"center\""
            },
            "defaultValue": {
              "summary": "\"center\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "menus": {
          "name": "menus",
          "description": "List of menus to be rendered\n\n<pre className=\"DocPage-codeBlock\">\nMenu: {\n    name: string;\n    label: string;\n    link?: string;\n    disabled?: boolean;\n    count?: number;\n    subMenu?: Menu[];\n    icon?: string;\n};\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | Menu name | |\n| label | Menu display name | |\n| link | Menu link | |\n| disabled | Set menu as disabled | false |\n| count | Value of Count (Max value 99) | |\n| subMenu | Menu submenus of type `Menu[]` | |\n| icon | Menu icon | |",
          "type": {
            "required": true,
            "name": "other",
            "value": "Menu[]"
          },
          "table": {
            "type": {
              "summary": "Menu[]"
            },
            "defaultValue": null
          }
        },
        "active": {
          "name": "active",
          "description": "Sets menu as active",
          "type": {
            "required": false,
            "name": "other",
            "value": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
          },
          "table": {
            "type": {
              "summary": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Callback to be called on Menu click**(only if it's not disabled)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((menu: Menu) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((menu: Menu) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "rounded": {
          "name": "rounded",
          "description": "Makes active menu rounded **(applicable only for type: `vertical` and `expanded` menu)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Set expanded state of `Navigation`**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "footer": {
          "name": "footer",
          "description": "Shows footer**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onToggle": {
          "name": "onToggle",
          "description": "Callback to be called on Menu click**(only if it's not disabled)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((expanded: boolean) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((expanded: boolean) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "autoCollapse": {
          "name": "autoCollapse",
          "description": "Only one SubMenu visible at a time**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-navigation-navigation-tabs-with-count--navigation-tabs-with-count": {
    "id": "components-navigation-navigation-tabs-with-count--navigation-tabs-with-count",
    "kind": "Components/Navigation/Navigation Tabs With Count",
    "name": "Navigation Tabs With Count",
    "story": "Navigation Tabs With Count",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const data = [\n    {\n      name: 'tab1',\n      label: 'Tab #1',\n      count: 1,\n    },\n    {\n      name: 'tab2',\n      label: 'Tab #2',\n      count: 2,\n      disabled: true,\n    },\n    {\n      name: 'tab3',\n      label: 'Tab #3',\n      count: 10,\n    },\n    {\n      name: 'tab4',\n      label: 'Tab #3',\n      count: 100,\n    },\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'tab1',\n  });\n\n  const onClickHandler = (menu: Menu) => {\n    setActive(menu);\n  };\n\n  const align = select('align', ['left', 'center'], 'center');\n\n  return <Navigation align={align} menus={data} active={active} onClick={onClickHandler} />;\n}"
      },
      "__id": "components-navigation-navigation-tabs-with-count--navigation-tabs-with-count",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "`Navigation` component type\n\n`LayoutType: 'horizontal' | 'vertical'`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "horizontal",
              "vertical"
            ]
          },
          "table": {
            "type": {
              "summary": "\"horizontal\" | \"vertical\""
            },
            "defaultValue": {
              "summary": "\"horizontal\""
            }
          }
        },
        "align": {
          "name": "align",
          "description": "Alignment of `Navigation` component\n\n**Applicable only in case of type: `horizontal`**\n\n`Align: 'left' | 'center'`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "left",
              "center"
            ]
          },
          "table": {
            "type": {
              "summary": "\"left\" | \"center\""
            },
            "defaultValue": {
              "summary": "\"center\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "menus": {
          "name": "menus",
          "description": "List of menus to be rendered\n\n<pre className=\"DocPage-codeBlock\">\nMenu: {\n    name: string;\n    label: string;\n    link?: string;\n    disabled?: boolean;\n    count?: number;\n    subMenu?: Menu[];\n    icon?: string;\n};\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | Menu name | |\n| label | Menu display name | |\n| link | Menu link | |\n| disabled | Set menu as disabled | false |\n| count | Value of Count (Max value 99) | |\n| subMenu | Menu submenus of type `Menu[]` | |\n| icon | Menu icon | |",
          "type": {
            "required": true,
            "name": "other",
            "value": "Menu[]"
          },
          "table": {
            "type": {
              "summary": "Menu[]"
            },
            "defaultValue": null
          }
        },
        "active": {
          "name": "active",
          "description": "Sets menu as active",
          "type": {
            "required": false,
            "name": "other",
            "value": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
          },
          "table": {
            "type": {
              "summary": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Callback to be called on Menu click**(only if it's not disabled)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((menu: Menu) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((menu: Menu) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "rounded": {
          "name": "rounded",
          "description": "Makes active menu rounded **(applicable only for type: `vertical` and `expanded` menu)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Set expanded state of `Navigation`**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "footer": {
          "name": "footer",
          "description": "Shows footer**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onToggle": {
          "name": "onToggle",
          "description": "Callback to be called on Menu click**(only if it's not disabled)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((expanded: boolean) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((expanded: boolean) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "autoCollapse": {
          "name": "autoCollapse",
          "description": "Only one SubMenu visible at a time**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-navigation-navigation-tabs-with-icon--navigation-tabs-with-icon": {
    "id": "components-navigation-navigation-tabs-with-icon--navigation-tabs-with-icon",
    "kind": "Components/Navigation/Navigation Tabs With Icon",
    "name": "Navigation Tabs With Icon",
    "story": "Navigation Tabs With Icon",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const data = [\n    {\n      name: 'tab1',\n      label: 'Tab #1',\n      icon: 'events',\n    },\n    {\n      name: 'tab2',\n      label: 'Tab #2',\n      icon: 'events',\n    },\n    {\n      name: 'tab3',\n      label: 'Tab #3',\n      icon: 'events',\n    },\n    {\n      name: 'tab4',\n      label: 'Tab #3',\n      icon: 'events',\n    },\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'tab1',\n  });\n\n  const onClickHandler = (menu: Menu) => {\n    setActive(menu);\n  };\n\n  const align = select('align', ['left', 'center'], 'center');\n\n  return <Navigation align={align} menus={data} active={active} onClick={onClickHandler} />;\n}"
      },
      "__id": "components-navigation-navigation-tabs-with-icon--navigation-tabs-with-icon",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "`Navigation` component type\n\n`LayoutType: 'horizontal' | 'vertical'`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "horizontal",
              "vertical"
            ]
          },
          "table": {
            "type": {
              "summary": "\"horizontal\" | \"vertical\""
            },
            "defaultValue": {
              "summary": "\"horizontal\""
            }
          }
        },
        "align": {
          "name": "align",
          "description": "Alignment of `Navigation` component\n\n**Applicable only in case of type: `horizontal`**\n\n`Align: 'left' | 'center'`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "left",
              "center"
            ]
          },
          "table": {
            "type": {
              "summary": "\"left\" | \"center\""
            },
            "defaultValue": {
              "summary": "\"center\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "menus": {
          "name": "menus",
          "description": "List of menus to be rendered\n\n<pre className=\"DocPage-codeBlock\">\nMenu: {\n    name: string;\n    label: string;\n    link?: string;\n    disabled?: boolean;\n    count?: number;\n    subMenu?: Menu[];\n    icon?: string;\n};\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | Menu name | |\n| label | Menu display name | |\n| link | Menu link | |\n| disabled | Set menu as disabled | false |\n| count | Value of Count (Max value 99) | |\n| subMenu | Menu submenus of type `Menu[]` | |\n| icon | Menu icon | |",
          "type": {
            "required": true,
            "name": "other",
            "value": "Menu[]"
          },
          "table": {
            "type": {
              "summary": "Menu[]"
            },
            "defaultValue": null
          }
        },
        "active": {
          "name": "active",
          "description": "Sets menu as active",
          "type": {
            "required": false,
            "name": "other",
            "value": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
          },
          "table": {
            "type": {
              "summary": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Callback to be called on Menu click**(only if it's not disabled)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((menu: Menu) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((menu: Menu) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "rounded": {
          "name": "rounded",
          "description": "Makes active menu rounded **(applicable only for type: `vertical` and `expanded` menu)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Set expanded state of `Navigation`**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "footer": {
          "name": "footer",
          "description": "Shows footer**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onToggle": {
          "name": "onToggle",
          "description": "Callback to be called on Menu click**(only if it's not disabled)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((expanded: boolean) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((expanded: boolean) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "autoCollapse": {
          "name": "autoCollapse",
          "description": "Only one SubMenu visible at a time**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-navigation-variants-horizontal--horizontal": {
    "id": "components-navigation-variants-horizontal--horizontal",
    "kind": "Components/Navigation/Variants/Horizontal",
    "name": "Horizontal",
    "story": "Horizontal",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const data = [\n    {\n      name: 'menu_1',\n      label: 'Menu 1',\n      icon: 'event',\n    },\n    {\n      name: 'menu_2',\n      label: 'Menu 2',\n      count: 10,\n    },\n    {\n      name: 'menu_3',\n      label: 'Menu 3',\n      disabled: true,\n    },\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'menu_1',\n  });\n\n  const onClickHandler = (menu: Menu) => {\n    action(`menu-clicked: ${JSON.stringify(menu)}`)();\n\n    setActive(menu);\n  };\n\n  const align = select('align', ['left', 'center'], 'center');\n\n  return (\n    <div style={{ height: '200px', background: 'var(--secondary-lightest)' }}>\n      <div\n        style={{\n          background: 'white',\n          padding: 'var(--spacing-m)',\n          borderTop: 'var(--border)',\n          borderBottom: 'var(--border)',\n        }}\n      >\n        <Navigation align={align} menus={data} active={active} onClick={onClickHandler} />\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-navigation-variants-horizontal--horizontal",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "`Navigation` component type\n\n`LayoutType: 'horizontal' | 'vertical'`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "horizontal",
              "vertical"
            ]
          },
          "table": {
            "type": {
              "summary": "\"horizontal\" | \"vertical\""
            },
            "defaultValue": {
              "summary": "\"horizontal\""
            }
          }
        },
        "align": {
          "name": "align",
          "description": "Alignment of `Navigation` component\n\n**Applicable only in case of type: `horizontal`**\n\n`Align: 'left' | 'center'`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "left",
              "center"
            ]
          },
          "table": {
            "type": {
              "summary": "\"left\" | \"center\""
            },
            "defaultValue": {
              "summary": "\"center\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "menus": {
          "name": "menus",
          "description": "List of menus to be rendered\n\n<pre className=\"DocPage-codeBlock\">\nMenu: {\n    name: string;\n    label: string;\n    link?: string;\n    disabled?: boolean;\n    count?: number;\n    subMenu?: Menu[];\n    icon?: string;\n};\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | Menu name | |\n| label | Menu display name | |\n| link | Menu link | |\n| disabled | Set menu as disabled | false |\n| count | Value of Count (Max value 99) | |\n| subMenu | Menu submenus of type `Menu[]` | |\n| icon | Menu icon | |",
          "type": {
            "required": true,
            "name": "other",
            "value": "Menu[]"
          },
          "table": {
            "type": {
              "summary": "Menu[]"
            },
            "defaultValue": null
          }
        },
        "active": {
          "name": "active",
          "description": "Sets menu as active",
          "type": {
            "required": false,
            "name": "other",
            "value": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
          },
          "table": {
            "type": {
              "summary": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Callback to be called on Menu click**(only if it's not disabled)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((menu: Menu) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((menu: Menu) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "rounded": {
          "name": "rounded",
          "description": "Makes active menu rounded **(applicable only for type: `vertical` and `expanded` menu)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Set expanded state of `Navigation`**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "footer": {
          "name": "footer",
          "description": "Shows footer**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onToggle": {
          "name": "onToggle",
          "description": "Callback to be called on Menu click**(only if it's not disabled)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((expanded: boolean) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((expanded: boolean) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "autoCollapse": {
          "name": "autoCollapse",
          "description": "Only one SubMenu visible at a time**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-navigation-variants-vertical--vertical": {
    "id": "components-navigation-variants-vertical--vertical",
    "kind": "Components/Navigation/Variants/Vertical",
    "name": "Vertical",
    "story": "Vertical",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const expanded = boolean('expanded', false);\n\n  const autoCollapse = boolean('autoCollapse', true);\n\n  const footer = boolean('footer', true);\n\n  const data = [\n    {\n      name: 'patient_360',\n      label: 'Patient 360',\n      icon: 'assignment_ind',\n      link: '/patient360',\n    },\n    {\n      name: 'care_management',\n      label: 'Care Management and Resources',\n      icon: 'forum',\n      subMenu: [\n        {\n          name: 'care_management.timeline',\n          label: 'Timeline',\n        },\n        {\n          name: 'care_management.care_plans',\n          label: 'Care Plans',\n        },\n      ],\n    },\n    {\n      name: 'episodes',\n      label: 'Episodes',\n      disabled: true,\n      icon: 'airline_seat_flat_angled',\n    },\n    {\n      name: 'risk',\n      label: 'Risk',\n      icon: 'favorite',\n      subMenu: [\n        {\n          name: 'risk.timeline',\n          label: 'Timeline',\n        },\n        {\n          name: 'risk.care_plans',\n          label: 'Care Plans',\n        },\n      ],\n    },\n    {\n      name: 'claims',\n      label: 'Claims',\n      icon: 'receipt',\n    },\n    {\n      name: 'profile',\n      label: 'Profile',\n      icon: 'account_circle',\n    },\n    {\n      name: 'manula_entry',\n      label: 'Manual Entry',\n      icon: 'border_color',\n    },\n    {\n      name: 'documents',\n      label: 'Documents',\n      icon: 'assignment',\n    },\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'care_management.timeline',\n  });\n\n  const onClickHandler = (menu: Menu) => {\n    action(`menu-clicked: ${JSON.stringify(menu)}`)();\n\n    setActive(menu);\n  };\n\n  return (\n    <div style={{ height: 'calc(80vh)', background: 'var(--secondary-lightest)' }}>\n      <Navigation\n        type=\"vertical\"\n        menus={data}\n        expanded={expanded}\n        autoCollapse={autoCollapse}\n        footer={footer}\n        onToggle={() => updateKnob('expanded', !expanded)}\n        active={active}\n        onClick={onClickHandler}\n      />\n    </div>\n  );\n}"
      },
      "__id": "components-navigation-variants-vertical--vertical",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "`Navigation` component type\n\n`LayoutType: 'horizontal' | 'vertical'`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "horizontal",
              "vertical"
            ]
          },
          "table": {
            "type": {
              "summary": "\"horizontal\" | \"vertical\""
            },
            "defaultValue": {
              "summary": "\"horizontal\""
            }
          }
        },
        "align": {
          "name": "align",
          "description": "Alignment of `Navigation` component\n\n**Applicable only in case of type: `horizontal`**\n\n`Align: 'left' | 'center'`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "left",
              "center"
            ]
          },
          "table": {
            "type": {
              "summary": "\"left\" | \"center\""
            },
            "defaultValue": {
              "summary": "\"center\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "menus": {
          "name": "menus",
          "description": "List of menus to be rendered\n\n<pre className=\"DocPage-codeBlock\">\nMenu: {\n    name: string;\n    label: string;\n    link?: string;\n    disabled?: boolean;\n    count?: number;\n    subMenu?: Menu[];\n    icon?: string;\n};\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | Menu name | |\n| label | Menu display name | |\n| link | Menu link | |\n| disabled | Set menu as disabled | false |\n| count | Value of Count (Max value 99) | |\n| subMenu | Menu submenus of type `Menu[]` | |\n| icon | Menu icon | |",
          "type": {
            "required": true,
            "name": "other",
            "value": "Menu[]"
          },
          "table": {
            "type": {
              "summary": "Menu[]"
            },
            "defaultValue": null
          }
        },
        "active": {
          "name": "active",
          "description": "Sets menu as active",
          "type": {
            "required": false,
            "name": "other",
            "value": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
          },
          "table": {
            "type": {
              "summary": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Callback to be called on Menu click**(only if it's not disabled)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((menu: Menu) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((menu: Menu) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "rounded": {
          "name": "rounded",
          "description": "Makes active menu rounded **(applicable only for type: `vertical` and `expanded` menu)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Set expanded state of `Navigation`**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "footer": {
          "name": "footer",
          "description": "Shows footer**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onToggle": {
          "name": "onToggle",
          "description": "Callback to be called on Menu click**(only if it's not disabled)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((expanded: boolean) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((expanded: boolean) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "autoCollapse": {
          "name": "autoCollapse",
          "description": "Only one SubMenu visible at a time**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-navigation-variants-vertical-round--vertical-round": {
    "id": "components-navigation-variants-vertical-round--vertical-round",
    "kind": "Components/Navigation/Variants/Vertical Round",
    "name": "Vertical Round",
    "story": "Vertical Round",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const expanded = boolean('expanded', false);\n\n  const autoCollapse = boolean('autoCollapse', true);\n\n  const footer = boolean('footer', true);\n\n  const data = [\n    {\n      name: 'patient_360',\n      label: 'Patient 360',\n      icon: 'assignment_ind',\n      link: '/patient360',\n    },\n    {\n      name: 'care_management',\n      label: 'Care Management and Resources',\n      icon: 'forum',\n      subMenu: [\n        {\n          name: 'care_management.timeline',\n          label: 'Timeline',\n        },\n        {\n          name: 'care_management.care_plans',\n          label: 'Care Plans',\n        },\n      ],\n    },\n    {\n      name: 'episodes',\n      label: 'Episodes',\n      disabled: true,\n      icon: 'airline_seat_flat_angled',\n    },\n    {\n      name: 'risk',\n      label: 'Risk',\n      icon: 'favorite',\n      subMenu: [\n        {\n          name: 'risk.timeline',\n          label: 'Timeline',\n        },\n        {\n          name: 'risk.care_plans',\n          label: 'Care Plans',\n        },\n      ],\n    },\n    {\n      name: 'claims',\n      label: 'Claims',\n      icon: 'receipt',\n    },\n    {\n      name: 'profile',\n      label: 'Profile',\n      icon: 'account_circle',\n    },\n    {\n      name: 'manula_entry',\n      label: 'Manual Entry',\n      icon: 'border_color',\n    },\n    {\n      name: 'documents',\n      label: 'Documents',\n      icon: 'assignment',\n    },\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'care_management.timeline',\n  });\n\n  const onClickHandler = (menu: Menu) => {\n    action(`menu-clicked: ${JSON.stringify(menu)}`)();\n\n    setActive(menu);\n  };\n\n  return (\n    <div style={{ height: 'calc(80vh)', background: 'var(--secondary-lightest)' }}>\n      <Navigation\n        type=\"vertical\"\n        menus={data}\n        expanded={expanded}\n        autoCollapse={autoCollapse}\n        footer={footer}\n        onToggle={() => updateKnob('expanded', !expanded)}\n        active={active}\n        rounded={true}\n        onClick={onClickHandler}\n      />\n    </div>\n  );\n}"
      },
      "__id": "components-navigation-variants-vertical-round--vertical-round",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "`Navigation` component type\n\n`LayoutType: 'horizontal' | 'vertical'`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "horizontal",
              "vertical"
            ]
          },
          "table": {
            "type": {
              "summary": "\"horizontal\" | \"vertical\""
            },
            "defaultValue": {
              "summary": "\"horizontal\""
            }
          }
        },
        "align": {
          "name": "align",
          "description": "Alignment of `Navigation` component\n\n**Applicable only in case of type: `horizontal`**\n\n`Align: 'left' | 'center'`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "left",
              "center"
            ]
          },
          "table": {
            "type": {
              "summary": "\"left\" | \"center\""
            },
            "defaultValue": {
              "summary": "\"center\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "menus": {
          "name": "menus",
          "description": "List of menus to be rendered\n\n<pre className=\"DocPage-codeBlock\">\nMenu: {\n    name: string;\n    label: string;\n    link?: string;\n    disabled?: boolean;\n    count?: number;\n    subMenu?: Menu[];\n    icon?: string;\n};\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | Menu name | |\n| label | Menu display name | |\n| link | Menu link | |\n| disabled | Set menu as disabled | false |\n| count | Value of Count (Max value 99) | |\n| subMenu | Menu submenus of type `Menu[]` | |\n| icon | Menu icon | |",
          "type": {
            "required": true,
            "name": "other",
            "value": "Menu[]"
          },
          "table": {
            "type": {
              "summary": "Menu[]"
            },
            "defaultValue": null
          }
        },
        "active": {
          "name": "active",
          "description": "Sets menu as active",
          "type": {
            "required": false,
            "name": "other",
            "value": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
          },
          "table": {
            "type": {
              "summary": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Callback to be called on Menu click**(only if it's not disabled)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((menu: Menu) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((menu: Menu) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "rounded": {
          "name": "rounded",
          "description": "Makes active menu rounded **(applicable only for type: `vertical` and `expanded` menu)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Set expanded state of `Navigation`**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "footer": {
          "name": "footer",
          "description": "Shows footer**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onToggle": {
          "name": "onToggle",
          "description": "Callback to be called on Menu click**(only if it's not disabled)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((expanded: boolean) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((expanded: boolean) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "autoCollapse": {
          "name": "autoCollapse",
          "description": "Only one SubMenu visible at a time**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-outsideclick-all--all": {
    "id": "components-outsideclick-all--all",
    "kind": "Components/OutsideClick/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <OutsideClick className=\"d-inline-block\" onOutsideClick={action('outside click')}>\n      <Card\n        className=\"d-flex align-items-center justify-content-center\"\n        style={{ height: 200, width: 200 }}\n        onClick={action('inside click')}\n      >\n        <Heading>Card</Heading>\n      </Card>\n    </OutsideClick>\n  );\n}"
      },
      "__id": "components-outsideclick-all--all",
      "args": {},
      "argTypes": {
        "onOutsideClick": {
          "name": "onOutsideClick",
          "description": "Trigger the function on outside click",
          "type": {
            "required": true,
            "name": "function",
            "value": "(event: Event) => void"
          },
          "table": {
            "type": {
              "summary": "(event: Event) => void"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>"
          },
          "table": {
            "type": {
              "summary": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-pageheader-level-0-variants-with-navigation--with-navigation": {
    "id": "components-pageheader-level-0-variants-with-navigation--with-navigation",
    "kind": "Components/PageHeader/Level 0/Variants/With Navigation",
    "name": "With Navigation",
    "story": "With Navigation",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const title = text('title', 'Page title');\n\n  const navigationData = [\n    {\n      name: 'menu_1',\n      label: 'Menu 1',\n      icon: 'event',\n    },\n    {\n      name: 'menu_2',\n      label: 'Menu 2',\n    },\n    {\n      name: 'menu_3',\n      label: 'Menu 3',\n      disabled: true,\n    },\n  ];\n  const separator = boolean('separator', true);\n\n  const options = {\n    title,\n    separator,\n    navigation: <Navigation menus={navigationData} onClick={action('menu-clicked')} active={{ name: 'menu_1' }} />,\n    actions: (\n      <div className=\"d-flex justify-content-end align-items-center\">\n        <span className=\"mr-4\">\n          <Text appearance=\"subtle\">Meta data</Text>\n        </span>\n        <Button appearance=\"primary\">Primary</Button>\n      </div>\n    ),\n  };\n\n  return (\n    <div className=\"w-100 p-6 bg-secondary-lightest\">\n      <PageHeader {...options} />\n    </div>\n  );\n}"
      },
      "__id": "components-pageheader-level-0-variants-with-navigation--with-navigation",
      "args": {},
      "argTypes": {
        "title": {
          "name": "title",
          "description": "Page title",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "navigation": {
          "name": "navigation",
          "description": "`Navigation` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "stepper": {
          "name": "stepper",
          "description": "`Stepper` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "actions": {
          "name": "actions",
          "description": "Actions composed of `Button` and meta data",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "tabs": {
          "name": "tabs",
          "description": "`Tab` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "breadcrumbs": {
          "name": "breadcrumbs",
          "description": "`Breadcrumbs` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "badge": {
          "name": "badge",
          "description": "`Badge` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "status": {
          "name": "status",
          "description": "`Status` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "meta": {
          "name": "meta",
          "description": "Meta data composed of `Text`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "navigationPosition": {
          "name": "navigationPosition",
          "description": "Page header layout type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "bottom",
              "center"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"center\""
            },
            "defaultValue": {
              "summary": "\"center\""
            }
          }
        },
        "separator": {
          "name": "separator",
          "description": "provides a border at bottom",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-pageheader-level-0-variants-with-stepper--with-stepper": {
    "id": "components-pageheader-level-0-variants-with-stepper--with-stepper",
    "kind": "Components/PageHeader/Level 0/Variants/With Stepper",
    "name": "With Stepper",
    "story": "With Stepper",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const title = text('title', 'Page title');\n\n  const stepperData = [\n    {\n      value: 'step_1',\n      label: 'Step 1',\n    },\n    {\n      value: 'step_2',\n      label: 'Step 2',\n    },\n    {\n      value: 'step_3',\n      label: 'Step 3',\n    },\n  ];\n\n  const separator = boolean('separator', true);\n\n  const [active, setActive] = React.useState(0);\n  const [completed, setCompleted] = React.useState(-1);\n\n  const onChangeHandler = (activeStep: number) => {\n    setActive(activeStep);\n  };\n\n  const onClickHandler = () => {\n    if (active > completed) setCompleted(active);\n    active > completed ? setActive(active + 1) : setActive(completed + 1);\n  };\n\n  const options = {\n    title,\n    separator,\n    stepper: <Stepper steps={stepperData} onChange={onChangeHandler} active={active} completed={completed} />,\n    actions: (\n      <div className=\"d-flex justify-content-end align-items-center\">\n        <span className=\"mr-4\">\n          <Text appearance=\"subtle\">Meta data</Text>\n        </span>\n        <Button appearance=\"primary\" onClick={onClickHandler}>\n          Next\n        </Button>\n      </div>\n    ),\n  };\n\n  return (\n    <div className=\"w-100 p-6 bg-secondary-lightest\">\n      <PageHeader {...options} />\n    </div>\n  );\n}"
      },
      "__id": "components-pageheader-level-0-variants-with-stepper--with-stepper",
      "args": {},
      "argTypes": {
        "title": {
          "name": "title",
          "description": "Page title",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "navigation": {
          "name": "navigation",
          "description": "`Navigation` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "stepper": {
          "name": "stepper",
          "description": "`Stepper` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "actions": {
          "name": "actions",
          "description": "Actions composed of `Button` and meta data",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "tabs": {
          "name": "tabs",
          "description": "`Tab` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "breadcrumbs": {
          "name": "breadcrumbs",
          "description": "`Breadcrumbs` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "badge": {
          "name": "badge",
          "description": "`Badge` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "status": {
          "name": "status",
          "description": "`Status` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "meta": {
          "name": "meta",
          "description": "Meta data composed of `Text`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "navigationPosition": {
          "name": "navigationPosition",
          "description": "Page header layout type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "bottom",
              "center"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"center\""
            },
            "defaultValue": {
              "summary": "\"center\""
            }
          }
        },
        "separator": {
          "name": "separator",
          "description": "provides a border at bottom",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-pageheader-level-0-variants-with-tabs--with-tabs": {
    "id": "components-pageheader-level-0-variants-with-tabs--with-tabs",
    "kind": "Components/PageHeader/Level 0/Variants/With Tabs",
    "name": "With Tabs",
    "story": "With Tabs",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const active = number('active', 1);\n  const separator = boolean('separator', true);\n  const title = text('title', 'Page title');\n\n  const onTabChangeHandler = (tabIndex: number) => {\n    updateKnob('active', tabIndex);\n    return action(`tab-change: ${tabIndex}`)();\n  };\n\n  const options = {\n    title,\n    separator,\n    tabs: (\n      <TabsWrapper active={active} onTabChange={onTabChangeHandler}>\n        <Tab\n          label={\n            <>\n              <div className=\"Tab-count\">\n                <Badge appearance=\"secondary\">2</Badge>\n              </div>\n              <Text appearance={active !== 0 ? 'subtle' : undefined}>Tab 1</Text>\n            </>\n          }\n        >\n          {null}\n        </Tab>\n        <Tab\n          label={\n            <>\n              <div className=\"Tab-count\">\n                <Badge appearance=\"secondary\">12</Badge>\n              </div>\n              <Text appearance={active !== 1 ? 'subtle' : undefined}>Tab 2</Text>\n            </>\n          }\n        >\n          {null}\n        </Tab>\n        <Tab\n          label={\n            <>\n              <div className=\"Tab-count\">\n                <Badge appearance=\"secondary\">5</Badge>\n              </div>\n              <Text appearance={active !== 2 ? 'subtle' : undefined}>Tab 3</Text>\n            </>\n          }\n        >\n          {null}\n        </Tab>\n      </TabsWrapper>\n    ),\n    actions: (\n      <div className=\"d-flex justify-content-end align-items-center\">\n        <span className=\"mr-4\">\n          <Text appearance=\"subtle\">Meta data</Text>\n        </span>\n        <Button appearance=\"primary\">Primary</Button>\n      </div>\n    ),\n  };\n\n  return (\n    <div className=\"w-100 p-6 bg-secondary-lightest\">\n      <PageHeader {...options} />\n    </div>\n  );\n}"
      },
      "__id": "components-pageheader-level-0-variants-with-tabs--with-tabs",
      "args": {},
      "argTypes": {
        "title": {
          "name": "title",
          "description": "Page title",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "navigation": {
          "name": "navigation",
          "description": "`Navigation` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "stepper": {
          "name": "stepper",
          "description": "`Stepper` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "actions": {
          "name": "actions",
          "description": "Actions composed of `Button` and meta data",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "tabs": {
          "name": "tabs",
          "description": "`Tab` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "breadcrumbs": {
          "name": "breadcrumbs",
          "description": "`Breadcrumbs` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "badge": {
          "name": "badge",
          "description": "`Badge` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "status": {
          "name": "status",
          "description": "`Status` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "meta": {
          "name": "meta",
          "description": "Meta data composed of `Text`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "navigationPosition": {
          "name": "navigationPosition",
          "description": "Page header layout type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "bottom",
              "center"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"center\""
            },
            "defaultValue": {
              "summary": "\"center\""
            }
          }
        },
        "separator": {
          "name": "separator",
          "description": "provides a border at bottom",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-pageheader-level-0-with-filter--level-0-with-filter": {
    "id": "components-pageheader-level-0-with-filter--level-0-with-filter",
    "kind": "Components/PageHeader/Level 0 With Filter",
    "name": "Level 0 With Filter",
    "story": "Level 0 With Filter",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const tabs = [\n    {\n      count: 4,\n      label: 'Current',\n    },\n    {\n      count: 4,\n      label: 'Invited',\n    },\n    {\n      count: 4,\n      label: 'Inactive',\n    },\n  ];\n\n  const [activeIndex, setActiveIndex] = React.useState(0);\n\n  const tab = <Tabs tabs={tabs} activeIndex={activeIndex} onTabChange={setActiveIndex} />;\n\n  const actions = (\n    <div className=\"d-flex justify-content-end align-items-center\">\n      <Button icon=\"get_app\" className=\"mr-4\">\n        Download Records\n      </Button>\n      <Button appearance=\"primary\">Invite users</Button>\n    </div>\n  );\n\n  return (\n    <div className=\"w-100 p-6 bg-secondary-lightest\">\n      <PageHeader title=\"Users\" separator={true} tabs={tab} actions={actions} />\n    </div>\n  );\n}"
      },
      "__id": "components-pageheader-level-0-with-filter--level-0-with-filter",
      "args": {},
      "argTypes": {
        "title": {
          "name": "title",
          "description": "Page title",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "navigation": {
          "name": "navigation",
          "description": "`Navigation` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "stepper": {
          "name": "stepper",
          "description": "`Stepper` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "actions": {
          "name": "actions",
          "description": "Actions composed of `Button` and meta data",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "tabs": {
          "name": "tabs",
          "description": "`Tab` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "breadcrumbs": {
          "name": "breadcrumbs",
          "description": "`Breadcrumbs` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "badge": {
          "name": "badge",
          "description": "`Badge` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "status": {
          "name": "status",
          "description": "`Status` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "meta": {
          "name": "meta",
          "description": "Meta data composed of `Text`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "navigationPosition": {
          "name": "navigationPosition",
          "description": "Page header layout type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "bottom",
              "center"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"center\""
            },
            "defaultValue": {
              "summary": "\"center\""
            }
          }
        },
        "separator": {
          "name": "separator",
          "description": "provides a border at bottom",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-pageheader-level-0-with-navigation--level-0-with-navigation": {
    "id": "components-pageheader-level-0-with-navigation--level-0-with-navigation",
    "kind": "Components/PageHeader/Level 0 With Navigation",
    "name": "Level 0 With Navigation",
    "story": "Level 0 With Navigation",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const navigationData = [\n    {\n      name: 'menu_1',\n      label: 'Virtual Visits',\n    },\n    {\n      name: 'menu_2',\n      label: 'Assesments',\n    },\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'menu_1',\n  });\n\n  const onClickHandler = (menu: Menu) => {\n    setActive(menu);\n  };\n\n  const navigation = <Navigation menus={navigationData} onClick={onClickHandler} active={active} />;\n  const actions = (\n    <div className=\"d-flex justify-content-end align-items-center\">\n      <Button className=\"mr-4\">Reorganize</Button>\n      <Button icon=\"get_app\">Export to PDF</Button>\n    </div>\n  );\n\n  return (\n    <div className=\"w-100 p-6 bg-secondary-lightest\">\n      <PageHeader title=\"Dashboard\" separator={true} navigation={navigation} actions={actions} />\n    </div>\n  );\n}"
      },
      "__id": "components-pageheader-level-0-with-navigation--level-0-with-navigation",
      "args": {},
      "argTypes": {
        "title": {
          "name": "title",
          "description": "Page title",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "navigation": {
          "name": "navigation",
          "description": "`Navigation` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "stepper": {
          "name": "stepper",
          "description": "`Stepper` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "actions": {
          "name": "actions",
          "description": "Actions composed of `Button` and meta data",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "tabs": {
          "name": "tabs",
          "description": "`Tab` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "breadcrumbs": {
          "name": "breadcrumbs",
          "description": "`Breadcrumbs` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "badge": {
          "name": "badge",
          "description": "`Badge` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "status": {
          "name": "status",
          "description": "`Status` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "meta": {
          "name": "meta",
          "description": "Meta data composed of `Text`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "navigationPosition": {
          "name": "navigationPosition",
          "description": "Page header layout type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "bottom",
              "center"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"center\""
            },
            "defaultValue": {
              "summary": "\"center\""
            }
          }
        },
        "separator": {
          "name": "separator",
          "description": "provides a border at bottom",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-pageheader-level-1-variants-with-navigation--with-navigation": {
    "id": "components-pageheader-level-1-variants-with-navigation--with-navigation",
    "kind": "Components/PageHeader/Level 1/Variants/With Navigation",
    "name": "With Navigation",
    "story": "With Navigation",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const navigationPosition = select('navigationPosition', ['center', 'bottom'], 'center');\n  const separator = boolean('separator', true);\n  const title = text('title', 'Page title');\n\n  const navigationData = [\n    {\n      name: 'menu_1',\n      label: 'Menu 1',\n      icon: 'event',\n    },\n    {\n      name: 'menu_2',\n      label: 'Menu 2',\n    },\n    {\n      name: 'menu_3',\n      label: 'Menu 3',\n      disabled: true,\n    },\n  ];\n\n  const breadcrumbData = [\n    {\n      label: 'Level 0',\n      link: '/level0',\n    },\n    {\n      label: 'Level 1',\n      link: '/level1',\n    },\n  ];\n\n  const options = {\n    navigationPosition,\n    title,\n    separator,\n    navigation: (\n      <Navigation\n        menus={navigationData}\n        onClick={action('menu-clicked')}\n        active={{ name: 'menu_1' }}\n        align={navigationPosition === 'bottom' ? 'left' : 'center'}\n      />\n    ),\n    actions: (\n      <div className=\"d-flex justify-content-end align-items-center\">\n        <Button appearance=\"primary\">Primary</Button>\n      </div>\n    ),\n    breadcrumbs: <Breadcrumbs list={breadcrumbData} onClick={(link) => action(`on-click: ${link}`)} />,\n    badge: <Badge appearance=\"secondary\">Badge</Badge>,\n    status: <StatusHint appearance=\"alert\">Alert</StatusHint>,\n    meta: <MetaList list={[{ label: 'Meta data' }]} seperator={true} />,\n  };\n  return (\n    <div className=\"w-100 p-6 bg-secondary-lightest\">\n      <PageHeader {...options} />\n    </div>\n  );\n}"
      },
      "__id": "components-pageheader-level-1-variants-with-navigation--with-navigation",
      "args": {},
      "argTypes": {
        "title": {
          "name": "title",
          "description": "Page title",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "navigation": {
          "name": "navigation",
          "description": "`Navigation` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "stepper": {
          "name": "stepper",
          "description": "`Stepper` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "actions": {
          "name": "actions",
          "description": "Actions composed of `Button` and meta data",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "tabs": {
          "name": "tabs",
          "description": "`Tab` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "breadcrumbs": {
          "name": "breadcrumbs",
          "description": "`Breadcrumbs` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "badge": {
          "name": "badge",
          "description": "`Badge` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "status": {
          "name": "status",
          "description": "`Status` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "meta": {
          "name": "meta",
          "description": "Meta data composed of `Text`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "navigationPosition": {
          "name": "navigationPosition",
          "description": "Page header layout type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "bottom",
              "center"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"center\""
            },
            "defaultValue": {
              "summary": "\"center\""
            }
          }
        },
        "separator": {
          "name": "separator",
          "description": "provides a border at bottom",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-pageheader-level-1-variants-with-stepper--with-stepper": {
    "id": "components-pageheader-level-1-variants-with-stepper--with-stepper",
    "kind": "Components/PageHeader/Level 1/Variants/With Stepper",
    "name": "With Stepper",
    "story": "With Stepper",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const navigationPosition = select('navigationPosition', ['center', 'bottom'], 'center');\n  const separator = boolean('separator', true);\n  const title = text('title', 'Page title');\n\n  const stepperData = [\n    {\n      value: 'step_1',\n      label: 'Step 1',\n    },\n    {\n      value: 'step_2',\n      label: 'Step 2',\n    },\n    {\n      value: 'step_3',\n      label: 'Step 3',\n    },\n  ];\n\n  const breadcrumbData = [\n    {\n      label: 'Level 0',\n      link: '/level0',\n    },\n    {\n      label: 'Level 1',\n      link: '/level1',\n    },\n  ];\n\n  const [active, setActive] = React.useState(0);\n  const [completed, setCompleted] = React.useState(-1);\n\n  const onChangeHandler = (activeStep: number) => {\n    setActive(activeStep);\n  };\n\n  const onClickHandler = () => {\n    if (active > completed) setCompleted(active);\n    active > completed ? setActive(active + 1) : setActive(completed + 1);\n  };\n\n  const options = {\n    navigationPosition,\n    title,\n    separator,\n    stepper: <Stepper steps={stepperData} onChange={onChangeHandler} active={active} completed={completed} />,\n    actions: (\n      <div className=\"d-flex justify-content-end align-items-center\">\n        <Button appearance=\"primary\" onClick={onClickHandler}>\n          Next\n        </Button>\n      </div>\n    ),\n    breadcrumbs: <Breadcrumbs list={breadcrumbData} onClick={(link) => action(`on-click: ${link}`)} />,\n    badge: <Badge appearance=\"secondary\">Badge</Badge>,\n    status: <StatusHint appearance=\"alert\">Alert</StatusHint>,\n    meta: <MetaList list={[{ label: 'Meta data' }]} seperator={true} />,\n  };\n\n  return (\n    <div className=\"w-100 p-6 bg-secondary-lightest\">\n      <PageHeader {...options} />\n    </div>\n  );\n}"
      },
      "__id": "components-pageheader-level-1-variants-with-stepper--with-stepper",
      "args": {},
      "argTypes": {
        "title": {
          "name": "title",
          "description": "Page title",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "navigation": {
          "name": "navigation",
          "description": "`Navigation` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "stepper": {
          "name": "stepper",
          "description": "`Stepper` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "actions": {
          "name": "actions",
          "description": "Actions composed of `Button` and meta data",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "tabs": {
          "name": "tabs",
          "description": "`Tab` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "breadcrumbs": {
          "name": "breadcrumbs",
          "description": "`Breadcrumbs` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "badge": {
          "name": "badge",
          "description": "`Badge` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "status": {
          "name": "status",
          "description": "`Status` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "meta": {
          "name": "meta",
          "description": "Meta data composed of `Text`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "navigationPosition": {
          "name": "navigationPosition",
          "description": "Page header layout type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "bottom",
              "center"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"center\""
            },
            "defaultValue": {
              "summary": "\"center\""
            }
          }
        },
        "separator": {
          "name": "separator",
          "description": "provides a border at bottom",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-pageheader-level-1-variants-with-tabs--with-tabs": {
    "id": "components-pageheader-level-1-variants-with-tabs--with-tabs",
    "kind": "Components/PageHeader/Level 1/Variants/With Tabs",
    "name": "With Tabs",
    "story": "With Tabs",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const active = number('active', 1);\n  const separator = boolean('separator', true);\n  const title = text('title', 'Page title');\n\n  const onTabChangeHandler = (tabIndex: number) => {\n    updateKnob('active', tabIndex);\n    return action(`tab-change: ${tabIndex}`)();\n  };\n\n  const breadcrumbData = [\n    {\n      label: 'Level 0',\n      link: '/level0',\n    },\n    {\n      label: 'Level 1',\n      link: '/level1',\n    },\n  ];\n\n  const options = {\n    title,\n    separator,\n    tabs: (\n      <TabsWrapper active={active} onTabChange={onTabChangeHandler}>\n        <Tab\n          label={\n            <>\n              <div className=\"Tab-count\">\n                <Badge appearance=\"secondary\">2</Badge>\n              </div>\n              <Text appearance={active !== 0 ? 'subtle' : undefined}>Tab 1</Text>\n            </>\n          }\n        >\n          {null}\n        </Tab>\n        <Tab\n          label={\n            <>\n              <div className=\"Tab-count\">\n                <Badge appearance=\"secondary\">12</Badge>\n              </div>\n              <Text appearance={active !== 1 ? 'subtle' : undefined}>Tab 2</Text>\n            </>\n          }\n        >\n          {null}\n        </Tab>\n        <Tab\n          label={\n            <>\n              <div className=\"Tab-count\">\n                <Badge appearance=\"secondary\">5</Badge>\n              </div>\n              <Text appearance={active !== 2 ? 'subtle' : undefined}>Tab 3</Text>\n            </>\n          }\n        >\n          {null}\n        </Tab>\n      </TabsWrapper>\n    ),\n    actions: (\n      <div className=\"d-flex justify-content-end align-items-center\">\n        <Button appearance=\"primary\">Primary</Button>\n      </div>\n    ),\n    breadcrumbs: <Breadcrumbs list={breadcrumbData} onClick={(link) => action(`on-click: ${link}`)} />,\n    badge: <Badge appearance=\"secondary\">Badge</Badge>,\n    status: <StatusHint appearance=\"alert\">Alert</StatusHint>,\n    meta: <MetaList list={[{ label: 'Meta data' }]} seperator={true} />,\n  };\n  return (\n    <div className=\"w-100 p-6 bg-secondary-lightest\">\n      <PageHeader {...options} />\n    </div>\n  );\n}"
      },
      "__id": "components-pageheader-level-1-variants-with-tabs--with-tabs",
      "args": {},
      "argTypes": {
        "title": {
          "name": "title",
          "description": "Page title",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "navigation": {
          "name": "navigation",
          "description": "`Navigation` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "stepper": {
          "name": "stepper",
          "description": "`Stepper` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "actions": {
          "name": "actions",
          "description": "Actions composed of `Button` and meta data",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "tabs": {
          "name": "tabs",
          "description": "`Tab` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "breadcrumbs": {
          "name": "breadcrumbs",
          "description": "`Breadcrumbs` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "badge": {
          "name": "badge",
          "description": "`Badge` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "status": {
          "name": "status",
          "description": "`Status` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "meta": {
          "name": "meta",
          "description": "Meta data composed of `Text`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "navigationPosition": {
          "name": "navigationPosition",
          "description": "Page header layout type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "bottom",
              "center"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"center\""
            },
            "defaultValue": {
              "summary": "\"center\""
            }
          }
        },
        "separator": {
          "name": "separator",
          "description": "provides a border at bottom",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-pageheader-level-1-with-filter--level-1-with-filter": {
    "id": "components-pageheader-level-1-with-filter--level-1-with-filter",
    "kind": "Components/PageHeader/Level 1 With Filter",
    "name": "Level 1 With Filter",
    "story": "Level 1 With Filter",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const tabs = [\n    {\n      count: 32,\n      label: 'New',\n    },\n    {\n      count: 4,\n      label: 'Invalid',\n    },\n    {\n      count: 2,\n      label: 'Duplicate',\n    },\n  ];\n\n  const [activeIndex, setActiveIndex] = React.useState(0);\n\n  const tab = <Tabs tabs={tabs} activeIndex={activeIndex} onTabChange={setActiveIndex} />;\n\n  const breadcrumbs = (\n    <Breadcrumbs\n      list={[\n        {\n          label: 'Senders',\n          link: '/Senders',\n        },\n      ]}\n      onClick={(link) => action(`on-click: ${link}`)}\n    />\n  );\n\n  return (\n    <div className=\"w-100 p-6 bg-secondary-lightest\">\n      <PageHeader title=\"Sender creation report\" separator={true} tabs={tab} breadcrumbs={breadcrumbs} />\n    </div>\n  );\n}"
      },
      "__id": "components-pageheader-level-1-with-filter--level-1-with-filter",
      "args": {},
      "argTypes": {
        "title": {
          "name": "title",
          "description": "Page title",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "navigation": {
          "name": "navigation",
          "description": "`Navigation` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "stepper": {
          "name": "stepper",
          "description": "`Stepper` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "actions": {
          "name": "actions",
          "description": "Actions composed of `Button` and meta data",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "tabs": {
          "name": "tabs",
          "description": "`Tab` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "breadcrumbs": {
          "name": "breadcrumbs",
          "description": "`Breadcrumbs` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "badge": {
          "name": "badge",
          "description": "`Badge` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "status": {
          "name": "status",
          "description": "`Status` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "meta": {
          "name": "meta",
          "description": "Meta data composed of `Text`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "navigationPosition": {
          "name": "navigationPosition",
          "description": "Page header layout type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "bottom",
              "center"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"center\""
            },
            "defaultValue": {
              "summary": "\"center\""
            }
          }
        },
        "separator": {
          "name": "separator",
          "description": "provides a border at bottom",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-pageheader-level-1-with-navigation--level-1-with-navigation": {
    "id": "components-pageheader-level-1-with-navigation--level-1-with-navigation",
    "kind": "Components/PageHeader/Level 1 With Navigation",
    "name": "Level 1 With Navigation",
    "story": "Level 1 With Navigation",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const navigationData = [\n    {\n      name: 'menu_1',\n      label: 'Perormance',\n    },\n    {\n      name: 'menu_2',\n      label: 'Recipients',\n    },\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'menu_1',\n  });\n\n  const onClickHandler = (menu: Menu) => {\n    setActive(menu);\n  };\n\n  const navigation = <Navigation menus={navigationData} onClick={onClickHandler} active={active} />;\n  const actions = <div className=\"d-flex justify-content-end align-items-center\" />;\n  const breadcrumbs = (\n    <Breadcrumbs\n      list={[\n        {\n          label: 'Outreach',\n          link: '/Outreach',\n        },\n      ]}\n      onClick={(link) => action(`on-click: ${link}`)}\n    />\n  );\n  const badge = (\n    <Badge subtle={true} appearance=\"success\">\n      Sent\n    </Badge>\n  );\n  const meta = <MetaList list={[{ label: 'Text' }, { label: 'Email' }]} />;\n  return (\n    <div className=\"w-100 p-5 bg-secondary-lightest\">\n      <PageHeader\n        title=\"Covid-19\"\n        separator={true}\n        navigationPosition=\"center\"\n        navigation={navigation}\n        actions={actions}\n        breadcrumbs={breadcrumbs}\n        badge={badge}\n        status={status}\n        meta={meta}\n      />\n    </div>\n  );\n}"
      },
      "__id": "components-pageheader-level-1-with-navigation--level-1-with-navigation",
      "args": {},
      "argTypes": {
        "title": {
          "name": "title",
          "description": "Page title",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "navigation": {
          "name": "navigation",
          "description": "`Navigation` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "stepper": {
          "name": "stepper",
          "description": "`Stepper` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "actions": {
          "name": "actions",
          "description": "Actions composed of `Button` and meta data",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "tabs": {
          "name": "tabs",
          "description": "`Tab` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "breadcrumbs": {
          "name": "breadcrumbs",
          "description": "`Breadcrumbs` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "badge": {
          "name": "badge",
          "description": "`Badge` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "status": {
          "name": "status",
          "description": "`Status` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "meta": {
          "name": "meta",
          "description": "Meta data composed of `Text`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "navigationPosition": {
          "name": "navigationPosition",
          "description": "Page header layout type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "bottom",
              "center"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"center\""
            },
            "defaultValue": {
              "summary": "\"center\""
            }
          }
        },
        "separator": {
          "name": "separator",
          "description": "provides a border at bottom",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-pageheader-level-1-with-stepper--level-1-with-stepper": {
    "id": "components-pageheader-level-1-with-stepper--level-1-with-stepper",
    "kind": "Components/PageHeader/Level 1 With Stepper",
    "name": "Level 1 With Stepper",
    "story": "Level 1 With Stepper",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const stepperData = [\n    {\n      value: 'step_1',\n      label: 'Recipients',\n    },\n    {\n      value: 'step_2',\n      label: 'Message',\n    },\n    {\n      value: 'step_3',\n      label: 'Schedule',\n    },\n  ];\n\n  const options = [\n    {\n      label: 'Option 1',\n      value: 'Option 1',\n    },\n    {\n      label: 'Option 2',\n      value: 'Option 2',\n    },\n    {\n      label: 'Option 3',\n      value: 'Option 3',\n    },\n  ];\n\n  const [active, setActive] = React.useState(0);\n  const [completed, setCompleted] = React.useState(-1);\n\n  const onChangeHandler = (activeStep: number) => {\n    setActive(activeStep);\n  };\n\n  const onClickHandler = () => {\n    if (active > completed) setCompleted(active);\n    active > completed ? setActive(active + 1) : setActive(completed + 1);\n  };\n\n  const stepper = <Stepper steps={stepperData} onChange={onChangeHandler} active={active} completed={completed} />;\n  const actions = (\n    <div className=\"d-flex justify-content-end align-items-center\">\n      <Text className=\"mr-4\">few minutes ago</Text>\n      <Avatar className=\"mr-4\" firstName=\"John\" lastName=\"Doe\" appearance=\"accent2\" />\n      <div className=\"mr-4\">\n        <Dropdown menu={true} icon=\"more_horiz\" options={options} />\n      </div>\n      <Button className=\"mr-4\">Finish Later</Button>\n      <Button className=\"mr-4\" appearance=\"primary\" onClick={onClickHandler}>\n        Next\n      </Button>\n    </div>\n  );\n  const breadcrumbs = (\n    <Breadcrumbs\n      list={[\n        {\n          label: 'Campaigns',\n          link: '/Campaigns',\n        },\n      ]}\n      onClick={(link) => action(`on-click: ${link}`)}\n    />\n  );\n  const badge = <Badge appearance=\"secondary\">Message</Badge>;\n  const meta = <MetaList list={[{ label: 'Draft' }]} seperator={true} />;\n\n  return (\n    <div className=\"w-100 p-6 bg-secondary-lightest\">\n      <PageHeader\n        title=\"Annual Wellness Visit\"\n        separator={true}\n        navigationPosition=\"center\"\n        stepper={stepper}\n        actions={actions}\n        breadcrumbs={breadcrumbs}\n        badge={badge}\n        meta={meta}\n      />\n    </div>\n  );\n}"
      },
      "__id": "components-pageheader-level-1-with-stepper--level-1-with-stepper",
      "args": {},
      "argTypes": {
        "title": {
          "name": "title",
          "description": "Page title",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "navigation": {
          "name": "navigation",
          "description": "`Navigation` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "stepper": {
          "name": "stepper",
          "description": "`Stepper` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "actions": {
          "name": "actions",
          "description": "Actions composed of `Button` and meta data",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "tabs": {
          "name": "tabs",
          "description": "`Tab` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "breadcrumbs": {
          "name": "breadcrumbs",
          "description": "`Breadcrumbs` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "badge": {
          "name": "badge",
          "description": "`Badge` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "status": {
          "name": "status",
          "description": "`Status` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "meta": {
          "name": "meta",
          "description": "Meta data composed of `Text`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "navigationPosition": {
          "name": "navigationPosition",
          "description": "Page header layout type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "bottom",
              "center"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"center\""
            },
            "defaultValue": {
              "summary": "\"center\""
            }
          }
        },
        "separator": {
          "name": "separator",
          "description": "provides a border at bottom",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-pageheader-level-2-and-beyond--level-2-and-beyond": {
    "id": "components-pageheader-level-2-and-beyond--level-2-and-beyond",
    "kind": "Components/PageHeader/Level 2 And Beyond",
    "name": "Level 2 And Beyond",
    "story": "Level 2 And Beyond",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const stepperData = [\n    {\n      value: 'Upload',\n      label: 'Upload',\n    },\n    {\n      value: 'configure',\n      label: 'configure',\n    },\n  ];\n\n  const breadcrumbData = [\n    {\n      label: 'Care Management',\n      link: '/Care Management',\n    },\n    {\n      label: 'Care Potential',\n      link: '/Care Potential',\n    },\n  ];\n\n  const [active, setActive] = React.useState(0);\n  const [completed, setCompleted] = React.useState(-1);\n\n  const onChangeHandler = (activeStep: number) => {\n    setActive(activeStep);\n  };\n\n  const onClickHandler = () => {\n    if (active > completed) setCompleted(active);\n    active > completed ? setActive(active + 1) : setActive(completed + 1);\n  };\n  const options = [\n    {\n      label: 'Option 1',\n      value: 'Option 1',\n    },\n    {\n      label: 'Option 2',\n      value: 'Option 2',\n    },\n    {\n      label: 'Option 3',\n      value: 'Option 3',\n    },\n  ];\n\n  const stepper = <Stepper steps={stepperData} onChange={onChangeHandler} active={active} completed={completed} />;\n  const actions = (\n    <div className=\"d-flex justify-content-end align-items-center\">\n      <div className=\"mr-4\">\n        <Dropdown menu={true} icon=\"more_horiz\" options={options} />\n      </div>\n      <Button className=\"mr-4\">Cancel</Button>\n      <Button className=\"mr-4\" appearance=\"primary\" onClick={onClickHandler}>\n        Next\n      </Button>\n    </div>\n  );\n  const breadcrumbs = <Breadcrumbs list={breadcrumbData} onClick={(link) => action(`on-click: ${link}`)} />;\n\n  return (\n    <div className=\"w-100 p-6 bg-secondary-lightest\">\n      <PageHeader\n        title=\"Upload\"\n        navigationPosition=\"center\"\n        separator={false}\n        stepper={stepper}\n        actions={actions}\n        breadcrumbs={breadcrumbs}\n      />\n    </div>\n  );\n}"
      },
      "__id": "components-pageheader-level-2-and-beyond--level-2-and-beyond",
      "args": {},
      "argTypes": {
        "title": {
          "name": "title",
          "description": "Page title",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "navigation": {
          "name": "navigation",
          "description": "`Navigation` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "stepper": {
          "name": "stepper",
          "description": "`Stepper` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "actions": {
          "name": "actions",
          "description": "Actions composed of `Button` and meta data",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "tabs": {
          "name": "tabs",
          "description": "`Tab` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "breadcrumbs": {
          "name": "breadcrumbs",
          "description": "`Breadcrumbs` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "badge": {
          "name": "badge",
          "description": "`Badge` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "status": {
          "name": "status",
          "description": "`Status` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "meta": {
          "name": "meta",
          "description": "Meta data composed of `Text`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "navigationPosition": {
          "name": "navigationPosition",
          "description": "Page header layout type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "bottom",
              "center"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"center\""
            },
            "defaultValue": {
              "summary": "\"center\""
            }
          }
        },
        "separator": {
          "name": "separator",
          "description": "provides a border at bottom",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-pageheader-responsiveness--responsiveness": {
    "id": "components-pageheader-responsiveness--responsiveness",
    "kind": "Components/PageHeader/Responsiveness",
    "name": "Responsiveness",
    "story": "Responsiveness",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const navigationData = [\n    {\n      name: 'menu_1',\n      label: 'Interventions',\n    },\n    {\n      name: 'menu_2',\n      label: 'No Linked Activites',\n    },\n  ];\n\n  const list = [\n    {\n      firstName: 'John',\n      lastName: 'Doe',\n      appearance: 'accent2',\n    },\n    {\n      firstName: 'Steven',\n      lastName: 'Packton',\n      appearance: 'accent3',\n    },\n  ];\n\n  const options = [\n    {\n      icon: 'print',\n      label: 'Edit',\n      value: 'Edit',\n    },\n    {\n      icon: 'assignment_turned_in',\n      label: 'Complete',\n      value: 'Complete',\n    },\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'menu_1',\n  });\n\n  const onClickHandler = (menu: Menu) => {\n    setActive(menu);\n  };\n\n  const actions = (\n    <div className=\"d-flex justify-content-end align-items-center\">\n      <Text className=\"mr-4\">Updated 1 day ago</Text>\n      <AvatarGroup className=\"mr-5\" list={list} />\n      <div className=\"mr-4\">\n        <Dropdown menu={true} optionType=\"WITH_ICON\" icon=\"more_horiz\" options={options} align=\"left\" />\n      </div>\n    </div>\n  );\n\n  const breadcrumbs = (\n    <Breadcrumbs\n      list={[\n        {\n          label: 'Care potential',\n          link: '/Care potential',\n        },\n      ]}\n      onClick={(link) => action(`on-click: ${link}`)}\n    />\n  );\n\n  const status = <StatusHint appearance=\"info\">Ongoing</StatusHint>;\n\n  const navigation = <Navigation menus={navigationData} onClick={onClickHandler} active={active} />;\n\n  return (\n    <div className=\"w-100 p-6 bg-secondary-lightest\">\n      <PageHeader\n        navigationPosition=\"bottom\"\n        title=\"Pac Follow-Up Protocol\"\n        separator={true}\n        navigation={navigation}\n        actions={actions}\n        breadcrumbs={breadcrumbs}\n        status={status}\n      />\n    </div>\n  );\n}"
      },
      "__id": "components-pageheader-responsiveness--responsiveness",
      "args": {},
      "argTypes": {
        "title": {
          "name": "title",
          "description": "Page title",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "navigation": {
          "name": "navigation",
          "description": "`Navigation` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "stepper": {
          "name": "stepper",
          "description": "`Stepper` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "actions": {
          "name": "actions",
          "description": "Actions composed of `Button` and meta data",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "tabs": {
          "name": "tabs",
          "description": "`Tab` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "breadcrumbs": {
          "name": "breadcrumbs",
          "description": "`Breadcrumbs` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "badge": {
          "name": "badge",
          "description": "`Badge` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "status": {
          "name": "status",
          "description": "`Status` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "meta": {
          "name": "meta",
          "description": "Meta data composed of `Text`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "navigationPosition": {
          "name": "navigationPosition",
          "description": "Page header layout type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "bottom",
              "center"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"center\""
            },
            "defaultValue": {
              "summary": "\"center\""
            }
          }
        },
        "separator": {
          "name": "separator",
          "description": "provides a border at bottom",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-pagination-all--all": {
    "id": "components-pagination-all--all",
    "kind": "Components/Pagination/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const paginationType = select('type', ['basic', 'jump'], undefined);\n\n  const page = number('page', 1);\n\n  const totalPages = number('totalPages', 50);\n\n  return (\n    <Pagination\n      type={paginationType}\n      page={page}\n      totalPages={totalPages}\n      onPageChange={(pageNo) => action(`No-change-action: ${pageNo}`)()}\n    />\n  );\n}"
      },
      "__id": "components-pagination-all--all",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "`Pagination` component type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "basic",
              "jump"
            ]
          },
          "table": {
            "type": {
              "summary": "\"basic\" | \"jump\""
            },
            "defaultValue": {
              "summary": "\"basic\""
            }
          }
        },
        "totalPages": {
          "name": "totalPages",
          "description": "Total number of pages",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "page": {
          "name": "page",
          "description": "Current page",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "onPageChange": {
          "name": "onPageChange",
          "description": "Callback when page is changed",
          "type": {
            "required": true,
            "name": "function",
            "value": "(page: number) => void"
          },
          "table": {
            "type": {
              "summary": "(page: number) => void"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-pagination-basic-pagination--basic-pagination": {
    "id": "components-pagination-basic-pagination--basic-pagination",
    "kind": "Components/Pagination/Basic Pagination",
    "name": "Basic Pagination",
    "story": "Basic Pagination",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <Pagination type=\"basic\" page={1} totalPages={50} onPageChange={(pageNo) => action(`Page changed: ${pageNo}`)()} />\n  );\n}"
      },
      "__id": "components-pagination-basic-pagination--basic-pagination",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "`Pagination` component type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "basic",
              "jump"
            ]
          },
          "table": {
            "type": {
              "summary": "\"basic\" | \"jump\""
            },
            "defaultValue": {
              "summary": "\"basic\""
            }
          }
        },
        "totalPages": {
          "name": "totalPages",
          "description": "Total number of pages",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "page": {
          "name": "page",
          "description": "Current page",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "onPageChange": {
          "name": "onPageChange",
          "description": "Callback when page is changed",
          "type": {
            "required": true,
            "name": "function",
            "value": "(page: number) => void"
          },
          "table": {
            "type": {
              "summary": "(page: number) => void"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-pagination-pagination-with-jump--pagination-with-jump": {
    "id": "components-pagination-pagination-with-jump--pagination-with-jump",
    "kind": "Components/Pagination/Pagination With Jump",
    "name": "Pagination With Jump",
    "story": "Pagination With Jump",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const innerStyle = {\n    display: 'flex',\n    'flex-direction': 'column',\n    'align-items': 'center',\n  };\n\n  return (\n    <div className=\"d-flex\">\n      <div style={innerStyle}>\n        <Pagination\n          type=\"jump\"\n          page={1}\n          totalPages={50}\n          onPageChange={(pageNo) => action(`Page changed: ${pageNo}`)()}\n        />\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-pagination-pagination-with-jump--pagination-with-jump",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "`Pagination` component type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "basic",
              "jump"
            ]
          },
          "table": {
            "type": {
              "summary": "\"basic\" | \"jump\""
            },
            "defaultValue": {
              "summary": "\"basic\""
            }
          }
        },
        "totalPages": {
          "name": "totalPages",
          "description": "Total number of pages",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "page": {
          "name": "page",
          "description": "Current page",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "onPageChange": {
          "name": "onPageChange",
          "description": "Callback when page is changed",
          "type": {
            "required": true,
            "name": "function",
            "value": "(page: number) => void"
          },
          "table": {
            "type": {
              "summary": "(page: number) => void"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-pagination-variants-type--type": {
    "id": "components-pagination-variants-type--type",
    "kind": "Components/Pagination/Variants/Type",
    "name": "Type",
    "story": "Type",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const paginationTypes: PaginationType[] = ['basic', 'jump'];\n\n  const page = number('page', 1);\n\n  const totalPages = number('totalPages', 50);\n\n  const innerStyle = {\n    display: 'flex',\n    'flex-direction': 'column',\n    'align-items': 'center',\n  };\n\n  return (\n    <div className=\"d-flex\">\n      {paginationTypes.map((displayType, ind) => {\n        return (\n          <div key={ind} style={innerStyle}>\n            <Text weight=\"strong\">{displayType}</Text>\n            <br />\n            <Pagination\n              type={displayType}\n              page={page}\n              totalPages={totalPages}\n              onPageChange={(pageNo) => action(`No-change-action: ${pageNo}`)()}\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-pagination-variants-type--type",
      "args": {},
      "argTypes": {
        "type": {
          "name": "type",
          "description": "`Pagination` component type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "basic",
              "jump"
            ]
          },
          "table": {
            "type": {
              "summary": "\"basic\" | \"jump\""
            },
            "defaultValue": {
              "summary": "\"basic\""
            }
          }
        },
        "totalPages": {
          "name": "totalPages",
          "description": "Total number of pages",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "page": {
          "name": "page",
          "description": "Current page",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "onPageChange": {
          "name": "onPageChange",
          "description": "Callback when page is changed",
          "type": {
            "required": true,
            "name": "function",
            "value": "(page: number) => void"
          },
          "table": {
            "type": {
              "summary": "(page: number) => void"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-paragraph-all--all": {
    "id": "components-paragraph-all--all",
    "kind": "Components/Paragraph/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const appearance = optionsKnob(\n    'appearance',\n    { white: 'white', destructive: 'destructive', subtle: 'subtle', disabled: 'disabled' },\n    undefined,\n    {\n      display: 'inline-radio',\n    }\n  );\n  const options = {\n    appearance,\n  };\n\n  return (\n    <div style={{ background: appearance === 'white' ? 'black' : 'transparent' }}>\n      <Paragraph {...options}>\n        Paragraph <b>component</b> have different varients, look for options in knobs tab.\n      </Paragraph>\n    </div>\n  );\n}"
      },
      "__id": "components-paragraph-all--all",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "Text to be rendered",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Paragraph`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "default",
              "disabled",
              "subtle",
              "white",
              "destructive"
            ]
          },
          "table": {
            "type": {
              "summary": "\"default\" | \"disabled\" | \"subtle\" | \"white\" | \"destructive\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-paragraph-variants-appearance--appearance": {
    "id": "components-paragraph-variants-appearance--appearance",
    "kind": "Components/Paragraph/Variants/Appearance",
    "name": "Appearance",
    "story": "Appearance",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const appearances: Appearance[] = ['default', 'white', 'destructive', 'subtle', 'disabled'];\n  return (\n    <div className=\"d-flex\">\n      {appearances.map((appear, ind) => {\n        return (\n          <div key={ind} className=\"mr-6\">\n            <div style={{ background: appear === 'white' ? 'black' : 'transparent' }}>\n              <Paragraph appearance={appear}>Paragraph</Paragraph>\n            </div>\n            <br />\n            <Text weight=\"strong\">{appear.charAt(0).toUpperCase() + appear.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-paragraph-variants-appearance--appearance",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "Text to be rendered",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Paragraph`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "default",
              "disabled",
              "subtle",
              "white",
              "destructive"
            ]
          },
          "table": {
            "type": {
              "summary": "\"default\" | \"disabled\" | \"subtle\" | \"white\" | \"destructive\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-pills-all--all": {
    "id": "components-pills-all--all",
    "kind": "Components/Pills/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const appearance = select(\n    'appearance',\n    ['primary', 'secondary', 'alert', 'warning', 'success', 'accent1', 'accent2', 'accent3', 'accent4'],\n    undefined\n  );\n\n  const subtle = boolean('subtle', false);\n\n  const children = text('children', 'Pill');\n\n  return (\n    <Pills appearance={appearance} subtle={subtle}>\n      {children}\n    </Pills>\n  );\n}"
      },
      "__id": "components-pills-all--all",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Pills`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "primary",
              "secondary",
              "alert",
              "warning",
              "success",
              "accent1",
              "accent2",
              "accent3",
              "accent4"
            ]
          },
          "table": {
            "type": {
              "summary": "\"primary\" | \"secondary\" | \"alert\" | \"warning\" | \"success\" | \"accent1\" | \"accent2\" | \"accent3\" | \"accent4\""
            },
            "defaultValue": {
              "summary": "\"secondary\""
            }
          }
        },
        "subtle": {
          "name": "subtle",
          "description": "Makes `Pills` appearance subtle",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Pills`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-pills-alert--alert": {
    "id": "components-pills-alert--alert",
    "kind": "Components/Pills/Alert",
    "name": "Alert",
    "story": "Alert",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Pills appearance=\"alert\" subtle={false}>\n    {'Pills'}\n  </Pills>\n)"
      },
      "__id": "components-pills-alert--alert",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Pills`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "primary",
              "secondary",
              "alert",
              "warning",
              "success",
              "accent1",
              "accent2",
              "accent3",
              "accent4"
            ]
          },
          "table": {
            "type": {
              "summary": "\"primary\" | \"secondary\" | \"alert\" | \"warning\" | \"success\" | \"accent1\" | \"accent2\" | \"accent3\" | \"accent4\""
            },
            "defaultValue": {
              "summary": "\"secondary\""
            }
          }
        },
        "subtle": {
          "name": "subtle",
          "description": "Makes `Pills` appearance subtle",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Pills`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-pills-defaultpill--defaultpill": {
    "id": "components-pills-defaultpill--defaultpill",
    "kind": "Components/Pills/Defaultpill",
    "name": "Defaultpill",
    "story": "Defaultpill",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Pills appearance=\"secondary\" subtle={false}>\n    {'1'}\n  </Pills>\n)"
      },
      "__id": "components-pills-defaultpill--defaultpill",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Pills`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "primary",
              "secondary",
              "alert",
              "warning",
              "success",
              "accent1",
              "accent2",
              "accent3",
              "accent4"
            ]
          },
          "table": {
            "type": {
              "summary": "\"primary\" | \"secondary\" | \"alert\" | \"warning\" | \"success\" | \"accent1\" | \"accent2\" | \"accent3\" | \"accent4\""
            },
            "defaultValue": {
              "summary": "\"secondary\""
            }
          }
        },
        "subtle": {
          "name": "subtle",
          "description": "Makes `Pills` appearance subtle",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Pills`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-pills-info--info": {
    "id": "components-pills-info--info",
    "kind": "Components/Pills/Info",
    "name": "Info",
    "story": "Info",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Pills appearance=\"primary\" subtle={false}>\n    {'Pills'}\n  </Pills>\n)"
      },
      "__id": "components-pills-info--info",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Pills`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "primary",
              "secondary",
              "alert",
              "warning",
              "success",
              "accent1",
              "accent2",
              "accent3",
              "accent4"
            ]
          },
          "table": {
            "type": {
              "summary": "\"primary\" | \"secondary\" | \"alert\" | \"warning\" | \"success\" | \"accent1\" | \"accent2\" | \"accent3\" | \"accent4\""
            },
            "defaultValue": {
              "summary": "\"secondary\""
            }
          }
        },
        "subtle": {
          "name": "subtle",
          "description": "Makes `Pills` appearance subtle",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Pills`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-pills-subtle-alert--subtle-alert": {
    "id": "components-pills-subtle-alert--subtle-alert",
    "kind": "Components/Pills/Subtle Alert",
    "name": "Subtle Alert",
    "story": "Subtle Alert",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <Pills appearance=\"alert\" subtle={true}>\n      {'Pills'}\n    </Pills>\n  );\n}"
      },
      "__id": "components-pills-subtle-alert--subtle-alert",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Pills`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "primary",
              "secondary",
              "alert",
              "warning",
              "success",
              "accent1",
              "accent2",
              "accent3",
              "accent4"
            ]
          },
          "table": {
            "type": {
              "summary": "\"primary\" | \"secondary\" | \"alert\" | \"warning\" | \"success\" | \"accent1\" | \"accent2\" | \"accent3\" | \"accent4\""
            },
            "defaultValue": {
              "summary": "\"secondary\""
            }
          }
        },
        "subtle": {
          "name": "subtle",
          "description": "Makes `Pills` appearance subtle",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Pills`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-pills-subtle-warning--subtle-warning": {
    "id": "components-pills-subtle-warning--subtle-warning",
    "kind": "Components/Pills/Subtle Warning",
    "name": "Subtle Warning",
    "story": "Subtle Warning",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Pills appearance=\"warning\" subtle={true}>\n    {'Pills'}\n  </Pills>\n)"
      },
      "__id": "components-pills-subtle-warning--subtle-warning",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Pills`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "primary",
              "secondary",
              "alert",
              "warning",
              "success",
              "accent1",
              "accent2",
              "accent3",
              "accent4"
            ]
          },
          "table": {
            "type": {
              "summary": "\"primary\" | \"secondary\" | \"alert\" | \"warning\" | \"success\" | \"accent1\" | \"accent2\" | \"accent3\" | \"accent4\""
            },
            "defaultValue": {
              "summary": "\"secondary\""
            }
          }
        },
        "subtle": {
          "name": "subtle",
          "description": "Makes `Pills` appearance subtle",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Pills`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-pills-variants-appearance--appearance": {
    "id": "components-pills-variants-appearance--appearance",
    "kind": "Components/Pills/Variants/Appearance",
    "name": "Appearance",
    "story": "Appearance",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const subtle = false;\n  const weight = 'strong';\n\n  const children = text('children', 'Pills');\n\n  const appearances: Appearance[] = [\n    'primary',\n    'secondary',\n    'alert',\n    'warning',\n    'success',\n    'accent1',\n    'accent2',\n    'accent3',\n    'accent4',\n  ];\n\n  return (\n    <div className=\"d-flex\">\n      {appearances.map((appear, ind) => {\n        return (\n          <div key={ind} className=\"mr-9\">\n            <Pills appearance={appear} subtle={subtle}>\n              {children}\n            </Pills>\n            <br />\n            <Text weight={weight}>{appear.charAt(0).toUpperCase() + appear.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-pills-variants-appearance--appearance",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Pills`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "primary",
              "secondary",
              "alert",
              "warning",
              "success",
              "accent1",
              "accent2",
              "accent3",
              "accent4"
            ]
          },
          "table": {
            "type": {
              "summary": "\"primary\" | \"secondary\" | \"alert\" | \"warning\" | \"success\" | \"accent1\" | \"accent2\" | \"accent3\" | \"accent4\""
            },
            "defaultValue": {
              "summary": "\"secondary\""
            }
          }
        },
        "subtle": {
          "name": "subtle",
          "description": "Makes `Pills` appearance subtle",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Pills`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-pills-variants-subtle--subtle": {
    "id": "components-pills-variants-subtle--subtle",
    "kind": "Components/Pills/Variants/Subtle",
    "name": "Subtle",
    "story": "Subtle",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const ButtonSubtle = true;\n  const weight = 'strong';\n\n  const children = text('children', 'Pills');\n\n  const appearances: Appearance[] = [\n    'primary',\n    'secondary',\n    'alert',\n    'warning',\n    'success',\n    'accent1',\n    'accent2',\n    'accent3',\n    'accent4',\n  ];\n  return (\n    <div className=\"d-flex\">\n      {appearances.map((appear, ind) => {\n        return (\n          <div key={ind} className=\"mr-9\">\n            <Pills appearance={appear} subtle={ButtonSubtle}>\n              {children}\n            </Pills>\n            <br />\n            <Text weight={weight}>{appear.charAt(0).toUpperCase() + appear.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-pills-variants-subtle--subtle",
      "args": {},
      "argTypes": {
        "appearance": {
          "name": "appearance",
          "description": "Color of the `Pills`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "primary",
              "secondary",
              "alert",
              "warning",
              "success",
              "accent1",
              "accent2",
              "accent3",
              "accent4"
            ]
          },
          "table": {
            "type": {
              "summary": "\"primary\" | \"secondary\" | \"alert\" | \"warning\" | \"success\" | \"accent1\" | \"accent2\" | \"accent3\" | \"accent4\""
            },
            "defaultValue": {
              "summary": "\"secondary\""
            }
          }
        },
        "subtle": {
          "name": "subtle",
          "description": "Makes `Pills` appearance subtle",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Text to be added inside `Pills`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-popover-all--all": {
    "id": "components-popover-all--all",
    "kind": "Components/Popover/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const open = boolean('open', false);\n\n  const position = select(\n    'position',\n    ['top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end', 'left', 'right'],\n    'bottom'\n  );\n\n  const on = select('on', ['click', 'hover'], 'click');\n\n  const appendToBody = boolean('appendToBody', true);\n  const hoverable = boolean('hoverable', true);\n  const closeOnBackdropClick = boolean('closeOnBackdropClick', true);\n  const hideOnReferenceEscape = boolean('hideOnReferenceEscape', true);\n  const dark = boolean('dark', false);\n\n  const onToggle = () => {\n    updateKnob('open', !open);\n  };\n\n  const trigger = <Button appearance=\"basic\">Open Popup</Button>;\n\n  const options: Record<string, any> = {\n    trigger,\n    position,\n    appendToBody,\n    dark,\n    closeOnBackdropClick,\n    hideOnReferenceEscape,\n    on,\n    hoverable,\n    open,\n    onToggle,\n  };\n  if (on === 'hover') delete options.onToggle;\n\n  return (\n    <Popover {...options}>\n      <div style={{ width: 100 }} className=\"mx-6 my-6\">\n        <Text>Popup</Text>\n        <Button className=\"mt-4\" appearance=\"primary\" onClick={action('button clicked inside popover')}>\n          Click\n        </Button>\n      </div>\n    </Popover>\n  );\n}"
      },
      "__id": "components-popover-all--all",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "To be rendered in `Popover` component",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "position": {
          "name": "position",
          "description": "Position to place the `trigger`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "bottom",
              "top",
              "top-start",
              "top-end",
              "bottom-start",
              "bottom-end",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"top\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "\"bottom\""
            }
          }
        },
        "onToggle": {
          "name": "onToggle",
          "description": "Callback after `Popover` is toggled",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "dark": {
          "name": "dark",
          "description": "Changes background of `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "customStyle": {
          "name": "customStyle",
          "description": "Adds custom CSS to `Popover` element\n\n<pre className=\"DocPage-codeBlock\">\nCustomStyle {\n  height?: number | string;\n  width?: number | string;\n  minWidth?: number | string;\n  minHeight?: number | string;\n  maxHeight?: number | string;\n  maxWidth?: number | string;\n}\n</pre>",
          "type": {
            "required": true,
            "name": "other",
            "value": "CustomStyle"
          },
          "table": {
            "type": {
              "summary": "CustomStyle"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "triggerClass": {
          "name": "triggerClass",
          "description": "Class to be added to PopperWrapper trigger",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "hideOnReferenceEscape": {
          "name": "hideOnReferenceEscape",
          "description": "Hides the `Popover` when its reference element is outside of the `Popover` boundaries",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "boundaryElement": {
          "name": "boundaryElement",
          "description": "BoundaryElement for `Popover`",
          "type": {
            "required": true,
            "name": "other",
            "value": "Element | RefObject<HTMLElement>"
          },
          "table": {
            "type": {
              "summary": "Element | RefObject<HTMLElement>"
            },
            "defaultValue": {
              "summary": "object"
            }
          }
        },
        "trigger": {
          "name": "trigger",
          "description": "Element triggering the `Popover`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>"
          },
          "table": {
            "type": {
              "summary": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>"
            },
            "defaultValue": null
          }
        },
        "on": {
          "name": "on",
          "description": "Event triggering the `Popover`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "click",
              "hover"
            ]
          },
          "table": {
            "type": {
              "summary": "\"click\" | \"hover\""
            },
            "defaultValue": {
              "summary": "\"click\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "offset": {
          "name": "offset",
          "description": "Vertical offset from trigger\n\n<pre className=\"DocPage-codeBlock\">\n{\n    small: '2px',\n    medium: '4px',\n    large: '8px'\n}\n</pre>",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"large\""
            }
          }
        },
        "closeOnBackdropClick": {
          "name": "closeOnBackdropClick",
          "description": "Close on Backdrop click",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "closeOnScroll": {
          "name": "closeOnScroll",
          "description": "Close on `boundaryElement` scroll",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "appendToBody": {
          "name": "appendToBody",
          "description": "Appends `trigger` wrapper inside body",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "hoverable": {
          "name": "hoverable",
          "description": "Holds `Popover` on hover\n\n**Use only if you are using `on = 'hover'`**",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-popover-dark-popover--dark-popover": {
    "id": "components-popover-dark-popover--dark-popover",
    "kind": "Components/Popover/Dark Popover",
    "name": "Dark Popover",
    "story": "Dark Popover",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <div className=\"mb-12\">\n    <Popover\n      position=\"bottom\"\n      on=\"click\"\n      trigger={<Button appearance=\"basic\">Open Popup</Button>}\n      dark={true}\n      open={true}\n    >\n      <div style={{ width: 'var(--spacing-7)', height: 'var(--spacing-7)' }} />\n    </Popover>\n  </div>\n)"
      },
      "__id": "components-popover-dark-popover--dark-popover",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "To be rendered in `Popover` component",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "position": {
          "name": "position",
          "description": "Position to place the `trigger`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "bottom",
              "top",
              "top-start",
              "top-end",
              "bottom-start",
              "bottom-end",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"top\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "\"bottom\""
            }
          }
        },
        "onToggle": {
          "name": "onToggle",
          "description": "Callback after `Popover` is toggled",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "dark": {
          "name": "dark",
          "description": "Changes background of `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "customStyle": {
          "name": "customStyle",
          "description": "Adds custom CSS to `Popover` element\n\n<pre className=\"DocPage-codeBlock\">\nCustomStyle {\n  height?: number | string;\n  width?: number | string;\n  minWidth?: number | string;\n  minHeight?: number | string;\n  maxHeight?: number | string;\n  maxWidth?: number | string;\n}\n</pre>",
          "type": {
            "required": true,
            "name": "other",
            "value": "CustomStyle"
          },
          "table": {
            "type": {
              "summary": "CustomStyle"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "triggerClass": {
          "name": "triggerClass",
          "description": "Class to be added to PopperWrapper trigger",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "hideOnReferenceEscape": {
          "name": "hideOnReferenceEscape",
          "description": "Hides the `Popover` when its reference element is outside of the `Popover` boundaries",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "boundaryElement": {
          "name": "boundaryElement",
          "description": "BoundaryElement for `Popover`",
          "type": {
            "required": true,
            "name": "other",
            "value": "Element | RefObject<HTMLElement>"
          },
          "table": {
            "type": {
              "summary": "Element | RefObject<HTMLElement>"
            },
            "defaultValue": {
              "summary": "object"
            }
          }
        },
        "trigger": {
          "name": "trigger",
          "description": "Element triggering the `Popover`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>"
          },
          "table": {
            "type": {
              "summary": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>"
            },
            "defaultValue": null
          }
        },
        "on": {
          "name": "on",
          "description": "Event triggering the `Popover`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "click",
              "hover"
            ]
          },
          "table": {
            "type": {
              "summary": "\"click\" | \"hover\""
            },
            "defaultValue": {
              "summary": "\"click\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "offset": {
          "name": "offset",
          "description": "Vertical offset from trigger\n\n<pre className=\"DocPage-codeBlock\">\n{\n    small: '2px',\n    medium: '4px',\n    large: '8px'\n}\n</pre>",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"large\""
            }
          }
        },
        "closeOnBackdropClick": {
          "name": "closeOnBackdropClick",
          "description": "Close on Backdrop click",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "closeOnScroll": {
          "name": "closeOnScroll",
          "description": "Close on `boundaryElement` scroll",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "appendToBody": {
          "name": "appendToBody",
          "description": "Appends `trigger` wrapper inside body",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "hoverable": {
          "name": "hoverable",
          "description": "Holds `Popover` on hover\n\n**Use only if you are using `on = 'hover'`**",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-popover-light-popover--light-popover": {
    "id": "components-popover-light-popover--light-popover",
    "kind": "Components/Popover/Light Popover",
    "name": "Light Popover",
    "story": "Light Popover",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <div className=\"mb-12\">\n    <Popover position=\"bottom\" on=\"click\" trigger={<Button appearance=\"basic\">Open Popup</Button>} open={true}>\n      <div style={{ width: 'var(--spacing-7)', height: 'var(--spacing-7)' }} />\n    </Popover>\n  </div>\n)"
      },
      "__id": "components-popover-light-popover--light-popover",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "To be rendered in `Popover` component",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "position": {
          "name": "position",
          "description": "Position to place the `trigger`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "bottom",
              "top",
              "top-start",
              "top-end",
              "bottom-start",
              "bottom-end",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"top\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "\"bottom\""
            }
          }
        },
        "onToggle": {
          "name": "onToggle",
          "description": "Callback after `Popover` is toggled",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "dark": {
          "name": "dark",
          "description": "Changes background of `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "customStyle": {
          "name": "customStyle",
          "description": "Adds custom CSS to `Popover` element\n\n<pre className=\"DocPage-codeBlock\">\nCustomStyle {\n  height?: number | string;\n  width?: number | string;\n  minWidth?: number | string;\n  minHeight?: number | string;\n  maxHeight?: number | string;\n  maxWidth?: number | string;\n}\n</pre>",
          "type": {
            "required": true,
            "name": "other",
            "value": "CustomStyle"
          },
          "table": {
            "type": {
              "summary": "CustomStyle"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "triggerClass": {
          "name": "triggerClass",
          "description": "Class to be added to PopperWrapper trigger",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "hideOnReferenceEscape": {
          "name": "hideOnReferenceEscape",
          "description": "Hides the `Popover` when its reference element is outside of the `Popover` boundaries",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "boundaryElement": {
          "name": "boundaryElement",
          "description": "BoundaryElement for `Popover`",
          "type": {
            "required": true,
            "name": "other",
            "value": "Element | RefObject<HTMLElement>"
          },
          "table": {
            "type": {
              "summary": "Element | RefObject<HTMLElement>"
            },
            "defaultValue": {
              "summary": "object"
            }
          }
        },
        "trigger": {
          "name": "trigger",
          "description": "Element triggering the `Popover`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>"
          },
          "table": {
            "type": {
              "summary": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>"
            },
            "defaultValue": null
          }
        },
        "on": {
          "name": "on",
          "description": "Event triggering the `Popover`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "click",
              "hover"
            ]
          },
          "table": {
            "type": {
              "summary": "\"click\" | \"hover\""
            },
            "defaultValue": {
              "summary": "\"click\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "offset": {
          "name": "offset",
          "description": "Vertical offset from trigger\n\n<pre className=\"DocPage-codeBlock\">\n{\n    small: '2px',\n    medium: '4px',\n    large: '8px'\n}\n</pre>",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"large\""
            }
          }
        },
        "closeOnBackdropClick": {
          "name": "closeOnBackdropClick",
          "description": "Close on Backdrop click",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "closeOnScroll": {
          "name": "closeOnScroll",
          "description": "Close on `boundaryElement` scroll",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "appendToBody": {
          "name": "appendToBody",
          "description": "Appends `trigger` wrapper inside body",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "hoverable": {
          "name": "hoverable",
          "description": "Holds `Popover` on hover\n\n**Use only if you are using `on = 'hover'`**",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-popover-popover-with-action--popover-with-action": {
    "id": "components-popover-popover-with-action--popover-with-action",
    "kind": "Components/Popover/Popover With Action",
    "name": "Popover With Action",
    "story": "Popover With Action",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <div className=\"mb-12\">\n    <Popover\n      position=\"bottom-start\"\n      on=\"click\"\n      trigger={<Button appearance=\"basic\">Unpublished Changes</Button>}\n      open={true}\n    >\n      <div style={{ width: 'var(--spacing-9)' }} className=\"mx-6 my-6\">\n        <Text>You have some edits saved in draft state.You can resume editing or discard those changes.</Text>\n        <div className=\"d-flex\">\n          <Button className=\"mt-4\" appearance=\"primary\">\n            Edit Registry\n          </Button>\n          <Button className=\"mt-4 ml-5\" appearance=\"basic\">\n            Discard Changes\n          </Button>\n        </div>\n      </div>\n    </Popover>\n  </div>\n)"
      },
      "__id": "components-popover-popover-with-action--popover-with-action",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "To be rendered in `Popover` component",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "position": {
          "name": "position",
          "description": "Position to place the `trigger`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "bottom",
              "top",
              "top-start",
              "top-end",
              "bottom-start",
              "bottom-end",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"top\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "\"bottom\""
            }
          }
        },
        "onToggle": {
          "name": "onToggle",
          "description": "Callback after `Popover` is toggled",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "dark": {
          "name": "dark",
          "description": "Changes background of `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "customStyle": {
          "name": "customStyle",
          "description": "Adds custom CSS to `Popover` element\n\n<pre className=\"DocPage-codeBlock\">\nCustomStyle {\n  height?: number | string;\n  width?: number | string;\n  minWidth?: number | string;\n  minHeight?: number | string;\n  maxHeight?: number | string;\n  maxWidth?: number | string;\n}\n</pre>",
          "type": {
            "required": true,
            "name": "other",
            "value": "CustomStyle"
          },
          "table": {
            "type": {
              "summary": "CustomStyle"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "triggerClass": {
          "name": "triggerClass",
          "description": "Class to be added to PopperWrapper trigger",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "hideOnReferenceEscape": {
          "name": "hideOnReferenceEscape",
          "description": "Hides the `Popover` when its reference element is outside of the `Popover` boundaries",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "boundaryElement": {
          "name": "boundaryElement",
          "description": "BoundaryElement for `Popover`",
          "type": {
            "required": true,
            "name": "other",
            "value": "Element | RefObject<HTMLElement>"
          },
          "table": {
            "type": {
              "summary": "Element | RefObject<HTMLElement>"
            },
            "defaultValue": {
              "summary": "object"
            }
          }
        },
        "trigger": {
          "name": "trigger",
          "description": "Element triggering the `Popover`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>"
          },
          "table": {
            "type": {
              "summary": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>"
            },
            "defaultValue": null
          }
        },
        "on": {
          "name": "on",
          "description": "Event triggering the `Popover`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "click",
              "hover"
            ]
          },
          "table": {
            "type": {
              "summary": "\"click\" | \"hover\""
            },
            "defaultValue": {
              "summary": "\"click\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "offset": {
          "name": "offset",
          "description": "Vertical offset from trigger\n\n<pre className=\"DocPage-codeBlock\">\n{\n    small: '2px',\n    medium: '4px',\n    large: '8px'\n}\n</pre>",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"large\""
            }
          }
        },
        "closeOnBackdropClick": {
          "name": "closeOnBackdropClick",
          "description": "Close on Backdrop click",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "closeOnScroll": {
          "name": "closeOnScroll",
          "description": "Close on `boundaryElement` scroll",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "appendToBody": {
          "name": "appendToBody",
          "description": "Appends `trigger` wrapper inside body",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "hoverable": {
          "name": "hoverable",
          "description": "Holds `Popover` on hover\n\n**Use only if you are using `on = 'hover'`**",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-popover-popover-with-input--popover-with-input": {
    "id": "components-popover-popover-with-input--popover-with-input",
    "kind": "Components/Popover/Popover With Input",
    "name": "Popover With Input",
    "story": "Popover With Input",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <div className=\"mb-14\">\n    <Popover position=\"bottom-start\" on=\"click\" trigger={<Link>Save as filter view</Link>} open={true}>\n      <div style={{ width: 'var(--spacing-9)', height: 'var(--spacing-8)+var(--spacing-xl)' }} className=\"mx-6 my-6\">\n        <Label required={true} withInput={true}>\n          Name\n        </Label>\n        <Input name=\"input\" required={true} placeholder=\"Name\" />\n        <Label className=\"mt-4\" withInput={true}>\n          Description\n        </Label>\n        <Textarea name=\"Textarea\" placeholder=\"Write a description\" />\n        <div className=\"d-flex justify-content-end\">\n          <Button className=\"mt-5\" appearance=\"primary\">\n            Save Filter\n          </Button>\n        </div>\n      </div>\n    </Popover>\n  </div>\n)"
      },
      "__id": "components-popover-popover-with-input--popover-with-input",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "To be rendered in `Popover` component",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "position": {
          "name": "position",
          "description": "Position to place the `trigger`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "bottom",
              "top",
              "top-start",
              "top-end",
              "bottom-start",
              "bottom-end",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"top\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "\"bottom\""
            }
          }
        },
        "onToggle": {
          "name": "onToggle",
          "description": "Callback after `Popover` is toggled",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "dark": {
          "name": "dark",
          "description": "Changes background of `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "customStyle": {
          "name": "customStyle",
          "description": "Adds custom CSS to `Popover` element\n\n<pre className=\"DocPage-codeBlock\">\nCustomStyle {\n  height?: number | string;\n  width?: number | string;\n  minWidth?: number | string;\n  minHeight?: number | string;\n  maxHeight?: number | string;\n  maxWidth?: number | string;\n}\n</pre>",
          "type": {
            "required": true,
            "name": "other",
            "value": "CustomStyle"
          },
          "table": {
            "type": {
              "summary": "CustomStyle"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "triggerClass": {
          "name": "triggerClass",
          "description": "Class to be added to PopperWrapper trigger",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "hideOnReferenceEscape": {
          "name": "hideOnReferenceEscape",
          "description": "Hides the `Popover` when its reference element is outside of the `Popover` boundaries",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "boundaryElement": {
          "name": "boundaryElement",
          "description": "BoundaryElement for `Popover`",
          "type": {
            "required": true,
            "name": "other",
            "value": "Element | RefObject<HTMLElement>"
          },
          "table": {
            "type": {
              "summary": "Element | RefObject<HTMLElement>"
            },
            "defaultValue": {
              "summary": "object"
            }
          }
        },
        "trigger": {
          "name": "trigger",
          "description": "Element triggering the `Popover`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>"
          },
          "table": {
            "type": {
              "summary": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>"
            },
            "defaultValue": null
          }
        },
        "on": {
          "name": "on",
          "description": "Event triggering the `Popover`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "click",
              "hover"
            ]
          },
          "table": {
            "type": {
              "summary": "\"click\" | \"hover\""
            },
            "defaultValue": {
              "summary": "\"click\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "offset": {
          "name": "offset",
          "description": "Vertical offset from trigger\n\n<pre className=\"DocPage-codeBlock\">\n{\n    small: '2px',\n    medium: '4px',\n    large: '8px'\n}\n</pre>",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"large\""
            }
          }
        },
        "closeOnBackdropClick": {
          "name": "closeOnBackdropClick",
          "description": "Close on Backdrop click",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "closeOnScroll": {
          "name": "closeOnScroll",
          "description": "Close on `boundaryElement` scroll",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "appendToBody": {
          "name": "appendToBody",
          "description": "Appends `trigger` wrapper inside body",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "hoverable": {
          "name": "hoverable",
          "description": "Holds `Popover` on hover\n\n**Use only if you are using `on = 'hover'`**",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-popover-popover-with-menu--popover-with-menu": {
    "id": "components-popover-popover-with-menu--popover-with-menu",
    "kind": "Components/Popover/Popover With Menu",
    "name": "Popover With Menu",
    "story": "Popover With Menu",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const trigger = (\n    <div className=\"d-flex\">\n      <Avatar firstName=\"John\" lastName=\"Doe\" />\n      <Text className=\"ml-4 mt-4\" size=\"large\">\n        Hi James\n      </Text>\n      <Button appearance=\"transparent\" icon=\"arrow_drop_down\" />\n    </div>\n  );\n\n  return (\n    <div className=\"mb-12\">\n      <Popover position=\"bottom-start\" on=\"click\" trigger={trigger} open={true}>\n        <div style={{ width: 'var(--spacing-9)' }} className=\" mx-6 my-6\">\n          <div className=\"d-flex\">\n            <Avatar firstName=\"John\" lastName=\"Doe\" />\n            <div className=\"Option-label\">\n              <Text className=\"ml-4\">James Donovan</Text>\n              <Text className=\"ml-4\" appearance=\"subtle\">\n                jdonovan @two.health\n              </Text>\n            </div>\n          </div>\n          <div className=\"Dropdown-wrapper\">\n            <div className=\"Option OptionWrapper\">Account Overview</div>\n            <div className=\"Option OptionWrapper\">Sign Out</div>\n          </div>\n        </div>\n      </Popover>\n    </div>\n  );\n}"
      },
      "__id": "components-popover-popover-with-menu--popover-with-menu",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "To be rendered in `Popover` component",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "position": {
          "name": "position",
          "description": "Position to place the `trigger`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "bottom",
              "top",
              "top-start",
              "top-end",
              "bottom-start",
              "bottom-end",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"top\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "\"bottom\""
            }
          }
        },
        "onToggle": {
          "name": "onToggle",
          "description": "Callback after `Popover` is toggled",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "dark": {
          "name": "dark",
          "description": "Changes background of `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "customStyle": {
          "name": "customStyle",
          "description": "Adds custom CSS to `Popover` element\n\n<pre className=\"DocPage-codeBlock\">\nCustomStyle {\n  height?: number | string;\n  width?: number | string;\n  minWidth?: number | string;\n  minHeight?: number | string;\n  maxHeight?: number | string;\n  maxWidth?: number | string;\n}\n</pre>",
          "type": {
            "required": true,
            "name": "other",
            "value": "CustomStyle"
          },
          "table": {
            "type": {
              "summary": "CustomStyle"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "triggerClass": {
          "name": "triggerClass",
          "description": "Class to be added to PopperWrapper trigger",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "hideOnReferenceEscape": {
          "name": "hideOnReferenceEscape",
          "description": "Hides the `Popover` when its reference element is outside of the `Popover` boundaries",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "boundaryElement": {
          "name": "boundaryElement",
          "description": "BoundaryElement for `Popover`",
          "type": {
            "required": true,
            "name": "other",
            "value": "Element | RefObject<HTMLElement>"
          },
          "table": {
            "type": {
              "summary": "Element | RefObject<HTMLElement>"
            },
            "defaultValue": {
              "summary": "object"
            }
          }
        },
        "trigger": {
          "name": "trigger",
          "description": "Element triggering the `Popover`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>"
          },
          "table": {
            "type": {
              "summary": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>"
            },
            "defaultValue": null
          }
        },
        "on": {
          "name": "on",
          "description": "Event triggering the `Popover`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "click",
              "hover"
            ]
          },
          "table": {
            "type": {
              "summary": "\"click\" | \"hover\""
            },
            "defaultValue": {
              "summary": "\"click\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "offset": {
          "name": "offset",
          "description": "Vertical offset from trigger\n\n<pre className=\"DocPage-codeBlock\">\n{\n    small: '2px',\n    medium: '4px',\n    large: '8px'\n}\n</pre>",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"large\""
            }
          }
        },
        "closeOnBackdropClick": {
          "name": "closeOnBackdropClick",
          "description": "Close on Backdrop click",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "closeOnScroll": {
          "name": "closeOnScroll",
          "description": "Close on `boundaryElement` scroll",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "appendToBody": {
          "name": "appendToBody",
          "description": "Appends `trigger` wrapper inside body",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "hoverable": {
          "name": "hoverable",
          "description": "Holds `Popover` on hover\n\n**Use only if you are using `on = 'hover'`**",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-popover-variants-boundary-element--boundary-element": {
    "id": "components-popover-variants-boundary-element--boundary-element",
    "kind": "Components/Popover/Variants/Boundary Element",
    "name": "Boundary Element",
    "story": "Boundary Element",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const open = boolean('open', false);\n\n  const position = select(\n    'position',\n    ['top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end', 'left', 'right'],\n    'bottom'\n  );\n\n  const on = select('on', ['click', 'hover'], 'click');\n\n  const appendToBody = boolean('appendToBody', true);\n  const hoverable = boolean('hoverable', true);\n  const closeOnBackdropClick = boolean('closeOnBackdropClick', true);\n  const closeOnScroll = boolean('closeOnScroll', true);\n  const hideOnReferenceEscape = boolean('hideOnReferenceEscape', true);\n  const dark = boolean('dark', false);\n\n  const onToggle = () => {\n    updateKnob('open', !open);\n  };\n\n  const trigger = <Button appearance=\"basic\">Open Popup</Button>;\n\n  const options: Record<string, any> = {\n    trigger,\n    position,\n    appendToBody,\n    dark,\n    closeOnBackdropClick,\n    closeOnScroll,\n    hideOnReferenceEscape,\n    on,\n    hoverable,\n    open,\n    onToggle,\n  };\n  if (on === 'hover') delete options.onToggle;\n\n  const ref = React.useRef<HTMLDivElement>(null);\n\n  return (\n    <div ref={ref} style={{ height: 150, border: '1px dashed', padding: 20, overflow: 'auto' }}>\n      <Popover {...options} boundaryElement={ref}>\n        <div style={{ width: 100 }} className=\"mx-6 my-6\">\n          <Text>Popup</Text>\n          <Button className=\"mt-4\" appearance=\"primary\" onClick={action('button clicked inside popover')}>\n            Click\n          </Button>\n        </div>\n      </Popover>\n      <div style={{ height: 300 }} />\n    </div>\n  );\n}"
      },
      "__id": "components-popover-variants-boundary-element--boundary-element",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "To be rendered in `Popover` component",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "position": {
          "name": "position",
          "description": "Position to place the `trigger`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "bottom",
              "top",
              "top-start",
              "top-end",
              "bottom-start",
              "bottom-end",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"top\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "\"bottom\""
            }
          }
        },
        "onToggle": {
          "name": "onToggle",
          "description": "Callback after `Popover` is toggled",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "dark": {
          "name": "dark",
          "description": "Changes background of `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "customStyle": {
          "name": "customStyle",
          "description": "Adds custom CSS to `Popover` element\n\n<pre className=\"DocPage-codeBlock\">\nCustomStyle {\n  height?: number | string;\n  width?: number | string;\n  minWidth?: number | string;\n  minHeight?: number | string;\n  maxHeight?: number | string;\n  maxWidth?: number | string;\n}\n</pre>",
          "type": {
            "required": true,
            "name": "other",
            "value": "CustomStyle"
          },
          "table": {
            "type": {
              "summary": "CustomStyle"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "triggerClass": {
          "name": "triggerClass",
          "description": "Class to be added to PopperWrapper trigger",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "hideOnReferenceEscape": {
          "name": "hideOnReferenceEscape",
          "description": "Hides the `Popover` when its reference element is outside of the `Popover` boundaries",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "boundaryElement": {
          "name": "boundaryElement",
          "description": "BoundaryElement for `Popover`",
          "type": {
            "required": true,
            "name": "other",
            "value": "Element | RefObject<HTMLElement>"
          },
          "table": {
            "type": {
              "summary": "Element | RefObject<HTMLElement>"
            },
            "defaultValue": {
              "summary": "object"
            }
          }
        },
        "trigger": {
          "name": "trigger",
          "description": "Element triggering the `Popover`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>"
          },
          "table": {
            "type": {
              "summary": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>"
            },
            "defaultValue": null
          }
        },
        "on": {
          "name": "on",
          "description": "Event triggering the `Popover`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "click",
              "hover"
            ]
          },
          "table": {
            "type": {
              "summary": "\"click\" | \"hover\""
            },
            "defaultValue": {
              "summary": "\"click\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "offset": {
          "name": "offset",
          "description": "Vertical offset from trigger\n\n<pre className=\"DocPage-codeBlock\">\n{\n    small: '2px',\n    medium: '4px',\n    large: '8px'\n}\n</pre>",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"large\""
            }
          }
        },
        "closeOnBackdropClick": {
          "name": "closeOnBackdropClick",
          "description": "Close on Backdrop click",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "closeOnScroll": {
          "name": "closeOnScroll",
          "description": "Close on `boundaryElement` scroll",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "appendToBody": {
          "name": "appendToBody",
          "description": "Appends `trigger` wrapper inside body",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "hoverable": {
          "name": "hoverable",
          "description": "Holds `Popover` on hover\n\n**Use only if you are using `on = 'hover'`**",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-popover-variants-position--position": {
    "id": "components-popover-variants-position--position",
    "kind": "Components/Popover/Variants/Position",
    "name": "Position",
    "story": "Position",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const positions: PopoverProps['position'][] = [\n    'top',\n    'top-start',\n    'top-end',\n    'bottom',\n    'bottom-start',\n    'bottom-end',\n    'left',\n    'right',\n  ];\n\n  const style = {\n    display: 'flex',\n    'flex-wrap': 'wrap',\n  };\n\n  const getTrigger = (pos: string) => <Button appearance=\"basic\">{pos}</Button>;\n\n  return (\n    <div style={style}>\n      {positions.map((pos, ind) => {\n        return (\n          <div key={ind} className={ind < 3 ? 'mt-11 mr-13' : 'mt-5 mb-11 mr-13'}>\n            <Popover trigger={getTrigger(pos)} position={pos} open={true}>\n              <div style={{ width: 100 }} className=\"mx-6 my-6\">\n                <Text>Popup</Text>\n                <Button appearance=\"primary\" className=\"mt-4\">\n                  Click\n                </Button>\n              </div>\n            </Popover>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-popover-variants-position--position",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "To be rendered in `Popover` component",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "position": {
          "name": "position",
          "description": "Position to place the `trigger`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "bottom",
              "top",
              "top-start",
              "top-end",
              "bottom-start",
              "bottom-end",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"top\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "\"bottom\""
            }
          }
        },
        "onToggle": {
          "name": "onToggle",
          "description": "Callback after `Popover` is toggled",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "dark": {
          "name": "dark",
          "description": "Changes background of `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "customStyle": {
          "name": "customStyle",
          "description": "Adds custom CSS to `Popover` element\n\n<pre className=\"DocPage-codeBlock\">\nCustomStyle {\n  height?: number | string;\n  width?: number | string;\n  minWidth?: number | string;\n  minHeight?: number | string;\n  maxHeight?: number | string;\n  maxWidth?: number | string;\n}\n</pre>",
          "type": {
            "required": true,
            "name": "other",
            "value": "CustomStyle"
          },
          "table": {
            "type": {
              "summary": "CustomStyle"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "triggerClass": {
          "name": "triggerClass",
          "description": "Class to be added to PopperWrapper trigger",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "hideOnReferenceEscape": {
          "name": "hideOnReferenceEscape",
          "description": "Hides the `Popover` when its reference element is outside of the `Popover` boundaries",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "boundaryElement": {
          "name": "boundaryElement",
          "description": "BoundaryElement for `Popover`",
          "type": {
            "required": true,
            "name": "other",
            "value": "Element | RefObject<HTMLElement>"
          },
          "table": {
            "type": {
              "summary": "Element | RefObject<HTMLElement>"
            },
            "defaultValue": {
              "summary": "object"
            }
          }
        },
        "trigger": {
          "name": "trigger",
          "description": "Element triggering the `Popover`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>"
          },
          "table": {
            "type": {
              "summary": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>"
            },
            "defaultValue": null
          }
        },
        "on": {
          "name": "on",
          "description": "Event triggering the `Popover`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "click",
              "hover"
            ]
          },
          "table": {
            "type": {
              "summary": "\"click\" | \"hover\""
            },
            "defaultValue": {
              "summary": "\"click\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "offset": {
          "name": "offset",
          "description": "Vertical offset from trigger\n\n<pre className=\"DocPage-codeBlock\">\n{\n    small: '2px',\n    medium: '4px',\n    large: '8px'\n}\n</pre>",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"large\""
            }
          }
        },
        "closeOnBackdropClick": {
          "name": "closeOnBackdropClick",
          "description": "Close on Backdrop click",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "closeOnScroll": {
          "name": "closeOnScroll",
          "description": "Close on `boundaryElement` scroll",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "appendToBody": {
          "name": "appendToBody",
          "description": "Appends `trigger` wrapper inside body",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "hoverable": {
          "name": "hoverable",
          "description": "Holds `Popover` on hover\n\n**Use only if you are using `on = 'hover'`**",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-popover-variants-theme--theme": {
    "id": "components-popover-variants-theme--theme",
    "kind": "Components/Popover/Variants/Theme",
    "name": "Theme",
    "story": "Theme",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const trigger = <Button appearance=\"basic\">Light Theme</Button>;\n  const triggerDark = <Button appearance=\"basic\">Dark Theme</Button>;\n\n  const options = {\n    open: true,\n  };\n\n  return (\n    <div className=\"d-flex\">\n      <div className=\"mb-11\" style={{ marginRight: '40%' }}>\n        <Popover trigger={triggerDark} dark={true} {...options}>\n          <div style={{ width: 100 }} className=\"mx-6 my-6\">\n            <Text appearance={'white'}>Popup</Text>\n            <Button appearance=\"primary\" className=\"mt-4\">\n              Click\n            </Button>\n          </div>\n        </Popover>\n      </div>\n      <div>\n        <Popover trigger={trigger} dark={false} {...options}>\n          <div style={{ width: 100 }} className=\"mx-6 my-6\">\n            <Text>Popup</Text>\n            <Button appearance=\"primary\" className=\"mt-4\">\n              Click\n            </Button>\n          </div>\n        </Popover>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-popover-variants-theme--theme",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "To be rendered in `Popover` component",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "position": {
          "name": "position",
          "description": "Position to place the `trigger`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "bottom",
              "top",
              "top-start",
              "top-end",
              "bottom-start",
              "bottom-end",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"top\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "\"bottom\""
            }
          }
        },
        "onToggle": {
          "name": "onToggle",
          "description": "Callback after `Popover` is toggled",
          "type": {
            "required": false,
            "name": "function",
            "value": "((open: boolean, type?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((open: boolean, type?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "dark": {
          "name": "dark",
          "description": "Changes background of `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "customStyle": {
          "name": "customStyle",
          "description": "Adds custom CSS to `Popover` element\n\n<pre className=\"DocPage-codeBlock\">\nCustomStyle {\n  height?: number | string;\n  width?: number | string;\n  minWidth?: number | string;\n  minHeight?: number | string;\n  maxHeight?: number | string;\n  maxWidth?: number | string;\n}\n</pre>",
          "type": {
            "required": true,
            "name": "other",
            "value": "CustomStyle"
          },
          "table": {
            "type": {
              "summary": "CustomStyle"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "triggerClass": {
          "name": "triggerClass",
          "description": "Class to be added to PopperWrapper trigger",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "hideOnReferenceEscape": {
          "name": "hideOnReferenceEscape",
          "description": "Hides the `Popover` when its reference element is outside of the `Popover` boundaries",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "boundaryElement": {
          "name": "boundaryElement",
          "description": "BoundaryElement for `Popover`",
          "type": {
            "required": true,
            "name": "other",
            "value": "Element | RefObject<HTMLElement>"
          },
          "table": {
            "type": {
              "summary": "Element | RefObject<HTMLElement>"
            },
            "defaultValue": {
              "summary": "object"
            }
          }
        },
        "trigger": {
          "name": "trigger",
          "description": "Element triggering the `Popover`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>"
          },
          "table": {
            "type": {
              "summary": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>"
            },
            "defaultValue": null
          }
        },
        "on": {
          "name": "on",
          "description": "Event triggering the `Popover`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "click",
              "hover"
            ]
          },
          "table": {
            "type": {
              "summary": "\"click\" | \"hover\""
            },
            "defaultValue": {
              "summary": "\"click\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "offset": {
          "name": "offset",
          "description": "Vertical offset from trigger\n\n<pre className=\"DocPage-codeBlock\">\n{\n    small: '2px',\n    medium: '4px',\n    large: '8px'\n}\n</pre>",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "large",
              "small",
              "medium"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\" | \"medium\""
            },
            "defaultValue": {
              "summary": "\"large\""
            }
          }
        },
        "closeOnBackdropClick": {
          "name": "closeOnBackdropClick",
          "description": "Close on Backdrop click",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "closeOnScroll": {
          "name": "closeOnScroll",
          "description": "Close on `boundaryElement` scroll",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "appendToBody": {
          "name": "appendToBody",
          "description": "Appends `trigger` wrapper inside body",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "hoverable": {
          "name": "hoverable",
          "description": "Holds `Popover` on hover\n\n**Use only if you are using `on = 'hover'`**",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-progressbar-all--all": {
    "id": "components-progressbar-all--all",
    "kind": "Components/ProgressBar/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const value = number('value', 10);\n  const max = number('max', 100);\n\n  return (\n    <div className=\"w-50\">\n      <ProgressBar value={value} max={max} />\n    </div>\n  );\n}"
      },
      "__id": "components-progressbar-all--all",
      "args": {},
      "argTypes": {
        "value": {
          "name": "value",
          "description": "Specifies how much of the task that has been completed. Value should lie between 0 to max,",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Describes how much work the task indicated by the `Progress Bar` requires",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "100"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-progressbar-fifty-percent--fifty-percent": {
    "id": "components-progressbar-fifty-percent--fifty-percent",
    "kind": "Components/ProgressBar/Fifty Percent",
    "name": "Fifty Percent",
    "story": "Fifty Percent",
    "parameters": {
      "storySource": {
        "source": "() => <ProgressBar value={50} max={100} />"
      },
      "__id": "components-progressbar-fifty-percent--fifty-percent",
      "args": {},
      "argTypes": {
        "value": {
          "name": "value",
          "description": "Specifies how much of the task that has been completed. Value should lie between 0 to max,",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Describes how much work the task indicated by the `Progress Bar` requires",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "100"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-progressring-all--all": {
    "id": "components-progressring-all--all",
    "kind": "Components/ProgressRing/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const size = select('size', ['regular', 'small'], undefined);\n\n  const value = number('value', 30);\n  const max = number('max', 100);\n\n  return <ProgressRing value={value} size={size} max={max} />;\n}"
      },
      "__id": "components-progressring-all--all",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of `Progress Ring`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "regular",
              "small"
            ]
          },
          "table": {
            "type": {
              "summary": "\"regular\" | \"small\""
            },
            "defaultValue": {
              "summary": "\"regular\""
            }
          }
        },
        "value": {
          "name": "value",
          "description": "Specifies how much of the task that has been completed. Value should lie between 0 to max.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Describes how much work the task indicated by the `Progress Ring` requires.",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "100"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-progressring-variants-size--size": {
    "id": "components-progressring-variants-size--size",
    "kind": "Components/ProgressRing/Variants/Size",
    "name": "Size",
    "story": "Size",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const sizes: Size[] = ['small', 'regular'];\n  return (\n    <div className=\"d-flex\">\n      {sizes.map((ProgressRingSize, ind) => {\n        return (\n          <div key={ind} className=\"mr-6\">\n            <div className=\"h-50\">\n              <ProgressRing size={ProgressRingSize} value={30} />\n            </div>\n            <Text weight=\"strong\">{ProgressRingSize.charAt(0).toUpperCase() + ProgressRingSize.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-progressring-variants-size--size",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of `Progress Ring`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "regular",
              "small"
            ]
          },
          "table": {
            "type": {
              "summary": "\"regular\" | \"small\""
            },
            "defaultValue": {
              "summary": "\"regular\""
            }
          }
        },
        "value": {
          "name": "value",
          "description": "Specifies how much of the task that has been completed. Value should lie between 0 to max.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Describes how much work the task indicated by the `Progress Ring` requires.",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "100"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-radio-all--all": {
    "id": "components-radio-all--all",
    "kind": "Components/Radio/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const size = select('size', ['regular', 'tiny'], undefined);\n\n  const label = text('label', 'Radio');\n\n  const disabled = boolean('disabled', false);\n\n  const defaultChecked = boolean('defaultChecked', false);\n\n  const checked = boolean('checked', undefined);\n\n  const name = 'gender';\n\n  const onChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    return action(`onChange: ${event.target.value}: ${event.target.checked}`)();\n  };\n\n  return (\n    <div>\n      <Radio\n        disabled={disabled}\n        size={size}\n        label={label}\n        name={name}\n        value={label}\n        defaultChecked={defaultChecked}\n        checked={checked}\n        onChange={onChangeHandler}\n      />\n    </div>\n  );\n}"
      },
      "__id": "components-radio-all--all",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of `Radio`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Radio`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "label": {
          "name": "label",
          "description": "Describes Label of the `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "helpText": {
          "name": "helpText",
          "description": "Describes Help Text of the `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Name of the `Radio`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Name of the `Radio`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "defaultChecked": {
          "name": "defaultChecked",
          "description": "Denotes initial selection in case of Uncontrolled `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "checked": {
          "name": "checked",
          "description": "Denotes selection in case of Controlled `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when user the selects an option",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-radio-alignment-of-radio-group--alignment-of-radio-group": {
    "id": "components-radio-alignment-of-radio-group--alignment-of-radio-group",
    "kind": "Components/Radio/Alignment Of Radio Group",
    "name": "Alignment Of Radio Group",
    "story": "Alignment Of Radio Group",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Row>\n    <Column>\n      <div className=\"d-flex\">\n        <div className=\"mr-9 \">\n          <Radio size={'regular'} label={'Male'} name={'Gender'} value={'Male'} defaultChecked={true} />\n        </div>\n\n        <div className=\"mr-9 \">\n          <Radio size={'regular'} label={'Female'} name={'Gender'} value={'Female'} />\n        </div>\n\n        <div className=\"mr-9 \">\n          <Radio size={'regular'} label={'Other'} name={'Gender'} value={'Other'} />\n        </div>\n      </div>\n\n      <div className=\"pt-5\">\n        <Text>Horizontal alignment</Text>\n      </div>\n    </Column>\n    <Column>\n      <Radio size={'regular'} label={'Male'} name={'gender'} value={'Male'} defaultChecked={true} />\n\n      <Radio size={'regular'} label={'Female'} name={'gender'} value={'Female'} />\n\n      <Radio size={'regular'} label={'Other'} name={'gender'} value={'Other'} />\n\n      <div className=\"pt-5\">\n        <Text>Vertical alignment</Text>\n      </div>\n    </Column>\n  </Row>\n)"
      },
      "__id": "components-radio-alignment-of-radio-group--alignment-of-radio-group",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of `Radio`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Radio`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "label": {
          "name": "label",
          "description": "Describes Label of the `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "helpText": {
          "name": "helpText",
          "description": "Describes Help Text of the `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Name of the `Radio`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Name of the `Radio`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "defaultChecked": {
          "name": "defaultChecked",
          "description": "Denotes initial selection in case of Uncontrolled `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "checked": {
          "name": "checked",
          "description": "Denotes selection in case of Controlled `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when user the selects an option",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-radio-default-radio--default-radio": {
    "id": "components-radio-default-radio--default-radio",
    "kind": "Components/Radio/Default Radio",
    "name": "Default Radio",
    "story": "Default Radio",
    "parameters": {
      "storySource": {
        "source": "() => <Radio label={'Survey Outreach'} name={'Radio'} value={'Radio'} />"
      },
      "__id": "components-radio-default-radio--default-radio",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of `Radio`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Radio`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "label": {
          "name": "label",
          "description": "Describes Label of the `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "helpText": {
          "name": "helpText",
          "description": "Describes Help Text of the `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Name of the `Radio`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Name of the `Radio`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "defaultChecked": {
          "name": "defaultChecked",
          "description": "Denotes initial selection in case of Uncontrolled `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "checked": {
          "name": "checked",
          "description": "Denotes selection in case of Controlled `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when user the selects an option",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-radio-overflow-content--overflow-content": {
    "id": "components-radio-overflow-content--overflow-content",
    "kind": "Components/Radio/Overflow Content",
    "name": "Overflow Content",
    "story": "Overflow Content",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <div className=\"w-25\">\n    <Radio label=\"Share both your healthcare data and some personal information.\" name=\"options\" value=\"Option 1\" />\n  </div>\n)"
      },
      "__id": "components-radio-overflow-content--overflow-content",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of `Radio`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Radio`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "label": {
          "name": "label",
          "description": "Describes Label of the `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "helpText": {
          "name": "helpText",
          "description": "Describes Help Text of the `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Name of the `Radio`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Name of the `Radio`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "defaultChecked": {
          "name": "defaultChecked",
          "description": "Denotes initial selection in case of Uncontrolled `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "checked": {
          "name": "checked",
          "description": "Denotes selection in case of Controlled `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when user the selects an option",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-radio-radio-group--radio-group": {
    "id": "components-radio-radio-group--radio-group",
    "kind": "Components/Radio/Radio Group",
    "name": "Radio Group",
    "story": "Radio Group",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <div>\n    <Radio size={'regular'} label={'High'} name={'Priority'} value={'High'} defaultChecked={true} />\n    <Radio size={'regular'} label={'Medium'} name={'Priority'} value={'Medium'} />\n    <Radio size={'regular'} label={'Low'} name={'Priority'} value={'Low'} />\n  </div>\n)"
      },
      "__id": "components-radio-radio-group--radio-group",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of `Radio`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Radio`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "label": {
          "name": "label",
          "description": "Describes Label of the `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "helpText": {
          "name": "helpText",
          "description": "Describes Help Text of the `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Name of the `Radio`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Name of the `Radio`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "defaultChecked": {
          "name": "defaultChecked",
          "description": "Denotes initial selection in case of Uncontrolled `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "checked": {
          "name": "checked",
          "description": "Denotes selection in case of Controlled `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when user the selects an option",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-radio-variants-controlled-radio-group--controlled-radio-group": {
    "id": "components-radio-variants-controlled-radio-group--controlled-radio-group",
    "kind": "Components/Radio/Variants/Controlled Radio Group",
    "name": "Controlled Radio Group",
    "story": "Controlled Radio Group",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [selected, setSelected] = React.useState<string>('Option 2');\n\n  const onChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelected(event.target.value);\n    return action(`onChange: ${event.target.value}: ${event.target.checked}`)();\n  };\n\n  return (\n    <div>\n      <Radio\n        label={'Option 1'}\n        name={'options'}\n        value={'Option 1'}\n        checked={selected === 'Option 1'}\n        onChange={onChangeHandler}\n      />\n      <Radio\n        label={'Option 2'}\n        name={'options'}\n        value={'Option 2'}\n        checked={selected === 'Option 2'}\n        onChange={onChangeHandler}\n      />\n      <Radio\n        label={'Option 3'}\n        name={'options'}\n        value={'Option 3'}\n        checked={selected === 'Option 3'}\n        onChange={onChangeHandler}\n      />\n    </div>\n  );\n}"
      },
      "__id": "components-radio-variants-controlled-radio-group--controlled-radio-group",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of `Radio`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Radio`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "label": {
          "name": "label",
          "description": "Describes Label of the `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "helpText": {
          "name": "helpText",
          "description": "Describes Help Text of the `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Name of the `Radio`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Name of the `Radio`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "defaultChecked": {
          "name": "defaultChecked",
          "description": "Denotes initial selection in case of Uncontrolled `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "checked": {
          "name": "checked",
          "description": "Denotes selection in case of Controlled `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when user the selects an option",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-radio-variants-size--size": {
    "id": "components-radio-variants-size--size",
    "kind": "Components/Radio/Variants/Size",
    "name": "Size",
    "story": "Size",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const sizes: Size[] = ['tiny', 'regular'];\n\n  const name = 'gender';\n  return (\n    <div className=\"d-flex\">\n      {sizes.map((RadioSize, ind) => {\n        return (\n          <div key={ind} className=\"mr-9\">\n            <Radio\n              size={RadioSize}\n              label={RadioSize.charAt(0).toUpperCase() + RadioSize.slice(1)}\n              name={name}\n              value={RadioSize}\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-radio-variants-size--size",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of `Radio`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Radio`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "label": {
          "name": "label",
          "description": "Describes Label of the `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "helpText": {
          "name": "helpText",
          "description": "Describes Help Text of the `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Name of the `Radio`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Name of the `Radio`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "defaultChecked": {
          "name": "defaultChecked",
          "description": "Denotes initial selection in case of Uncontrolled `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "checked": {
          "name": "checked",
          "description": "Denotes selection in case of Controlled `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when user the selects an option",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-radio-variants-state--state": {
    "id": "components-radio-variants-state--state",
    "kind": "Components/Radio/Variants/State",
    "name": "State",
    "story": "State",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const name = 'state';\n\n  return (\n    <div className=\"d-flex\">\n      <div className=\"mr-9\">\n        <Radio label={'Disabled'} name={name} value={'Disabled'} disabled={true} />\n      </div>\n      <div>\n        <Radio label={'Enabled'} name={name} value={'Enabled'} disabled={false} />\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-radio-variants-state--state",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of `Radio`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Radio`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "label": {
          "name": "label",
          "description": "Describes Label of the `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "helpText": {
          "name": "helpText",
          "description": "Describes Help Text of the `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Name of the `Radio`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Name of the `Radio`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "defaultChecked": {
          "name": "defaultChecked",
          "description": "Denotes initial selection in case of Uncontrolled `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "checked": {
          "name": "checked",
          "description": "Denotes selection in case of Controlled `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when user the selects an option",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-radio-variants-uncontrolled-radio-group--uncontrolled-radio-group": {
    "id": "components-radio-variants-uncontrolled-radio-group--uncontrolled-radio-group",
    "kind": "Components/Radio/Variants/Uncontrolled Radio Group",
    "name": "Uncontrolled Radio Group",
    "story": "Uncontrolled Radio Group",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const onChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    return action(`onChange: ${event.target.value}: ${event.target.checked}`)();\n  };\n\n  return (\n    <div>\n      <Radio label={'Option 1'} name={'options'} value={'Option 1'} onChange={onChangeHandler} />\n      <Radio label={'Option 2'} name={'options'} value={'Option 2'} defaultChecked={true} onChange={onChangeHandler} />\n      <Radio label={'Option 3'} name={'options'} value={'Option 3'} onChange={onChangeHandler} />\n    </div>\n  );\n}"
      },
      "__id": "components-radio-variants-uncontrolled-radio-group--uncontrolled-radio-group",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of `Radio`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Radio`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "label": {
          "name": "label",
          "description": "Describes Label of the `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "helpText": {
          "name": "helpText",
          "description": "Describes Help Text of the `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Name of the `Radio`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Name of the `Radio`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "defaultChecked": {
          "name": "defaultChecked",
          "description": "Denotes initial selection in case of Uncontrolled `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "checked": {
          "name": "checked",
          "description": "Denotes selection in case of Controlled `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when user the selects an option",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-radio-with-help-text--with-help-text": {
    "id": "components-radio-with-help-text--with-help-text",
    "kind": "Components/Radio/With Help Text",
    "name": "With Help Text",
    "story": "With Help Text",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <Radio\n      label={'Share all your data'}\n      value={'accepted'}\n      name={'consent'}\n      helpText={'This app will have access to both your healthcare data and some personal information.'}\n      className=\"w-25\"\n    />\n  );\n}"
      },
      "__id": "components-radio-with-help-text--with-help-text",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of `Radio`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\""
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Radio`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "label": {
          "name": "label",
          "description": "Describes Label of the `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "helpText": {
          "name": "helpText",
          "description": "Describes Help Text of the `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Name of the `Radio`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Name of the `Radio`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "defaultChecked": {
          "name": "defaultChecked",
          "description": "Denotes initial selection in case of Uncontrolled `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "checked": {
          "name": "checked",
          "description": "Denotes selection in case of Controlled `Radio`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when user the selects an option",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-rangeslider-all--all": {
    "id": "components-rangeslider-all--all",
    "kind": "Components/RangeSlider/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const min = number('min', 0) || undefined;\n  const max = number('max', 10) || undefined;\n  const stepSize = number('step size', 0.1) || undefined;\n  const labelStepSize = number('label step size', 1) || undefined;\n  const label = text('Label', 'Slider Label');\n  const disabled = boolean('disabled', false);\n\n  const onChange = (value: NumberRange) => {\n    return action(`new value: ${value}`);\n  };\n\n  const options = {\n    min,\n    max,\n    stepSize,\n    labelStepSize,\n    label,\n    disabled,\n    onChange,\n    defaultValue: [2, 4] as NumberRange,\n  };\n\n  return <RangeSlider className=\"mt-2\" {...options} />;\n}"
      },
      "__id": "components-rangeslider-all--all",
      "args": {},
      "argTypes": {
        "defaultValue": {
          "name": "defaultValue",
          "description": "Gives default value to `RangeSlider` (Used in case of uncontrolled `RangeSlider`).",
          "type": {
            "required": false,
            "name": "other",
            "value": "NumberRange"
          },
          "table": {
            "type": {
              "summary": "NumberRange"
            },
            "defaultValue": {
              "summary": "[0,    10]"
            }
          }
        },
        "value": {
          "name": "value",
          "description": "Denotes range value of slider. Handles will be rendered at each position in the range. <br/>\n(Used in case of controlled `RangeSlider`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "NumberRange | undefined"
          },
          "table": {
            "type": {
              "summary": "NumberRange | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback invoked when the range value changes.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: NumberRange) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: NumberRange) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onRelease": {
          "name": "onRelease",
          "description": "Callback invoked when a handle is released.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: NumberRange) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: NumberRange) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines whether the `Slider` is non-interactive.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "labelStepSize": {
          "name": "labelStepSize",
          "description": "Indicates increment between successive labels (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "labelPrecision": {
          "name": "labelPrecision",
          "description": "Number of decimal places to use when rendering label value. <br/>\nDefault value is the number of decimals used in the `stepSize` prop.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Maximum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "10"
            }
          }
        },
        "min": {
          "name": "min",
          "description": "Minimum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "stepSize": {
          "name": "stepSize",
          "description": "Indicates the amount by which the handle moves (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "label": {
          "name": "label",
          "description": "Label of `Slider`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "labelRenderer": {
          "name": "labelRenderer",
          "description": "Callback to render a custom label.\nIf `true`, labels will use number value formatted to `labelPrecision` decimal places.\nIf `false`, labels will not be shown.",
          "type": {
            "required": true,
            "name": "other",
            "value": "boolean | ((value: number) => string)"
          },
          "table": {
            "type": {
              "summary": "boolean | ((value: number) => string)"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-rangeslider-variants-controlled-slider--controlled-slider": {
    "id": "components-rangeslider-variants-controlled-slider--controlled-slider",
    "kind": "Components/RangeSlider/Variants/Controlled Slider",
    "name": "Controlled Slider",
    "story": "Controlled Slider",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [value, setValue] = React.useState<NumberRange>([2, 4]);\n\n  const onChange = (newValue: NumberRange) => {\n    window.setTimeout(() => {\n      setValue(newValue);\n    }, 1000);\n  };\n\n  return (\n    <RangeSlider\n      min={1}\n      max={10}\n      label=\"Controlled Slider\"\n      stepSize={0.1}\n      labelStepSize={1}\n      value={value}\n      onChange={onChange}\n      className=\"mt-2\"\n    />\n  );\n}"
      },
      "__id": "components-rangeslider-variants-controlled-slider--controlled-slider",
      "args": {},
      "argTypes": {
        "defaultValue": {
          "name": "defaultValue",
          "description": "Gives default value to `RangeSlider` (Used in case of uncontrolled `RangeSlider`).",
          "type": {
            "required": false,
            "name": "other",
            "value": "NumberRange"
          },
          "table": {
            "type": {
              "summary": "NumberRange"
            },
            "defaultValue": {
              "summary": "[0,    10]"
            }
          }
        },
        "value": {
          "name": "value",
          "description": "Denotes range value of slider. Handles will be rendered at each position in the range. <br/>\n(Used in case of controlled `RangeSlider`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "NumberRange | undefined"
          },
          "table": {
            "type": {
              "summary": "NumberRange | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback invoked when the range value changes.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: NumberRange) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: NumberRange) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onRelease": {
          "name": "onRelease",
          "description": "Callback invoked when a handle is released.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: NumberRange) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: NumberRange) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines whether the `Slider` is non-interactive.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "labelStepSize": {
          "name": "labelStepSize",
          "description": "Indicates increment between successive labels (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "labelPrecision": {
          "name": "labelPrecision",
          "description": "Number of decimal places to use when rendering label value. <br/>\nDefault value is the number of decimals used in the `stepSize` prop.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Maximum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "10"
            }
          }
        },
        "min": {
          "name": "min",
          "description": "Minimum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "stepSize": {
          "name": "stepSize",
          "description": "Indicates the amount by which the handle moves (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "label": {
          "name": "label",
          "description": "Label of `Slider`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "labelRenderer": {
          "name": "labelRenderer",
          "description": "Callback to render a custom label.\nIf `true`, labels will use number value formatted to `labelPrecision` decimal places.\nIf `false`, labels will not be shown.",
          "type": {
            "required": true,
            "name": "other",
            "value": "boolean | ((value: number) => string)"
          },
          "table": {
            "type": {
              "summary": "boolean | ((value: number) => string)"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-rangeslider-variants-cutsom-labels--cutsom-labels": {
    "id": "components-rangeslider-variants-cutsom-labels--cutsom-labels",
    "kind": "Components/RangeSlider/Variants/Cutsom Labels",
    "name": "Cutsom Labels",
    "story": "Cutsom Labels",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [value, setValue] = React.useState<NumberRange>([2, 4]);\n\n  const onChange = (newValue: NumberRange) => {\n    setValue(newValue);\n  };\n\n  const labelRenderer = (newValue: number) => {\n    return `${newValue}%`;\n  };\n\n  return (\n    <RangeSlider\n      min={1}\n      max={10}\n      stepSize={0.1}\n      labelStepSize={1}\n      value={value}\n      onChange={onChange}\n      labelRenderer={labelRenderer}\n      className=\"mt-7\"\n    />\n  );\n}"
      },
      "__id": "components-rangeslider-variants-cutsom-labels--cutsom-labels",
      "args": {},
      "argTypes": {
        "defaultValue": {
          "name": "defaultValue",
          "description": "Gives default value to `RangeSlider` (Used in case of uncontrolled `RangeSlider`).",
          "type": {
            "required": false,
            "name": "other",
            "value": "NumberRange"
          },
          "table": {
            "type": {
              "summary": "NumberRange"
            },
            "defaultValue": {
              "summary": "[0,    10]"
            }
          }
        },
        "value": {
          "name": "value",
          "description": "Denotes range value of slider. Handles will be rendered at each position in the range. <br/>\n(Used in case of controlled `RangeSlider`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "NumberRange | undefined"
          },
          "table": {
            "type": {
              "summary": "NumberRange | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback invoked when the range value changes.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: NumberRange) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: NumberRange) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onRelease": {
          "name": "onRelease",
          "description": "Callback invoked when a handle is released.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: NumberRange) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: NumberRange) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines whether the `Slider` is non-interactive.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "labelStepSize": {
          "name": "labelStepSize",
          "description": "Indicates increment between successive labels (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "labelPrecision": {
          "name": "labelPrecision",
          "description": "Number of decimal places to use when rendering label value. <br/>\nDefault value is the number of decimals used in the `stepSize` prop.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Maximum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "10"
            }
          }
        },
        "min": {
          "name": "min",
          "description": "Minimum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "stepSize": {
          "name": "stepSize",
          "description": "Indicates the amount by which the handle moves (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "label": {
          "name": "label",
          "description": "Label of `Slider`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "labelRenderer": {
          "name": "labelRenderer",
          "description": "Callback to render a custom label.\nIf `true`, labels will use number value formatted to `labelPrecision` decimal places.\nIf `false`, labels will not be shown.",
          "type": {
            "required": true,
            "name": "other",
            "value": "boolean | ((value: number) => string)"
          },
          "table": {
            "type": {
              "summary": "boolean | ((value: number) => string)"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-rangeslider-variants-disabled--disabled": {
    "id": "components-rangeslider-variants-disabled--disabled",
    "kind": "Components/RangeSlider/Variants/Disabled",
    "name": "Disabled",
    "story": "Disabled",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div>\n      <RangeSlider\n        className=\"mb-9 mt-2\"\n        label=\"Disabled Slider\"\n        disabled={true}\n        stepSize={0.1}\n        labelStepSize={1}\n        defaultValue={[2, 4]}\n      />\n      <RangeSlider label=\"Default Slider\" stepSize={0.1} labelStepSize={1} defaultValue={[2, 4]} className=\"mt-2\" />\n    </div>\n  );\n}"
      },
      "__id": "components-rangeslider-variants-disabled--disabled",
      "args": {},
      "argTypes": {
        "defaultValue": {
          "name": "defaultValue",
          "description": "Gives default value to `RangeSlider` (Used in case of uncontrolled `RangeSlider`).",
          "type": {
            "required": false,
            "name": "other",
            "value": "NumberRange"
          },
          "table": {
            "type": {
              "summary": "NumberRange"
            },
            "defaultValue": {
              "summary": "[0,    10]"
            }
          }
        },
        "value": {
          "name": "value",
          "description": "Denotes range value of slider. Handles will be rendered at each position in the range. <br/>\n(Used in case of controlled `RangeSlider`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "NumberRange | undefined"
          },
          "table": {
            "type": {
              "summary": "NumberRange | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback invoked when the range value changes.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: NumberRange) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: NumberRange) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onRelease": {
          "name": "onRelease",
          "description": "Callback invoked when a handle is released.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: NumberRange) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: NumberRange) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines whether the `Slider` is non-interactive.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "labelStepSize": {
          "name": "labelStepSize",
          "description": "Indicates increment between successive labels (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "labelPrecision": {
          "name": "labelPrecision",
          "description": "Number of decimal places to use when rendering label value. <br/>\nDefault value is the number of decimals used in the `stepSize` prop.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Maximum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "10"
            }
          }
        },
        "min": {
          "name": "min",
          "description": "Minimum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "stepSize": {
          "name": "stepSize",
          "description": "Indicates the amount by which the handle moves (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "label": {
          "name": "label",
          "description": "Label of `Slider`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "labelRenderer": {
          "name": "labelRenderer",
          "description": "Callback to render a custom label.\nIf `true`, labels will use number value formatted to `labelPrecision` decimal places.\nIf `false`, labels will not be shown.",
          "type": {
            "required": true,
            "name": "other",
            "value": "boolean | ((value: number) => string)"
          },
          "table": {
            "type": {
              "summary": "boolean | ((value: number) => string)"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-rangeslider-variants-disctere-slider--disctere-slider": {
    "id": "components-rangeslider-variants-disctere-slider--disctere-slider",
    "kind": "Components/RangeSlider/Variants/Disctere Slider",
    "name": "Disctere Slider",
    "story": "Disctere Slider",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <RangeSlider\n      min={1}\n      max={10}\n      label=\"Discrete Slider\"\n      stepSize={1}\n      labelStepSize={1}\n      defaultValue={[2, 4]}\n      className=\"mt-2\"\n    />\n  );\n}"
      },
      "__id": "components-rangeslider-variants-disctere-slider--disctere-slider",
      "args": {},
      "argTypes": {
        "defaultValue": {
          "name": "defaultValue",
          "description": "Gives default value to `RangeSlider` (Used in case of uncontrolled `RangeSlider`).",
          "type": {
            "required": false,
            "name": "other",
            "value": "NumberRange"
          },
          "table": {
            "type": {
              "summary": "NumberRange"
            },
            "defaultValue": {
              "summary": "[0,    10]"
            }
          }
        },
        "value": {
          "name": "value",
          "description": "Denotes range value of slider. Handles will be rendered at each position in the range. <br/>\n(Used in case of controlled `RangeSlider`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "NumberRange | undefined"
          },
          "table": {
            "type": {
              "summary": "NumberRange | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback invoked when the range value changes.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: NumberRange) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: NumberRange) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onRelease": {
          "name": "onRelease",
          "description": "Callback invoked when a handle is released.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: NumberRange) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: NumberRange) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines whether the `Slider` is non-interactive.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "labelStepSize": {
          "name": "labelStepSize",
          "description": "Indicates increment between successive labels (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "labelPrecision": {
          "name": "labelPrecision",
          "description": "Number of decimal places to use when rendering label value. <br/>\nDefault value is the number of decimals used in the `stepSize` prop.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Maximum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "10"
            }
          }
        },
        "min": {
          "name": "min",
          "description": "Minimum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "stepSize": {
          "name": "stepSize",
          "description": "Indicates the amount by which the handle moves (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "label": {
          "name": "label",
          "description": "Label of `Slider`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "labelRenderer": {
          "name": "labelRenderer",
          "description": "Callback to render a custom label.\nIf `true`, labels will use number value formatted to `labelPrecision` decimal places.\nIf `false`, labels will not be shown.",
          "type": {
            "required": true,
            "name": "other",
            "value": "boolean | ((value: number) => string)"
          },
          "table": {
            "type": {
              "summary": "boolean | ((value: number) => string)"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-rangeslider-variants-free-slider--free-slider": {
    "id": "components-rangeslider-variants-free-slider--free-slider",
    "kind": "Components/RangeSlider/Variants/Free Slider",
    "name": "Free Slider",
    "story": "Free Slider",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <RangeSlider\n      min={1}\n      max={10}\n      label=\"Free Slider\"\n      stepSize={0.1}\n      labelStepSize={1}\n      defaultValue={[2, 4]}\n      className=\"mt-2\"\n    />\n  );\n}"
      },
      "__id": "components-rangeslider-variants-free-slider--free-slider",
      "args": {},
      "argTypes": {
        "defaultValue": {
          "name": "defaultValue",
          "description": "Gives default value to `RangeSlider` (Used in case of uncontrolled `RangeSlider`).",
          "type": {
            "required": false,
            "name": "other",
            "value": "NumberRange"
          },
          "table": {
            "type": {
              "summary": "NumberRange"
            },
            "defaultValue": {
              "summary": "[0,    10]"
            }
          }
        },
        "value": {
          "name": "value",
          "description": "Denotes range value of slider. Handles will be rendered at each position in the range. <br/>\n(Used in case of controlled `RangeSlider`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "NumberRange | undefined"
          },
          "table": {
            "type": {
              "summary": "NumberRange | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback invoked when the range value changes.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: NumberRange) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: NumberRange) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onRelease": {
          "name": "onRelease",
          "description": "Callback invoked when a handle is released.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: NumberRange) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: NumberRange) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines whether the `Slider` is non-interactive.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "labelStepSize": {
          "name": "labelStepSize",
          "description": "Indicates increment between successive labels (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "labelPrecision": {
          "name": "labelPrecision",
          "description": "Number of decimal places to use when rendering label value. <br/>\nDefault value is the number of decimals used in the `stepSize` prop.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Maximum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "10"
            }
          }
        },
        "min": {
          "name": "min",
          "description": "Minimum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "stepSize": {
          "name": "stepSize",
          "description": "Indicates the amount by which the handle moves (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "label": {
          "name": "label",
          "description": "Label of `Slider`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "labelRenderer": {
          "name": "labelRenderer",
          "description": "Callback to render a custom label.\nIf `true`, labels will use number value formatted to `labelPrecision` decimal places.\nIf `false`, labels will not be shown.",
          "type": {
            "required": true,
            "name": "other",
            "value": "boolean | ((value: number) => string)"
          },
          "table": {
            "type": {
              "summary": "boolean | ((value: number) => string)"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-rangeslider-variants-slider-label--slider-label": {
    "id": "components-rangeslider-variants-slider-label--slider-label",
    "kind": "Components/RangeSlider/Variants/Slider Label",
    "name": "Slider Label",
    "story": "Slider Label",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div>\n      <div className=\"mb-9\">\n        <Text weight=\"strong\">With Slider Label</Text>\n        <br />\n        <RangeSlider label=\"Slider-label\" stepSize={0.1} labelStepSize={1} defaultValue={[2, 4]} className=\"mt-2\" />\n      </div>\n      <div>\n        <Text weight=\"strong\">Without Slider Label</Text>\n        <br />\n        <RangeSlider stepSize={0.1} labelStepSize={1} defaultValue={[2, 4]} className=\"mt-2\" />\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-rangeslider-variants-slider-label--slider-label",
      "args": {},
      "argTypes": {
        "defaultValue": {
          "name": "defaultValue",
          "description": "Gives default value to `RangeSlider` (Used in case of uncontrolled `RangeSlider`).",
          "type": {
            "required": false,
            "name": "other",
            "value": "NumberRange"
          },
          "table": {
            "type": {
              "summary": "NumberRange"
            },
            "defaultValue": {
              "summary": "[0,    10]"
            }
          }
        },
        "value": {
          "name": "value",
          "description": "Denotes range value of slider. Handles will be rendered at each position in the range. <br/>\n(Used in case of controlled `RangeSlider`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "NumberRange | undefined"
          },
          "table": {
            "type": {
              "summary": "NumberRange | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback invoked when the range value changes.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: NumberRange) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: NumberRange) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onRelease": {
          "name": "onRelease",
          "description": "Callback invoked when a handle is released.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: NumberRange) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: NumberRange) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines whether the `Slider` is non-interactive.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "labelStepSize": {
          "name": "labelStepSize",
          "description": "Indicates increment between successive labels (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "labelPrecision": {
          "name": "labelPrecision",
          "description": "Number of decimal places to use when rendering label value. <br/>\nDefault value is the number of decimals used in the `stepSize` prop.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Maximum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "10"
            }
          }
        },
        "min": {
          "name": "min",
          "description": "Minimum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "stepSize": {
          "name": "stepSize",
          "description": "Indicates the amount by which the handle moves (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "label": {
          "name": "label",
          "description": "Label of `Slider`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "labelRenderer": {
          "name": "labelRenderer",
          "description": "Callback to render a custom label.\nIf `true`, labels will use number value formatted to `labelPrecision` decimal places.\nIf `false`, labels will not be shown.",
          "type": {
            "required": true,
            "name": "other",
            "value": "boolean | ((value: number) => string)"
          },
          "table": {
            "type": {
              "summary": "boolean | ((value: number) => string)"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-rangeslider-variants-uncontrolled-slider--uncontrolled-slider": {
    "id": "components-rangeslider-variants-uncontrolled-slider--uncontrolled-slider",
    "kind": "Components/RangeSlider/Variants/Uncontrolled Slider",
    "name": "Uncontrolled Slider",
    "story": "Uncontrolled Slider",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <RangeSlider\n      min={1}\n      max={10}\n      label=\"Uncontrolled Slider\"\n      stepSize={0.1}\n      labelStepSize={1}\n      defaultValue={[2, 4]}\n      className=\"mt-2\"\n    />\n  );\n}"
      },
      "__id": "components-rangeslider-variants-uncontrolled-slider--uncontrolled-slider",
      "args": {},
      "argTypes": {
        "defaultValue": {
          "name": "defaultValue",
          "description": "Gives default value to `RangeSlider` (Used in case of uncontrolled `RangeSlider`).",
          "type": {
            "required": false,
            "name": "other",
            "value": "NumberRange"
          },
          "table": {
            "type": {
              "summary": "NumberRange"
            },
            "defaultValue": {
              "summary": "[0,    10]"
            }
          }
        },
        "value": {
          "name": "value",
          "description": "Denotes range value of slider. Handles will be rendered at each position in the range. <br/>\n(Used in case of controlled `RangeSlider`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "NumberRange | undefined"
          },
          "table": {
            "type": {
              "summary": "NumberRange | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback invoked when the range value changes.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: NumberRange) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: NumberRange) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onRelease": {
          "name": "onRelease",
          "description": "Callback invoked when a handle is released.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: NumberRange) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: NumberRange) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines whether the `Slider` is non-interactive.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "labelStepSize": {
          "name": "labelStepSize",
          "description": "Indicates increment between successive labels (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "labelPrecision": {
          "name": "labelPrecision",
          "description": "Number of decimal places to use when rendering label value. <br/>\nDefault value is the number of decimals used in the `stepSize` prop.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Maximum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "10"
            }
          }
        },
        "min": {
          "name": "min",
          "description": "Minimum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "stepSize": {
          "name": "stepSize",
          "description": "Indicates the amount by which the handle moves (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "label": {
          "name": "label",
          "description": "Label of `Slider`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "labelRenderer": {
          "name": "labelRenderer",
          "description": "Callback to render a custom label.\nIf `true`, labels will use number value formatted to `labelPrecision` decimal places.\nIf `false`, labels will not be shown.",
          "type": {
            "required": true,
            "name": "other",
            "value": "boolean | ((value: number) => string)"
          },
          "table": {
            "type": {
              "summary": "boolean | ((value: number) => string)"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-sidesheet-all--all": {
    "id": "components-sidesheet-all--all",
    "kind": "Components/Sidesheet/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const open = boolean('open', true);\n  const seperator = boolean('seperator', false);\n  const backIcon = boolean('back icon', false);\n  const stickFooter = boolean('stick bottom', false);\n  const backdropClose = boolean('backdropClose', false);\n  const dimension = select('dimension', ['regular', 'large'], 'regular');\n\n  const onClose = () => {\n    updateKnob('open', false);\n    action('on close triggered')();\n  };\n\n  const backIconCallback = () => {\n    action('back icon clicked')();\n  };\n\n  const headerOptions = {\n    backIcon,\n    backIconCallback: backIcon ? backIconCallback : undefined,\n    heading: 'Heading',\n    subHeading: 'Subheading',\n  };\n\n  const options = {\n    onClose,\n    open,\n    dimension,\n    seperator,\n    headerOptions,\n    stickFooter,\n    backdropClose,\n    footer: (\n      <>\n        <Button appearance=\"primary\" className=\"mr-4\">\n          Primary\n        </Button>\n        <Button appearance=\"basic\">Basic</Button>\n      </>\n    ),\n  };\n\n  const modalDescriptionOptions = {\n    title: 'Description Title',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    removePadding: true,\n  };\n\n  const modalDescriptionOptionsWithoutTitle = {\n    description: 'Card Sections include supporting text like an article summary or a restaurant description.',\n    removePadding: true,\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Sidesheet {...options}>\n        <Text>Modal Body</Text>\n        <ModalDescription {...modalDescriptionOptions} />\n        <ModalDescription {...modalDescriptionOptionsWithoutTitle} />\n      </Sidesheet>\n    </div>\n  );\n}"
      },
      "__id": "components-sidesheet-all--all",
      "args": {},
      "argTypes": {
        "headerOptions": {
          "name": "headerOptions",
          "description": "Header options (doesn't work if `header` prop is used)\n\nUse `header` prop if custom header is needed.\n\n<pre className=\"DocPage-codeBlock\">\nHeader:\n{\n    heading: string;\n    subHeading?: string;\n    backIcon?: boolean;\n    backIconCallback?: (e) => void;\n    backButton?: boolean;\n    backButtonCallback?: (e) => void;\n}\n</pre>\n\n**`backIcon` and `backIconCallback` will soon be deprecated**\n\n| Name | Description |\n| --- | --- |\n| heading | Heading of `Sidesheet` |\n| subHeading | Subheading of `Sidesheet` |\n| backButton | Determines if back button is visible |\n| backButtonCallback | Callback called when back button is clicked |\n| backIcon | Determines if back button is visible |\n| backIconCallback | Callback called when back button is clicked |",
          "type": {
            "required": false,
            "name": "other",
            "value": "Pick<OverlayHeaderProps, \"className\" | \"data-test\" | \"heading\" | \"subHeading\" | \"backButton\" | \"backButtonCallback\" | \"backIcon\" | \"backIconCallback\">"
          },
          "table": {
            "type": {
              "summary": "Pick<OverlayHeaderProps, \"className\" | \"data-test\" | \"heading\" | \"subHeading\" | \"backButton\" | \"backButtonCallback\" | \"backIcon\" | \"backIconCallback\">"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "header": {
          "name": "header",
          "description": "header component to be used as sidesheet header.\nclose button is not part of header so it will not be replaced.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Sidesheet`\n\nDimension: `large` | `regular`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "regular",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "\"regular\" | \"large\""
            },
            "defaultValue": {
              "summary": "\"regular\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close state",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "stickFooter": {
          "name": "stickFooter",
          "description": "Determines if footer is sticked at bottom",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "seperator": {
          "name": "seperator",
          "description": "Show dividers in the header and the footer.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footer": {
          "name": "footer",
          "description": "Footer component inside `Sidesheet`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footerOptions": {
          "name": "footerOptions",
          "description": "Footer options (doesn't work if `footer` prop is used).\n\nUse `footer` prop if custom footer is needed.\n<pre className=\"DocPage-codeBlock\">\n  OverlayFooterOptions {\n    actions: ButtonProps[];\n  }\n([ButtonProps](https://innovaccer.github.io/design-system/?path=/docs/components-button-all--all))\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FooterOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "FooterOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "backdropClose": {
          "name": "backdropClose",
          "description": "Determined close event on backdrop click",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnEscape": {
          "name": "closeOnEscape",
          "description": "Closes `Sidesheet` when `Escape` key is pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback called `Sidesheet` is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-sidesheet-large--large": {
    "id": "components-sidesheet-large--large",
    "kind": "Components/Sidesheet/Large",
    "name": "Large",
    "story": "Large",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const open = boolean('open', true);\n  const seperator = boolean('seperator', false);\n  const backIcon = boolean('back icon', false);\n  const stickFooter = boolean('stick bottom', false);\n  const backdropClose = boolean('backdropClose', false);\n\n  const onClose = () => {\n    updateKnob('open', false);\n    action('on close triggered')();\n  };\n\n  const backIconCallback = () => {\n    action('back icon clicked')();\n  };\n\n  const headerOptions = {\n    backIcon,\n    backIconCallback: backIcon ? backIconCallback : undefined,\n    heading: 'Heading',\n    subHeading: 'Subheading',\n  };\n\n  const options = {\n    onClose,\n    open,\n    seperator,\n    headerOptions,\n    stickFooter,\n    backdropClose,\n    footer: (\n      <>\n        <Button appearance=\"primary\" className=\"mr-4\">\n          Primary\n        </Button>\n        <Button appearance=\"basic\">Basic</Button>\n      </>\n    ),\n  };\n\n  const modalDescriptionOptions = {\n    title: 'Description Title',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    removePadding: true,\n  };\n\n  const modalDescriptionOptionsWithoutTitle = {\n    description: 'Card Sections include supporting text like an article summary or a restaurant description.',\n    removePadding: true,\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Sidesheet {...options} dimension=\"large\">\n        <Text>Modal Body</Text>\n        <ModalDescription {...modalDescriptionOptions} />\n        <ModalDescription {...modalDescriptionOptionsWithoutTitle} />\n      </Sidesheet>\n    </div>\n  );\n}"
      },
      "__id": "components-sidesheet-large--large",
      "args": {},
      "argTypes": {
        "headerOptions": {
          "name": "headerOptions",
          "description": "Header options (doesn't work if `header` prop is used)\n\nUse `header` prop if custom header is needed.\n\n<pre className=\"DocPage-codeBlock\">\nHeader:\n{\n    heading: string;\n    subHeading?: string;\n    backIcon?: boolean;\n    backIconCallback?: (e) => void;\n    backButton?: boolean;\n    backButtonCallback?: (e) => void;\n}\n</pre>\n\n**`backIcon` and `backIconCallback` will soon be deprecated**\n\n| Name | Description |\n| --- | --- |\n| heading | Heading of `Sidesheet` |\n| subHeading | Subheading of `Sidesheet` |\n| backButton | Determines if back button is visible |\n| backButtonCallback | Callback called when back button is clicked |\n| backIcon | Determines if back button is visible |\n| backIconCallback | Callback called when back button is clicked |",
          "type": {
            "required": false,
            "name": "other",
            "value": "Pick<OverlayHeaderProps, \"className\" | \"data-test\" | \"heading\" | \"subHeading\" | \"backButton\" | \"backButtonCallback\" | \"backIcon\" | \"backIconCallback\">"
          },
          "table": {
            "type": {
              "summary": "Pick<OverlayHeaderProps, \"className\" | \"data-test\" | \"heading\" | \"subHeading\" | \"backButton\" | \"backButtonCallback\" | \"backIcon\" | \"backIconCallback\">"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "header": {
          "name": "header",
          "description": "header component to be used as sidesheet header.\nclose button is not part of header so it will not be replaced.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Sidesheet`\n\nDimension: `large` | `regular`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "regular",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "\"regular\" | \"large\""
            },
            "defaultValue": {
              "summary": "\"regular\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close state",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "stickFooter": {
          "name": "stickFooter",
          "description": "Determines if footer is sticked at bottom",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "seperator": {
          "name": "seperator",
          "description": "Show dividers in the header and the footer.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footer": {
          "name": "footer",
          "description": "Footer component inside `Sidesheet`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footerOptions": {
          "name": "footerOptions",
          "description": "Footer options (doesn't work if `footer` prop is used).\n\nUse `footer` prop if custom footer is needed.\n<pre className=\"DocPage-codeBlock\">\n  OverlayFooterOptions {\n    actions: ButtonProps[];\n  }\n([ButtonProps](https://innovaccer.github.io/design-system/?path=/docs/components-button-all--all))\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FooterOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "FooterOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "backdropClose": {
          "name": "backdropClose",
          "description": "Determined close event on backdrop click",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnEscape": {
          "name": "closeOnEscape",
          "description": "Closes `Sidesheet` when `Escape` key is pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback called `Sidesheet` is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-sidesheet-layering--layering": {
    "id": "components-sidesheet-layering--layering",
    "kind": "Components/Sidesheet/Layering",
    "name": "Layering",
    "story": "Layering",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const open = boolean('open', true);\n  const openSecond = boolean('openSecond', false);\n  const seperator = boolean('seperator', false);\n  const backIcon = boolean('back icon', false);\n  const stickFooter = boolean('stick bottom', false);\n  const backdropClose = boolean('backdropClose', false);\n  const dimension = select('dimension', ['regular', 'large'], 'regular');\n\n  const onClose = () => {\n    updateKnob('open', false);\n    action('on close triggered')();\n  };\n\n  const onCloseSecond = () => {\n    updateKnob('openSecond', false);\n    action('on close triggered')();\n  };\n\n  const backIconCallback = () => {\n    action('back icon clicked')();\n  };\n\n  const headerOptions = {\n    backIcon,\n    backIconCallback: backIcon ? backIconCallback : undefined,\n    heading: 'Heading',\n    subHeading: 'Subheading',\n  };\n\n  const options = {\n    onClose,\n    open,\n    dimension,\n    seperator,\n    headerOptions,\n    stickFooter,\n    backdropClose,\n    footer: (\n      <>\n        <Button appearance=\"primary\" className=\"mr-4\" onClick={() => updateKnob('openSecond', true)}>\n          Open\n        </Button>\n        <Button appearance=\"basic\">Basic</Button>\n      </>\n    ),\n  };\n\n  const SecondOverlayOptions = {\n    dimension,\n    seperator,\n    headerOptions,\n    stickFooter,\n    backdropClose,\n    onClose: onCloseSecond,\n    open: openSecond,\n    footer: (\n      <>\n        <Button appearance=\"primary\" className=\"mr-4\">\n          Primary\n        </Button>\n      </>\n    ),\n  };\n\n  const modalDescriptionOptions = {\n    title: 'Description Title',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    removePadding: true,\n  };\n\n  const modalDescriptionOptionsWithoutTitle = {\n    description: 'Card Sections include supporting text like an article summary or a restaurant description.',\n    removePadding: true,\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Sidesheet {...options} dimension=\"large\" closeOnEscape={true}>\n        <Text>Modal Body</Text>\n        <ModalDescription {...modalDescriptionOptions} />\n        <ModalDescription {...modalDescriptionOptionsWithoutTitle} />\n      </Sidesheet>\n\n      <Sidesheet {...SecondOverlayOptions} closeOnEscape={true}>\n        <Text>Modal Body Part Two</Text>\n        <ModalDescription {...modalDescriptionOptions} />\n        <ModalDescription {...modalDescriptionOptionsWithoutTitle} />\n      </Sidesheet>\n    </div>\n  );\n}"
      },
      "__id": "components-sidesheet-layering--layering",
      "args": {},
      "argTypes": {
        "headerOptions": {
          "name": "headerOptions",
          "description": "Header options (doesn't work if `header` prop is used)\n\nUse `header` prop if custom header is needed.\n\n<pre className=\"DocPage-codeBlock\">\nHeader:\n{\n    heading: string;\n    subHeading?: string;\n    backIcon?: boolean;\n    backIconCallback?: (e) => void;\n    backButton?: boolean;\n    backButtonCallback?: (e) => void;\n}\n</pre>\n\n**`backIcon` and `backIconCallback` will soon be deprecated**\n\n| Name | Description |\n| --- | --- |\n| heading | Heading of `Sidesheet` |\n| subHeading | Subheading of `Sidesheet` |\n| backButton | Determines if back button is visible |\n| backButtonCallback | Callback called when back button is clicked |\n| backIcon | Determines if back button is visible |\n| backIconCallback | Callback called when back button is clicked |",
          "type": {
            "required": false,
            "name": "other",
            "value": "Pick<OverlayHeaderProps, \"className\" | \"data-test\" | \"heading\" | \"subHeading\" | \"backButton\" | \"backButtonCallback\" | \"backIcon\" | \"backIconCallback\">"
          },
          "table": {
            "type": {
              "summary": "Pick<OverlayHeaderProps, \"className\" | \"data-test\" | \"heading\" | \"subHeading\" | \"backButton\" | \"backButtonCallback\" | \"backIcon\" | \"backIconCallback\">"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "header": {
          "name": "header",
          "description": "header component to be used as sidesheet header.\nclose button is not part of header so it will not be replaced.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Sidesheet`\n\nDimension: `large` | `regular`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "regular",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "\"regular\" | \"large\""
            },
            "defaultValue": {
              "summary": "\"regular\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close state",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "stickFooter": {
          "name": "stickFooter",
          "description": "Determines if footer is sticked at bottom",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "seperator": {
          "name": "seperator",
          "description": "Show dividers in the header and the footer.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footer": {
          "name": "footer",
          "description": "Footer component inside `Sidesheet`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footerOptions": {
          "name": "footerOptions",
          "description": "Footer options (doesn't work if `footer` prop is used).\n\nUse `footer` prop if custom footer is needed.\n<pre className=\"DocPage-codeBlock\">\n  OverlayFooterOptions {\n    actions: ButtonProps[];\n  }\n([ButtonProps](https://innovaccer.github.io/design-system/?path=/docs/components-button-all--all))\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FooterOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "FooterOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "backdropClose": {
          "name": "backdropClose",
          "description": "Determined close event on backdrop click",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnEscape": {
          "name": "closeOnEscape",
          "description": "Closes `Sidesheet` when `Escape` key is pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback called `Sidesheet` is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-sidesheet-layering-with-modal--layering-with-modal": {
    "id": "components-sidesheet-layering-with-modal--layering-with-modal",
    "kind": "Components/Sidesheet/Layering With Modal",
    "name": "Layering With Modal",
    "story": "Layering With Modal",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const open = boolean('open', true);\n  const openSecond = boolean('openSecond', false);\n  const seperator = boolean('seperator', false);\n  const backIcon = boolean('back icon', false);\n  const stickFooter = boolean('stick bottom', false);\n  const backdropClose = boolean('backdropClose', false);\n  const dimension = select('dimension', ['regular', 'large'], 'regular');\n\n  const onClose = () => {\n    updateKnob('open', false);\n    action('on close triggered')();\n  };\n\n  const onCloseSecond = () => {\n    updateKnob('openSecond', false);\n    action('on close triggered')();\n  };\n\n  const backIconCallback = () => {\n    action('back icon clicked')();\n  };\n\n  const headerOptions = {\n    backIcon,\n    backIconCallback: backIcon ? backIconCallback : undefined,\n    heading: 'Heading',\n    subHeading: 'Subheading',\n  };\n\n  const options = {\n    onClose,\n    open,\n    dimension,\n    seperator,\n    headerOptions,\n    stickFooter,\n    backdropClose,\n    footer: (\n      <>\n        <Button appearance=\"primary\" className=\"mr-4\" onClick={() => updateKnob('openSecond', true)}>\n          Open\n        </Button>\n        <Button appearance=\"basic\">Basic</Button>\n      </>\n    ),\n  };\n\n  const modalDescriptionOptions = {\n    title: 'Description Title',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    removePadding: true,\n  };\n\n  const modalDescriptionOptionsWithoutTitle = {\n    description: 'Card Sections include supporting text like an article summary or a restaurant description.',\n    removePadding: true,\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Sidesheet {...options} closeOnEscape={true}>\n        <Text>Modal Body</Text>\n        <ModalDescription {...modalDescriptionOptions} />\n        <ModalDescription {...modalDescriptionOptionsWithoutTitle} />\n      </Sidesheet>\n\n      <Modal\n        closeOnEscape={true}\n        open={openSecond}\n        dimension=\"medium\"\n        backdropClose={false}\n        onClose={onCloseSecond}\n        headerOptions={{\n          heading: 'Heading Part Two',\n          subHeading: 'Subheading Part Two',\n        }}\n        footer={\n          <>\n            <Button appearance=\"primary\" className=\"ml-4\">\n              Primary\n            </Button>\n          </>\n        }\n      >\n        <Text>Modal Part Two Body</Text>\n        <ModalDescription description=\"Card Sections include supporting text like an article summary or a restaurant description.\" />\n      </Modal>\n    </div>\n  );\n}"
      },
      "__id": "components-sidesheet-layering-with-modal--layering-with-modal",
      "args": {},
      "argTypes": {
        "headerOptions": {
          "name": "headerOptions",
          "description": "Header options (doesn't work if `header` prop is used)\n\nUse `header` prop if custom header is needed.\n\n<pre className=\"DocPage-codeBlock\">\nHeader:\n{\n    heading: string;\n    subHeading?: string;\n    backIcon?: boolean;\n    backIconCallback?: (e) => void;\n    backButton?: boolean;\n    backButtonCallback?: (e) => void;\n}\n</pre>\n\n**`backIcon` and `backIconCallback` will soon be deprecated**\n\n| Name | Description |\n| --- | --- |\n| heading | Heading of `Sidesheet` |\n| subHeading | Subheading of `Sidesheet` |\n| backButton | Determines if back button is visible |\n| backButtonCallback | Callback called when back button is clicked |\n| backIcon | Determines if back button is visible |\n| backIconCallback | Callback called when back button is clicked |",
          "type": {
            "required": false,
            "name": "other",
            "value": "Pick<OverlayHeaderProps, \"className\" | \"data-test\" | \"heading\" | \"subHeading\" | \"backButton\" | \"backButtonCallback\" | \"backIcon\" | \"backIconCallback\">"
          },
          "table": {
            "type": {
              "summary": "Pick<OverlayHeaderProps, \"className\" | \"data-test\" | \"heading\" | \"subHeading\" | \"backButton\" | \"backButtonCallback\" | \"backIcon\" | \"backIconCallback\">"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "header": {
          "name": "header",
          "description": "header component to be used as sidesheet header.\nclose button is not part of header so it will not be replaced.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Sidesheet`\n\nDimension: `large` | `regular`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "regular",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "\"regular\" | \"large\""
            },
            "defaultValue": {
              "summary": "\"regular\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close state",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "stickFooter": {
          "name": "stickFooter",
          "description": "Determines if footer is sticked at bottom",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "seperator": {
          "name": "seperator",
          "description": "Show dividers in the header and the footer.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footer": {
          "name": "footer",
          "description": "Footer component inside `Sidesheet`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footerOptions": {
          "name": "footerOptions",
          "description": "Footer options (doesn't work if `footer` prop is used).\n\nUse `footer` prop if custom footer is needed.\n<pre className=\"DocPage-codeBlock\">\n  OverlayFooterOptions {\n    actions: ButtonProps[];\n  }\n([ButtonProps](https://innovaccer.github.io/design-system/?path=/docs/components-button-all--all))\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FooterOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "FooterOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "backdropClose": {
          "name": "backdropClose",
          "description": "Determined close event on backdrop click",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnEscape": {
          "name": "closeOnEscape",
          "description": "Closes `Sidesheet` when `Escape` key is pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback called `Sidesheet` is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-sidesheet-regular--regular": {
    "id": "components-sidesheet-regular--regular",
    "kind": "Components/Sidesheet/Regular",
    "name": "Regular",
    "story": "Regular",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const open = boolean('open', true);\n  const seperator = boolean('seperator', false);\n  const backIcon = boolean('back icon', false);\n  const stickFooter = boolean('stick bottom', false);\n  const backdropClose = boolean('backdropClose', false);\n\n  const onClose = () => {\n    updateKnob('open', false);\n    action('on close triggered')();\n  };\n\n  const backIconCallback = () => {\n    action('back icon clicked')();\n  };\n\n  const headerOptions = {\n    backIcon,\n    backIconCallback: backIcon ? backIconCallback : undefined,\n    heading: 'Heading',\n    subHeading: 'Subheading',\n  };\n\n  const options = {\n    onClose,\n    open,\n    seperator,\n    headerOptions,\n    stickFooter,\n    backdropClose,\n    footer: (\n      <>\n        <Button appearance=\"primary\" className=\"mr-4\">\n          Primary\n        </Button>\n        <Button appearance=\"basic\">Basic</Button>\n      </>\n    ),\n  };\n\n  const modalDescriptionOptions = {\n    title: 'Description Title',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    removePadding: true,\n  };\n\n  const modalDescriptionOptionsWithoutTitle = {\n    description: 'Card Sections include supporting text like an article summary or a restaurant description.',\n    removePadding: true,\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Sidesheet {...options} dimension=\"regular\">\n        <Text>Modal Body</Text>\n        <ModalDescription {...modalDescriptionOptions} />\n        <ModalDescription {...modalDescriptionOptionsWithoutTitle} />\n      </Sidesheet>\n    </div>\n  );\n}"
      },
      "__id": "components-sidesheet-regular--regular",
      "args": {},
      "argTypes": {
        "headerOptions": {
          "name": "headerOptions",
          "description": "Header options (doesn't work if `header` prop is used)\n\nUse `header` prop if custom header is needed.\n\n<pre className=\"DocPage-codeBlock\">\nHeader:\n{\n    heading: string;\n    subHeading?: string;\n    backIcon?: boolean;\n    backIconCallback?: (e) => void;\n    backButton?: boolean;\n    backButtonCallback?: (e) => void;\n}\n</pre>\n\n**`backIcon` and `backIconCallback` will soon be deprecated**\n\n| Name | Description |\n| --- | --- |\n| heading | Heading of `Sidesheet` |\n| subHeading | Subheading of `Sidesheet` |\n| backButton | Determines if back button is visible |\n| backButtonCallback | Callback called when back button is clicked |\n| backIcon | Determines if back button is visible |\n| backIconCallback | Callback called when back button is clicked |",
          "type": {
            "required": false,
            "name": "other",
            "value": "Pick<OverlayHeaderProps, \"className\" | \"data-test\" | \"heading\" | \"subHeading\" | \"backButton\" | \"backButtonCallback\" | \"backIcon\" | \"backIconCallback\">"
          },
          "table": {
            "type": {
              "summary": "Pick<OverlayHeaderProps, \"className\" | \"data-test\" | \"heading\" | \"subHeading\" | \"backButton\" | \"backButtonCallback\" | \"backIcon\" | \"backIconCallback\">"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "header": {
          "name": "header",
          "description": "header component to be used as sidesheet header.\nclose button is not part of header so it will not be replaced.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Sidesheet`\n\nDimension: `large` | `regular`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "regular",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "\"regular\" | \"large\""
            },
            "defaultValue": {
              "summary": "\"regular\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close state",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "stickFooter": {
          "name": "stickFooter",
          "description": "Determines if footer is sticked at bottom",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "seperator": {
          "name": "seperator",
          "description": "Show dividers in the header and the footer.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footer": {
          "name": "footer",
          "description": "Footer component inside `Sidesheet`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footerOptions": {
          "name": "footerOptions",
          "description": "Footer options (doesn't work if `footer` prop is used).\n\nUse `footer` prop if custom footer is needed.\n<pre className=\"DocPage-codeBlock\">\n  OverlayFooterOptions {\n    actions: ButtonProps[];\n  }\n([ButtonProps](https://innovaccer.github.io/design-system/?path=/docs/components-button-all--all))\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FooterOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "FooterOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "backdropClose": {
          "name": "backdropClose",
          "description": "Determined close event on backdrop click",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnEscape": {
          "name": "closeOnEscape",
          "description": "Closes `Sidesheet` when `Escape` key is pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback called `Sidesheet` is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-sidesheet-sticky-footer--sticky-footer": {
    "id": "components-sidesheet-sticky-footer--sticky-footer",
    "kind": "Components/Sidesheet/Sticky Footer",
    "name": "Sticky Footer",
    "story": "Sticky Footer",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const open = boolean('open', true);\n  const seperator = boolean('seperator', false);\n  const backdropClose = boolean('backdropClose', false);\n  const dimension = select('dimension', ['regular', 'large'], 'regular');\n\n  const onClose = () => {\n    updateKnob('open', false);\n    action('on close triggered')();\n  };\n\n  const backIconCallback = () => {\n    action('back icon clicked')();\n  };\n\n  const headerOptions = {\n    backIconCallback,\n    backIcon: true,\n    heading: 'Heading',\n    subHeading: 'Subheading',\n  };\n\n  const options = {\n    onClose,\n    open,\n    dimension,\n    seperator,\n    headerOptions,\n    backdropClose,\n    stickFooter: true,\n    footer: (\n      <>\n        <Button appearance=\"primary\" className=\"mr-4\">\n          Primary\n        </Button>\n        <Button appearance=\"basic\">Basic</Button>\n      </>\n    ),\n  };\n\n  const modalDescriptionOptions = {\n    title: 'Description Title',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    removePadding: true,\n  };\n\n  const modalDescriptionOptionsWithoutTitle = {\n    description: 'Card Sections include supporting text like an article summary or a restaurant description.',\n    removePadding: true,\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Sidesheet {...options}>\n        <Text>Modal Body</Text>\n        <ModalDescription {...modalDescriptionOptions} />\n        <ModalDescription {...modalDescriptionOptionsWithoutTitle} />\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Sidesheet>\n    </div>\n  );\n}"
      },
      "__id": "components-sidesheet-sticky-footer--sticky-footer",
      "args": {},
      "argTypes": {
        "headerOptions": {
          "name": "headerOptions",
          "description": "Header options (doesn't work if `header` prop is used)\n\nUse `header` prop if custom header is needed.\n\n<pre className=\"DocPage-codeBlock\">\nHeader:\n{\n    heading: string;\n    subHeading?: string;\n    backIcon?: boolean;\n    backIconCallback?: (e) => void;\n    backButton?: boolean;\n    backButtonCallback?: (e) => void;\n}\n</pre>\n\n**`backIcon` and `backIconCallback` will soon be deprecated**\n\n| Name | Description |\n| --- | --- |\n| heading | Heading of `Sidesheet` |\n| subHeading | Subheading of `Sidesheet` |\n| backButton | Determines if back button is visible |\n| backButtonCallback | Callback called when back button is clicked |\n| backIcon | Determines if back button is visible |\n| backIconCallback | Callback called when back button is clicked |",
          "type": {
            "required": false,
            "name": "other",
            "value": "Pick<OverlayHeaderProps, \"className\" | \"data-test\" | \"heading\" | \"subHeading\" | \"backButton\" | \"backButtonCallback\" | \"backIcon\" | \"backIconCallback\">"
          },
          "table": {
            "type": {
              "summary": "Pick<OverlayHeaderProps, \"className\" | \"data-test\" | \"heading\" | \"subHeading\" | \"backButton\" | \"backButtonCallback\" | \"backIcon\" | \"backIconCallback\">"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "header": {
          "name": "header",
          "description": "header component to be used as sidesheet header.\nclose button is not part of header so it will not be replaced.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Sidesheet`\n\nDimension: `large` | `regular`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "regular",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "\"regular\" | \"large\""
            },
            "defaultValue": {
              "summary": "\"regular\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close state",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "stickFooter": {
          "name": "stickFooter",
          "description": "Determines if footer is sticked at bottom",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "seperator": {
          "name": "seperator",
          "description": "Show dividers in the header and the footer.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footer": {
          "name": "footer",
          "description": "Footer component inside `Sidesheet`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footerOptions": {
          "name": "footerOptions",
          "description": "Footer options (doesn't work if `footer` prop is used).\n\nUse `footer` prop if custom footer is needed.\n<pre className=\"DocPage-codeBlock\">\n  OverlayFooterOptions {\n    actions: ButtonProps[];\n  }\n([ButtonProps](https://innovaccer.github.io/design-system/?path=/docs/components-button-all--all))\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FooterOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "FooterOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "backdropClose": {
          "name": "backdropClose",
          "description": "Determined close event on backdrop click",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnEscape": {
          "name": "closeOnEscape",
          "description": "Closes `Sidesheet` when `Escape` key is pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback called `Sidesheet` is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-sidesheet-two-steps--two-steps": {
    "id": "components-sidesheet-two-steps--two-steps",
    "kind": "Components/Sidesheet/Two Steps",
    "name": "Two Steps",
    "story": "Two Steps",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [page, setPage] = React.useState(2);\n\n  const open = boolean('open', true);\n  const seperator = boolean('seperator', false);\n  const stickFooter = boolean('stick bottom', false);\n  const backdropClose = boolean('backdropClose', false);\n  const dimension = select('dimension', ['regular', 'large'], 'regular');\n\n  const onClose = () => {\n    updateKnob('open', false);\n    action('on close triggered')();\n  };\n\n  const backIconCallback = () => {\n    action('back icon clicked')();\n    setPage(1);\n  };\n\n  const headerOptions = {\n    backIconCallback,\n    backIcon: page === 2,\n    heading: `Heading ${page}`,\n    subHeading: 'Subheading',\n  };\n\n  const options = {\n    onClose,\n    open,\n    dimension,\n    seperator,\n    headerOptions,\n    stickFooter,\n    backdropClose,\n    footer: (\n      <>\n        {page === 1 && (\n          <Button appearance=\"primary\" className=\"mr-4\" onClick={() => setPage(2)}>\n            Next\n          </Button>\n        )}\n        {page === 2 && (\n          <>\n            <Button appearance=\"primary\" className=\"mr-4\">\n              Submit\n            </Button>\n            <Button appearance=\"basic\" onClick={() => setPage(1)}>\n              Back\n            </Button>\n          </>\n        )}\n      </>\n    ),\n  };\n\n  const modalDescriptionOptions = {\n    title: 'Description Title',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    removePadding: true,\n  };\n\n  const modalDescriptionOptionsWithoutTitle = {\n    description: 'Card Sections include supporting text like an article summary or a restaurant description.',\n    removePadding: true,\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua.\n        <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <br />\n      </Paragraph>\n      <Sidesheet {...options}>\n        <Heading size=\"s\">{`Page ${page}`}</Heading>\n        <Text>Modal Body</Text>\n        <ModalDescription {...modalDescriptionOptions} />\n        <ModalDescription {...modalDescriptionOptionsWithoutTitle} />\n      </Sidesheet>\n    </div>\n  );\n}"
      },
      "__id": "components-sidesheet-two-steps--two-steps",
      "args": {},
      "argTypes": {
        "headerOptions": {
          "name": "headerOptions",
          "description": "Header options (doesn't work if `header` prop is used)\n\nUse `header` prop if custom header is needed.\n\n<pre className=\"DocPage-codeBlock\">\nHeader:\n{\n    heading: string;\n    subHeading?: string;\n    backIcon?: boolean;\n    backIconCallback?: (e) => void;\n    backButton?: boolean;\n    backButtonCallback?: (e) => void;\n}\n</pre>\n\n**`backIcon` and `backIconCallback` will soon be deprecated**\n\n| Name | Description |\n| --- | --- |\n| heading | Heading of `Sidesheet` |\n| subHeading | Subheading of `Sidesheet` |\n| backButton | Determines if back button is visible |\n| backButtonCallback | Callback called when back button is clicked |\n| backIcon | Determines if back button is visible |\n| backIconCallback | Callback called when back button is clicked |",
          "type": {
            "required": false,
            "name": "other",
            "value": "Pick<OverlayHeaderProps, \"className\" | \"data-test\" | \"heading\" | \"subHeading\" | \"backButton\" | \"backButtonCallback\" | \"backIcon\" | \"backIconCallback\">"
          },
          "table": {
            "type": {
              "summary": "Pick<OverlayHeaderProps, \"className\" | \"data-test\" | \"heading\" | \"subHeading\" | \"backButton\" | \"backButtonCallback\" | \"backIcon\" | \"backIconCallback\">"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "header": {
          "name": "header",
          "description": "header component to be used as sidesheet header.\nclose button is not part of header so it will not be replaced.",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "dimension": {
          "name": "dimension",
          "description": "Dimension of `Sidesheet`\n\nDimension: `large` | `regular`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "regular",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "\"regular\" | \"large\""
            },
            "defaultValue": {
              "summary": "\"regular\""
            }
          }
        },
        "open": {
          "name": "open",
          "description": "Handles open/close state",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": null
          }
        },
        "stickFooter": {
          "name": "stickFooter",
          "description": "Determines if footer is sticked at bottom",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "seperator": {
          "name": "seperator",
          "description": "Show dividers in the header and the footer.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footer": {
          "name": "footer",
          "description": "Footer component inside `Sidesheet`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "footerOptions": {
          "name": "footerOptions",
          "description": "Footer options (doesn't work if `footer` prop is used).\n\nUse `footer` prop if custom footer is needed.\n<pre className=\"DocPage-codeBlock\">\n  OverlayFooterOptions {\n    actions: ButtonProps[];\n  }\n([ButtonProps](https://innovaccer.github.io/design-system/?path=/docs/components-button-all--all))\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FooterOptions | undefined"
          },
          "table": {
            "type": {
              "summary": "FooterOptions | undefined"
            },
            "defaultValue": null
          }
        },
        "backdropClose": {
          "name": "backdropClose",
          "description": "Determined close event on backdrop click",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "closeOnEscape": {
          "name": "closeOnEscape",
          "description": "Closes `Sidesheet` when `Escape` key is pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback called `Sidesheet` is closed",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event?: Event | MouseEvent<HTMLElement, MouseEvent> | undefined, reason?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-slider-all--all": {
    "id": "components-slider-all--all",
    "kind": "Components/Slider/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const min = number('min', 0) || undefined;\n  const max = number('max', 10) || undefined;\n  const stepSize = number('step size', 0.1) || undefined;\n  const labelStepSize = number('label step size', 1) || undefined;\n  const defaultValue = number('default value', 4) || undefined;\n  const label = text('Label', 'Slider Label');\n  const disabled = boolean('disabled', false);\n\n  const onChange = (value: number) => {\n    return action(`new value: ${value}`);\n  };\n\n  const options = {\n    min,\n    max,\n    stepSize,\n    labelStepSize,\n    label,\n    disabled,\n    defaultValue,\n    onChange,\n  };\n\n  return <Slider key={defaultValue} className=\"mt-2\" {...options} />;\n}"
      },
      "__id": "components-slider-all--all",
      "args": {},
      "argTypes": {
        "defaultValue": {
          "name": "defaultValue",
          "description": "Gives default value to `Slider` (Used in case of uncontrolled `Slider`).",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "value": {
          "name": "value",
          "description": "Value of `Slider`(Used in case of controlled `Slider`).",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback invoked when the value changes.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onRelease": {
          "name": "onRelease",
          "description": "Callback invoked when the handle is released.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines whether the `Slider` is non-interactive.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "labelStepSize": {
          "name": "labelStepSize",
          "description": "Indicates increment between successive labels (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "labelPrecision": {
          "name": "labelPrecision",
          "description": "Number of decimal places to use when rendering label value. <br/>\nDefault value is the number of decimals used in the `stepSize` prop.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Maximum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "10"
            }
          }
        },
        "min": {
          "name": "min",
          "description": "Minimum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "stepSize": {
          "name": "stepSize",
          "description": "Indicates the amount by which the handle moves (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "label": {
          "name": "label",
          "description": "Label of `Slider`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "labelRenderer": {
          "name": "labelRenderer",
          "description": "Callback to render a custom label.\nIf `true`, labels will use number value formatted to `labelPrecision` decimal places.\nIf `false`, labels will not be shown.",
          "type": {
            "required": true,
            "name": "other",
            "value": "boolean | ((value: number) => string)"
          },
          "table": {
            "type": {
              "summary": "boolean | ((value: number) => string)"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-slider-variants-controlled-slider--controlled-slider": {
    "id": "components-slider-variants-controlled-slider--controlled-slider",
    "kind": "Components/Slider/Variants/Controlled Slider",
    "name": "Controlled Slider",
    "story": "Controlled Slider",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [value, setValue] = React.useState(4);\n\n  const onChange = (newValue: number) => {\n    window.setTimeout(() => {\n      setValue(newValue);\n    }, 1000);\n  };\n\n  return (\n    <Slider\n      min={1}\n      max={10}\n      label=\"Controlled Slider\"\n      stepSize={0.1}\n      labelStepSize={1}\n      value={value}\n      onChange={onChange}\n      className=\"mt-2\"\n    />\n  );\n}"
      },
      "__id": "components-slider-variants-controlled-slider--controlled-slider",
      "args": {},
      "argTypes": {
        "defaultValue": {
          "name": "defaultValue",
          "description": "Gives default value to `Slider` (Used in case of uncontrolled `Slider`).",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "value": {
          "name": "value",
          "description": "Value of `Slider`(Used in case of controlled `Slider`).",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback invoked when the value changes.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onRelease": {
          "name": "onRelease",
          "description": "Callback invoked when the handle is released.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines whether the `Slider` is non-interactive.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "labelStepSize": {
          "name": "labelStepSize",
          "description": "Indicates increment between successive labels (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "labelPrecision": {
          "name": "labelPrecision",
          "description": "Number of decimal places to use when rendering label value. <br/>\nDefault value is the number of decimals used in the `stepSize` prop.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Maximum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "10"
            }
          }
        },
        "min": {
          "name": "min",
          "description": "Minimum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "stepSize": {
          "name": "stepSize",
          "description": "Indicates the amount by which the handle moves (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "label": {
          "name": "label",
          "description": "Label of `Slider`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "labelRenderer": {
          "name": "labelRenderer",
          "description": "Callback to render a custom label.\nIf `true`, labels will use number value formatted to `labelPrecision` decimal places.\nIf `false`, labels will not be shown.",
          "type": {
            "required": true,
            "name": "other",
            "value": "boolean | ((value: number) => string)"
          },
          "table": {
            "type": {
              "summary": "boolean | ((value: number) => string)"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-slider-variants-cutsom-labels--cutsom-labels": {
    "id": "components-slider-variants-cutsom-labels--cutsom-labels",
    "kind": "Components/Slider/Variants/Cutsom Labels",
    "name": "Cutsom Labels",
    "story": "Cutsom Labels",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [value, setValue] = React.useState(4);\n\n  const onChange = (newValue: number) => {\n    setValue(newValue);\n  };\n\n  const labelRenderer = (newValue: number) => {\n    return `${newValue}%`;\n  };\n\n  return (\n    <Slider\n      min={1}\n      max={10}\n      stepSize={0.1}\n      labelStepSize={1}\n      value={value}\n      onChange={onChange}\n      labelRenderer={labelRenderer}\n      className=\"mt-7\"\n    />\n  );\n}"
      },
      "__id": "components-slider-variants-cutsom-labels--cutsom-labels",
      "args": {},
      "argTypes": {
        "defaultValue": {
          "name": "defaultValue",
          "description": "Gives default value to `Slider` (Used in case of uncontrolled `Slider`).",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "value": {
          "name": "value",
          "description": "Value of `Slider`(Used in case of controlled `Slider`).",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback invoked when the value changes.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onRelease": {
          "name": "onRelease",
          "description": "Callback invoked when the handle is released.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines whether the `Slider` is non-interactive.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "labelStepSize": {
          "name": "labelStepSize",
          "description": "Indicates increment between successive labels (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "labelPrecision": {
          "name": "labelPrecision",
          "description": "Number of decimal places to use when rendering label value. <br/>\nDefault value is the number of decimals used in the `stepSize` prop.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Maximum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "10"
            }
          }
        },
        "min": {
          "name": "min",
          "description": "Minimum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "stepSize": {
          "name": "stepSize",
          "description": "Indicates the amount by which the handle moves (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "label": {
          "name": "label",
          "description": "Label of `Slider`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "labelRenderer": {
          "name": "labelRenderer",
          "description": "Callback to render a custom label.\nIf `true`, labels will use number value formatted to `labelPrecision` decimal places.\nIf `false`, labels will not be shown.",
          "type": {
            "required": true,
            "name": "other",
            "value": "boolean | ((value: number) => string)"
          },
          "table": {
            "type": {
              "summary": "boolean | ((value: number) => string)"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-slider-variants-disabled--disabled": {
    "id": "components-slider-variants-disabled--disabled",
    "kind": "Components/Slider/Variants/Disabled",
    "name": "Disabled",
    "story": "Disabled",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div>\n      <Slider\n        className=\"mb-9 mt-2\"\n        label=\"Disabled Slider\"\n        disabled={true}\n        stepSize={0.1}\n        labelStepSize={1}\n        defaultValue={4}\n      />\n      <Slider label=\"Default Slider\" stepSize={0.1} labelStepSize={1} defaultValue={4} className=\"mt-2\" />\n    </div>\n  );\n}"
      },
      "__id": "components-slider-variants-disabled--disabled",
      "args": {},
      "argTypes": {
        "defaultValue": {
          "name": "defaultValue",
          "description": "Gives default value to `Slider` (Used in case of uncontrolled `Slider`).",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "value": {
          "name": "value",
          "description": "Value of `Slider`(Used in case of controlled `Slider`).",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback invoked when the value changes.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onRelease": {
          "name": "onRelease",
          "description": "Callback invoked when the handle is released.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines whether the `Slider` is non-interactive.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "labelStepSize": {
          "name": "labelStepSize",
          "description": "Indicates increment between successive labels (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "labelPrecision": {
          "name": "labelPrecision",
          "description": "Number of decimal places to use when rendering label value. <br/>\nDefault value is the number of decimals used in the `stepSize` prop.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Maximum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "10"
            }
          }
        },
        "min": {
          "name": "min",
          "description": "Minimum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "stepSize": {
          "name": "stepSize",
          "description": "Indicates the amount by which the handle moves (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "label": {
          "name": "label",
          "description": "Label of `Slider`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "labelRenderer": {
          "name": "labelRenderer",
          "description": "Callback to render a custom label.\nIf `true`, labels will use number value formatted to `labelPrecision` decimal places.\nIf `false`, labels will not be shown.",
          "type": {
            "required": true,
            "name": "other",
            "value": "boolean | ((value: number) => string)"
          },
          "table": {
            "type": {
              "summary": "boolean | ((value: number) => string)"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-slider-variants-disctere-slider--disctere-slider": {
    "id": "components-slider-variants-disctere-slider--disctere-slider",
    "kind": "Components/Slider/Variants/Disctere Slider",
    "name": "Disctere Slider",
    "story": "Disctere Slider",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <Slider min={1} max={10} label=\"Discrete Slider\" stepSize={1} labelStepSize={1} defaultValue={4} className=\"mt-2\" />\n  );\n}"
      },
      "__id": "components-slider-variants-disctere-slider--disctere-slider",
      "args": {},
      "argTypes": {
        "defaultValue": {
          "name": "defaultValue",
          "description": "Gives default value to `Slider` (Used in case of uncontrolled `Slider`).",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "value": {
          "name": "value",
          "description": "Value of `Slider`(Used in case of controlled `Slider`).",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback invoked when the value changes.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onRelease": {
          "name": "onRelease",
          "description": "Callback invoked when the handle is released.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines whether the `Slider` is non-interactive.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "labelStepSize": {
          "name": "labelStepSize",
          "description": "Indicates increment between successive labels (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "labelPrecision": {
          "name": "labelPrecision",
          "description": "Number of decimal places to use when rendering label value. <br/>\nDefault value is the number of decimals used in the `stepSize` prop.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Maximum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "10"
            }
          }
        },
        "min": {
          "name": "min",
          "description": "Minimum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "stepSize": {
          "name": "stepSize",
          "description": "Indicates the amount by which the handle moves (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "label": {
          "name": "label",
          "description": "Label of `Slider`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "labelRenderer": {
          "name": "labelRenderer",
          "description": "Callback to render a custom label.\nIf `true`, labels will use number value formatted to `labelPrecision` decimal places.\nIf `false`, labels will not be shown.",
          "type": {
            "required": true,
            "name": "other",
            "value": "boolean | ((value: number) => string)"
          },
          "table": {
            "type": {
              "summary": "boolean | ((value: number) => string)"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-slider-variants-free-slider--free-slider": {
    "id": "components-slider-variants-free-slider--free-slider",
    "kind": "Components/Slider/Variants/Free Slider",
    "name": "Free Slider",
    "story": "Free Slider",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <Slider min={1} max={10} label=\"Free Slider\" stepSize={0.1} labelStepSize={1} defaultValue={4} className=\"mt-2\" />\n  );\n}"
      },
      "__id": "components-slider-variants-free-slider--free-slider",
      "args": {},
      "argTypes": {
        "defaultValue": {
          "name": "defaultValue",
          "description": "Gives default value to `Slider` (Used in case of uncontrolled `Slider`).",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "value": {
          "name": "value",
          "description": "Value of `Slider`(Used in case of controlled `Slider`).",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback invoked when the value changes.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onRelease": {
          "name": "onRelease",
          "description": "Callback invoked when the handle is released.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines whether the `Slider` is non-interactive.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "labelStepSize": {
          "name": "labelStepSize",
          "description": "Indicates increment between successive labels (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "labelPrecision": {
          "name": "labelPrecision",
          "description": "Number of decimal places to use when rendering label value. <br/>\nDefault value is the number of decimals used in the `stepSize` prop.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Maximum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "10"
            }
          }
        },
        "min": {
          "name": "min",
          "description": "Minimum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "stepSize": {
          "name": "stepSize",
          "description": "Indicates the amount by which the handle moves (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "label": {
          "name": "label",
          "description": "Label of `Slider`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "labelRenderer": {
          "name": "labelRenderer",
          "description": "Callback to render a custom label.\nIf `true`, labels will use number value formatted to `labelPrecision` decimal places.\nIf `false`, labels will not be shown.",
          "type": {
            "required": true,
            "name": "other",
            "value": "boolean | ((value: number) => string)"
          },
          "table": {
            "type": {
              "summary": "boolean | ((value: number) => string)"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-slider-variants-slider-label--slider-label": {
    "id": "components-slider-variants-slider-label--slider-label",
    "kind": "Components/Slider/Variants/Slider Label",
    "name": "Slider Label",
    "story": "Slider Label",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div>\n      <div className=\"mb-9\">\n        <Text weight=\"strong\">With Slider Label</Text>\n        <br />\n        <Slider label=\"Slider-label\" stepSize={0.1} labelStepSize={1} defaultValue={4} className=\"mt-2\" />\n      </div>\n      <div>\n        <Text weight=\"strong\">Without Slider Label</Text>\n        <br />\n        <Slider stepSize={0.1} labelStepSize={1} defaultValue={4} className=\"mt-2\" />\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-slider-variants-slider-label--slider-label",
      "args": {},
      "argTypes": {
        "defaultValue": {
          "name": "defaultValue",
          "description": "Gives default value to `Slider` (Used in case of uncontrolled `Slider`).",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "value": {
          "name": "value",
          "description": "Value of `Slider`(Used in case of controlled `Slider`).",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback invoked when the value changes.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onRelease": {
          "name": "onRelease",
          "description": "Callback invoked when the handle is released.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines whether the `Slider` is non-interactive.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "labelStepSize": {
          "name": "labelStepSize",
          "description": "Indicates increment between successive labels (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "labelPrecision": {
          "name": "labelPrecision",
          "description": "Number of decimal places to use when rendering label value. <br/>\nDefault value is the number of decimals used in the `stepSize` prop.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Maximum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "10"
            }
          }
        },
        "min": {
          "name": "min",
          "description": "Minimum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "stepSize": {
          "name": "stepSize",
          "description": "Indicates the amount by which the handle moves (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "label": {
          "name": "label",
          "description": "Label of `Slider`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "labelRenderer": {
          "name": "labelRenderer",
          "description": "Callback to render a custom label.\nIf `true`, labels will use number value formatted to `labelPrecision` decimal places.\nIf `false`, labels will not be shown.",
          "type": {
            "required": true,
            "name": "other",
            "value": "boolean | ((value: number) => string)"
          },
          "table": {
            "type": {
              "summary": "boolean | ((value: number) => string)"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-slider-variants-uncontrolled-slider--uncontrolled-slider": {
    "id": "components-slider-variants-uncontrolled-slider--uncontrolled-slider",
    "kind": "Components/Slider/Variants/Uncontrolled Slider",
    "name": "Uncontrolled Slider",
    "story": "Uncontrolled Slider",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <Slider\n      min={1}\n      max={10}\n      label=\"Uncontrolled Slider\"\n      stepSize={0.1}\n      labelStepSize={1}\n      defaultValue={4}\n      className=\"mt-2\"\n    />\n  );\n}"
      },
      "__id": "components-slider-variants-uncontrolled-slider--uncontrolled-slider",
      "args": {},
      "argTypes": {
        "defaultValue": {
          "name": "defaultValue",
          "description": "Gives default value to `Slider` (Used in case of uncontrolled `Slider`).",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "value": {
          "name": "value",
          "description": "Value of `Slider`(Used in case of controlled `Slider`).",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback invoked when the value changes.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onRelease": {
          "name": "onRelease",
          "description": "Callback invoked when the handle is released.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Determines whether the `Slider` is non-interactive.",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "labelStepSize": {
          "name": "labelStepSize",
          "description": "Indicates increment between successive labels (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "labelPrecision": {
          "name": "labelPrecision",
          "description": "Number of decimal places to use when rendering label value. <br/>\nDefault value is the number of decimals used in the `stepSize` prop.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "max": {
          "name": "max",
          "description": "Maximum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "10"
            }
          }
        },
        "min": {
          "name": "min",
          "description": "Minimum value of the `Slider`.",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "stepSize": {
          "name": "stepSize",
          "description": "Indicates the amount by which the handle moves (Must be greater than zero).",
          "type": {
            "required": true,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "label": {
          "name": "label",
          "description": "Label of `Slider`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "labelRenderer": {
          "name": "labelRenderer",
          "description": "Callback to render a custom label.\nIf `true`, labels will use number value formatted to `labelPrecision` decimal places.\nIf `false`, labels will not be shown.",
          "type": {
            "required": true,
            "name": "other",
            "value": "boolean | ((value: number) => string)"
          },
          "table": {
            "type": {
              "summary": "boolean | ((value: number) => string)"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-statushint-all--all": {
    "id": "components-statushint-all--all",
    "kind": "Components/StatusHint/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const children = text('children', 'Status Hint');\n\n  const appearance = select('Appearance', ['default', 'alert', 'info', 'warning', 'success'], undefined);\n\n  const options = {\n    appearance,\n  };\n\n  return (\n    <div>\n      <StatusHint {...options}>{children}</StatusHint>\n    </div>\n  );\n}"
      },
      "__id": "components-statushint-all--all",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "Describes label of the `Status Hint`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of Icon",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "alert",
              "warning",
              "success",
              "default",
              "info"
            ]
          },
          "table": {
            "type": {
              "summary": "\"alert\" | \"warning\" | \"success\" | \"default\" | \"info\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Status Hint` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Status Hint`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Status Hint`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-statushint-alert--alert": {
    "id": "components-statushint-alert--alert",
    "kind": "Components/StatusHint/Alert",
    "name": "Alert",
    "story": "Alert",
    "parameters": {
      "storySource": {
        "source": "() => <StatusHint appearance=\"alert\">{'Alert'}</StatusHint>"
      },
      "__id": "components-statushint-alert--alert",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "Describes label of the `Status Hint`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of Icon",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "alert",
              "warning",
              "success",
              "default",
              "info"
            ]
          },
          "table": {
            "type": {
              "summary": "\"alert\" | \"warning\" | \"success\" | \"default\" | \"info\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Status Hint` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Status Hint`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Status Hint`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-statushint-completed--completed": {
    "id": "components-statushint-completed--completed",
    "kind": "Components/StatusHint/Completed",
    "name": "Completed",
    "story": "Completed",
    "parameters": {
      "storySource": {
        "source": "() => <StatusHint appearance=\"success\">{'Completed'}</StatusHint>"
      },
      "__id": "components-statushint-completed--completed",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "Describes label of the `Status Hint`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of Icon",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "alert",
              "warning",
              "success",
              "default",
              "info"
            ]
          },
          "table": {
            "type": {
              "summary": "\"alert\" | \"warning\" | \"success\" | \"default\" | \"info\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Status Hint` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Status Hint`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Status Hint`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-statushint-default-status-hint--default-status-hint": {
    "id": "components-statushint-default-status-hint--default-status-hint",
    "kind": "Components/StatusHint/Default Status Hint",
    "name": "Default Status Hint",
    "story": "Default Status Hint",
    "parameters": {
      "storySource": {
        "source": "() => <StatusHint appearance=\"default\">{'Default'}</StatusHint>"
      },
      "__id": "components-statushint-default-status-hint--default-status-hint",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "Describes label of the `Status Hint`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of Icon",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "alert",
              "warning",
              "success",
              "default",
              "info"
            ]
          },
          "table": {
            "type": {
              "summary": "\"alert\" | \"warning\" | \"success\" | \"default\" | \"info\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Status Hint` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Status Hint`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Status Hint`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-statushint-inactive--inactive": {
    "id": "components-statushint-inactive--inactive",
    "kind": "Components/StatusHint/Inactive",
    "name": "Inactive",
    "story": "Inactive",
    "parameters": {
      "storySource": {
        "source": "() => <StatusHint appearance=\"alert\">{'Inactive'}</StatusHint>"
      },
      "__id": "components-statushint-inactive--inactive",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "Describes label of the `Status Hint`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of Icon",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "alert",
              "warning",
              "success",
              "default",
              "info"
            ]
          },
          "table": {
            "type": {
              "summary": "\"alert\" | \"warning\" | \"success\" | \"default\" | \"info\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Status Hint` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Status Hint`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Status Hint`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-statushint-info--info": {
    "id": "components-statushint-info--info",
    "kind": "Components/StatusHint/Info",
    "name": "Info",
    "story": "Info",
    "parameters": {
      "storySource": {
        "source": "() => <StatusHint appearance=\"info\">{'Info'}</StatusHint>"
      },
      "__id": "components-statushint-info--info",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "Describes label of the `Status Hint`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of Icon",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "alert",
              "warning",
              "success",
              "default",
              "info"
            ]
          },
          "table": {
            "type": {
              "summary": "\"alert\" | \"warning\" | \"success\" | \"default\" | \"info\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Status Hint` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Status Hint`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Status Hint`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-statushint-ongoing--ongoing": {
    "id": "components-statushint-ongoing--ongoing",
    "kind": "Components/StatusHint/Ongoing",
    "name": "Ongoing",
    "story": "Ongoing",
    "parameters": {
      "storySource": {
        "source": "() => <StatusHint appearance=\"warning\">{'Ongoing'}</StatusHint>"
      },
      "__id": "components-statushint-ongoing--ongoing",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "Describes label of the `Status Hint`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of Icon",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "alert",
              "warning",
              "success",
              "default",
              "info"
            ]
          },
          "table": {
            "type": {
              "summary": "\"alert\" | \"warning\" | \"success\" | \"default\" | \"info\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Status Hint` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Status Hint`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Status Hint`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-statushint-success--success": {
    "id": "components-statushint-success--success",
    "kind": "Components/StatusHint/Success",
    "name": "Success",
    "story": "Success",
    "parameters": {
      "storySource": {
        "source": "() => <StatusHint appearance=\"success\">{'Success'}</StatusHint>"
      },
      "__id": "components-statushint-success--success",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "Describes label of the `Status Hint`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of Icon",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "alert",
              "warning",
              "success",
              "default",
              "info"
            ]
          },
          "table": {
            "type": {
              "summary": "\"alert\" | \"warning\" | \"success\" | \"default\" | \"info\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Status Hint` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Status Hint`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Status Hint`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-statushint-variants-appearance--appearance": {
    "id": "components-statushint-variants-appearance--appearance",
    "kind": "Components/StatusHint/Variants/Appearance",
    "name": "Appearance",
    "story": "Appearance",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const appearances: Appearance[] = ['info', 'success', 'alert', 'warning', 'default'];\n\n  return (\n    <div>\n      {appearances.map((iconAppearance, i) => {\n        return (\n          <div key={i} className=\"mb-4\">\n            <StatusHint appearance={iconAppearance}>{iconAppearance}</StatusHint>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-statushint-variants-appearance--appearance",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "Describes label of the `Status Hint`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of Icon",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "alert",
              "warning",
              "success",
              "default",
              "info"
            ]
          },
          "table": {
            "type": {
              "summary": "\"alert\" | \"warning\" | \"success\" | \"default\" | \"info\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Status Hint` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseEnter": {
          "name": "onMouseEnter",
          "description": "Handler to be called when mouse pointer enters `Status Hint`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onMouseLeave": {
          "name": "onMouseLeave",
          "description": "Handler to be called when mouse pointer leaves `Status Hint`.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-stepper-all--all": {
    "id": "components-stepper-all--all",
    "kind": "Components/Stepper/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [active, setActive] = React.useState(2);\n\n  const onChange = (index: number) => {\n    setActive(index);\n    return action(`Active Index: ${index}`)();\n  };\n\n  return <Stepper steps={steps} active={active} completed={1} onChange={onChange} />;\n}"
      },
      "__id": "components-stepper-all--all",
      "args": {},
      "argTypes": {
        "active": {
          "name": "active",
          "description": "Set the active step (zero based index).\n\nSet to -1 to disable all the steps.",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "completed": {
          "name": "completed",
          "description": "Set the completed steps (zero based index).\n\n**Number of completed steps <= completed index**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "-1"
            }
          }
        },
        "steps": {
          "name": "steps",
          "description": "<pre className=\"docPage-codeBlock\">\nStepProp {\n  label: string;\n  value?: React.ReactText;\n}\n\n| Name | Description |\n| --- | --- |\n| label | Describes Label of the step |\n| value | Value of option |\n\n</pre>",
          "type": {
            "required": true,
            "name": "other",
            "value": "StepProp[]"
          },
          "table": {
            "type": {
              "summary": "StepProp[]"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when user clicks on a non-disabled step.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((active: number, completed: number, label?: string | undefined, value?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((active: number, completed: number, label?: string | undefined, value?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "skipIndexes": {
          "name": "skipIndexes",
          "description": "",
          "type": {
            "required": false,
            "name": "other",
            "value": "number[]"
          },
          "table": {
            "type": {
              "summary": "number[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-stepper-skippable-step--skippable-step": {
    "id": "components-stepper-skippable-step--skippable-step",
    "kind": "Components/Stepper/Skippable Step",
    "name": "Skippable Step",
    "story": "Skippable Step",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [active, setActive] = React.useState(0);\n  const [completed, setCompleted] = React.useState(active - 1);\n  const [skipIndexes, setSkip] = React.useState<number[]>([]);\n\n  const onChange = (activeStep: number) => {\n    setActive(activeStep);\n    return action(`Active Index: ${activeStep}`)();\n  };\n\n  const onClickHandler = () => {\n    if (skipIndexes.includes(active)) {\n      const updatedSkip = [...skipIndexes];\n      const index = updatedSkip.findIndex((skippedIndex) => skippedIndex === active);\n      updatedSkip.splice(index, 1);\n      setSkip(updatedSkip);\n    }\n    const updatedActive = active > completed ? active + 1 : completed + 1;\n    if (active > completed) setCompleted(active);\n    setActive(updatedActive);\n    return action(`Active Index: ${updatedActive}`)();\n  };\n\n  const onSkipHandler = () => {\n    const updatedActive = active > completed ? active + 1 : completed + 1;\n    setActive(updatedActive);\n    if (!skipIndexes.includes(active)) {\n      setSkip([...skipIndexes, active, updatedActive]);\n    }\n    return action(`Active Index: ${updatedActive}`)();\n  };\n\n  return (\n    <div\n      className=\"d-flex flex-column justify-content-between align-items-end py-4 px-4 bg-secondary-lightest\"\n      style={{ height: '200px' }}\n    >\n      <div className=\"d-flex justify-content-center py-5 bg-light w-100\">\n        <Stepper steps={steps} active={active} completed={completed} onChange={onChange} skipIndexes={skipIndexes} />\n      </div>\n      <br />\n      <div className=\"w-25 d-flex justify-content-end\">\n        <Button onClick={onSkipHandler} className=\"mr-4\">\n          Skip\n        </Button>\n        <Button onClick={onClickHandler} appearance=\"primary\">\n          Next\n        </Button>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-stepper-skippable-step--skippable-step",
      "args": {},
      "argTypes": {
        "active": {
          "name": "active",
          "description": "Set the active step (zero based index).\n\nSet to -1 to disable all the steps.",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "completed": {
          "name": "completed",
          "description": "Set the completed steps (zero based index).\n\n**Number of completed steps <= completed index**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "-1"
            }
          }
        },
        "steps": {
          "name": "steps",
          "description": "<pre className=\"docPage-codeBlock\">\nStepProp {\n  label: string;\n  value?: React.ReactText;\n}\n\n| Name | Description |\n| --- | --- |\n| label | Describes Label of the step |\n| value | Value of option |\n\n</pre>",
          "type": {
            "required": true,
            "name": "other",
            "value": "StepProp[]"
          },
          "table": {
            "type": {
              "summary": "StepProp[]"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when user clicks on a non-disabled step.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((active: number, completed: number, label?: string | undefined, value?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((active: number, completed: number, label?: string | undefined, value?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "skipIndexes": {
          "name": "skipIndexes",
          "description": "",
          "type": {
            "required": false,
            "name": "other",
            "value": "number[]"
          },
          "table": {
            "type": {
              "summary": "number[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-stepper-standalone-stepper--standalone-stepper": {
    "id": "components-stepper-standalone-stepper--standalone-stepper",
    "kind": "Components/Stepper/Standalone Stepper",
    "name": "Standalone Stepper",
    "story": "Standalone Stepper",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [active, setActive] = React.useState(0);\n\n  const onChange = (index: number) => {\n    setActive(index);\n    return action(`Active Index: ${index}`)();\n  };\n\n  return <Stepper steps={steps} active={active} completed={-1} onChange={onChange} />;\n}"
      },
      "__id": "components-stepper-standalone-stepper--standalone-stepper",
      "args": {},
      "argTypes": {
        "active": {
          "name": "active",
          "description": "Set the active step (zero based index).\n\nSet to -1 to disable all the steps.",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "completed": {
          "name": "completed",
          "description": "Set the completed steps (zero based index).\n\n**Number of completed steps <= completed index**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "-1"
            }
          }
        },
        "steps": {
          "name": "steps",
          "description": "<pre className=\"docPage-codeBlock\">\nStepProp {\n  label: string;\n  value?: React.ReactText;\n}\n\n| Name | Description |\n| --- | --- |\n| label | Describes Label of the step |\n| value | Value of option |\n\n</pre>",
          "type": {
            "required": true,
            "name": "other",
            "value": "StepProp[]"
          },
          "table": {
            "type": {
              "summary": "StepProp[]"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when user clicks on a non-disabled step.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((active: number, completed: number, label?: string | undefined, value?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((active: number, completed: number, label?: string | undefined, value?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "skipIndexes": {
          "name": "skipIndexes",
          "description": "",
          "type": {
            "required": false,
            "name": "other",
            "value": "number[]"
          },
          "table": {
            "type": {
              "summary": "number[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-stepper-stepper-in-page-header--stepper-in-page-header": {
    "id": "components-stepper-stepper-in-page-header--stepper-in-page-header",
    "kind": "Components/Stepper/Stepper In Page Header",
    "name": "Stepper In Page Header",
    "story": "Stepper In Page Header",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const stepperData = [\n    {\n      value: 'step_1',\n      label: 'Recipients',\n    },\n    {\n      value: 'step_2',\n      label: 'Message',\n    },\n    {\n      value: 'step_3',\n      label: 'Schedule',\n    },\n  ];\n\n  const options = [\n    {\n      label: 'Option 1',\n      value: 'Option 1',\n    },\n    {\n      label: 'Option 2',\n      value: 'Option 2',\n    },\n    {\n      label: 'Option 3',\n      value: 'Option 3',\n    },\n  ];\n\n  const [active, setActive] = React.useState(0);\n  const [completed, setCompleted] = React.useState(-1);\n\n  const onChangeHandler = (activeStep: number) => {\n    setActive(activeStep);\n  };\n\n  const onClickHandler = () => {\n    if (active > completed) setCompleted(active);\n    active > completed ? setActive(active + 1) : setActive(completed + 1);\n  };\n\n  const stepper = <Stepper steps={stepperData} onChange={onChangeHandler} active={active} completed={completed} />;\n\n  const actions = (\n    <div className=\"d-flex justify-content-end align-items-center\">\n      <Text className=\"mr-4\">few minutes ago</Text>\n      <Avatar className=\"mr-4\" firstName=\"John\" lastName=\"Doe\" appearance=\"accent2\" />\n      <div className=\"mr-4\">\n        <Dropdown menu={true} icon=\"more_horiz\" options={options} />\n      </div>\n      <Button className=\"mr-4\">Finish Later</Button>\n      <Button className=\"mr-4\" appearance=\"primary\" onClick={onClickHandler}>\n        Next\n      </Button>\n    </div>\n  );\n\n  const breadcrumbs = (\n    <Breadcrumbs\n      list={[\n        {\n          label: 'Campaigns',\n          link: '/Campaigns',\n        },\n      ]}\n      onClick={(link) => action(`on-click: ${link}`)}\n    />\n  );\n\n  const badge = <Badge appearance=\"secondary\">Message</Badge>;\n\n  const meta = <MetaList list={[{ label: 'Alert' }, { label: 'Draft' }]} seperator={true} />;\n\n  return (\n    <div className=\"w-100 p-6 bg-secondary-lightest\">\n      <PageHeader\n        title=\"Annual Wellness Visit\"\n        separator={true}\n        navigationPosition=\"center\"\n        stepper={stepper}\n        actions={actions}\n        breadcrumbs={breadcrumbs}\n        badge={badge}\n        meta={meta}\n      />\n    </div>\n  );\n}"
      },
      "__id": "components-stepper-stepper-in-page-header--stepper-in-page-header",
      "args": {},
      "argTypes": {
        "title": {
          "name": "title",
          "description": "Page title",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "navigation": {
          "name": "navigation",
          "description": "`Navigation` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "stepper": {
          "name": "stepper",
          "description": "`Stepper` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "actions": {
          "name": "actions",
          "description": "Actions composed of `Button` and meta data",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "tabs": {
          "name": "tabs",
          "description": "`Tab` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "breadcrumbs": {
          "name": "breadcrumbs",
          "description": "`Breadcrumbs` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "badge": {
          "name": "badge",
          "description": "`Badge` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "status": {
          "name": "status",
          "description": "`Status` component",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "meta": {
          "name": "meta",
          "description": "Meta data composed of `Text`",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": null
          }
        },
        "navigationPosition": {
          "name": "navigationPosition",
          "description": "Page header layout type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "bottom",
              "center"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"center\""
            },
            "defaultValue": {
              "summary": "\"center\""
            }
          }
        },
        "separator": {
          "name": "separator",
          "description": "provides a border at bottom",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-stepper-variants-active-step--active-step": {
    "id": "components-stepper-variants-active-step--active-step",
    "kind": "Components/Stepper/Variants/Active Step",
    "name": "Active Step",
    "story": "Active Step",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [active, setActive] = React.useState(0);\n\n  const onChange = (index: number) => {\n    setActive(index);\n    return action(`Active Index: ${index}`)();\n  };\n\n  return <Stepper steps={steps} active={active} onChange={onChange} />;\n}"
      },
      "__id": "components-stepper-variants-active-step--active-step",
      "args": {},
      "argTypes": {
        "active": {
          "name": "active",
          "description": "Set the active step (zero based index).\n\nSet to -1 to disable all the steps.",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "completed": {
          "name": "completed",
          "description": "Set the completed steps (zero based index).\n\n**Number of completed steps <= completed index**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "-1"
            }
          }
        },
        "steps": {
          "name": "steps",
          "description": "<pre className=\"docPage-codeBlock\">\nStepProp {\n  label: string;\n  value?: React.ReactText;\n}\n\n| Name | Description |\n| --- | --- |\n| label | Describes Label of the step |\n| value | Value of option |\n\n</pre>",
          "type": {
            "required": true,
            "name": "other",
            "value": "StepProp[]"
          },
          "table": {
            "type": {
              "summary": "StepProp[]"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when user clicks on a non-disabled step.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((active: number, completed: number, label?: string | undefined, value?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((active: number, completed: number, label?: string | undefined, value?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "skipIndexes": {
          "name": "skipIndexes",
          "description": "",
          "type": {
            "required": false,
            "name": "other",
            "value": "number[]"
          },
          "table": {
            "type": {
              "summary": "number[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-stepper-variants-completed-step--completed-step": {
    "id": "components-stepper-variants-completed-step--completed-step",
    "kind": "Components/Stepper/Variants/Completed Step",
    "name": "Completed Step",
    "story": "Completed Step",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [active, setActive] = React.useState(3);\n\n  const onChange = (index: number) => {\n    setActive(index);\n    return action(`Active Index: ${index}`)();\n  };\n\n  return <Stepper steps={steps} active={active} completed={2} onChange={onChange} />;\n}"
      },
      "__id": "components-stepper-variants-completed-step--completed-step",
      "args": {},
      "argTypes": {
        "active": {
          "name": "active",
          "description": "Set the active step (zero based index).\n\nSet to -1 to disable all the steps.",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "completed": {
          "name": "completed",
          "description": "Set the completed steps (zero based index).\n\n**Number of completed steps <= completed index**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "-1"
            }
          }
        },
        "steps": {
          "name": "steps",
          "description": "<pre className=\"docPage-codeBlock\">\nStepProp {\n  label: string;\n  value?: React.ReactText;\n}\n\n| Name | Description |\n| --- | --- |\n| label | Describes Label of the step |\n| value | Value of option |\n\n</pre>",
          "type": {
            "required": true,
            "name": "other",
            "value": "StepProp[]"
          },
          "table": {
            "type": {
              "summary": "StepProp[]"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when user clicks on a non-disabled step.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((active: number, completed: number, label?: string | undefined, value?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((active: number, completed: number, label?: string | undefined, value?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "skipIndexes": {
          "name": "skipIndexes",
          "description": "",
          "type": {
            "required": false,
            "name": "other",
            "value": "number[]"
          },
          "table": {
            "type": {
              "summary": "number[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-stepper-variants-stepper-with-skip--stepper-with-skip": {
    "id": "components-stepper-variants-stepper-with-skip--stepper-with-skip",
    "kind": "Components/Stepper/Variants/Stepper With Skip",
    "name": "Stepper With Skip",
    "story": "Stepper With Skip",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [active, setActive] = React.useState(0);\n  const [completed, setCompleted] = React.useState(active - 1);\n  const [skipIndexes, setSkipIndexes] = React.useState<number[]>([]);\n  const requiredSteps = [0];\n\n  const onChange = (activeStep: number) => {\n    setActive(activeStep);\n    return action(`Active Index: ${activeStep}`)();\n  };\n\n  const onClickHandler = () => {\n    if (skipIndexes.includes(active)) {\n      const updatedSkip = [...skipIndexes];\n      const index = updatedSkip.findIndex((skippedIndex) => skippedIndex === active);\n      updatedSkip.splice(index, 1);\n      setSkipIndexes(updatedSkip);\n      // console.log(skipIndexes);\n    }\n    const updatedActive = active > completed ? active + 1 : completed + 1;\n    if (active > completed) setCompleted(active);\n    setActive(updatedActive);\n    return action(`Active Index: ${updatedActive}`)();\n  };\n\n  const onSkipHandler = () => {\n    const updatedActive = active > completed ? active + 1 : completed + 1;\n    setActive(updatedActive);\n    if (!skipIndexes.includes(active)) {\n      setSkipIndexes([...skipIndexes, active]);\n    }\n    return action(`Active Index: ${updatedActive}`)();\n  };\n\n  return (\n    <div\n      className=\"d-flex flex-column justify-content-between align-items-end py-4 px-4 bg-secondary-lightest\"\n      style={{ height: '200px' }}\n    >\n      <div className=\"d-flex justify-content-center py-5 bg-light w-100\">\n        <Stepper steps={steps} active={active} completed={completed} onChange={onChange} skipIndexes={skipIndexes} />\n      </div>\n      <br />\n      <div className=\"w-25 d-flex justify-content-end\">\n        <Button onClick={onSkipHandler} disabled={requiredSteps.includes(active)} className=\"mr-4\">\n          Skip\n        </Button>\n        <Button onClick={onClickHandler} appearance=\"primary\">\n          Next\n        </Button>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-stepper-variants-stepper-with-skip--stepper-with-skip",
      "args": {},
      "argTypes": {
        "active": {
          "name": "active",
          "description": "Set the active step (zero based index).\n\nSet to -1 to disable all the steps.",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "completed": {
          "name": "completed",
          "description": "Set the completed steps (zero based index).\n\n**Number of completed steps <= completed index**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "-1"
            }
          }
        },
        "steps": {
          "name": "steps",
          "description": "<pre className=\"docPage-codeBlock\">\nStepProp {\n  label: string;\n  value?: React.ReactText;\n}\n\n| Name | Description |\n| --- | --- |\n| label | Describes Label of the step |\n| value | Value of option |\n\n</pre>",
          "type": {
            "required": true,
            "name": "other",
            "value": "StepProp[]"
          },
          "table": {
            "type": {
              "summary": "StepProp[]"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when user clicks on a non-disabled step.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((active: number, completed: number, label?: string | undefined, value?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((active: number, completed: number, label?: string | undefined, value?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "skipIndexes": {
          "name": "skipIndexes",
          "description": "",
          "type": {
            "required": false,
            "name": "other",
            "value": "number[]"
          },
          "table": {
            "type": {
              "summary": "number[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-stepper-variants-stepper-with-trigger--stepper-with-trigger": {
    "id": "components-stepper-variants-stepper-with-trigger--stepper-with-trigger",
    "kind": "Components/Stepper/variants/Stepper With Trigger",
    "name": "Stepper With Trigger",
    "story": "Stepper With Trigger",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [active, setActive] = React.useState(0);\n  const [completed, setCompleted] = React.useState(active - 1);\n\n  const onChange = (activeStep: number) => {\n    setActive(activeStep);\n    return action(`Active Index: ${activeStep}`)();\n  };\n\n  const onClickHandler = () => {\n    const updatedActive = active > completed ? active + 1 : completed + 1;\n    if (active > completed) setCompleted(active);\n    setActive(updatedActive);\n    return action(`Active Index: ${updatedActive}`)();\n  };\n\n  return (\n    <div\n      className=\"d-flex flex-column justify-content-between align-items-end py-4 px-4\"\n      style={{ height: '200px', background: 'var(--secondary-lightest)' }}\n    >\n      <div className=\"d-flex justify-content-center py-5 bg-light w-100\">\n        <Stepper steps={steps} active={active} completed={completed} onChange={onChange} />\n      </div>\n      <br />\n      <div className=\"w-25 d-flex justify-content-end\">\n        <Button onClick={onClickHandler} appearance=\"primary\">\n          Next\n        </Button>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-stepper-variants-stepper-with-trigger--stepper-with-trigger",
      "args": {},
      "argTypes": {
        "active": {
          "name": "active",
          "description": "Set the active step (zero based index).\n\nSet to -1 to disable all the steps.",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "0"
            }
          }
        },
        "completed": {
          "name": "completed",
          "description": "Set the completed steps (zero based index).\n\n**Number of completed steps <= completed index**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "-1"
            }
          }
        },
        "steps": {
          "name": "steps",
          "description": "<pre className=\"docPage-codeBlock\">\nStepProp {\n  label: string;\n  value?: React.ReactText;\n}\n\n| Name | Description |\n| --- | --- |\n| label | Describes Label of the step |\n| value | Value of option |\n\n</pre>",
          "type": {
            "required": true,
            "name": "other",
            "value": "StepProp[]"
          },
          "table": {
            "type": {
              "summary": "StepProp[]"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when user clicks on a non-disabled step.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((active: number, completed: number, label?: string | undefined, value?: string | number | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((active: number, completed: number, label?: string | undefined, value?: string | number | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "skipIndexes": {
          "name": "skipIndexes",
          "description": "",
          "type": {
            "required": false,
            "name": "other",
            "value": "number[]"
          },
          "table": {
            "type": {
              "summary": "number[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-subheading-all--all": {
    "id": "components-subheading-all--all",
    "kind": "Components/Subheading/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const appearance = optionsKnob(\n    'appearance',\n    { undefined, default: 'default', subtle: 'subtle', disabled: 'disabled', white: 'white' },\n    undefined,\n    {\n      display: 'inline-radio',\n    }\n  );\n\n  return (\n    <div style={{ background: appearance === 'white' ? 'black' : 'transparent' }}>\n      <Subheading appearance={appearance}>\n        Subheading component have different varients, look for options in knobs tab.\n      </Subheading>\n    </div>\n  );\n}"
      },
      "__id": "components-subheading-all--all",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "Text to be rendered",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Subheading`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "default",
              "disabled",
              "subtle",
              "white"
            ]
          },
          "table": {
            "type": {
              "summary": "\"default\" | \"disabled\" | \"subtle\" | \"white\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-subheading-variants-appearance--appearance": {
    "id": "components-subheading-variants-appearance--appearance",
    "kind": "Components/Subheading/Variants/Appearance",
    "name": "Appearance",
    "story": "Appearance",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const appearances: Appearance[] = ['default', 'subtle', 'disabled', 'white'];\n\n  return (\n    <div className=\"d-flex\">\n      {appearances.map((appear, ind) => {\n        return (\n          <div key={ind} className=\"mr-6\">\n            <div style={{ background: appear === 'white' ? 'black' : 'transparent' }}>\n              <Subheading appearance={appear}>Subheading</Subheading>\n            </div>\n            <br />\n            <Text weight=\"strong\">{appear.charAt(0).toUpperCase() + appear.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-subheading-variants-appearance--appearance",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "Text to be rendered",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Subheading`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "default",
              "disabled",
              "subtle",
              "white"
            ]
          },
          "table": {
            "type": {
              "summary": "\"default\" | \"disabled\" | \"subtle\" | \"white\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-switch-all--all": {
    "id": "components-switch-all--all",
    "kind": "Components/Switch/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const size = select('size', ['regular', 'large', 'tiny'], undefined);\n\n  const checked = boolean('checked', false);\n\n  const disabled = boolean('disabled', false);\n\n  const onChangeHandler = (_event: any, checkedValue: boolean) => {\n    updateKnob('checked', checkedValue);\n    return action(`switch-change: ${checkedValue}`)();\n  };\n\n  return (\n    <div>\n      <Switch disabled={disabled} checked={checked} size={size} onChange={onChangeHandler} />\n    </div>\n  );\n}"
      },
      "__id": "components-switch-all--all",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of `Switch`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Switch`\n\n**Soon to be deprecated**",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "warning",
              "success"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"warning\" | \"success\""
            },
            "defaultValue": null
          }
        },
        "defaultChecked": {
          "name": "defaultChecked",
          "description": "Default value of checked (Used in case of uncontrolled `Switch`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "checked": {
          "name": "checked",
          "description": "Denotes Selection (Used in case of controlled `Switch`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Switch`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Name of `Switch`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of `Switch`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when `Switch` is toggled",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent, selected: boolean) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent, selected: boolean) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-switch-default-switch--default-switch": {
    "id": "components-switch-default-switch--default-switch",
    "kind": "Components/Switch/Default Switch",
    "name": "Default Switch",
    "story": "Default Switch",
    "parameters": {
      "storySource": {
        "source": "() => <Switch defaultChecked={true} size=\"regular\" />"
      },
      "__id": "components-switch-default-switch--default-switch",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of `Switch`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Switch`\n\n**Soon to be deprecated**",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "warning",
              "success"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"warning\" | \"success\""
            },
            "defaultValue": null
          }
        },
        "defaultChecked": {
          "name": "defaultChecked",
          "description": "Default value of checked (Used in case of uncontrolled `Switch`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "checked": {
          "name": "checked",
          "description": "Denotes Selection (Used in case of controlled `Switch`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Switch`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Name of `Switch`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of `Switch`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when `Switch` is toggled",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent, selected: boolean) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent, selected: boolean) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-switch-off-state--off-state": {
    "id": "components-switch-off-state--off-state",
    "kind": "Components/Switch/Off State",
    "name": "Off State",
    "story": "Off State",
    "parameters": {
      "storySource": {
        "source": "() => <Switch defaultChecked={false} size=\"regular\" />"
      },
      "__id": "components-switch-off-state--off-state",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of `Switch`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Switch`\n\n**Soon to be deprecated**",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "warning",
              "success"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"warning\" | \"success\""
            },
            "defaultValue": null
          }
        },
        "defaultChecked": {
          "name": "defaultChecked",
          "description": "Default value of checked (Used in case of uncontrolled `Switch`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "checked": {
          "name": "checked",
          "description": "Denotes Selection (Used in case of controlled `Switch`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Switch`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Name of `Switch`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of `Switch`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when `Switch` is toggled",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent, selected: boolean) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent, selected: boolean) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-switch-variants-size--size": {
    "id": "components-switch-variants-size--size",
    "kind": "Components/Switch/Variants/Size",
    "name": "Size",
    "story": "Size",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const sizes: Size[] = ['tiny', 'regular', 'large'];\n\n  return (\n    <div className=\"d-flex\">\n      {sizes.map((SwitchSize, ind) => {\n        return (\n          <div key={ind} className=\"mr-9\">\n            <div className=\"h-50\">\n              <Switch defaultChecked={true} size={SwitchSize} />\n            </div>\n            <br />\n            <Text weight=\"strong\">{SwitchSize.charAt(0).toUpperCase() + SwitchSize.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-switch-variants-size--size",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of `Switch`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Switch`\n\n**Soon to be deprecated**",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "warning",
              "success"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"warning\" | \"success\""
            },
            "defaultValue": null
          }
        },
        "defaultChecked": {
          "name": "defaultChecked",
          "description": "Default value of checked (Used in case of uncontrolled `Switch`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "checked": {
          "name": "checked",
          "description": "Denotes Selection (Used in case of controlled `Switch`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Switch`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Name of `Switch`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of `Switch`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when `Switch` is toggled",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent, selected: boolean) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent, selected: boolean) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-switch-variants-state--state": {
    "id": "components-switch-variants-state--state",
    "kind": "Components/Switch/Variants/State",
    "name": "State",
    "story": "State",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div className=\"d-flex\">\n      <div className=\"mr-9\">\n        <Switch defaultChecked={true} disabled={false} />\n        <br />\n        <Text weight=\"strong\">Enabled</Text>\n      </div>\n      <div>\n        <Switch disabled={true} defaultChecked={true} />\n        <br />\n        <Text weight=\"strong\">Disabled</Text>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-switch-variants-state--state",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of `Switch`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "regular",
              "tiny",
              "large"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Switch`\n\n**Soon to be deprecated**",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "primary",
              "alert",
              "warning",
              "success"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"primary\" | \"alert\" | \"warning\" | \"success\""
            },
            "defaultValue": null
          }
        },
        "defaultChecked": {
          "name": "defaultChecked",
          "description": "Default value of checked (Used in case of uncontrolled `Switch`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "checked": {
          "name": "checked",
          "description": "Denotes Selection (Used in case of controlled `Switch`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Switch`, making it unable to be pressed",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "name": {
          "name": "name",
          "description": "Name of `Switch`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of `Switch`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function called when `Switch` is toggled",
          "type": {
            "required": false,
            "name": "function",
            "value": "((event: MouseEvent, selected: boolean) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((event: MouseEvent, selected: boolean) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-table-all--all": {
    "id": "components-table-all--all",
    "kind": "Components/Table/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const async = boolean('async', false);\n\n  let loading;\n  let error;\n  let applyData;\n  let applySchema;\n  const applyLoaderSchema = boolean('applyLoaderSchema', true);\n\n  if (!async) {\n    loading = boolean('loading', false);\n\n    error = boolean('error', false);\n\n    applySchema = boolean('applySchema', true);\n\n    applyData = boolean('applyData', true);\n  }\n\n  const type = select('type', ['resource', 'data'], 'resource');\n\n  const size = select('size', ['comfortable', 'standard', 'compressed', 'tight'], 'comfortable');\n\n  const draggable = boolean('draggable', true);\n\n  const nestedRows = boolean('nestedRows', false);\n\n  const withHeader = boolean('withHeader', true);\n\n  const withCheckbox = boolean('withCheckbox', false);\n\n  const showMenu = boolean('showMenu', true);\n\n  const withPagination = boolean('withPagination', false);\n\n  const page = number('page', 1);\n\n  const paginationType = select('paginationType', ['basic', 'jump'], 'jump');\n\n  const pageSize = number('pageSize', 12);\n\n  const multipleSorting = boolean('multipleSorting', false);\n\n  const headCellTooltip = boolean('headCellTooltip', false);\n\n  const separator = boolean('separator', false);\n\n  const filterPosition = select('filterPosition', ['GRID', 'HEADER'], undefined);\n\n  let dataAttr = {};\n  if (async) {\n    dataAttr = {\n      fetchData,\n    };\n  } else {\n    dataAttr = {\n      loading,\n      error,\n      schema: applySchema ? schema : [],\n      data: applyData ? data : [],\n    };\n  }\n\n  return (\n    <div\n      style={{\n        height: '350px',\n      }}\n    >\n      <Card className=\"h-100 overflow-hidden\">\n        <Table\n          key={`${async}`}\n          {...dataAttr}\n          loading={loading}\n          error={error}\n          errorTemplate={errorTemplate}\n          withHeader={withHeader}\n          headerOptions={{\n            withSearch: true,\n          }}\n          withCheckbox={withCheckbox}\n          showMenu={showMenu}\n          type={type}\n          size={size}\n          headCellTooltip={headCellTooltip}\n          separator={separator}\n          draggable={draggable}\n          nestedRows={nestedRows}\n          nestedRowRenderer={nestedRowRenderer}\n          withPagination={withPagination}\n          page={page}\n          paginationType={paginationType}\n          pageSize={pageSize}\n          loaderSchema={applyLoaderSchema ? loaderSchema : undefined}\n          onRowClick={(rowData, rowIndex) =>\n            action(`on-row-click:- rowIndex: ${rowIndex} data: ${JSON.stringify(rowData)}`)()\n          }\n          onSelect={(rowIndex, selected, selectedList, selectAll) =>\n            action(\n              `on-select:- rowIndex: ${rowIndex} selected: ${selected} selectedList: ${JSON.stringify(\n                selectedList\n              )} selectAll: ${selectAll}`\n            )()\n          }\n          onPageChange={(newPage) => action(`on-page-change:- ${newPage}`)()}\n          onSearch={(currData, searchTerm) => {\n            action(`on-search:- currData: ${JSON.stringify(currData)}, searchTerm: ${searchTerm}`)();\n            return currData;\n          }}\n          multipleSorting={multipleSorting}\n          sortingList={[{ name: 'name', type: 'desc' }]}\n          filterList={{\n            name: ['h-r', 's-z'],\n          }}\n          filterPosition={filterPosition}\n        />\n      </Card>\n    </div>\n  );\n}"
      },
      "__id": "components-table-all--all",
      "args": {},
      "argTypes": {
        "showHead": {
          "name": "showHead",
          "description": "Controls Table Head display",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "type": {
          "name": "type",
          "description": "Type of Table\n\n**Requires `onRowClick` for 'resource' Table**",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "data",
              "resource"
            ]
          },
          "table": {
            "type": {
              "summary": "\"data\" | \"resource\""
            },
            "defaultValue": {
              "summary": "\"data\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Table cell size",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "standard",
              "compressed",
              "tight",
              "comfortable"
            ]
          },
          "table": {
            "type": {
              "summary": "\"standard\" | \"compressed\" | \"tight\" | \"comfortable\""
            },
            "defaultValue": {
              "summary": "\"standard\""
            }
          }
        },
        "draggable": {
          "name": "draggable",
          "description": "Allow Column reordering",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "nestedRows": {
          "name": "nestedRows",
          "description": "Allow nested rows",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "nestedRowRenderer": {
          "name": "nestedRowRenderer",
          "description": "Renderer to be used for nested rows\n\n<pre className=\"DocPage-codeBlock\">\nNestedRowProps: {\n    rowIndex: number;\n    data: RowData;\n    schema: GridProps['schema'];\n    loading: boolean;\n    expanded: boolean;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FC<NestedRowProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FC<NestedRowProps> | undefined"
            },
            "defaultValue": null
          }
        },
        "withHeader": {
          "name": "withHeader",
          "description": "Set to use `Header`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Options to be passed if using `withHeader: true`\n\n<pre className=\"DocPage-codeBlock\">\nExternalHeaderProps: {\n    children?: React.ReactNode;\n    withSearch?: boolean;\n    searchPlaceholder?: string;\n    dynamicColumn?: boolean;\n    allowSelectAll?: boolean;\n}\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| children | Header actions to be rendered | |\n| withSearch | Set to use Search Input | |\n| searchPlaceholder | Placeholder of Search Input | \"Search\" |\n| dynamicColumn | Set to use Column controlling dropdown | true |\n| allowSelectAll | Set to show Select All button | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "ExternalHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "ExternalHeaderProps | undefined"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Set for Row checkboxes",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showMenu": {
          "name": "showMenu",
          "description": "Set for visibility of Menu on Table Head Cell",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "withPagination": {
          "name": "withPagination",
          "description": "Set for `Pagination` component in `Table`(**Not applied if pageSize >= totalRecords**)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "page": {
          "name": "page",
          "description": "Initial page passed to `Table`",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "paginationType": {
          "name": "paginationType",
          "description": "`Pagination` component type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "basic",
              "jump"
            ]
          },
          "table": {
            "type": {
              "summary": "\"basic\" | \"jump\""
            },
            "defaultValue": {
              "summary": "\"jump\""
            }
          }
        },
        "pageSize": {
          "name": "pageSize",
          "description": "Number of rows to be rendered on a page\n\n**Also used to control number of rows to be rendered while loading: true**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "15"
            }
          }
        },
        "loaderSchema": {
          "name": "loaderSchema",
          "description": "Schema to be used for loading state **only when `schema: undefined`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "multipleSorting": {
          "name": "multipleSorting",
          "description": "Set to allow multiple column sorting",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "sortingList": {
          "name": "sortingList",
          "description": "Initial sortingList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nSortType: 'asc' | 'desc'\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "{ name: string; type: SortType; }[]"
          },
          "table": {
            "type": {
              "summary": "{ name: string; type: SortType; }[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "filterList": {
          "name": "filterList",
          "description": "Initial filterList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nFilter: Array of selected values passed in dropdown\n`any[]`\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Record<string, Filter>"
          },
          "table": {
            "type": {
              "summary": "Record<string, Filter>"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "errorTemplate": {
          "name": "errorTemplate",
          "description": "Template to be rendered when **error: true**\n\n<pre className=\"DocPage-codeBlock\">\nErrorTemplateProps: {\n    errorType: TableProps['errorType']\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FunctionComponent<ErrorTemplateProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FunctionComponent<ErrorTemplateProps> | undefined"
            },
            "defaultValue": {
              "summary": "(props: ErrorTemplateProps) => {\n  const { errorType = 'DEFAULT' } = props;\n\n  const errorMessages: Record<string, string> = {\n    FAILED_TO_FETCH: 'Failed to fetch data',\n    NO_RECORDS_FOUND: 'No results found',\n    DEFAULT: 'No results found',\n  };\n  return <Heading>{errorMessages[errorType]}</Heading>;\n}"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "750"
            }
          }
        },
        "onRowClick": {
          "name": "onRowClick",
          "description": "Callback to be called when a row is clicked in case of Table type: \"resource\"\n\n`onRowClickFunction: (data: RowData, rowIndexes?: number) => void`",
          "type": {
            "required": false,
            "name": "other",
            "value": "onRowClickFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "onRowClickFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "onSelect": {
          "name": "onSelect",
          "description": "Callback to be called when a row is selected",
          "type": {
            "required": false,
            "name": "function",
            "value": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onPageChange": {
          "name": "onPageChange",
          "description": "Callback to be called on page change in case of withPagination: true",
          "type": {
            "required": false,
            "name": "function",
            "value": "((page: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((page: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headCellTooltip": {
          "name": "headCellTooltip",
          "description": "Shows tooltip on Head Cell hover",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "separator": {
          "name": "separator",
          "description": "Shows left separator to all columns\n\n**Can be override by Column Schema**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "filterPosition": {
          "name": "filterPosition",
          "description": "Filters position in the Table\n\n`FilterPosition: 'HEADER' | 'GRID'`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "GRID",
              "HEADER"
            ]
          },
          "table": {
            "type": {
              "summary": "\"GRID\" | \"HEADER\""
            },
            "defaultValue": {
              "summary": "\"GRID\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchData": {
          "name": "fetchData",
          "description": "Callback to be called in case of async `Table`\n\n<pre className=\"DocPage-codeBlock\">\nfetchDataFunction: (options: FetchDataOptions) => Promise<{\n      searchTerm?: string,\n      count: number,\n      data: Data,\n      schema: Schema\n}>;\n\nFetchDataOptions: {\n      page?: number;\n      pageSize?: number;\n      filterList?: TableProps['sortingList'];\n      sortingList?: TableProps['filterList'];\n      searchTerm?: string;\n  }\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchDataFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchDataFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "data": {
          "name": "data",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Data: RowData[]\n\n    RowData: Record<string, any> & {\n      _selected?: boolean\n    }\n\n    `_selected`  Denotes row selection\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Data"
          },
          "table": {
            "type": {
              "summary": "Data"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "schema": {
          "name": "schema",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Schema: ColumnSchema[]\n\n    ColumnSchema: {\n        name: string;\n        displayName: string;\n        width?: React.ReactText;\n        minWidth?: React.ReactText;\n        maxWidth?: React.ReactText;\n        resizable?: boolean;\n        sorting?: boolean;\n        comparator?: (a: RowData, b: RowData) => -1 | 0 | 1;\n        separator?: boolean;\n        pinned?: 'left' | 'right';\n        hidden?: boolean;\n        filters?: DropdownProps['options'];\n        onFilterChange?: (data: RowData, filters: Filter) => boolean;\n        translate?: (data: RowData) => RowData,\n        cellType?: CellType;\n        cellRenderer?: React.FunctionComponent\\<GridCellProps\\>;\n        align?: Alignment;\n    }\n\n    GridCellProps: {\n        size: GridSize;\n        rowIndex: number;\n        colIndex: number;\n        data: RowData;\n        schema: ColumnSchema;\n        loading: boolean;\n        expanded: boolean;\n    }\n\n| CellType | CellData | Default Width |\n| --- | --- | --- |\n| DEFAULT | string \\| { title: string } | { width: 200 } |\n| WITH\\_META\\_LIST | { title: string, metaList: string[] } | { width: 200 } |\n| AVATAR | { firstName?: string, lastName?: string, title?: string } | { width: 50, minWidth: 50 } |\n| AVATAR\\_WITH\\_TEXT | { firstName?: string, lastName?: string, title: string } | { width: 250 } |\n| AVATAR\\_WITH\\_META\\_LIST | { firstName?: string, lastName?: string, title: string, metaList: string[] } | { width: 250 } |\n| ICON | { icon: string } | { width: 50, minWidth: 50 } |\n| STATUS_HINT | { title: string, statusAppearance: string } | { width: 100 } |\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | key of the value in `RowData` | |\n| displayName | Column Head Label | |\n| width | width of the column(px or %) | |\n| minWidth | min-width of the column(px or %) | 100 |\n| maxWidth | max-width of the column(px or %) | 800 |\n| resizable | Denotes if column is resizable | |\n| sorting | Enables sorting in column | true |\n| comparator | Sorting Function to be passed(in case of sync) | Default string comparator(localeCompare) |\n| separator | Shows Left separator | |\n| tooltip | Shows tooltip on hover | |\n| pinned | Pin column | |\n| hidden | Denotes if column is hidden | |\n| filters | Filter options for the column | |\n| onFilterChange | Callback to be called on Filter Change | |\n| translate | Translate Cell Data | |\n| cellType | Cell Type | 'DEFAULT' |\n| cellRenderer | Custom Cell Renderer | |\n| align | Align cell content<br>**Align applicable only for following cellTypes:<br>DEFAULT, AVATAR, ICON, STATUS_HINT** | \"left\" |",
          "type": {
            "required": false,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "Set for loading state of Table(in case of sync)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "error": {
          "name": "error",
          "description": "Set for error state of Table(in case of sync)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "errorType": {
          "name": "errorType",
          "description": "Error type to be passed to errorTemplate props",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onSearch": {
          "name": "onSearch",
          "description": "Callback to be called on searchTerm change(in case of sync)",
          "type": {
            "required": false,
            "name": "function",
            "value": "((data: Data, searchTerm: string) => Data) | undefined"
          },
          "table": {
            "type": {
              "summary": "((data: Data, searchTerm: string) => Data) | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-table-async-table--async-table": {
    "id": "components-table-async-table--async-table",
    "kind": "Components/Table/Async Table",
    "name": "Async Table",
    "story": "Async Table",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div\n      style={{\n        height: '350px',\n      }}\n    >\n      <Card className=\"h-100 overflow-hidden\">\n        <Table\n          loaderSchema={loaderSchema}\n          fetchData={fetchData}\n          withHeader={true}\n          withCheckbox={true}\n          onSelect={(rowIndex, selected, selectedList, selectAll) =>\n            action(\n              `on-select:- rowIndex: ${rowIndex} selected: ${selected} selectedList: ${JSON.stringify(\n                selectedList\n              )} selectAll: ${selectAll}`\n            )()\n          }\n          headerOptions={{\n            withSearch: true,\n          }}\n          withPagination={true}\n          pageSize={5}\n          onPageChange={(newPage) => action(`on-page-change:- ${newPage}`)()}\n        />\n      </Card>\n    </div>\n  );\n}"
      },
      "__id": "components-table-async-table--async-table",
      "args": {},
      "argTypes": {
        "showHead": {
          "name": "showHead",
          "description": "Controls Table Head display",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "type": {
          "name": "type",
          "description": "Type of Table\n\n**Requires `onRowClick` for 'resource' Table**",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "data",
              "resource"
            ]
          },
          "table": {
            "type": {
              "summary": "\"data\" | \"resource\""
            },
            "defaultValue": {
              "summary": "\"data\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Table cell size",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "standard",
              "compressed",
              "tight",
              "comfortable"
            ]
          },
          "table": {
            "type": {
              "summary": "\"standard\" | \"compressed\" | \"tight\" | \"comfortable\""
            },
            "defaultValue": {
              "summary": "\"standard\""
            }
          }
        },
        "draggable": {
          "name": "draggable",
          "description": "Allow Column reordering",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "nestedRows": {
          "name": "nestedRows",
          "description": "Allow nested rows",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "nestedRowRenderer": {
          "name": "nestedRowRenderer",
          "description": "Renderer to be used for nested rows\n\n<pre className=\"DocPage-codeBlock\">\nNestedRowProps: {\n    rowIndex: number;\n    data: RowData;\n    schema: GridProps['schema'];\n    loading: boolean;\n    expanded: boolean;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FC<NestedRowProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FC<NestedRowProps> | undefined"
            },
            "defaultValue": null
          }
        },
        "withHeader": {
          "name": "withHeader",
          "description": "Set to use `Header`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Options to be passed if using `withHeader: true`\n\n<pre className=\"DocPage-codeBlock\">\nExternalHeaderProps: {\n    children?: React.ReactNode;\n    withSearch?: boolean;\n    searchPlaceholder?: string;\n    dynamicColumn?: boolean;\n    allowSelectAll?: boolean;\n}\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| children | Header actions to be rendered | |\n| withSearch | Set to use Search Input | |\n| searchPlaceholder | Placeholder of Search Input | \"Search\" |\n| dynamicColumn | Set to use Column controlling dropdown | true |\n| allowSelectAll | Set to show Select All button | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "ExternalHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "ExternalHeaderProps | undefined"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Set for Row checkboxes",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showMenu": {
          "name": "showMenu",
          "description": "Set for visibility of Menu on Table Head Cell",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "withPagination": {
          "name": "withPagination",
          "description": "Set for `Pagination` component in `Table`(**Not applied if pageSize >= totalRecords**)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "page": {
          "name": "page",
          "description": "Initial page passed to `Table`",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "paginationType": {
          "name": "paginationType",
          "description": "`Pagination` component type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "basic",
              "jump"
            ]
          },
          "table": {
            "type": {
              "summary": "\"basic\" | \"jump\""
            },
            "defaultValue": {
              "summary": "\"jump\""
            }
          }
        },
        "pageSize": {
          "name": "pageSize",
          "description": "Number of rows to be rendered on a page\n\n**Also used to control number of rows to be rendered while loading: true**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "15"
            }
          }
        },
        "loaderSchema": {
          "name": "loaderSchema",
          "description": "Schema to be used for loading state **only when `schema: undefined`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "multipleSorting": {
          "name": "multipleSorting",
          "description": "Set to allow multiple column sorting",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "sortingList": {
          "name": "sortingList",
          "description": "Initial sortingList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nSortType: 'asc' | 'desc'\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "{ name: string; type: SortType; }[]"
          },
          "table": {
            "type": {
              "summary": "{ name: string; type: SortType; }[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "filterList": {
          "name": "filterList",
          "description": "Initial filterList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nFilter: Array of selected values passed in dropdown\n`any[]`\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Record<string, Filter>"
          },
          "table": {
            "type": {
              "summary": "Record<string, Filter>"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "errorTemplate": {
          "name": "errorTemplate",
          "description": "Template to be rendered when **error: true**\n\n<pre className=\"DocPage-codeBlock\">\nErrorTemplateProps: {\n    errorType: TableProps['errorType']\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FunctionComponent<ErrorTemplateProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FunctionComponent<ErrorTemplateProps> | undefined"
            },
            "defaultValue": {
              "summary": "(props: ErrorTemplateProps) => {\n  const { errorType = 'DEFAULT' } = props;\n\n  const errorMessages: Record<string, string> = {\n    FAILED_TO_FETCH: 'Failed to fetch data',\n    NO_RECORDS_FOUND: 'No results found',\n    DEFAULT: 'No results found',\n  };\n  return <Heading>{errorMessages[errorType]}</Heading>;\n}"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "750"
            }
          }
        },
        "onRowClick": {
          "name": "onRowClick",
          "description": "Callback to be called when a row is clicked in case of Table type: \"resource\"\n\n`onRowClickFunction: (data: RowData, rowIndexes?: number) => void`",
          "type": {
            "required": false,
            "name": "other",
            "value": "onRowClickFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "onRowClickFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "onSelect": {
          "name": "onSelect",
          "description": "Callback to be called when a row is selected",
          "type": {
            "required": false,
            "name": "function",
            "value": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onPageChange": {
          "name": "onPageChange",
          "description": "Callback to be called on page change in case of withPagination: true",
          "type": {
            "required": false,
            "name": "function",
            "value": "((page: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((page: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headCellTooltip": {
          "name": "headCellTooltip",
          "description": "Shows tooltip on Head Cell hover",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "separator": {
          "name": "separator",
          "description": "Shows left separator to all columns\n\n**Can be override by Column Schema**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "filterPosition": {
          "name": "filterPosition",
          "description": "Filters position in the Table\n\n`FilterPosition: 'HEADER' | 'GRID'`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "GRID",
              "HEADER"
            ]
          },
          "table": {
            "type": {
              "summary": "\"GRID\" | \"HEADER\""
            },
            "defaultValue": {
              "summary": "\"GRID\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchData": {
          "name": "fetchData",
          "description": "Callback to be called in case of async `Table`\n\n<pre className=\"DocPage-codeBlock\">\nfetchDataFunction: (options: FetchDataOptions) => Promise<{\n      searchTerm?: string,\n      count: number,\n      data: Data,\n      schema: Schema\n}>;\n\nFetchDataOptions: {\n      page?: number;\n      pageSize?: number;\n      filterList?: TableProps['sortingList'];\n      sortingList?: TableProps['filterList'];\n      searchTerm?: string;\n  }\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchDataFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchDataFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "data": {
          "name": "data",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Data: RowData[]\n\n    RowData: Record<string, any> & {\n      _selected?: boolean\n    }\n\n    `_selected`  Denotes row selection\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Data"
          },
          "table": {
            "type": {
              "summary": "Data"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "schema": {
          "name": "schema",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Schema: ColumnSchema[]\n\n    ColumnSchema: {\n        name: string;\n        displayName: string;\n        width?: React.ReactText;\n        minWidth?: React.ReactText;\n        maxWidth?: React.ReactText;\n        resizable?: boolean;\n        sorting?: boolean;\n        comparator?: (a: RowData, b: RowData) => -1 | 0 | 1;\n        separator?: boolean;\n        pinned?: 'left' | 'right';\n        hidden?: boolean;\n        filters?: DropdownProps['options'];\n        onFilterChange?: (data: RowData, filters: Filter) => boolean;\n        translate?: (data: RowData) => RowData,\n        cellType?: CellType;\n        cellRenderer?: React.FunctionComponent\\<GridCellProps\\>;\n        align?: Alignment;\n    }\n\n    GridCellProps: {\n        size: GridSize;\n        rowIndex: number;\n        colIndex: number;\n        data: RowData;\n        schema: ColumnSchema;\n        loading: boolean;\n        expanded: boolean;\n    }\n\n| CellType | CellData | Default Width |\n| --- | --- | --- |\n| DEFAULT | string \\| { title: string } | { width: 200 } |\n| WITH\\_META\\_LIST | { title: string, metaList: string[] } | { width: 200 } |\n| AVATAR | { firstName?: string, lastName?: string, title?: string } | { width: 50, minWidth: 50 } |\n| AVATAR\\_WITH\\_TEXT | { firstName?: string, lastName?: string, title: string } | { width: 250 } |\n| AVATAR\\_WITH\\_META\\_LIST | { firstName?: string, lastName?: string, title: string, metaList: string[] } | { width: 250 } |\n| ICON | { icon: string } | { width: 50, minWidth: 50 } |\n| STATUS_HINT | { title: string, statusAppearance: string } | { width: 100 } |\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | key of the value in `RowData` | |\n| displayName | Column Head Label | |\n| width | width of the column(px or %) | |\n| minWidth | min-width of the column(px or %) | 100 |\n| maxWidth | max-width of the column(px or %) | 800 |\n| resizable | Denotes if column is resizable | |\n| sorting | Enables sorting in column | true |\n| comparator | Sorting Function to be passed(in case of sync) | Default string comparator(localeCompare) |\n| separator | Shows Left separator | |\n| tooltip | Shows tooltip on hover | |\n| pinned | Pin column | |\n| hidden | Denotes if column is hidden | |\n| filters | Filter options for the column | |\n| onFilterChange | Callback to be called on Filter Change | |\n| translate | Translate Cell Data | |\n| cellType | Cell Type | 'DEFAULT' |\n| cellRenderer | Custom Cell Renderer | |\n| align | Align cell content<br>**Align applicable only for following cellTypes:<br>DEFAULT, AVATAR, ICON, STATUS_HINT** | \"left\" |",
          "type": {
            "required": false,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "Set for loading state of Table(in case of sync)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "error": {
          "name": "error",
          "description": "Set for error state of Table(in case of sync)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "errorType": {
          "name": "errorType",
          "description": "Error type to be passed to errorTemplate props",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onSearch": {
          "name": "onSearch",
          "description": "Callback to be called on searchTerm change(in case of sync)",
          "type": {
            "required": false,
            "name": "function",
            "value": "((data: Data, searchTerm: string) => Data) | undefined"
          },
          "table": {
            "type": {
              "summary": "((data: Data, searchTerm: string) => Data) | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-table-compressed-table--compressed-table": {
    "id": "components-table-compressed-table--compressed-table",
    "kind": "Components/Table/Compressed Table",
    "name": "Compressed Table",
    "story": "Compressed Table",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const data = [\n    {\n      name: 'MSSP Track 1 Urban',\n      status: 'Active',\n      measures: '9',\n      current_period: 'March 2017 - Feb 2018',\n      added_in: 'March 2014',\n    },\n    {\n      name: 'MSSP Track 1 Rural',\n      status: 'Active',\n      measures: '9',\n      current_period: 'March 2017 - Feb 201',\n      added_in: 'March 2015',\n    },\n    {\n      name: 'MSSP Track 2',\n      status: 'Inactive',\n      measures: '14',\n      current_period: 'March 2017 - Feb 201',\n      added_in: 'March 2016',\n    },\n    {\n      name: 'Aetna',\n      status: 'Active',\n      measures: '20',\n      current_period: 'March 2017 - Feb 201',\n      added_in: 'March 2019',\n    },\n    {\n      name: 'BCBS',\n      status: 'Active',\n      measures: '16',\n      current_period: 'March 2017 - Feb 201',\n      added_in: 'March 2017',\n    },\n  ];\n\n  const schema: TableProps['schema'] = [\n    {\n      name: 'name',\n      displayName: 'Name',\n      width: '20%',\n      sorting: false,\n    },\n    {\n      name: 'status',\n      displayName: 'Status',\n      width: '20%',\n      translate: (a) => ({\n        title: a.status,\n        statusAppearance: a.status === 'Inactive' ? 'default' : 'success',\n      }),\n      cellType: 'STATUS_HINT',\n      sorting: false,\n    },\n    {\n      name: 'measures',\n      displayName: 'No. of Measures',\n      width: '20%',\n      sorting: false,\n    },\n    {\n      name: 'current_period',\n      displayName: 'Current Period',\n      width: '20%',\n      sorting: false,\n    },\n    {\n      name: 'added_in',\n      displayName: 'Added in',\n      width: '20%',\n      sorting: false,\n    },\n  ];\n\n  return (\n    <Card>\n      <Table\n        loaderSchema={loaderSchema}\n        size=\"compressed\"\n        showMenu={false}\n        separator={false}\n        data={data}\n        schema={schema}\n        withHeader={true}\n        headerOptions={{\n          withSearch: true,\n        }}\n        onSearch={(currData, searchTerm) => {\n          return currData.filter((d) => d.name.toLowerCase().match(searchTerm.toLowerCase()));\n        }}\n        withPagination={false}\n      />\n    </Card>\n  );\n}"
      },
      "__id": "components-table-compressed-table--compressed-table",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-table-data-table--data-table": {
    "id": "components-table-data-table--data-table",
    "kind": "Components/Table/Data Table",
    "name": "Data Table",
    "story": "Data Table",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const data = [\n    {\n      claim_id: 'Q10000101',\n      claim_type: 'Professional',\n      plan_name: 'MSSP Track 3',\n      insurance_name: 'Medicare',\n      first_dos: '03/27/2020',\n      last_dos: '03/30/2020',\n      firstName: 'Brooke',\n      lastName: 'Heeran',\n    },\n    {\n      claim_id: 'Q10000102',\n      claim_type: 'Professional',\n      plan_name: 'MSSP Track 1',\n      insurance_name: 'Medicare',\n      first_dos: '03/24/2020',\n      last_dos: '04/30/2020',\n      firstName: 'Frazer',\n      lastName: 'Cathro',\n    },\n    {\n      claim_id: 'Q10000103',\n      claim_type: 'Professional',\n      plan_name: 'MSSP Track 3',\n      insurance_name: 'Medicare',\n      first_dos: '05/16/2020',\n      last_dos: '05/30/2020',\n      firstName: 'Lemmie',\n      lastName: 'Ciric',\n    },\n    {\n      claim_id: 'Q10000104',\n      claim_type: 'Institutional',\n      plan_name: 'MSSP Track 3',\n      insurance_name: 'Medicare',\n      first_dos: '12/27/2020',\n      last_dos: '12/30/2020',\n      firstName: 'Randy',\n      lastName: 'Boatwright',\n    },\n    {\n      claim_id: 'Q10000105',\n      claim_type: 'Professional',\n      plan_name: 'MSSP Track 3',\n      insurance_name: 'Medicare',\n      first_dos: '05/04/2020',\n      last_dos: '05/28/2020',\n      firstName: 'Rolando',\n      lastName: 'Cyples',\n    },\n    {\n      claim_id: 'Q10000106',\n      claim_type: 'Institutional',\n      plan_name: 'MSSP Track 3',\n      insurance_name: 'Medicare',\n      first_dos: '01/27/2020',\n      last_dos: '03/30/2020',\n      firstName: 'Lem',\n      lastName: 'Males',\n    },\n    {\n      claim_id: 'Q10000107',\n      claim_type: 'Professional',\n      plan_name: 'MSSP Track 3',\n      insurance_name: 'Medicare',\n      first_dos: '03/30/2020',\n      last_dos: '04/30/2020',\n      firstName: 'Sayres',\n      lastName: 'Adelberg',\n    },\n    {\n      claim_id: 'Q10000108',\n      claim_type: 'Professional',\n      plan_name: 'MSSP Track 3',\n      insurance_name: 'Medicare',\n      first_dos: '02/27/2020',\n      last_dos: '03/30/2020',\n      firstName: 'Murray',\n      lastName: 'Bravington',\n    },\n    {\n      claim_id: 'Q10000109',\n      claim_type: 'Institutional',\n      plan_name: 'MSSP Track 5',\n      insurance_name: 'Medicare',\n      first_dos: '03/17/2020',\n      last_dos: '03/30/2020',\n      firstName: 'Carin',\n      lastName: 'Robiou',\n    },\n    {\n      claim_id: 'Q100001010',\n      claim_type: 'Institutional',\n      plan_name: 'MSSP Track 6',\n      insurance_name: 'Medicare',\n      first_dos: '09/27/2020',\n      last_dos: '12/27/2020',\n      firstName: 'Brina',\n      lastName: 'Pirie',\n    },\n  ];\n\n  const schema: TableProps['schema'] = [\n    {\n      name: 'claim_id',\n      displayName: 'Claim Id',\n      width: '12%',\n      separator: true,\n    },\n    {\n      name: 'claim_type',\n      displayName: 'Claim Type',\n      width: '15%',\n      separator: true,\n      cellType: 'DEFAULT',\n    },\n    {\n      name: 'insurance_name',\n      displayName: 'Insurance Name',\n      width: '15%',\n      separator: true,\n    },\n    {\n      name: 'plan_name',\n      displayName: 'Plan Name',\n      width: '15%',\n      separator: true,\n    },\n    {\n      name: 'first_dos',\n      displayName: 'First Date of Service',\n      width: '18%',\n      separator: true,\n    },\n    {\n      name: 'last_dos',\n      displayName: 'Last Date of Service',\n      width: '18%',\n      separator: true,\n    },\n    {\n      name: 'provider_name',\n      displayName: 'Provider Name',\n      separator: true,\n      filters: [\n        { label: 'A-G', value: 'a-g' },\n        { label: 'H-R', value: 'h-r' },\n        { label: 'S-Z', value: 's-z' },\n      ],\n      onFilterChange: (a, filters) => {\n        for (const filter of filters) {\n          switch (filter) {\n            case 'a-g':\n              if (a.firstName[0].toLowerCase() >= 'a' && a.firstName[0].toLowerCase() <= 'g') return true;\n              break;\n            case 'h-r':\n              if (a.firstName[0].toLowerCase() >= 'h' && a.firstName[0].toLowerCase() <= 'r') return true;\n              break;\n            case 's-z':\n              if (a.firstName[0].toLowerCase() >= 's' && a.firstName[0].toLowerCase() <= 'z') return true;\n              break;\n          }\n        }\n        return false;\n      },\n      translate: (a: any) => ({\n        title: `${a.firstName} ${a.lastName}`,\n        firstName: a.firstName,\n        lastName: a.lastName,\n      }),\n    },\n  ];\n\n  return (\n    <Card>\n      <Table\n        loaderSchema={loaderSchema}\n        showMenu={false}\n        separator={true}\n        data={data}\n        schema={schema}\n        withHeader={true}\n        headerOptions={{\n          withSearch: true,\n        }}\n        onSearch={(currData, searchTerm) => {\n          return currData.filter(\n            (d) =>\n              d.firstName.toLowerCase().match(searchTerm.toLowerCase()) ||\n              d.lastName.toLowerCase().match(searchTerm.toLowerCase()) ||\n              d.claim_id.toLowerCase().match(searchTerm.toLowerCase())\n          );\n        }}\n        withPagination={true}\n        pageSize={5}\n      />\n    </Card>\n  );\n}"
      },
      "__id": "components-table-data-table--data-table",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-table-filtering--filtering": {
    "id": "components-table-filtering--filtering",
    "kind": "Components/Table/Filtering",
    "name": "Filtering",
    "story": "Filtering",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return <></>;\n}"
      },
      "__id": "components-table-filtering--filtering",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-table-nested-table-with-nested-cards--nested-table-with-nested-cards": {
    "id": "components-table-nested-table-with-nested-cards--nested-table-with-nested-cards",
    "kind": "Components/Table/Nested Table With Nested Cards",
    "name": "Nested Table With Nested Cards",
    "story": "Nested Table With Nested Cards",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const data = [\n    {\n      firstName: 'Brooke',\n      lastName: 'Heeran',\n      lastRun: 'Yesterday 3:14 PM',\n      name: 'Risk Analysis',\n      type: 'Batch Execution',\n      status: 'Failed',\n      statusType: 'Error',\n      errorCode: 2204,\n      className: 'File not found',\n      errorMessage: 'Cannot fetch files',\n    },\n    {\n      firstName: 'Frazer',\n      lastName: 'Cathro',\n      lastRun: 'Yesterday 11:15 AM',\n      name: 'Quality',\n      type: 'Batch Execution',\n      status: 'Completed',\n      statusType: 'Done',\n      className: 'Executed',\n    },\n    {\n      firstName: 'Lemmie',\n      lastName: 'Ciric',\n      lastRun: 'Yesterday 9:17 PM',\n      name: 'Claims',\n      type: 'Test Function',\n      status: 'Completed',\n      statusType: 'Done',\n      className: 'Executed',\n    },\n  ];\n\n  const schema: TableProps['schema'] = [\n    {\n      name: 'lastRun',\n      displayName: 'Last Run',\n      width: '25%',\n    },\n    {\n      name: 'name',\n      displayName: 'Name',\n      width: '15%',\n    },\n    {\n      name: 'type',\n      displayName: 'Type',\n      width: '20%',\n    },\n    {\n      name: 'status',\n      displayName: 'Status',\n      width: '20%',\n      cellType: 'STATUS_HINT',\n      translate: (a) => ({\n        title: a.status,\n        statusAppearance: a.status === 'Failed' ? 'alert' : 'success',\n      }),\n      filters: [\n        { label: 'Failed', value: 'failed' },\n        { label: 'Completed', value: 'completed' },\n      ],\n      onFilterChange: (a, filters) => {\n        for (const filter of filters) {\n          if (a.status.toLowerCase() === filter) return true;\n        }\n        return false;\n      },\n    },\n    {\n      name: 'user',\n      displayName: 'User',\n      width: '20%',\n      translate: (a) => ({\n        title: `${a.lastName}, ${a.firstName}`,\n        firstName: a.firstName,\n        lastName: a.lastName,\n      }),\n      cellType: 'AVATAR_WITH_TEXT',\n    },\n  ];\n\n  const nestedRowRenderer = (props: any) => (\n    <CardSubdued className=\"ml-7\">\n      <div className=\"d-flex flex-row\">\n        <div style={{ width: '17%' }}>\n          <Text weight=\"medium\">Type</Text>\n        </div>\n        <Text>{props.data.type}</Text>\n      </div>\n      {props.data.errorCode && (\n        <div className=\"d-flex flex-row\">\n          <div style={{ width: '17%' }}>\n            <Text weight=\"medium\">Error code</Text>\n          </div>\n          <Text>{props.data.errorCode}</Text>\n        </div>\n      )}\n      <div className=\"d-flex flex-row\">\n        <div style={{ width: '17%' }}>\n          <Text weight=\"medium\">Class name</Text>\n        </div>\n        <Text>{props.data.className}</Text>\n      </div>\n      {props.data.errorMessage && (\n        <div className=\"d-flex flex-row\">\n          <div style={{ width: '17%' }}>\n            <Text weight=\"medium\">Error message</Text>\n          </div>\n          <Text>{props.data.errorMessage}</Text>\n        </div>\n      )}\n    </CardSubdued>\n  );\n\n  return (\n    <Card>\n      <Table\n        data={data}\n        schema={schema}\n        withHeader={true}\n        headerOptions={{\n          withSearch: true,\n          dynamicColumn: false,\n        }}\n        separator={false}\n        showMenu={false}\n        nestedRows={true}\n        filterPosition=\"HEADER\"\n        nestedRowRenderer={nestedRowRenderer}\n        filterList={{\n          status: ['failed', 'completed'],\n        }}\n      />\n    </Card>\n  );\n}"
      },
      "__id": "components-table-nested-table-with-nested-cards--nested-table-with-nested-cards",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-table-pinned-columns--pinned-columns": {
    "id": "components-table-pinned-columns--pinned-columns",
    "kind": "Components/Table/Pinned Columns",
    "name": "Pinned Columns",
    "story": "Pinned Columns",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const data = [\n    {\n      s_no: 1,\n      empi: 'P087636',\n      first_name: 'Joy',\n      last_name: 'Lawson',\n      dob: '01/12/1982',\n      gender: 'Female',\n      facility: 'Charity Medical Clinic',\n    },\n    {\n      s_no: 2,\n      empi: 'P087637',\n      first_name: 'Hannah',\n      last_name: 'Pop',\n      dob: '01/11/1982',\n      gender: 'Female',\n      facility: 'Bancroft Medical Clinic',\n    },\n    {\n      s_no: 3,\n      empi: 'P087638',\n      first_name: 'Lisa',\n      last_name: 'Sanchez',\n      dob: '02/12/1981',\n      gender: 'Female',\n      facility: 'Lullaby Medical Clinic',\n    },\n    {\n      s_no: 4,\n      empi: 'P087639',\n      first_name: 'Kathy',\n      last_name: 'Powell',\n      dob: '01/10/1972',\n      gender: 'Female',\n      facility: 'Charity Medical Clinic',\n    },\n    {\n      s_no: 5,\n      empi: 'P087631',\n      first_name: 'Dennis',\n      last_name: 'Lane',\n      dob: '01/10/1982',\n      gender: 'Male',\n      facility: 'Lullaby Medical Clinic',\n    },\n  ];\n\n  const schema: TableProps['schema'] = [\n    {\n      name: 's_no',\n      displayName: 'S.no.',\n      width: '5%',\n      sorting: false,\n      pinned: 'left',\n    },\n    {\n      name: 'empi',\n      displayName: 'EMPI',\n      width: '10%',\n      sorting: false,\n      pinned: 'left',\n    },\n    {\n      name: 'first_name',\n      displayName: 'First Name',\n      width: '20%',\n      sorting: false,\n    },\n    {\n      name: 'last_name',\n      displayName: 'Last Name',\n      width: '20%',\n      sorting: false,\n    },\n    {\n      name: 'dob',\n      displayName: 'DOB',\n      width: '20%',\n      sorting: false,\n    },\n    {\n      name: 'gender',\n      displayName: 'Gender',\n      width: '20%',\n      sorting: false,\n    },\n    {\n      name: 'facility',\n      displayName: 'Facility',\n      sorting: false,\n    },\n  ];\n\n  return (\n    <Card>\n      <Table\n        loaderSchema={loaderSchema}\n        size=\"compressed\"\n        showMenu={false}\n        separator={false}\n        data={data}\n        schema={schema}\n        withHeader={true}\n        headerOptions={{\n          withSearch: false,\n        }}\n        withPagination={false}\n      />\n    </Card>\n  );\n}"
      },
      "__id": "components-table-pinned-columns--pinned-columns",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-table-resource-table--resource-table": {
    "id": "components-table-resource-table--resource-table",
    "kind": "Components/Table/Resource Table",
    "name": "Resource Table",
    "story": "Resource Table",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const statusAppearance: any = {\n    'In Progress': 'info',\n    Scheduled: 'warning',\n    Draft: 'default',\n    Failed: 'alert',\n  };\n\n  const schema: TableProps['schema'] = [\n    {\n      name: 'name',\n      displayName: 'Name',\n      width: '30%',\n      cellType: 'WITH_META_LIST',\n      translate: (a) => ({\n        title: a.name,\n        metaList: [`${a.recipients} recipients`],\n      }),\n      sorting: false,\n    },\n    {\n      name: 'status',\n      displayName: 'Status',\n      width: '20%',\n      cellType: 'STATUS_HINT',\n      sorting: false,\n      filters: [\n        { label: 'In Progress', value: 'In Progress' },\n        { label: 'Scheduled', value: 'Scheduled' },\n        { label: 'Draft', value: 'Draft' },\n        { label: 'Failed', value: 'Failed' },\n      ],\n      onFilterChange: (a, filters) => {\n        for (const filter of filters) {\n          if (a.status === filter) return true;\n        }\n        return false;\n      },\n      translate: (a) => {\n        const status = a.status;\n        return {\n          title: status,\n          statusAppearance: statusAppearance[status],\n        };\n      },\n    },\n    {\n      name: 'lastUpdated',\n      displayName: 'Last Updated on',\n      width: '30%',\n      sorting: false,\n    },\n    {\n      name: 'user',\n      displayName: '',\n      sorting: false,\n      width: '20%',\n      cellRenderer: (props) => (\n        <div className=\"d-flex align-items-center justify-content-end flex-grow-1\">\n          <Avatar firstName={props.data.firstName} lastName={props.data.lastName} />\n          <div style={{ width: 'var(--spacing-3)' }} className=\"ml-6\">\n            <Dropdown\n              triggerOptions={{\n                customTrigger: (_label: string) => <Button icon=\"more_horiz\" appearance=\"transparent\" />,\n              }}\n              menu={true}\n              align=\"left\"\n              options={[\n                { label: 'Edit', value: 'Edit' },\n                { label: 'Delete', value: 'Delete' },\n              ]}\n            />\n          </div>\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <Card>\n      <Table\n        loaderSchema={loaderSchema}\n        showMenu={false}\n        type=\"resource\"\n        data={data}\n        schema={schema}\n        withHeader={true}\n        filterPosition=\"HEADER\"\n        filterList={{\n          status: ['In Progress', 'Scheduled', 'Draft', 'Failed'],\n        }}\n        onSelect={(rowIndex, selected, selectedList, selectAll) =>\n          action(\n            `on-select:- rowIndex: ${rowIndex} selected: ${selected} selectedList: ${JSON.stringify(\n              selectedList\n            )} selectAll: ${selectAll}`\n          )()\n        }\n        headerOptions={{\n          withSearch: true,\n        }}\n        onSearch={(currData, searchTerm) => {\n          return currData.filter(\n            (d) =>\n              d.firstName.toLowerCase().match(searchTerm.toLowerCase()) ||\n              d.lastName.toLowerCase().match(searchTerm.toLowerCase()) ||\n              d.name.toLowerCase().match(searchTerm.toLowerCase())\n          );\n        }}\n        withPagination={true}\n        paginationType=\"basic\"\n        pageSize={4}\n        onPageChange={(newPage) => action(`on-page-change:- ${newPage}`)()}\n      />\n    </Card>\n  );\n}"
      },
      "__id": "components-table-resource-table--resource-table",
      "args": {},
      "argTypes": {
        "showHead": {
          "name": "showHead",
          "description": "Controls Table Head display",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "type": {
          "name": "type",
          "description": "Type of Table\n\n**Requires `onRowClick` for 'resource' Table**",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "data",
              "resource"
            ]
          },
          "table": {
            "type": {
              "summary": "\"data\" | \"resource\""
            },
            "defaultValue": {
              "summary": "\"data\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Table cell size",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "standard",
              "compressed",
              "tight",
              "comfortable"
            ]
          },
          "table": {
            "type": {
              "summary": "\"standard\" | \"compressed\" | \"tight\" | \"comfortable\""
            },
            "defaultValue": {
              "summary": "\"standard\""
            }
          }
        },
        "draggable": {
          "name": "draggable",
          "description": "Allow Column reordering",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "nestedRows": {
          "name": "nestedRows",
          "description": "Allow nested rows",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "nestedRowRenderer": {
          "name": "nestedRowRenderer",
          "description": "Renderer to be used for nested rows\n\n<pre className=\"DocPage-codeBlock\">\nNestedRowProps: {\n    rowIndex: number;\n    data: RowData;\n    schema: GridProps['schema'];\n    loading: boolean;\n    expanded: boolean;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FC<NestedRowProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FC<NestedRowProps> | undefined"
            },
            "defaultValue": null
          }
        },
        "withHeader": {
          "name": "withHeader",
          "description": "Set to use `Header`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Options to be passed if using `withHeader: true`\n\n<pre className=\"DocPage-codeBlock\">\nExternalHeaderProps: {\n    children?: React.ReactNode;\n    withSearch?: boolean;\n    searchPlaceholder?: string;\n    dynamicColumn?: boolean;\n    allowSelectAll?: boolean;\n}\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| children | Header actions to be rendered | |\n| withSearch | Set to use Search Input | |\n| searchPlaceholder | Placeholder of Search Input | \"Search\" |\n| dynamicColumn | Set to use Column controlling dropdown | true |\n| allowSelectAll | Set to show Select All button | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "ExternalHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "ExternalHeaderProps | undefined"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Set for Row checkboxes",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showMenu": {
          "name": "showMenu",
          "description": "Set for visibility of Menu on Table Head Cell",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "withPagination": {
          "name": "withPagination",
          "description": "Set for `Pagination` component in `Table`(**Not applied if pageSize >= totalRecords**)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "page": {
          "name": "page",
          "description": "Initial page passed to `Table`",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "paginationType": {
          "name": "paginationType",
          "description": "`Pagination` component type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "basic",
              "jump"
            ]
          },
          "table": {
            "type": {
              "summary": "\"basic\" | \"jump\""
            },
            "defaultValue": {
              "summary": "\"jump\""
            }
          }
        },
        "pageSize": {
          "name": "pageSize",
          "description": "Number of rows to be rendered on a page\n\n**Also used to control number of rows to be rendered while loading: true**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "15"
            }
          }
        },
        "loaderSchema": {
          "name": "loaderSchema",
          "description": "Schema to be used for loading state **only when `schema: undefined`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "multipleSorting": {
          "name": "multipleSorting",
          "description": "Set to allow multiple column sorting",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "sortingList": {
          "name": "sortingList",
          "description": "Initial sortingList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nSortType: 'asc' | 'desc'\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "{ name: string; type: SortType; }[]"
          },
          "table": {
            "type": {
              "summary": "{ name: string; type: SortType; }[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "filterList": {
          "name": "filterList",
          "description": "Initial filterList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nFilter: Array of selected values passed in dropdown\n`any[]`\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Record<string, Filter>"
          },
          "table": {
            "type": {
              "summary": "Record<string, Filter>"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "errorTemplate": {
          "name": "errorTemplate",
          "description": "Template to be rendered when **error: true**\n\n<pre className=\"DocPage-codeBlock\">\nErrorTemplateProps: {\n    errorType: TableProps['errorType']\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FunctionComponent<ErrorTemplateProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FunctionComponent<ErrorTemplateProps> | undefined"
            },
            "defaultValue": {
              "summary": "(props: ErrorTemplateProps) => {\n  const { errorType = 'DEFAULT' } = props;\n\n  const errorMessages: Record<string, string> = {\n    FAILED_TO_FETCH: 'Failed to fetch data',\n    NO_RECORDS_FOUND: 'No results found',\n    DEFAULT: 'No results found',\n  };\n  return <Heading>{errorMessages[errorType]}</Heading>;\n}"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "750"
            }
          }
        },
        "onRowClick": {
          "name": "onRowClick",
          "description": "Callback to be called when a row is clicked in case of Table type: \"resource\"\n\n`onRowClickFunction: (data: RowData, rowIndexes?: number) => void`",
          "type": {
            "required": false,
            "name": "other",
            "value": "onRowClickFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "onRowClickFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "onSelect": {
          "name": "onSelect",
          "description": "Callback to be called when a row is selected",
          "type": {
            "required": false,
            "name": "function",
            "value": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onPageChange": {
          "name": "onPageChange",
          "description": "Callback to be called on page change in case of withPagination: true",
          "type": {
            "required": false,
            "name": "function",
            "value": "((page: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((page: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headCellTooltip": {
          "name": "headCellTooltip",
          "description": "Shows tooltip on Head Cell hover",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "separator": {
          "name": "separator",
          "description": "Shows left separator to all columns\n\n**Can be override by Column Schema**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "filterPosition": {
          "name": "filterPosition",
          "description": "Filters position in the Table\n\n`FilterPosition: 'HEADER' | 'GRID'`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "GRID",
              "HEADER"
            ]
          },
          "table": {
            "type": {
              "summary": "\"GRID\" | \"HEADER\""
            },
            "defaultValue": {
              "summary": "\"GRID\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchData": {
          "name": "fetchData",
          "description": "Callback to be called in case of async `Table`\n\n<pre className=\"DocPage-codeBlock\">\nfetchDataFunction: (options: FetchDataOptions) => Promise<{\n      searchTerm?: string,\n      count: number,\n      data: Data,\n      schema: Schema\n}>;\n\nFetchDataOptions: {\n      page?: number;\n      pageSize?: number;\n      filterList?: TableProps['sortingList'];\n      sortingList?: TableProps['filterList'];\n      searchTerm?: string;\n  }\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchDataFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchDataFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "data": {
          "name": "data",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Data: RowData[]\n\n    RowData: Record<string, any> & {\n      _selected?: boolean\n    }\n\n    `_selected`  Denotes row selection\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Data"
          },
          "table": {
            "type": {
              "summary": "Data"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "schema": {
          "name": "schema",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Schema: ColumnSchema[]\n\n    ColumnSchema: {\n        name: string;\n        displayName: string;\n        width?: React.ReactText;\n        minWidth?: React.ReactText;\n        maxWidth?: React.ReactText;\n        resizable?: boolean;\n        sorting?: boolean;\n        comparator?: (a: RowData, b: RowData) => -1 | 0 | 1;\n        separator?: boolean;\n        pinned?: 'left' | 'right';\n        hidden?: boolean;\n        filters?: DropdownProps['options'];\n        onFilterChange?: (data: RowData, filters: Filter) => boolean;\n        translate?: (data: RowData) => RowData,\n        cellType?: CellType;\n        cellRenderer?: React.FunctionComponent\\<GridCellProps\\>;\n        align?: Alignment;\n    }\n\n    GridCellProps: {\n        size: GridSize;\n        rowIndex: number;\n        colIndex: number;\n        data: RowData;\n        schema: ColumnSchema;\n        loading: boolean;\n        expanded: boolean;\n    }\n\n| CellType | CellData | Default Width |\n| --- | --- | --- |\n| DEFAULT | string \\| { title: string } | { width: 200 } |\n| WITH\\_META\\_LIST | { title: string, metaList: string[] } | { width: 200 } |\n| AVATAR | { firstName?: string, lastName?: string, title?: string } | { width: 50, minWidth: 50 } |\n| AVATAR\\_WITH\\_TEXT | { firstName?: string, lastName?: string, title: string } | { width: 250 } |\n| AVATAR\\_WITH\\_META\\_LIST | { firstName?: string, lastName?: string, title: string, metaList: string[] } | { width: 250 } |\n| ICON | { icon: string } | { width: 50, minWidth: 50 } |\n| STATUS_HINT | { title: string, statusAppearance: string } | { width: 100 } |\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | key of the value in `RowData` | |\n| displayName | Column Head Label | |\n| width | width of the column(px or %) | |\n| minWidth | min-width of the column(px or %) | 100 |\n| maxWidth | max-width of the column(px or %) | 800 |\n| resizable | Denotes if column is resizable | |\n| sorting | Enables sorting in column | true |\n| comparator | Sorting Function to be passed(in case of sync) | Default string comparator(localeCompare) |\n| separator | Shows Left separator | |\n| tooltip | Shows tooltip on hover | |\n| pinned | Pin column | |\n| hidden | Denotes if column is hidden | |\n| filters | Filter options for the column | |\n| onFilterChange | Callback to be called on Filter Change | |\n| translate | Translate Cell Data | |\n| cellType | Cell Type | 'DEFAULT' |\n| cellRenderer | Custom Cell Renderer | |\n| align | Align cell content<br>**Align applicable only for following cellTypes:<br>DEFAULT, AVATAR, ICON, STATUS_HINT** | \"left\" |",
          "type": {
            "required": false,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "Set for loading state of Table(in case of sync)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "error": {
          "name": "error",
          "description": "Set for error state of Table(in case of sync)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "errorType": {
          "name": "errorType",
          "description": "Error type to be passed to errorTemplate props",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onSearch": {
          "name": "onSearch",
          "description": "Callback to be called on searchTerm change(in case of sync)",
          "type": {
            "required": false,
            "name": "function",
            "value": "((data: Data, searchTerm: string) => Data) | undefined"
          },
          "table": {
            "type": {
              "summary": "((data: Data, searchTerm: string) => Data) | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-table-selection--selection": {
    "id": "components-table-selection--selection",
    "kind": "Components/Table/Selection",
    "name": "Selection",
    "story": "Selection",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const schema: TableProps['schema'] = [\n    {\n      name: 'name',\n      displayName: 'Name',\n      width: '30%',\n      separator: true,\n      translate: (a) => ({\n        title: `${a.lastName}, ${a.firstName}`,\n        firstName: a.firstName,\n        lastName: a.lastName,\n      }),\n      cellType: 'AVATAR_WITH_TEXT',\n      sorting: false,\n    },\n    {\n      name: 'role',\n      displayName: 'Role',\n      width: 250,\n      sorting: false,\n    },\n    {\n      name: 'manager',\n      displayName: 'Manager',\n      width: 180,\n      sorting: false,\n    },\n    {\n      name: 'last_login',\n      displayName: 'Last Login',\n      width: 100,\n      sorting: false,\n    },\n    {\n      name: 'status',\n      displayName: 'Status',\n      width: 200,\n      cellType: 'STATUS_HINT',\n      sorting: false,\n      translate: (a) => ({\n        title: a.status,\n        statusAppearance: a.status === 'Inactive' ? 'default' : 'success',\n      }),\n    },\n  ];\n  return (\n    <Card>\n      <Table\n        loaderSchema={loaderSchema}\n        type=\"resource\"\n        data={data}\n        schema={schema}\n        showMenu={false}\n        withHeader={true}\n        withCheckbox={true}\n        onSelect={(rowIndex, selected, selectedList, selectAll) =>\n          action(\n            `on-select:- rowIndex: ${rowIndex} selected: ${selected} selectedList: ${JSON.stringify(\n              selectedList\n            )} selectAll: ${selectAll}`\n          )()\n        }\n        headerOptions={{\n          withSearch: true,\n        }}\n        onSearch={(currData, searchTerm) => {\n          return currData.filter(\n            (d) =>\n              d.firstName.toLowerCase().match(searchTerm.toLowerCase()) ||\n              d.lastName.toLowerCase().match(searchTerm.toLowerCase())\n          );\n        }}\n        withPagination={true}\n        pageSize={5}\n        onPageChange={(newPage) => action(`on-page-change:- ${newPage}`)()}\n      />\n    </Card>\n  );\n}"
      },
      "__id": "components-table-selection--selection",
      "args": {},
      "argTypes": {
        "showHead": {
          "name": "showHead",
          "description": "Controls Table Head display",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "type": {
          "name": "type",
          "description": "Type of Table\n\n**Requires `onRowClick` for 'resource' Table**",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "data",
              "resource"
            ]
          },
          "table": {
            "type": {
              "summary": "\"data\" | \"resource\""
            },
            "defaultValue": {
              "summary": "\"data\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Table cell size",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "standard",
              "compressed",
              "tight",
              "comfortable"
            ]
          },
          "table": {
            "type": {
              "summary": "\"standard\" | \"compressed\" | \"tight\" | \"comfortable\""
            },
            "defaultValue": {
              "summary": "\"standard\""
            }
          }
        },
        "draggable": {
          "name": "draggable",
          "description": "Allow Column reordering",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "nestedRows": {
          "name": "nestedRows",
          "description": "Allow nested rows",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "nestedRowRenderer": {
          "name": "nestedRowRenderer",
          "description": "Renderer to be used for nested rows\n\n<pre className=\"DocPage-codeBlock\">\nNestedRowProps: {\n    rowIndex: number;\n    data: RowData;\n    schema: GridProps['schema'];\n    loading: boolean;\n    expanded: boolean;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FC<NestedRowProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FC<NestedRowProps> | undefined"
            },
            "defaultValue": null
          }
        },
        "withHeader": {
          "name": "withHeader",
          "description": "Set to use `Header`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Options to be passed if using `withHeader: true`\n\n<pre className=\"DocPage-codeBlock\">\nExternalHeaderProps: {\n    children?: React.ReactNode;\n    withSearch?: boolean;\n    searchPlaceholder?: string;\n    dynamicColumn?: boolean;\n    allowSelectAll?: boolean;\n}\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| children | Header actions to be rendered | |\n| withSearch | Set to use Search Input | |\n| searchPlaceholder | Placeholder of Search Input | \"Search\" |\n| dynamicColumn | Set to use Column controlling dropdown | true |\n| allowSelectAll | Set to show Select All button | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "ExternalHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "ExternalHeaderProps | undefined"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Set for Row checkboxes",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showMenu": {
          "name": "showMenu",
          "description": "Set for visibility of Menu on Table Head Cell",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "withPagination": {
          "name": "withPagination",
          "description": "Set for `Pagination` component in `Table`(**Not applied if pageSize >= totalRecords**)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "page": {
          "name": "page",
          "description": "Initial page passed to `Table`",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "paginationType": {
          "name": "paginationType",
          "description": "`Pagination` component type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "basic",
              "jump"
            ]
          },
          "table": {
            "type": {
              "summary": "\"basic\" | \"jump\""
            },
            "defaultValue": {
              "summary": "\"jump\""
            }
          }
        },
        "pageSize": {
          "name": "pageSize",
          "description": "Number of rows to be rendered on a page\n\n**Also used to control number of rows to be rendered while loading: true**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "15"
            }
          }
        },
        "loaderSchema": {
          "name": "loaderSchema",
          "description": "Schema to be used for loading state **only when `schema: undefined`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "multipleSorting": {
          "name": "multipleSorting",
          "description": "Set to allow multiple column sorting",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "sortingList": {
          "name": "sortingList",
          "description": "Initial sortingList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nSortType: 'asc' | 'desc'\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "{ name: string; type: SortType; }[]"
          },
          "table": {
            "type": {
              "summary": "{ name: string; type: SortType; }[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "filterList": {
          "name": "filterList",
          "description": "Initial filterList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nFilter: Array of selected values passed in dropdown\n`any[]`\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Record<string, Filter>"
          },
          "table": {
            "type": {
              "summary": "Record<string, Filter>"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "errorTemplate": {
          "name": "errorTemplate",
          "description": "Template to be rendered when **error: true**\n\n<pre className=\"DocPage-codeBlock\">\nErrorTemplateProps: {\n    errorType: TableProps['errorType']\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FunctionComponent<ErrorTemplateProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FunctionComponent<ErrorTemplateProps> | undefined"
            },
            "defaultValue": {
              "summary": "(props: ErrorTemplateProps) => {\n  const { errorType = 'DEFAULT' } = props;\n\n  const errorMessages: Record<string, string> = {\n    FAILED_TO_FETCH: 'Failed to fetch data',\n    NO_RECORDS_FOUND: 'No results found',\n    DEFAULT: 'No results found',\n  };\n  return <Heading>{errorMessages[errorType]}</Heading>;\n}"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "750"
            }
          }
        },
        "onRowClick": {
          "name": "onRowClick",
          "description": "Callback to be called when a row is clicked in case of Table type: \"resource\"\n\n`onRowClickFunction: (data: RowData, rowIndexes?: number) => void`",
          "type": {
            "required": false,
            "name": "other",
            "value": "onRowClickFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "onRowClickFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "onSelect": {
          "name": "onSelect",
          "description": "Callback to be called when a row is selected",
          "type": {
            "required": false,
            "name": "function",
            "value": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onPageChange": {
          "name": "onPageChange",
          "description": "Callback to be called on page change in case of withPagination: true",
          "type": {
            "required": false,
            "name": "function",
            "value": "((page: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((page: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headCellTooltip": {
          "name": "headCellTooltip",
          "description": "Shows tooltip on Head Cell hover",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "separator": {
          "name": "separator",
          "description": "Shows left separator to all columns\n\n**Can be override by Column Schema**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "filterPosition": {
          "name": "filterPosition",
          "description": "Filters position in the Table\n\n`FilterPosition: 'HEADER' | 'GRID'`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "GRID",
              "HEADER"
            ]
          },
          "table": {
            "type": {
              "summary": "\"GRID\" | \"HEADER\""
            },
            "defaultValue": {
              "summary": "\"GRID\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchData": {
          "name": "fetchData",
          "description": "Callback to be called in case of async `Table`\n\n<pre className=\"DocPage-codeBlock\">\nfetchDataFunction: (options: FetchDataOptions) => Promise<{\n      searchTerm?: string,\n      count: number,\n      data: Data,\n      schema: Schema\n}>;\n\nFetchDataOptions: {\n      page?: number;\n      pageSize?: number;\n      filterList?: TableProps['sortingList'];\n      sortingList?: TableProps['filterList'];\n      searchTerm?: string;\n  }\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchDataFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchDataFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "data": {
          "name": "data",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Data: RowData[]\n\n    RowData: Record<string, any> & {\n      _selected?: boolean\n    }\n\n    `_selected`  Denotes row selection\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Data"
          },
          "table": {
            "type": {
              "summary": "Data"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "schema": {
          "name": "schema",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Schema: ColumnSchema[]\n\n    ColumnSchema: {\n        name: string;\n        displayName: string;\n        width?: React.ReactText;\n        minWidth?: React.ReactText;\n        maxWidth?: React.ReactText;\n        resizable?: boolean;\n        sorting?: boolean;\n        comparator?: (a: RowData, b: RowData) => -1 | 0 | 1;\n        separator?: boolean;\n        pinned?: 'left' | 'right';\n        hidden?: boolean;\n        filters?: DropdownProps['options'];\n        onFilterChange?: (data: RowData, filters: Filter) => boolean;\n        translate?: (data: RowData) => RowData,\n        cellType?: CellType;\n        cellRenderer?: React.FunctionComponent\\<GridCellProps\\>;\n        align?: Alignment;\n    }\n\n    GridCellProps: {\n        size: GridSize;\n        rowIndex: number;\n        colIndex: number;\n        data: RowData;\n        schema: ColumnSchema;\n        loading: boolean;\n        expanded: boolean;\n    }\n\n| CellType | CellData | Default Width |\n| --- | --- | --- |\n| DEFAULT | string \\| { title: string } | { width: 200 } |\n| WITH\\_META\\_LIST | { title: string, metaList: string[] } | { width: 200 } |\n| AVATAR | { firstName?: string, lastName?: string, title?: string } | { width: 50, minWidth: 50 } |\n| AVATAR\\_WITH\\_TEXT | { firstName?: string, lastName?: string, title: string } | { width: 250 } |\n| AVATAR\\_WITH\\_META\\_LIST | { firstName?: string, lastName?: string, title: string, metaList: string[] } | { width: 250 } |\n| ICON | { icon: string } | { width: 50, minWidth: 50 } |\n| STATUS_HINT | { title: string, statusAppearance: string } | { width: 100 } |\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | key of the value in `RowData` | |\n| displayName | Column Head Label | |\n| width | width of the column(px or %) | |\n| minWidth | min-width of the column(px or %) | 100 |\n| maxWidth | max-width of the column(px or %) | 800 |\n| resizable | Denotes if column is resizable | |\n| sorting | Enables sorting in column | true |\n| comparator | Sorting Function to be passed(in case of sync) | Default string comparator(localeCompare) |\n| separator | Shows Left separator | |\n| tooltip | Shows tooltip on hover | |\n| pinned | Pin column | |\n| hidden | Denotes if column is hidden | |\n| filters | Filter options for the column | |\n| onFilterChange | Callback to be called on Filter Change | |\n| translate | Translate Cell Data | |\n| cellType | Cell Type | 'DEFAULT' |\n| cellRenderer | Custom Cell Renderer | |\n| align | Align cell content<br>**Align applicable only for following cellTypes:<br>DEFAULT, AVATAR, ICON, STATUS_HINT** | \"left\" |",
          "type": {
            "required": false,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "Set for loading state of Table(in case of sync)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "error": {
          "name": "error",
          "description": "Set for error state of Table(in case of sync)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "errorType": {
          "name": "errorType",
          "description": "Error type to be passed to errorTemplate props",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onSearch": {
          "name": "onSearch",
          "description": "Callback to be called on searchTerm change(in case of sync)",
          "type": {
            "required": false,
            "name": "function",
            "value": "((data: Data, searchTerm: string) => Data) | undefined"
          },
          "table": {
            "type": {
              "summary": "((data: Data, searchTerm: string) => Data) | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-table-standard-table--standard-table": {
    "id": "components-table-standard-table--standard-table",
    "kind": "Components/Table/Standard Table",
    "name": "Standard Table",
    "story": "Standard Table",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const data = [\n    {\n      name: 'MSSP Track 1 Urban',\n      status: 'Active',\n      measures: '9',\n      current_period: 'March 2017 - Feb 2018',\n      added_in: 'March 2014',\n    },\n    {\n      name: 'MSSP Track 1 Rural',\n      status: 'Active',\n      measures: '9',\n      current_period: 'March 2017 - Feb 201',\n      added_in: 'March 2015',\n    },\n    {\n      name: 'MSSP Track 2',\n      status: 'Inactive',\n      measures: '14',\n      current_period: 'March 2017 - Feb 201',\n      added_in: 'March 2016',\n    },\n    {\n      name: 'Aetna',\n      status: 'Active',\n      measures: '20',\n      current_period: 'March 2017 - Feb 201',\n      added_in: 'March 2019',\n    },\n    {\n      name: 'BCBS',\n      status: 'Active',\n      measures: '16',\n      current_period: 'March 2017 - Feb 201',\n      added_in: 'March 2017',\n    },\n  ];\n\n  const schema: TableProps['schema'] = [\n    {\n      name: 'name',\n      displayName: 'Name',\n      width: '20%',\n      sorting: false,\n    },\n    {\n      name: 'status',\n      displayName: 'Status',\n      width: '20%',\n      translate: (a) => ({\n        title: a.status,\n        statusAppearance: a.status === 'Inactive' ? 'default' : 'success',\n      }),\n      cellType: 'STATUS_HINT',\n      sorting: false,\n    },\n    {\n      name: 'measures',\n      displayName: 'No. of Measures',\n      width: '20%',\n      sorting: false,\n    },\n    {\n      name: 'current_period',\n      displayName: 'Current Period',\n      width: '20%',\n      sorting: false,\n    },\n    {\n      name: 'added_in',\n      displayName: 'Added in',\n      width: '20%',\n      sorting: false,\n    },\n  ];\n\n  return (\n    <Card>\n      <Table\n        loaderSchema={loaderSchema}\n        showMenu={false}\n        separator={false}\n        data={data}\n        schema={schema}\n        withHeader={true}\n        headerOptions={{\n          withSearch: true,\n        }}\n        onSearch={(currData, searchTerm) => {\n          return currData.filter((d) => d.name.toLowerCase().match(searchTerm.toLowerCase()));\n        }}\n        withPagination={false}\n      />\n    </Card>\n  );\n}"
      },
      "__id": "components-table-standard-table--standard-table",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-table-sync-table--sync-table": {
    "id": "components-table-sync-table--sync-table",
    "kind": "Components/Table/Sync Table",
    "name": "Sync Table",
    "story": "Sync Table",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div\n      style={{\n        height: '350px',\n      }}\n    >\n      <Card className=\"h-100 overflow-hidden\">\n        <Table\n          loaderSchema={loaderSchema}\n          data={data}\n          schema={schema}\n          withHeader={true}\n          withCheckbox={true}\n          onSelect={(rowIndex, selected, selectedList, selectAll) =>\n            action(\n              `on-select:- rowIndex: ${rowIndex} selected: ${selected} selectedList: ${JSON.stringify(\n                selectedList\n              )} selectAll: ${selectAll}`\n            )()\n          }\n          headerOptions={{\n            withSearch: true,\n          }}\n          onSearch={(currData, searchTerm) => {\n            return currData.filter(\n              (d) =>\n                d.firstName.toLowerCase().match(searchTerm.toLowerCase()) ||\n                d.lastName.toLowerCase().match(searchTerm.toLowerCase())\n            );\n          }}\n          withPagination={true}\n          pageSize={5}\n          onPageChange={(newPage) => action(`on-page-change:- ${newPage}`)()}\n        />\n      </Card>\n    </div>\n  );\n}"
      },
      "__id": "components-table-sync-table--sync-table",
      "args": {},
      "argTypes": {
        "showHead": {
          "name": "showHead",
          "description": "Controls Table Head display",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "type": {
          "name": "type",
          "description": "Type of Table\n\n**Requires `onRowClick` for 'resource' Table**",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "data",
              "resource"
            ]
          },
          "table": {
            "type": {
              "summary": "\"data\" | \"resource\""
            },
            "defaultValue": {
              "summary": "\"data\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Table cell size",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "standard",
              "compressed",
              "tight",
              "comfortable"
            ]
          },
          "table": {
            "type": {
              "summary": "\"standard\" | \"compressed\" | \"tight\" | \"comfortable\""
            },
            "defaultValue": {
              "summary": "\"standard\""
            }
          }
        },
        "draggable": {
          "name": "draggable",
          "description": "Allow Column reordering",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "nestedRows": {
          "name": "nestedRows",
          "description": "Allow nested rows",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "nestedRowRenderer": {
          "name": "nestedRowRenderer",
          "description": "Renderer to be used for nested rows\n\n<pre className=\"DocPage-codeBlock\">\nNestedRowProps: {\n    rowIndex: number;\n    data: RowData;\n    schema: GridProps['schema'];\n    loading: boolean;\n    expanded: boolean;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FC<NestedRowProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FC<NestedRowProps> | undefined"
            },
            "defaultValue": null
          }
        },
        "withHeader": {
          "name": "withHeader",
          "description": "Set to use `Header`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Options to be passed if using `withHeader: true`\n\n<pre className=\"DocPage-codeBlock\">\nExternalHeaderProps: {\n    children?: React.ReactNode;\n    withSearch?: boolean;\n    searchPlaceholder?: string;\n    dynamicColumn?: boolean;\n    allowSelectAll?: boolean;\n}\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| children | Header actions to be rendered | |\n| withSearch | Set to use Search Input | |\n| searchPlaceholder | Placeholder of Search Input | \"Search\" |\n| dynamicColumn | Set to use Column controlling dropdown | true |\n| allowSelectAll | Set to show Select All button | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "ExternalHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "ExternalHeaderProps | undefined"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Set for Row checkboxes",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showMenu": {
          "name": "showMenu",
          "description": "Set for visibility of Menu on Table Head Cell",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "withPagination": {
          "name": "withPagination",
          "description": "Set for `Pagination` component in `Table`(**Not applied if pageSize >= totalRecords**)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "page": {
          "name": "page",
          "description": "Initial page passed to `Table`",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "paginationType": {
          "name": "paginationType",
          "description": "`Pagination` component type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "basic",
              "jump"
            ]
          },
          "table": {
            "type": {
              "summary": "\"basic\" | \"jump\""
            },
            "defaultValue": {
              "summary": "\"jump\""
            }
          }
        },
        "pageSize": {
          "name": "pageSize",
          "description": "Number of rows to be rendered on a page\n\n**Also used to control number of rows to be rendered while loading: true**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "15"
            }
          }
        },
        "loaderSchema": {
          "name": "loaderSchema",
          "description": "Schema to be used for loading state **only when `schema: undefined`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "multipleSorting": {
          "name": "multipleSorting",
          "description": "Set to allow multiple column sorting",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "sortingList": {
          "name": "sortingList",
          "description": "Initial sortingList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nSortType: 'asc' | 'desc'\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "{ name: string; type: SortType; }[]"
          },
          "table": {
            "type": {
              "summary": "{ name: string; type: SortType; }[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "filterList": {
          "name": "filterList",
          "description": "Initial filterList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nFilter: Array of selected values passed in dropdown\n`any[]`\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Record<string, Filter>"
          },
          "table": {
            "type": {
              "summary": "Record<string, Filter>"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "errorTemplate": {
          "name": "errorTemplate",
          "description": "Template to be rendered when **error: true**\n\n<pre className=\"DocPage-codeBlock\">\nErrorTemplateProps: {\n    errorType: TableProps['errorType']\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FunctionComponent<ErrorTemplateProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FunctionComponent<ErrorTemplateProps> | undefined"
            },
            "defaultValue": {
              "summary": "(props: ErrorTemplateProps) => {\n  const { errorType = 'DEFAULT' } = props;\n\n  const errorMessages: Record<string, string> = {\n    FAILED_TO_FETCH: 'Failed to fetch data',\n    NO_RECORDS_FOUND: 'No results found',\n    DEFAULT: 'No results found',\n  };\n  return <Heading>{errorMessages[errorType]}</Heading>;\n}"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "750"
            }
          }
        },
        "onRowClick": {
          "name": "onRowClick",
          "description": "Callback to be called when a row is clicked in case of Table type: \"resource\"\n\n`onRowClickFunction: (data: RowData, rowIndexes?: number) => void`",
          "type": {
            "required": false,
            "name": "other",
            "value": "onRowClickFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "onRowClickFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "onSelect": {
          "name": "onSelect",
          "description": "Callback to be called when a row is selected",
          "type": {
            "required": false,
            "name": "function",
            "value": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onPageChange": {
          "name": "onPageChange",
          "description": "Callback to be called on page change in case of withPagination: true",
          "type": {
            "required": false,
            "name": "function",
            "value": "((page: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((page: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headCellTooltip": {
          "name": "headCellTooltip",
          "description": "Shows tooltip on Head Cell hover",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "separator": {
          "name": "separator",
          "description": "Shows left separator to all columns\n\n**Can be override by Column Schema**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "filterPosition": {
          "name": "filterPosition",
          "description": "Filters position in the Table\n\n`FilterPosition: 'HEADER' | 'GRID'`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "GRID",
              "HEADER"
            ]
          },
          "table": {
            "type": {
              "summary": "\"GRID\" | \"HEADER\""
            },
            "defaultValue": {
              "summary": "\"GRID\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchData": {
          "name": "fetchData",
          "description": "Callback to be called in case of async `Table`\n\n<pre className=\"DocPage-codeBlock\">\nfetchDataFunction: (options: FetchDataOptions) => Promise<{\n      searchTerm?: string,\n      count: number,\n      data: Data,\n      schema: Schema\n}>;\n\nFetchDataOptions: {\n      page?: number;\n      pageSize?: number;\n      filterList?: TableProps['sortingList'];\n      sortingList?: TableProps['filterList'];\n      searchTerm?: string;\n  }\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchDataFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchDataFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "data": {
          "name": "data",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Data: RowData[]\n\n    RowData: Record<string, any> & {\n      _selected?: boolean\n    }\n\n    `_selected`  Denotes row selection\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Data"
          },
          "table": {
            "type": {
              "summary": "Data"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "schema": {
          "name": "schema",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Schema: ColumnSchema[]\n\n    ColumnSchema: {\n        name: string;\n        displayName: string;\n        width?: React.ReactText;\n        minWidth?: React.ReactText;\n        maxWidth?: React.ReactText;\n        resizable?: boolean;\n        sorting?: boolean;\n        comparator?: (a: RowData, b: RowData) => -1 | 0 | 1;\n        separator?: boolean;\n        pinned?: 'left' | 'right';\n        hidden?: boolean;\n        filters?: DropdownProps['options'];\n        onFilterChange?: (data: RowData, filters: Filter) => boolean;\n        translate?: (data: RowData) => RowData,\n        cellType?: CellType;\n        cellRenderer?: React.FunctionComponent\\<GridCellProps\\>;\n        align?: Alignment;\n    }\n\n    GridCellProps: {\n        size: GridSize;\n        rowIndex: number;\n        colIndex: number;\n        data: RowData;\n        schema: ColumnSchema;\n        loading: boolean;\n        expanded: boolean;\n    }\n\n| CellType | CellData | Default Width |\n| --- | --- | --- |\n| DEFAULT | string \\| { title: string } | { width: 200 } |\n| WITH\\_META\\_LIST | { title: string, metaList: string[] } | { width: 200 } |\n| AVATAR | { firstName?: string, lastName?: string, title?: string } | { width: 50, minWidth: 50 } |\n| AVATAR\\_WITH\\_TEXT | { firstName?: string, lastName?: string, title: string } | { width: 250 } |\n| AVATAR\\_WITH\\_META\\_LIST | { firstName?: string, lastName?: string, title: string, metaList: string[] } | { width: 250 } |\n| ICON | { icon: string } | { width: 50, minWidth: 50 } |\n| STATUS_HINT | { title: string, statusAppearance: string } | { width: 100 } |\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | key of the value in `RowData` | |\n| displayName | Column Head Label | |\n| width | width of the column(px or %) | |\n| minWidth | min-width of the column(px or %) | 100 |\n| maxWidth | max-width of the column(px or %) | 800 |\n| resizable | Denotes if column is resizable | |\n| sorting | Enables sorting in column | true |\n| comparator | Sorting Function to be passed(in case of sync) | Default string comparator(localeCompare) |\n| separator | Shows Left separator | |\n| tooltip | Shows tooltip on hover | |\n| pinned | Pin column | |\n| hidden | Denotes if column is hidden | |\n| filters | Filter options for the column | |\n| onFilterChange | Callback to be called on Filter Change | |\n| translate | Translate Cell Data | |\n| cellType | Cell Type | 'DEFAULT' |\n| cellRenderer | Custom Cell Renderer | |\n| align | Align cell content<br>**Align applicable only for following cellTypes:<br>DEFAULT, AVATAR, ICON, STATUS_HINT** | \"left\" |",
          "type": {
            "required": false,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "Set for loading state of Table(in case of sync)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "error": {
          "name": "error",
          "description": "Set for error state of Table(in case of sync)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "errorType": {
          "name": "errorType",
          "description": "Error type to be passed to errorTemplate props",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onSearch": {
          "name": "onSearch",
          "description": "Callback to be called on searchTerm change(in case of sync)",
          "type": {
            "required": false,
            "name": "function",
            "value": "((data: Data, searchTerm: string) => Data) | undefined"
          },
          "table": {
            "type": {
              "summary": "((data: Data, searchTerm: string) => Data) | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-table-table-as-description-list--table-as-description-list": {
    "id": "components-table-table-as-description-list--table-as-description-list",
    "kind": "Components/Table/Table As Description List",
    "name": "Table As Description List",
    "story": "Table As Description List",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const data = [\n    {\n      firstName: 'John',\n      lastName: 'Doe',\n      email: 'jonathandoe@gamil.com',\n      owner: true,\n    },\n    {\n      firstName: 'Katty',\n      lastName: 'Perry',\n      email: 'kattyperry21@gamil.com',\n      edit: true,\n    },\n    {\n      firstName: 'Daniel',\n      lastName: 'Low',\n      email: 'daniellow02@yahoo.com',\n      view: true,\n    },\n  ];\n\n  const schema: TableProps['schema'] = [\n    {\n      name: 'info',\n      displayName: 'Info',\n      width: '80%',\n      cellType: 'AVATAR_WITH_META_LIST',\n      translate: (a) => ({\n        firstName: a.firstName,\n        lastName: a.lastName,\n        title: `${a.firstName} ${a.lastName}`,\n        metaList: [a.email],\n      }),\n    },\n    {\n      name: 'rights',\n      displayName: 'Rights',\n      width: '20%',\n      cellRenderer: (props: GridCellProps) => {\n        const renderRights = () => {\n          if (props.data.owner) {\n            return (\n              <Text appearance=\"subtle\" className=\"pr-5\">\n                owner\n              </Text>\n            );\n          }\n\n          if (props.data.edit || props.data.view) {\n            const rights = props.data.edit ? 'edit' : 'view';\n            return (\n              <Button\n                icon=\"keyboard_arrow_down\"\n                iconAlign=\"right\"\n                appearance=\"transparent\"\n                onClick={(e) => e.stopPropagation()}\n              >\n                {`can ${rights}`}\n              </Button>\n            );\n          }\n\n          return null;\n        };\n\n        return <div className=\"d-flex align-items-center justify-content-end flex-grow-1\">{renderRights()}</div>;\n      },\n    },\n  ];\n\n  return (\n    <Card className=\"py-4\">\n      <Text size=\"large\" weight=\"strong\" className=\"ml-5\">\n        Sharing Test Manual\n      </Text>\n      <List\n        type=\"resource\"\n        withHeader={true}\n        headerOptions={{\n          withSearch: true,\n          dynamicColumn: false,\n        }}\n        separator={false}\n        showMenu={false}\n        data={data}\n        schema={schema}\n        withPagination={false}\n        onSearch={(currData, searchTerm) => {\n          return currData.filter(\n            (d) =>\n              d.firstName.toLowerCase().match(searchTerm.toLowerCase()) ||\n              d.lastName.toLowerCase().match(searchTerm.toLowerCase())\n          );\n        }}\n        onRowClick={(rowData, rowIndex) =>\n          action(`on-row-click:- rowIndex: ${rowIndex} data: ${JSON.stringify(rowData)}`)()\n        }\n      />\n    </Card>\n  );\n}"
      },
      "__id": "components-table-table-as-description-list--table-as-description-list",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-table-table-as-option-list--table-as-option-list": {
    "id": "components-table-table-as-option-list--table-as-option-list",
    "kind": "Components/Table/Table As Option List",
    "name": "Table As Option List",
    "story": "Table As Option List",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const data = [\n    {\n      assessment: 'Alcohol Usage Disorders Identification Test - C (Audit C)',\n    },\n    {\n      assessment: 'Functional Assessment - Initial',\n    },\n    {\n      assessment: 'Functional Assessment - Discharge',\n    },\n    {\n      assessment: 'Hypertension - Diabetes Symptoms Identification Test',\n    },\n    {\n      assessment: 'Patient Health Questionaire',\n    },\n  ];\n\n  const schema: TableProps['schema'] = [\n    {\n      name: 'assessment',\n      displayName: 'Assessment',\n      cellType: 'DEFAULT',\n      width: '100%',\n    },\n  ];\n\n  return (\n    <Card>\n      <Text size=\"large\" weight=\"strong\" className=\"ml-5\">\n        Select Assessment\n      </Text>\n      <List\n        type=\"resource\"\n        withHeader={true}\n        headerOptions={{\n          withSearch: true,\n          dynamicColumn: false,\n        }}\n        separator={false}\n        showMenu={false}\n        data={data}\n        schema={schema}\n        withPagination={false}\n        onSearch={(currData, searchTerm) => {\n          return currData.filter((d) => d.assessment.toLowerCase().match(searchTerm.toLowerCase()));\n        }}\n        onRowClick={(rowData, rowIndex) =>\n          action(`on-row-click:- rowIndex: ${rowIndex} data: ${JSON.stringify(rowData)}`)()\n        }\n      />\n    </Card>\n  );\n}"
      },
      "__id": "components-table-table-as-option-list--table-as-option-list",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-table-tight-table--tight-table": {
    "id": "components-table-tight-table--tight-table",
    "kind": "Components/Table/Tight Table",
    "name": "Tight Table",
    "story": "Tight Table",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const data = [\n    {\n      name: 'MSSP Track 1 Urban',\n      status: 'Active',\n      measures: '9',\n      current_period: 'March 2017 - Feb 2018',\n      added_in: 'March 2014',\n    },\n    {\n      name: 'MSSP Track 1 Rural',\n      status: 'Active',\n      measures: '9',\n      current_period: 'March 2017 - Feb 2019',\n      added_in: 'March 2015',\n    },\n    {\n      name: 'MSSP Track 2',\n      status: 'Inactive',\n      measures: '14',\n      current_period: 'March 2017 - Feb 2018',\n      added_in: 'March 2016',\n    },\n    {\n      name: 'Aetna',\n      status: 'Active',\n      measures: '20',\n      current_period: 'March 2017 - Feb 2019',\n      added_in: 'March 2019',\n    },\n    {\n      name: 'BCBS',\n      status: 'Active',\n      measures: '16',\n      current_period: 'March 2017 - Feb 2018',\n      added_in: 'March 2017',\n    },\n  ];\n\n  const schema: TableProps['schema'] = [\n    {\n      name: 'name',\n      displayName: 'Name',\n      width: '20%',\n      sorting: false,\n    },\n    {\n      name: 'status',\n      displayName: 'Status',\n      width: '20%',\n      translate: (a) => ({\n        title: a.status,\n        statusAppearance: a.status === 'Inactive' ? 'default' : 'success',\n      }),\n      cellType: 'STATUS_HINT',\n      sorting: false,\n    },\n    {\n      name: 'measures',\n      displayName: 'No. of Measures',\n      width: '20%',\n      sorting: false,\n    },\n    {\n      name: 'current_period',\n      displayName: 'Current Period',\n      width: '20%',\n      sorting: false,\n    },\n    {\n      name: 'added_in',\n      displayName: 'Added in',\n      width: '20%',\n      sorting: false,\n    },\n  ];\n\n  return (\n    <Card>\n      <Table\n        loaderSchema={loaderSchema}\n        size=\"tight\"\n        showMenu={false}\n        separator={false}\n        data={data}\n        schema={schema}\n        withHeader={true}\n        headerOptions={{\n          withSearch: true,\n        }}\n        onSearch={(currData, searchTerm) => {\n          return currData.filter((d) => d.name.toLowerCase().match(searchTerm.toLowerCase()));\n        }}\n        withPagination={false}\n      />\n    </Card>\n  );\n}"
      },
      "__id": "components-table-tight-table--tight-table",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-table-variants-nested-rows--nested-rows": {
    "id": "components-table-variants-nested-rows--nested-rows",
    "kind": "Components/Table/Variants/Nested Rows",
    "name": "Nested Rows",
    "story": "Nested Rows",
    "parameters": {
      "storySource": {
        "source": "() => {\n  schema[0].width = 400;\n\n  return (\n    <div\n      style={{\n        height: '350px',\n      }}\n    >\n      <Card shadow=\"light\" className=\"h-100\">\n        <Table\n          schema={schema}\n          data={data}\n          nestedRows={true}\n          nestedRowRenderer={nestedRowRenderer}\n          onRowClick={(rowData, rowIndex) =>\n            action(`on-row-click:- rowIndex: ${rowIndex} data: ${JSON.stringify(rowData)}`)()\n          }\n        />\n      </Card>\n    </div>\n  );\n}"
      },
      "__id": "components-table-variants-nested-rows--nested-rows",
      "args": {},
      "argTypes": {
        "showHead": {
          "name": "showHead",
          "description": "Controls Table Head display",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "type": {
          "name": "type",
          "description": "Type of Table\n\n**Requires `onRowClick` for 'resource' Table**",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "data",
              "resource"
            ]
          },
          "table": {
            "type": {
              "summary": "\"data\" | \"resource\""
            },
            "defaultValue": {
              "summary": "\"data\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Table cell size",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "standard",
              "compressed",
              "tight",
              "comfortable"
            ]
          },
          "table": {
            "type": {
              "summary": "\"standard\" | \"compressed\" | \"tight\" | \"comfortable\""
            },
            "defaultValue": {
              "summary": "\"standard\""
            }
          }
        },
        "draggable": {
          "name": "draggable",
          "description": "Allow Column reordering",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "nestedRows": {
          "name": "nestedRows",
          "description": "Allow nested rows",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "nestedRowRenderer": {
          "name": "nestedRowRenderer",
          "description": "Renderer to be used for nested rows\n\n<pre className=\"DocPage-codeBlock\">\nNestedRowProps: {\n    rowIndex: number;\n    data: RowData;\n    schema: GridProps['schema'];\n    loading: boolean;\n    expanded: boolean;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FC<NestedRowProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FC<NestedRowProps> | undefined"
            },
            "defaultValue": null
          }
        },
        "withHeader": {
          "name": "withHeader",
          "description": "Set to use `Header`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Options to be passed if using `withHeader: true`\n\n<pre className=\"DocPage-codeBlock\">\nExternalHeaderProps: {\n    children?: React.ReactNode;\n    withSearch?: boolean;\n    searchPlaceholder?: string;\n    dynamicColumn?: boolean;\n    allowSelectAll?: boolean;\n}\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| children | Header actions to be rendered | |\n| withSearch | Set to use Search Input | |\n| searchPlaceholder | Placeholder of Search Input | \"Search\" |\n| dynamicColumn | Set to use Column controlling dropdown | true |\n| allowSelectAll | Set to show Select All button | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "ExternalHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "ExternalHeaderProps | undefined"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Set for Row checkboxes",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showMenu": {
          "name": "showMenu",
          "description": "Set for visibility of Menu on Table Head Cell",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "withPagination": {
          "name": "withPagination",
          "description": "Set for `Pagination` component in `Table`(**Not applied if pageSize >= totalRecords**)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "page": {
          "name": "page",
          "description": "Initial page passed to `Table`",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "paginationType": {
          "name": "paginationType",
          "description": "`Pagination` component type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "basic",
              "jump"
            ]
          },
          "table": {
            "type": {
              "summary": "\"basic\" | \"jump\""
            },
            "defaultValue": {
              "summary": "\"jump\""
            }
          }
        },
        "pageSize": {
          "name": "pageSize",
          "description": "Number of rows to be rendered on a page\n\n**Also used to control number of rows to be rendered while loading: true**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "15"
            }
          }
        },
        "loaderSchema": {
          "name": "loaderSchema",
          "description": "Schema to be used for loading state **only when `schema: undefined`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "multipleSorting": {
          "name": "multipleSorting",
          "description": "Set to allow multiple column sorting",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "sortingList": {
          "name": "sortingList",
          "description": "Initial sortingList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nSortType: 'asc' | 'desc'\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "{ name: string; type: SortType; }[]"
          },
          "table": {
            "type": {
              "summary": "{ name: string; type: SortType; }[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "filterList": {
          "name": "filterList",
          "description": "Initial filterList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nFilter: Array of selected values passed in dropdown\n`any[]`\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Record<string, Filter>"
          },
          "table": {
            "type": {
              "summary": "Record<string, Filter>"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "errorTemplate": {
          "name": "errorTemplate",
          "description": "Template to be rendered when **error: true**\n\n<pre className=\"DocPage-codeBlock\">\nErrorTemplateProps: {\n    errorType: TableProps['errorType']\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FunctionComponent<ErrorTemplateProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FunctionComponent<ErrorTemplateProps> | undefined"
            },
            "defaultValue": {
              "summary": "(props: ErrorTemplateProps) => {\n  const { errorType = 'DEFAULT' } = props;\n\n  const errorMessages: Record<string, string> = {\n    FAILED_TO_FETCH: 'Failed to fetch data',\n    NO_RECORDS_FOUND: 'No results found',\n    DEFAULT: 'No results found',\n  };\n  return <Heading>{errorMessages[errorType]}</Heading>;\n}"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "750"
            }
          }
        },
        "onRowClick": {
          "name": "onRowClick",
          "description": "Callback to be called when a row is clicked in case of Table type: \"resource\"\n\n`onRowClickFunction: (data: RowData, rowIndexes?: number) => void`",
          "type": {
            "required": false,
            "name": "other",
            "value": "onRowClickFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "onRowClickFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "onSelect": {
          "name": "onSelect",
          "description": "Callback to be called when a row is selected",
          "type": {
            "required": false,
            "name": "function",
            "value": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onPageChange": {
          "name": "onPageChange",
          "description": "Callback to be called on page change in case of withPagination: true",
          "type": {
            "required": false,
            "name": "function",
            "value": "((page: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((page: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headCellTooltip": {
          "name": "headCellTooltip",
          "description": "Shows tooltip on Head Cell hover",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "separator": {
          "name": "separator",
          "description": "Shows left separator to all columns\n\n**Can be override by Column Schema**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "filterPosition": {
          "name": "filterPosition",
          "description": "Filters position in the Table\n\n`FilterPosition: 'HEADER' | 'GRID'`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "GRID",
              "HEADER"
            ]
          },
          "table": {
            "type": {
              "summary": "\"GRID\" | \"HEADER\""
            },
            "defaultValue": {
              "summary": "\"GRID\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchData": {
          "name": "fetchData",
          "description": "Callback to be called in case of async `Table`\n\n<pre className=\"DocPage-codeBlock\">\nfetchDataFunction: (options: FetchDataOptions) => Promise<{\n      searchTerm?: string,\n      count: number,\n      data: Data,\n      schema: Schema\n}>;\n\nFetchDataOptions: {\n      page?: number;\n      pageSize?: number;\n      filterList?: TableProps['sortingList'];\n      sortingList?: TableProps['filterList'];\n      searchTerm?: string;\n  }\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchDataFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchDataFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "data": {
          "name": "data",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Data: RowData[]\n\n    RowData: Record<string, any> & {\n      _selected?: boolean\n    }\n\n    `_selected`  Denotes row selection\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Data"
          },
          "table": {
            "type": {
              "summary": "Data"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "schema": {
          "name": "schema",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Schema: ColumnSchema[]\n\n    ColumnSchema: {\n        name: string;\n        displayName: string;\n        width?: React.ReactText;\n        minWidth?: React.ReactText;\n        maxWidth?: React.ReactText;\n        resizable?: boolean;\n        sorting?: boolean;\n        comparator?: (a: RowData, b: RowData) => -1 | 0 | 1;\n        separator?: boolean;\n        pinned?: 'left' | 'right';\n        hidden?: boolean;\n        filters?: DropdownProps['options'];\n        onFilterChange?: (data: RowData, filters: Filter) => boolean;\n        translate?: (data: RowData) => RowData,\n        cellType?: CellType;\n        cellRenderer?: React.FunctionComponent\\<GridCellProps\\>;\n        align?: Alignment;\n    }\n\n    GridCellProps: {\n        size: GridSize;\n        rowIndex: number;\n        colIndex: number;\n        data: RowData;\n        schema: ColumnSchema;\n        loading: boolean;\n        expanded: boolean;\n    }\n\n| CellType | CellData | Default Width |\n| --- | --- | --- |\n| DEFAULT | string \\| { title: string } | { width: 200 } |\n| WITH\\_META\\_LIST | { title: string, metaList: string[] } | { width: 200 } |\n| AVATAR | { firstName?: string, lastName?: string, title?: string } | { width: 50, minWidth: 50 } |\n| AVATAR\\_WITH\\_TEXT | { firstName?: string, lastName?: string, title: string } | { width: 250 } |\n| AVATAR\\_WITH\\_META\\_LIST | { firstName?: string, lastName?: string, title: string, metaList: string[] } | { width: 250 } |\n| ICON | { icon: string } | { width: 50, minWidth: 50 } |\n| STATUS_HINT | { title: string, statusAppearance: string } | { width: 100 } |\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | key of the value in `RowData` | |\n| displayName | Column Head Label | |\n| width | width of the column(px or %) | |\n| minWidth | min-width of the column(px or %) | 100 |\n| maxWidth | max-width of the column(px or %) | 800 |\n| resizable | Denotes if column is resizable | |\n| sorting | Enables sorting in column | true |\n| comparator | Sorting Function to be passed(in case of sync) | Default string comparator(localeCompare) |\n| separator | Shows Left separator | |\n| tooltip | Shows tooltip on hover | |\n| pinned | Pin column | |\n| hidden | Denotes if column is hidden | |\n| filters | Filter options for the column | |\n| onFilterChange | Callback to be called on Filter Change | |\n| translate | Translate Cell Data | |\n| cellType | Cell Type | 'DEFAULT' |\n| cellRenderer | Custom Cell Renderer | |\n| align | Align cell content<br>**Align applicable only for following cellTypes:<br>DEFAULT, AVATAR, ICON, STATUS_HINT** | \"left\" |",
          "type": {
            "required": false,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "Set for loading state of Table(in case of sync)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "error": {
          "name": "error",
          "description": "Set for error state of Table(in case of sync)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "errorType": {
          "name": "errorType",
          "description": "Error type to be passed to errorTemplate props",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onSearch": {
          "name": "onSearch",
          "description": "Callback to be called on searchTerm change(in case of sync)",
          "type": {
            "required": false,
            "name": "function",
            "value": "((data: Data, searchTerm: string) => Data) | undefined"
          },
          "table": {
            "type": {
              "summary": "((data: Data, searchTerm: string) => Data) | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-table-variants-show-head--show-head": {
    "id": "components-table-variants-show-head--show-head",
    "kind": "Components/Table/Variants/Show Head",
    "name": "Show Head",
    "story": "Show Head",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const values: TableProps['showHead'][] = [true, false];\n\n  const style = {\n    display: 'flex',\n    flexWrap: 'wrap',\n  };\n\n  return (\n    // @ts-ignore\n    <div style={style}>\n      {values.map((v, index) => (\n        <div\n          key={index}\n          style={{\n            margin: '20px',\n            width: '45%',\n          }}\n        >\n          <Heading>{`showHead: ${v}`}</Heading>\n          <div\n            style={{\n              height: '350px',\n            }}\n          >\n            <Card shadow=\"light\" className=\"h-100\">\n              <Table showHead={v} data={data} schema={schema} />\n            </Card>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}"
      },
      "__id": "components-table-variants-show-head--show-head",
      "args": {},
      "argTypes": {
        "showHead": {
          "name": "showHead",
          "description": "Controls Table Head display",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "type": {
          "name": "type",
          "description": "Type of Table\n\n**Requires `onRowClick` for 'resource' Table**",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "data",
              "resource"
            ]
          },
          "table": {
            "type": {
              "summary": "\"data\" | \"resource\""
            },
            "defaultValue": {
              "summary": "\"data\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Table cell size",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "standard",
              "compressed",
              "tight",
              "comfortable"
            ]
          },
          "table": {
            "type": {
              "summary": "\"standard\" | \"compressed\" | \"tight\" | \"comfortable\""
            },
            "defaultValue": {
              "summary": "\"standard\""
            }
          }
        },
        "draggable": {
          "name": "draggable",
          "description": "Allow Column reordering",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "nestedRows": {
          "name": "nestedRows",
          "description": "Allow nested rows",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "nestedRowRenderer": {
          "name": "nestedRowRenderer",
          "description": "Renderer to be used for nested rows\n\n<pre className=\"DocPage-codeBlock\">\nNestedRowProps: {\n    rowIndex: number;\n    data: RowData;\n    schema: GridProps['schema'];\n    loading: boolean;\n    expanded: boolean;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FC<NestedRowProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FC<NestedRowProps> | undefined"
            },
            "defaultValue": null
          }
        },
        "withHeader": {
          "name": "withHeader",
          "description": "Set to use `Header`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Options to be passed if using `withHeader: true`\n\n<pre className=\"DocPage-codeBlock\">\nExternalHeaderProps: {\n    children?: React.ReactNode;\n    withSearch?: boolean;\n    searchPlaceholder?: string;\n    dynamicColumn?: boolean;\n    allowSelectAll?: boolean;\n}\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| children | Header actions to be rendered | |\n| withSearch | Set to use Search Input | |\n| searchPlaceholder | Placeholder of Search Input | \"Search\" |\n| dynamicColumn | Set to use Column controlling dropdown | true |\n| allowSelectAll | Set to show Select All button | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "ExternalHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "ExternalHeaderProps | undefined"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Set for Row checkboxes",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showMenu": {
          "name": "showMenu",
          "description": "Set for visibility of Menu on Table Head Cell",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "withPagination": {
          "name": "withPagination",
          "description": "Set for `Pagination` component in `Table`(**Not applied if pageSize >= totalRecords**)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "page": {
          "name": "page",
          "description": "Initial page passed to `Table`",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "paginationType": {
          "name": "paginationType",
          "description": "`Pagination` component type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "basic",
              "jump"
            ]
          },
          "table": {
            "type": {
              "summary": "\"basic\" | \"jump\""
            },
            "defaultValue": {
              "summary": "\"jump\""
            }
          }
        },
        "pageSize": {
          "name": "pageSize",
          "description": "Number of rows to be rendered on a page\n\n**Also used to control number of rows to be rendered while loading: true**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "15"
            }
          }
        },
        "loaderSchema": {
          "name": "loaderSchema",
          "description": "Schema to be used for loading state **only when `schema: undefined`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "multipleSorting": {
          "name": "multipleSorting",
          "description": "Set to allow multiple column sorting",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "sortingList": {
          "name": "sortingList",
          "description": "Initial sortingList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nSortType: 'asc' | 'desc'\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "{ name: string; type: SortType; }[]"
          },
          "table": {
            "type": {
              "summary": "{ name: string; type: SortType; }[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "filterList": {
          "name": "filterList",
          "description": "Initial filterList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nFilter: Array of selected values passed in dropdown\n`any[]`\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Record<string, Filter>"
          },
          "table": {
            "type": {
              "summary": "Record<string, Filter>"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "errorTemplate": {
          "name": "errorTemplate",
          "description": "Template to be rendered when **error: true**\n\n<pre className=\"DocPage-codeBlock\">\nErrorTemplateProps: {\n    errorType: TableProps['errorType']\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FunctionComponent<ErrorTemplateProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FunctionComponent<ErrorTemplateProps> | undefined"
            },
            "defaultValue": {
              "summary": "(props: ErrorTemplateProps) => {\n  const { errorType = 'DEFAULT' } = props;\n\n  const errorMessages: Record<string, string> = {\n    FAILED_TO_FETCH: 'Failed to fetch data',\n    NO_RECORDS_FOUND: 'No results found',\n    DEFAULT: 'No results found',\n  };\n  return <Heading>{errorMessages[errorType]}</Heading>;\n}"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "750"
            }
          }
        },
        "onRowClick": {
          "name": "onRowClick",
          "description": "Callback to be called when a row is clicked in case of Table type: \"resource\"\n\n`onRowClickFunction: (data: RowData, rowIndexes?: number) => void`",
          "type": {
            "required": false,
            "name": "other",
            "value": "onRowClickFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "onRowClickFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "onSelect": {
          "name": "onSelect",
          "description": "Callback to be called when a row is selected",
          "type": {
            "required": false,
            "name": "function",
            "value": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onPageChange": {
          "name": "onPageChange",
          "description": "Callback to be called on page change in case of withPagination: true",
          "type": {
            "required": false,
            "name": "function",
            "value": "((page: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((page: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headCellTooltip": {
          "name": "headCellTooltip",
          "description": "Shows tooltip on Head Cell hover",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "separator": {
          "name": "separator",
          "description": "Shows left separator to all columns\n\n**Can be override by Column Schema**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "filterPosition": {
          "name": "filterPosition",
          "description": "Filters position in the Table\n\n`FilterPosition: 'HEADER' | 'GRID'`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "GRID",
              "HEADER"
            ]
          },
          "table": {
            "type": {
              "summary": "\"GRID\" | \"HEADER\""
            },
            "defaultValue": {
              "summary": "\"GRID\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchData": {
          "name": "fetchData",
          "description": "Callback to be called in case of async `Table`\n\n<pre className=\"DocPage-codeBlock\">\nfetchDataFunction: (options: FetchDataOptions) => Promise<{\n      searchTerm?: string,\n      count: number,\n      data: Data,\n      schema: Schema\n}>;\n\nFetchDataOptions: {\n      page?: number;\n      pageSize?: number;\n      filterList?: TableProps['sortingList'];\n      sortingList?: TableProps['filterList'];\n      searchTerm?: string;\n  }\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchDataFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchDataFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "data": {
          "name": "data",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Data: RowData[]\n\n    RowData: Record<string, any> & {\n      _selected?: boolean\n    }\n\n    `_selected`  Denotes row selection\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Data"
          },
          "table": {
            "type": {
              "summary": "Data"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "schema": {
          "name": "schema",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Schema: ColumnSchema[]\n\n    ColumnSchema: {\n        name: string;\n        displayName: string;\n        width?: React.ReactText;\n        minWidth?: React.ReactText;\n        maxWidth?: React.ReactText;\n        resizable?: boolean;\n        sorting?: boolean;\n        comparator?: (a: RowData, b: RowData) => -1 | 0 | 1;\n        separator?: boolean;\n        pinned?: 'left' | 'right';\n        hidden?: boolean;\n        filters?: DropdownProps['options'];\n        onFilterChange?: (data: RowData, filters: Filter) => boolean;\n        translate?: (data: RowData) => RowData,\n        cellType?: CellType;\n        cellRenderer?: React.FunctionComponent\\<GridCellProps\\>;\n        align?: Alignment;\n    }\n\n    GridCellProps: {\n        size: GridSize;\n        rowIndex: number;\n        colIndex: number;\n        data: RowData;\n        schema: ColumnSchema;\n        loading: boolean;\n        expanded: boolean;\n    }\n\n| CellType | CellData | Default Width |\n| --- | --- | --- |\n| DEFAULT | string \\| { title: string } | { width: 200 } |\n| WITH\\_META\\_LIST | { title: string, metaList: string[] } | { width: 200 } |\n| AVATAR | { firstName?: string, lastName?: string, title?: string } | { width: 50, minWidth: 50 } |\n| AVATAR\\_WITH\\_TEXT | { firstName?: string, lastName?: string, title: string } | { width: 250 } |\n| AVATAR\\_WITH\\_META\\_LIST | { firstName?: string, lastName?: string, title: string, metaList: string[] } | { width: 250 } |\n| ICON | { icon: string } | { width: 50, minWidth: 50 } |\n| STATUS_HINT | { title: string, statusAppearance: string } | { width: 100 } |\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | key of the value in `RowData` | |\n| displayName | Column Head Label | |\n| width | width of the column(px or %) | |\n| minWidth | min-width of the column(px or %) | 100 |\n| maxWidth | max-width of the column(px or %) | 800 |\n| resizable | Denotes if column is resizable | |\n| sorting | Enables sorting in column | true |\n| comparator | Sorting Function to be passed(in case of sync) | Default string comparator(localeCompare) |\n| separator | Shows Left separator | |\n| tooltip | Shows tooltip on hover | |\n| pinned | Pin column | |\n| hidden | Denotes if column is hidden | |\n| filters | Filter options for the column | |\n| onFilterChange | Callback to be called on Filter Change | |\n| translate | Translate Cell Data | |\n| cellType | Cell Type | 'DEFAULT' |\n| cellRenderer | Custom Cell Renderer | |\n| align | Align cell content<br>**Align applicable only for following cellTypes:<br>DEFAULT, AVATAR, ICON, STATUS_HINT** | \"left\" |",
          "type": {
            "required": false,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "Set for loading state of Table(in case of sync)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "error": {
          "name": "error",
          "description": "Set for error state of Table(in case of sync)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "errorType": {
          "name": "errorType",
          "description": "Error type to be passed to errorTemplate props",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onSearch": {
          "name": "onSearch",
          "description": "Callback to be called on searchTerm change(in case of sync)",
          "type": {
            "required": false,
            "name": "function",
            "value": "((data: Data, searchTerm: string) => Data) | undefined"
          },
          "table": {
            "type": {
              "summary": "((data: Data, searchTerm: string) => Data) | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-table-variants-show-menu--show-menu": {
    "id": "components-table-variants-show-menu--show-menu",
    "kind": "Components/Table/Variants/Show Menu",
    "name": "Show Menu",
    "story": "Show Menu",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const values: TableProps['showMenu'][] = [true, false];\n\n  const style = {\n    display: 'flex',\n    flexWrap: 'wrap',\n  };\n\n  return (\n    // @ts-ignore\n    <div style={style}>\n      {values.map((v, index) => (\n        <div\n          key={index}\n          style={{\n            margin: '20px',\n            width: '45%',\n          }}\n        >\n          <Heading>{`showMenu: ${v}`}</Heading>\n          <div\n            style={{\n              height: '350px',\n            }}\n          >\n            <Card shadow=\"light\" className=\"h-100\">\n              <Table showMenu={v} data={data} schema={schema} />\n            </Card>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}"
      },
      "__id": "components-table-variants-show-menu--show-menu",
      "args": {},
      "argTypes": {
        "showHead": {
          "name": "showHead",
          "description": "Controls Table Head display",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "type": {
          "name": "type",
          "description": "Type of Table\n\n**Requires `onRowClick` for 'resource' Table**",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "data",
              "resource"
            ]
          },
          "table": {
            "type": {
              "summary": "\"data\" | \"resource\""
            },
            "defaultValue": {
              "summary": "\"data\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Table cell size",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "standard",
              "compressed",
              "tight",
              "comfortable"
            ]
          },
          "table": {
            "type": {
              "summary": "\"standard\" | \"compressed\" | \"tight\" | \"comfortable\""
            },
            "defaultValue": {
              "summary": "\"standard\""
            }
          }
        },
        "draggable": {
          "name": "draggable",
          "description": "Allow Column reordering",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "nestedRows": {
          "name": "nestedRows",
          "description": "Allow nested rows",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "nestedRowRenderer": {
          "name": "nestedRowRenderer",
          "description": "Renderer to be used for nested rows\n\n<pre className=\"DocPage-codeBlock\">\nNestedRowProps: {\n    rowIndex: number;\n    data: RowData;\n    schema: GridProps['schema'];\n    loading: boolean;\n    expanded: boolean;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FC<NestedRowProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FC<NestedRowProps> | undefined"
            },
            "defaultValue": null
          }
        },
        "withHeader": {
          "name": "withHeader",
          "description": "Set to use `Header`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Options to be passed if using `withHeader: true`\n\n<pre className=\"DocPage-codeBlock\">\nExternalHeaderProps: {\n    children?: React.ReactNode;\n    withSearch?: boolean;\n    searchPlaceholder?: string;\n    dynamicColumn?: boolean;\n    allowSelectAll?: boolean;\n}\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| children | Header actions to be rendered | |\n| withSearch | Set to use Search Input | |\n| searchPlaceholder | Placeholder of Search Input | \"Search\" |\n| dynamicColumn | Set to use Column controlling dropdown | true |\n| allowSelectAll | Set to show Select All button | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "ExternalHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "ExternalHeaderProps | undefined"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Set for Row checkboxes",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showMenu": {
          "name": "showMenu",
          "description": "Set for visibility of Menu on Table Head Cell",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "withPagination": {
          "name": "withPagination",
          "description": "Set for `Pagination` component in `Table`(**Not applied if pageSize >= totalRecords**)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "page": {
          "name": "page",
          "description": "Initial page passed to `Table`",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "paginationType": {
          "name": "paginationType",
          "description": "`Pagination` component type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "basic",
              "jump"
            ]
          },
          "table": {
            "type": {
              "summary": "\"basic\" | \"jump\""
            },
            "defaultValue": {
              "summary": "\"jump\""
            }
          }
        },
        "pageSize": {
          "name": "pageSize",
          "description": "Number of rows to be rendered on a page\n\n**Also used to control number of rows to be rendered while loading: true**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "15"
            }
          }
        },
        "loaderSchema": {
          "name": "loaderSchema",
          "description": "Schema to be used for loading state **only when `schema: undefined`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "multipleSorting": {
          "name": "multipleSorting",
          "description": "Set to allow multiple column sorting",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "sortingList": {
          "name": "sortingList",
          "description": "Initial sortingList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nSortType: 'asc' | 'desc'\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "{ name: string; type: SortType; }[]"
          },
          "table": {
            "type": {
              "summary": "{ name: string; type: SortType; }[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "filterList": {
          "name": "filterList",
          "description": "Initial filterList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nFilter: Array of selected values passed in dropdown\n`any[]`\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Record<string, Filter>"
          },
          "table": {
            "type": {
              "summary": "Record<string, Filter>"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "errorTemplate": {
          "name": "errorTemplate",
          "description": "Template to be rendered when **error: true**\n\n<pre className=\"DocPage-codeBlock\">\nErrorTemplateProps: {\n    errorType: TableProps['errorType']\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FunctionComponent<ErrorTemplateProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FunctionComponent<ErrorTemplateProps> | undefined"
            },
            "defaultValue": {
              "summary": "(props: ErrorTemplateProps) => {\n  const { errorType = 'DEFAULT' } = props;\n\n  const errorMessages: Record<string, string> = {\n    FAILED_TO_FETCH: 'Failed to fetch data',\n    NO_RECORDS_FOUND: 'No results found',\n    DEFAULT: 'No results found',\n  };\n  return <Heading>{errorMessages[errorType]}</Heading>;\n}"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "750"
            }
          }
        },
        "onRowClick": {
          "name": "onRowClick",
          "description": "Callback to be called when a row is clicked in case of Table type: \"resource\"\n\n`onRowClickFunction: (data: RowData, rowIndexes?: number) => void`",
          "type": {
            "required": false,
            "name": "other",
            "value": "onRowClickFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "onRowClickFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "onSelect": {
          "name": "onSelect",
          "description": "Callback to be called when a row is selected",
          "type": {
            "required": false,
            "name": "function",
            "value": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onPageChange": {
          "name": "onPageChange",
          "description": "Callback to be called on page change in case of withPagination: true",
          "type": {
            "required": false,
            "name": "function",
            "value": "((page: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((page: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headCellTooltip": {
          "name": "headCellTooltip",
          "description": "Shows tooltip on Head Cell hover",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "separator": {
          "name": "separator",
          "description": "Shows left separator to all columns\n\n**Can be override by Column Schema**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "filterPosition": {
          "name": "filterPosition",
          "description": "Filters position in the Table\n\n`FilterPosition: 'HEADER' | 'GRID'`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "GRID",
              "HEADER"
            ]
          },
          "table": {
            "type": {
              "summary": "\"GRID\" | \"HEADER\""
            },
            "defaultValue": {
              "summary": "\"GRID\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchData": {
          "name": "fetchData",
          "description": "Callback to be called in case of async `Table`\n\n<pre className=\"DocPage-codeBlock\">\nfetchDataFunction: (options: FetchDataOptions) => Promise<{\n      searchTerm?: string,\n      count: number,\n      data: Data,\n      schema: Schema\n}>;\n\nFetchDataOptions: {\n      page?: number;\n      pageSize?: number;\n      filterList?: TableProps['sortingList'];\n      sortingList?: TableProps['filterList'];\n      searchTerm?: string;\n  }\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchDataFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchDataFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "data": {
          "name": "data",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Data: RowData[]\n\n    RowData: Record<string, any> & {\n      _selected?: boolean\n    }\n\n    `_selected`  Denotes row selection\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Data"
          },
          "table": {
            "type": {
              "summary": "Data"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "schema": {
          "name": "schema",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Schema: ColumnSchema[]\n\n    ColumnSchema: {\n        name: string;\n        displayName: string;\n        width?: React.ReactText;\n        minWidth?: React.ReactText;\n        maxWidth?: React.ReactText;\n        resizable?: boolean;\n        sorting?: boolean;\n        comparator?: (a: RowData, b: RowData) => -1 | 0 | 1;\n        separator?: boolean;\n        pinned?: 'left' | 'right';\n        hidden?: boolean;\n        filters?: DropdownProps['options'];\n        onFilterChange?: (data: RowData, filters: Filter) => boolean;\n        translate?: (data: RowData) => RowData,\n        cellType?: CellType;\n        cellRenderer?: React.FunctionComponent\\<GridCellProps\\>;\n        align?: Alignment;\n    }\n\n    GridCellProps: {\n        size: GridSize;\n        rowIndex: number;\n        colIndex: number;\n        data: RowData;\n        schema: ColumnSchema;\n        loading: boolean;\n        expanded: boolean;\n    }\n\n| CellType | CellData | Default Width |\n| --- | --- | --- |\n| DEFAULT | string \\| { title: string } | { width: 200 } |\n| WITH\\_META\\_LIST | { title: string, metaList: string[] } | { width: 200 } |\n| AVATAR | { firstName?: string, lastName?: string, title?: string } | { width: 50, minWidth: 50 } |\n| AVATAR\\_WITH\\_TEXT | { firstName?: string, lastName?: string, title: string } | { width: 250 } |\n| AVATAR\\_WITH\\_META\\_LIST | { firstName?: string, lastName?: string, title: string, metaList: string[] } | { width: 250 } |\n| ICON | { icon: string } | { width: 50, minWidth: 50 } |\n| STATUS_HINT | { title: string, statusAppearance: string } | { width: 100 } |\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | key of the value in `RowData` | |\n| displayName | Column Head Label | |\n| width | width of the column(px or %) | |\n| minWidth | min-width of the column(px or %) | 100 |\n| maxWidth | max-width of the column(px or %) | 800 |\n| resizable | Denotes if column is resizable | |\n| sorting | Enables sorting in column | true |\n| comparator | Sorting Function to be passed(in case of sync) | Default string comparator(localeCompare) |\n| separator | Shows Left separator | |\n| tooltip | Shows tooltip on hover | |\n| pinned | Pin column | |\n| hidden | Denotes if column is hidden | |\n| filters | Filter options for the column | |\n| onFilterChange | Callback to be called on Filter Change | |\n| translate | Translate Cell Data | |\n| cellType | Cell Type | 'DEFAULT' |\n| cellRenderer | Custom Cell Renderer | |\n| align | Align cell content<br>**Align applicable only for following cellTypes:<br>DEFAULT, AVATAR, ICON, STATUS_HINT** | \"left\" |",
          "type": {
            "required": false,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "Set for loading state of Table(in case of sync)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "error": {
          "name": "error",
          "description": "Set for error state of Table(in case of sync)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "errorType": {
          "name": "errorType",
          "description": "Error type to be passed to errorTemplate props",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onSearch": {
          "name": "onSearch",
          "description": "Callback to be called on searchTerm change(in case of sync)",
          "type": {
            "required": false,
            "name": "function",
            "value": "((data: Data, searchTerm: string) => Data) | undefined"
          },
          "table": {
            "type": {
              "summary": "((data: Data, searchTerm: string) => Data) | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-table-variants-size--size": {
    "id": "components-table-variants-size--size",
    "kind": "Components/Table/Variants/Size",
    "name": "Size",
    "story": "Size",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const values: TableProps['size'][] = ['comfortable', 'standard', 'compressed', 'tight'];\n\n  const style = {\n    display: 'flex',\n    flexWrap: 'wrap',\n  };\n\n  return (\n    // @ts-ignore\n    <div style={style}>\n      {values.map((v, index) => (\n        <div\n          key={index}\n          style={{\n            margin: '20px',\n            width: '45%',\n          }}\n        >\n          <Heading>{v}</Heading>\n          <div\n            style={{\n              height: '350px',\n            }}\n          >\n            <Card shadow=\"light\" className=\"h-100\">\n              <Table size={v} data={data} schema={schema} />\n            </Card>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}"
      },
      "__id": "components-table-variants-size--size",
      "args": {},
      "argTypes": {
        "showHead": {
          "name": "showHead",
          "description": "Controls Table Head display",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "type": {
          "name": "type",
          "description": "Type of Table\n\n**Requires `onRowClick` for 'resource' Table**",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "data",
              "resource"
            ]
          },
          "table": {
            "type": {
              "summary": "\"data\" | \"resource\""
            },
            "defaultValue": {
              "summary": "\"data\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Table cell size",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "standard",
              "compressed",
              "tight",
              "comfortable"
            ]
          },
          "table": {
            "type": {
              "summary": "\"standard\" | \"compressed\" | \"tight\" | \"comfortable\""
            },
            "defaultValue": {
              "summary": "\"standard\""
            }
          }
        },
        "draggable": {
          "name": "draggable",
          "description": "Allow Column reordering",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "nestedRows": {
          "name": "nestedRows",
          "description": "Allow nested rows",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "nestedRowRenderer": {
          "name": "nestedRowRenderer",
          "description": "Renderer to be used for nested rows\n\n<pre className=\"DocPage-codeBlock\">\nNestedRowProps: {\n    rowIndex: number;\n    data: RowData;\n    schema: GridProps['schema'];\n    loading: boolean;\n    expanded: boolean;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FC<NestedRowProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FC<NestedRowProps> | undefined"
            },
            "defaultValue": null
          }
        },
        "withHeader": {
          "name": "withHeader",
          "description": "Set to use `Header`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Options to be passed if using `withHeader: true`\n\n<pre className=\"DocPage-codeBlock\">\nExternalHeaderProps: {\n    children?: React.ReactNode;\n    withSearch?: boolean;\n    searchPlaceholder?: string;\n    dynamicColumn?: boolean;\n    allowSelectAll?: boolean;\n}\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| children | Header actions to be rendered | |\n| withSearch | Set to use Search Input | |\n| searchPlaceholder | Placeholder of Search Input | \"Search\" |\n| dynamicColumn | Set to use Column controlling dropdown | true |\n| allowSelectAll | Set to show Select All button | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "ExternalHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "ExternalHeaderProps | undefined"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Set for Row checkboxes",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showMenu": {
          "name": "showMenu",
          "description": "Set for visibility of Menu on Table Head Cell",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "withPagination": {
          "name": "withPagination",
          "description": "Set for `Pagination` component in `Table`(**Not applied if pageSize >= totalRecords**)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "page": {
          "name": "page",
          "description": "Initial page passed to `Table`",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "paginationType": {
          "name": "paginationType",
          "description": "`Pagination` component type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "basic",
              "jump"
            ]
          },
          "table": {
            "type": {
              "summary": "\"basic\" | \"jump\""
            },
            "defaultValue": {
              "summary": "\"jump\""
            }
          }
        },
        "pageSize": {
          "name": "pageSize",
          "description": "Number of rows to be rendered on a page\n\n**Also used to control number of rows to be rendered while loading: true**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "15"
            }
          }
        },
        "loaderSchema": {
          "name": "loaderSchema",
          "description": "Schema to be used for loading state **only when `schema: undefined`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "multipleSorting": {
          "name": "multipleSorting",
          "description": "Set to allow multiple column sorting",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "sortingList": {
          "name": "sortingList",
          "description": "Initial sortingList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nSortType: 'asc' | 'desc'\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "{ name: string; type: SortType; }[]"
          },
          "table": {
            "type": {
              "summary": "{ name: string; type: SortType; }[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "filterList": {
          "name": "filterList",
          "description": "Initial filterList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nFilter: Array of selected values passed in dropdown\n`any[]`\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Record<string, Filter>"
          },
          "table": {
            "type": {
              "summary": "Record<string, Filter>"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "errorTemplate": {
          "name": "errorTemplate",
          "description": "Template to be rendered when **error: true**\n\n<pre className=\"DocPage-codeBlock\">\nErrorTemplateProps: {\n    errorType: TableProps['errorType']\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FunctionComponent<ErrorTemplateProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FunctionComponent<ErrorTemplateProps> | undefined"
            },
            "defaultValue": {
              "summary": "(props: ErrorTemplateProps) => {\n  const { errorType = 'DEFAULT' } = props;\n\n  const errorMessages: Record<string, string> = {\n    FAILED_TO_FETCH: 'Failed to fetch data',\n    NO_RECORDS_FOUND: 'No results found',\n    DEFAULT: 'No results found',\n  };\n  return <Heading>{errorMessages[errorType]}</Heading>;\n}"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "750"
            }
          }
        },
        "onRowClick": {
          "name": "onRowClick",
          "description": "Callback to be called when a row is clicked in case of Table type: \"resource\"\n\n`onRowClickFunction: (data: RowData, rowIndexes?: number) => void`",
          "type": {
            "required": false,
            "name": "other",
            "value": "onRowClickFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "onRowClickFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "onSelect": {
          "name": "onSelect",
          "description": "Callback to be called when a row is selected",
          "type": {
            "required": false,
            "name": "function",
            "value": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onPageChange": {
          "name": "onPageChange",
          "description": "Callback to be called on page change in case of withPagination: true",
          "type": {
            "required": false,
            "name": "function",
            "value": "((page: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((page: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headCellTooltip": {
          "name": "headCellTooltip",
          "description": "Shows tooltip on Head Cell hover",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "separator": {
          "name": "separator",
          "description": "Shows left separator to all columns\n\n**Can be override by Column Schema**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "filterPosition": {
          "name": "filterPosition",
          "description": "Filters position in the Table\n\n`FilterPosition: 'HEADER' | 'GRID'`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "GRID",
              "HEADER"
            ]
          },
          "table": {
            "type": {
              "summary": "\"GRID\" | \"HEADER\""
            },
            "defaultValue": {
              "summary": "\"GRID\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchData": {
          "name": "fetchData",
          "description": "Callback to be called in case of async `Table`\n\n<pre className=\"DocPage-codeBlock\">\nfetchDataFunction: (options: FetchDataOptions) => Promise<{\n      searchTerm?: string,\n      count: number,\n      data: Data,\n      schema: Schema\n}>;\n\nFetchDataOptions: {\n      page?: number;\n      pageSize?: number;\n      filterList?: TableProps['sortingList'];\n      sortingList?: TableProps['filterList'];\n      searchTerm?: string;\n  }\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchDataFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchDataFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "data": {
          "name": "data",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Data: RowData[]\n\n    RowData: Record<string, any> & {\n      _selected?: boolean\n    }\n\n    `_selected`  Denotes row selection\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Data"
          },
          "table": {
            "type": {
              "summary": "Data"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "schema": {
          "name": "schema",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Schema: ColumnSchema[]\n\n    ColumnSchema: {\n        name: string;\n        displayName: string;\n        width?: React.ReactText;\n        minWidth?: React.ReactText;\n        maxWidth?: React.ReactText;\n        resizable?: boolean;\n        sorting?: boolean;\n        comparator?: (a: RowData, b: RowData) => -1 | 0 | 1;\n        separator?: boolean;\n        pinned?: 'left' | 'right';\n        hidden?: boolean;\n        filters?: DropdownProps['options'];\n        onFilterChange?: (data: RowData, filters: Filter) => boolean;\n        translate?: (data: RowData) => RowData,\n        cellType?: CellType;\n        cellRenderer?: React.FunctionComponent\\<GridCellProps\\>;\n        align?: Alignment;\n    }\n\n    GridCellProps: {\n        size: GridSize;\n        rowIndex: number;\n        colIndex: number;\n        data: RowData;\n        schema: ColumnSchema;\n        loading: boolean;\n        expanded: boolean;\n    }\n\n| CellType | CellData | Default Width |\n| --- | --- | --- |\n| DEFAULT | string \\| { title: string } | { width: 200 } |\n| WITH\\_META\\_LIST | { title: string, metaList: string[] } | { width: 200 } |\n| AVATAR | { firstName?: string, lastName?: string, title?: string } | { width: 50, minWidth: 50 } |\n| AVATAR\\_WITH\\_TEXT | { firstName?: string, lastName?: string, title: string } | { width: 250 } |\n| AVATAR\\_WITH\\_META\\_LIST | { firstName?: string, lastName?: string, title: string, metaList: string[] } | { width: 250 } |\n| ICON | { icon: string } | { width: 50, minWidth: 50 } |\n| STATUS_HINT | { title: string, statusAppearance: string } | { width: 100 } |\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | key of the value in `RowData` | |\n| displayName | Column Head Label | |\n| width | width of the column(px or %) | |\n| minWidth | min-width of the column(px or %) | 100 |\n| maxWidth | max-width of the column(px or %) | 800 |\n| resizable | Denotes if column is resizable | |\n| sorting | Enables sorting in column | true |\n| comparator | Sorting Function to be passed(in case of sync) | Default string comparator(localeCompare) |\n| separator | Shows Left separator | |\n| tooltip | Shows tooltip on hover | |\n| pinned | Pin column | |\n| hidden | Denotes if column is hidden | |\n| filters | Filter options for the column | |\n| onFilterChange | Callback to be called on Filter Change | |\n| translate | Translate Cell Data | |\n| cellType | Cell Type | 'DEFAULT' |\n| cellRenderer | Custom Cell Renderer | |\n| align | Align cell content<br>**Align applicable only for following cellTypes:<br>DEFAULT, AVATAR, ICON, STATUS_HINT** | \"left\" |",
          "type": {
            "required": false,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "Set for loading state of Table(in case of sync)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "error": {
          "name": "error",
          "description": "Set for error state of Table(in case of sync)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "errorType": {
          "name": "errorType",
          "description": "Error type to be passed to errorTemplate props",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onSearch": {
          "name": "onSearch",
          "description": "Callback to be called on searchTerm change(in case of sync)",
          "type": {
            "required": false,
            "name": "function",
            "value": "((data: Data, searchTerm: string) => Data) | undefined"
          },
          "table": {
            "type": {
              "summary": "((data: Data, searchTerm: string) => Data) | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-table-variants-sync-loader-schema--sync-loader-schema": {
    "id": "components-table-variants-sync-loader-schema--sync-loader-schema",
    "kind": "Components/Table/Variants/Sync Loader Schema",
    "name": "Sync Loader Schema",
    "story": "Sync Loader Schema",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const loading = boolean('loading', true);\n\n  const error = boolean('error', false);\n\n  const pageSize = number('pageSize', 5);\n\n  const withCheckbox = boolean('withCheckbox', true);\n\n  const applyLoaderSchema = boolean('applyLoaderSchema', true);\n\n  const applySchema = boolean('applySchema', false);\n\n  const applyData = boolean('applyData', false);\n\n  return (\n    <div\n      style={{\n        height: '350px',\n        // overflow: 'hidden'\n      }}\n    >\n      <Card className=\"h-100 overflow-hidden\">\n        <Table\n          loading={loading}\n          error={error}\n          pageSize={pageSize}\n          withCheckbox={withCheckbox}\n          loaderSchema={applyLoaderSchema ? loaderSchema : []}\n          data={applyData ? data : []}\n          schema={applySchema ? schema : []}\n          showMenu={true}\n          withHeader={true}\n          headerOptions={{\n            withSearch: true,\n          }}\n        />\n      </Card>\n    </div>\n  );\n}"
      },
      "__id": "components-table-variants-sync-loader-schema--sync-loader-schema",
      "args": {},
      "argTypes": {
        "showHead": {
          "name": "showHead",
          "description": "Controls Table Head display",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "type": {
          "name": "type",
          "description": "Type of Table\n\n**Requires `onRowClick` for 'resource' Table**",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "data",
              "resource"
            ]
          },
          "table": {
            "type": {
              "summary": "\"data\" | \"resource\""
            },
            "defaultValue": {
              "summary": "\"data\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Table cell size",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "standard",
              "compressed",
              "tight",
              "comfortable"
            ]
          },
          "table": {
            "type": {
              "summary": "\"standard\" | \"compressed\" | \"tight\" | \"comfortable\""
            },
            "defaultValue": {
              "summary": "\"standard\""
            }
          }
        },
        "draggable": {
          "name": "draggable",
          "description": "Allow Column reordering",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "nestedRows": {
          "name": "nestedRows",
          "description": "Allow nested rows",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "nestedRowRenderer": {
          "name": "nestedRowRenderer",
          "description": "Renderer to be used for nested rows\n\n<pre className=\"DocPage-codeBlock\">\nNestedRowProps: {\n    rowIndex: number;\n    data: RowData;\n    schema: GridProps['schema'];\n    loading: boolean;\n    expanded: boolean;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FC<NestedRowProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FC<NestedRowProps> | undefined"
            },
            "defaultValue": null
          }
        },
        "withHeader": {
          "name": "withHeader",
          "description": "Set to use `Header`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Options to be passed if using `withHeader: true`\n\n<pre className=\"DocPage-codeBlock\">\nExternalHeaderProps: {\n    children?: React.ReactNode;\n    withSearch?: boolean;\n    searchPlaceholder?: string;\n    dynamicColumn?: boolean;\n    allowSelectAll?: boolean;\n}\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| children | Header actions to be rendered | |\n| withSearch | Set to use Search Input | |\n| searchPlaceholder | Placeholder of Search Input | \"Search\" |\n| dynamicColumn | Set to use Column controlling dropdown | true |\n| allowSelectAll | Set to show Select All button | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "ExternalHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "ExternalHeaderProps | undefined"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Set for Row checkboxes",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showMenu": {
          "name": "showMenu",
          "description": "Set for visibility of Menu on Table Head Cell",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "withPagination": {
          "name": "withPagination",
          "description": "Set for `Pagination` component in `Table`(**Not applied if pageSize >= totalRecords**)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "page": {
          "name": "page",
          "description": "Initial page passed to `Table`",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "paginationType": {
          "name": "paginationType",
          "description": "`Pagination` component type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "basic",
              "jump"
            ]
          },
          "table": {
            "type": {
              "summary": "\"basic\" | \"jump\""
            },
            "defaultValue": {
              "summary": "\"jump\""
            }
          }
        },
        "pageSize": {
          "name": "pageSize",
          "description": "Number of rows to be rendered on a page\n\n**Also used to control number of rows to be rendered while loading: true**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "15"
            }
          }
        },
        "loaderSchema": {
          "name": "loaderSchema",
          "description": "Schema to be used for loading state **only when `schema: undefined`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "multipleSorting": {
          "name": "multipleSorting",
          "description": "Set to allow multiple column sorting",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "sortingList": {
          "name": "sortingList",
          "description": "Initial sortingList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nSortType: 'asc' | 'desc'\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "{ name: string; type: SortType; }[]"
          },
          "table": {
            "type": {
              "summary": "{ name: string; type: SortType; }[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "filterList": {
          "name": "filterList",
          "description": "Initial filterList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nFilter: Array of selected values passed in dropdown\n`any[]`\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Record<string, Filter>"
          },
          "table": {
            "type": {
              "summary": "Record<string, Filter>"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "errorTemplate": {
          "name": "errorTemplate",
          "description": "Template to be rendered when **error: true**\n\n<pre className=\"DocPage-codeBlock\">\nErrorTemplateProps: {\n    errorType: TableProps['errorType']\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FunctionComponent<ErrorTemplateProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FunctionComponent<ErrorTemplateProps> | undefined"
            },
            "defaultValue": {
              "summary": "(props: ErrorTemplateProps) => {\n  const { errorType = 'DEFAULT' } = props;\n\n  const errorMessages: Record<string, string> = {\n    FAILED_TO_FETCH: 'Failed to fetch data',\n    NO_RECORDS_FOUND: 'No results found',\n    DEFAULT: 'No results found',\n  };\n  return <Heading>{errorMessages[errorType]}</Heading>;\n}"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "750"
            }
          }
        },
        "onRowClick": {
          "name": "onRowClick",
          "description": "Callback to be called when a row is clicked in case of Table type: \"resource\"\n\n`onRowClickFunction: (data: RowData, rowIndexes?: number) => void`",
          "type": {
            "required": false,
            "name": "other",
            "value": "onRowClickFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "onRowClickFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "onSelect": {
          "name": "onSelect",
          "description": "Callback to be called when a row is selected",
          "type": {
            "required": false,
            "name": "function",
            "value": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onPageChange": {
          "name": "onPageChange",
          "description": "Callback to be called on page change in case of withPagination: true",
          "type": {
            "required": false,
            "name": "function",
            "value": "((page: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((page: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headCellTooltip": {
          "name": "headCellTooltip",
          "description": "Shows tooltip on Head Cell hover",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "separator": {
          "name": "separator",
          "description": "Shows left separator to all columns\n\n**Can be override by Column Schema**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "filterPosition": {
          "name": "filterPosition",
          "description": "Filters position in the Table\n\n`FilterPosition: 'HEADER' | 'GRID'`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "GRID",
              "HEADER"
            ]
          },
          "table": {
            "type": {
              "summary": "\"GRID\" | \"HEADER\""
            },
            "defaultValue": {
              "summary": "\"GRID\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchData": {
          "name": "fetchData",
          "description": "Callback to be called in case of async `Table`\n\n<pre className=\"DocPage-codeBlock\">\nfetchDataFunction: (options: FetchDataOptions) => Promise<{\n      searchTerm?: string,\n      count: number,\n      data: Data,\n      schema: Schema\n}>;\n\nFetchDataOptions: {\n      page?: number;\n      pageSize?: number;\n      filterList?: TableProps['sortingList'];\n      sortingList?: TableProps['filterList'];\n      searchTerm?: string;\n  }\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchDataFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchDataFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "data": {
          "name": "data",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Data: RowData[]\n\n    RowData: Record<string, any> & {\n      _selected?: boolean\n    }\n\n    `_selected`  Denotes row selection\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Data"
          },
          "table": {
            "type": {
              "summary": "Data"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "schema": {
          "name": "schema",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Schema: ColumnSchema[]\n\n    ColumnSchema: {\n        name: string;\n        displayName: string;\n        width?: React.ReactText;\n        minWidth?: React.ReactText;\n        maxWidth?: React.ReactText;\n        resizable?: boolean;\n        sorting?: boolean;\n        comparator?: (a: RowData, b: RowData) => -1 | 0 | 1;\n        separator?: boolean;\n        pinned?: 'left' | 'right';\n        hidden?: boolean;\n        filters?: DropdownProps['options'];\n        onFilterChange?: (data: RowData, filters: Filter) => boolean;\n        translate?: (data: RowData) => RowData,\n        cellType?: CellType;\n        cellRenderer?: React.FunctionComponent\\<GridCellProps\\>;\n        align?: Alignment;\n    }\n\n    GridCellProps: {\n        size: GridSize;\n        rowIndex: number;\n        colIndex: number;\n        data: RowData;\n        schema: ColumnSchema;\n        loading: boolean;\n        expanded: boolean;\n    }\n\n| CellType | CellData | Default Width |\n| --- | --- | --- |\n| DEFAULT | string \\| { title: string } | { width: 200 } |\n| WITH\\_META\\_LIST | { title: string, metaList: string[] } | { width: 200 } |\n| AVATAR | { firstName?: string, lastName?: string, title?: string } | { width: 50, minWidth: 50 } |\n| AVATAR\\_WITH\\_TEXT | { firstName?: string, lastName?: string, title: string } | { width: 250 } |\n| AVATAR\\_WITH\\_META\\_LIST | { firstName?: string, lastName?: string, title: string, metaList: string[] } | { width: 250 } |\n| ICON | { icon: string } | { width: 50, minWidth: 50 } |\n| STATUS_HINT | { title: string, statusAppearance: string } | { width: 100 } |\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | key of the value in `RowData` | |\n| displayName | Column Head Label | |\n| width | width of the column(px or %) | |\n| minWidth | min-width of the column(px or %) | 100 |\n| maxWidth | max-width of the column(px or %) | 800 |\n| resizable | Denotes if column is resizable | |\n| sorting | Enables sorting in column | true |\n| comparator | Sorting Function to be passed(in case of sync) | Default string comparator(localeCompare) |\n| separator | Shows Left separator | |\n| tooltip | Shows tooltip on hover | |\n| pinned | Pin column | |\n| hidden | Denotes if column is hidden | |\n| filters | Filter options for the column | |\n| onFilterChange | Callback to be called on Filter Change | |\n| translate | Translate Cell Data | |\n| cellType | Cell Type | 'DEFAULT' |\n| cellRenderer | Custom Cell Renderer | |\n| align | Align cell content<br>**Align applicable only for following cellTypes:<br>DEFAULT, AVATAR, ICON, STATUS_HINT** | \"left\" |",
          "type": {
            "required": false,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "Set for loading state of Table(in case of sync)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "error": {
          "name": "error",
          "description": "Set for error state of Table(in case of sync)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "errorType": {
          "name": "errorType",
          "description": "Error type to be passed to errorTemplate props",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onSearch": {
          "name": "onSearch",
          "description": "Callback to be called on searchTerm change(in case of sync)",
          "type": {
            "required": false,
            "name": "function",
            "value": "((data: Data, searchTerm: string) => Data) | undefined"
          },
          "table": {
            "type": {
              "summary": "((data: Data, searchTerm: string) => Data) | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-table-variants-type--type": {
    "id": "components-table-variants-type--type",
    "kind": "Components/Table/Variants/Type",
    "name": "Type",
    "story": "Type",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const values: GridType[] = ['resource', 'data'];\n\n  const style = {\n    display: 'flex',\n    flexWrap: 'wrap',\n  };\n\n  return (\n    // @ts-ignore\n    <div style={style}>\n      {values.map((v, index) => (\n        <div\n          key={index}\n          style={{\n            margin: '20px',\n            width: '45%',\n          }}\n        >\n          <Heading>{v}</Heading>\n          <div\n            style={{\n              height: '350px',\n            }}\n          >\n            <Card shadow=\"light\" className=\"h-100\">\n              <Table\n                type={v}\n                data={data}\n                schema={schema}\n                onRowClick={(rowData, rowIndex) =>\n                  action(`on-row-click:- rowIndex: ${rowIndex} data: ${JSON.stringify(rowData)}`)()\n                }\n              />\n            </Card>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}"
      },
      "__id": "components-table-variants-type--type",
      "args": {},
      "argTypes": {
        "showHead": {
          "name": "showHead",
          "description": "Controls Table Head display",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "type": {
          "name": "type",
          "description": "Type of Table\n\n**Requires `onRowClick` for 'resource' Table**",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "data",
              "resource"
            ]
          },
          "table": {
            "type": {
              "summary": "\"data\" | \"resource\""
            },
            "defaultValue": {
              "summary": "\"data\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Table cell size",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "standard",
              "compressed",
              "tight",
              "comfortable"
            ]
          },
          "table": {
            "type": {
              "summary": "\"standard\" | \"compressed\" | \"tight\" | \"comfortable\""
            },
            "defaultValue": {
              "summary": "\"standard\""
            }
          }
        },
        "draggable": {
          "name": "draggable",
          "description": "Allow Column reordering",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "nestedRows": {
          "name": "nestedRows",
          "description": "Allow nested rows",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "nestedRowRenderer": {
          "name": "nestedRowRenderer",
          "description": "Renderer to be used for nested rows\n\n<pre className=\"DocPage-codeBlock\">\nNestedRowProps: {\n    rowIndex: number;\n    data: RowData;\n    schema: GridProps['schema'];\n    loading: boolean;\n    expanded: boolean;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FC<NestedRowProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FC<NestedRowProps> | undefined"
            },
            "defaultValue": null
          }
        },
        "withHeader": {
          "name": "withHeader",
          "description": "Set to use `Header`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Options to be passed if using `withHeader: true`\n\n<pre className=\"DocPage-codeBlock\">\nExternalHeaderProps: {\n    children?: React.ReactNode;\n    withSearch?: boolean;\n    searchPlaceholder?: string;\n    dynamicColumn?: boolean;\n    allowSelectAll?: boolean;\n}\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| children | Header actions to be rendered | |\n| withSearch | Set to use Search Input | |\n| searchPlaceholder | Placeholder of Search Input | \"Search\" |\n| dynamicColumn | Set to use Column controlling dropdown | true |\n| allowSelectAll | Set to show Select All button | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "ExternalHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "ExternalHeaderProps | undefined"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Set for Row checkboxes",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showMenu": {
          "name": "showMenu",
          "description": "Set for visibility of Menu on Table Head Cell",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "withPagination": {
          "name": "withPagination",
          "description": "Set for `Pagination` component in `Table`(**Not applied if pageSize >= totalRecords**)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "page": {
          "name": "page",
          "description": "Initial page passed to `Table`",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "paginationType": {
          "name": "paginationType",
          "description": "`Pagination` component type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "basic",
              "jump"
            ]
          },
          "table": {
            "type": {
              "summary": "\"basic\" | \"jump\""
            },
            "defaultValue": {
              "summary": "\"jump\""
            }
          }
        },
        "pageSize": {
          "name": "pageSize",
          "description": "Number of rows to be rendered on a page\n\n**Also used to control number of rows to be rendered while loading: true**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "15"
            }
          }
        },
        "loaderSchema": {
          "name": "loaderSchema",
          "description": "Schema to be used for loading state **only when `schema: undefined`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "multipleSorting": {
          "name": "multipleSorting",
          "description": "Set to allow multiple column sorting",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "sortingList": {
          "name": "sortingList",
          "description": "Initial sortingList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nSortType: 'asc' | 'desc'\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "{ name: string; type: SortType; }[]"
          },
          "table": {
            "type": {
              "summary": "{ name: string; type: SortType; }[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "filterList": {
          "name": "filterList",
          "description": "Initial filterList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nFilter: Array of selected values passed in dropdown\n`any[]`\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Record<string, Filter>"
          },
          "table": {
            "type": {
              "summary": "Record<string, Filter>"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "errorTemplate": {
          "name": "errorTemplate",
          "description": "Template to be rendered when **error: true**\n\n<pre className=\"DocPage-codeBlock\">\nErrorTemplateProps: {\n    errorType: TableProps['errorType']\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FunctionComponent<ErrorTemplateProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FunctionComponent<ErrorTemplateProps> | undefined"
            },
            "defaultValue": {
              "summary": "(props: ErrorTemplateProps) => {\n  const { errorType = 'DEFAULT' } = props;\n\n  const errorMessages: Record<string, string> = {\n    FAILED_TO_FETCH: 'Failed to fetch data',\n    NO_RECORDS_FOUND: 'No results found',\n    DEFAULT: 'No results found',\n  };\n  return <Heading>{errorMessages[errorType]}</Heading>;\n}"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "750"
            }
          }
        },
        "onRowClick": {
          "name": "onRowClick",
          "description": "Callback to be called when a row is clicked in case of Table type: \"resource\"\n\n`onRowClickFunction: (data: RowData, rowIndexes?: number) => void`",
          "type": {
            "required": false,
            "name": "other",
            "value": "onRowClickFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "onRowClickFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "onSelect": {
          "name": "onSelect",
          "description": "Callback to be called when a row is selected",
          "type": {
            "required": false,
            "name": "function",
            "value": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onPageChange": {
          "name": "onPageChange",
          "description": "Callback to be called on page change in case of withPagination: true",
          "type": {
            "required": false,
            "name": "function",
            "value": "((page: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((page: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headCellTooltip": {
          "name": "headCellTooltip",
          "description": "Shows tooltip on Head Cell hover",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "separator": {
          "name": "separator",
          "description": "Shows left separator to all columns\n\n**Can be override by Column Schema**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "filterPosition": {
          "name": "filterPosition",
          "description": "Filters position in the Table\n\n`FilterPosition: 'HEADER' | 'GRID'`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "GRID",
              "HEADER"
            ]
          },
          "table": {
            "type": {
              "summary": "\"GRID\" | \"HEADER\""
            },
            "defaultValue": {
              "summary": "\"GRID\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchData": {
          "name": "fetchData",
          "description": "Callback to be called in case of async `Table`\n\n<pre className=\"DocPage-codeBlock\">\nfetchDataFunction: (options: FetchDataOptions) => Promise<{\n      searchTerm?: string,\n      count: number,\n      data: Data,\n      schema: Schema\n}>;\n\nFetchDataOptions: {\n      page?: number;\n      pageSize?: number;\n      filterList?: TableProps['sortingList'];\n      sortingList?: TableProps['filterList'];\n      searchTerm?: string;\n  }\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchDataFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchDataFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "data": {
          "name": "data",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Data: RowData[]\n\n    RowData: Record<string, any> & {\n      _selected?: boolean\n    }\n\n    `_selected`  Denotes row selection\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Data"
          },
          "table": {
            "type": {
              "summary": "Data"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "schema": {
          "name": "schema",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Schema: ColumnSchema[]\n\n    ColumnSchema: {\n        name: string;\n        displayName: string;\n        width?: React.ReactText;\n        minWidth?: React.ReactText;\n        maxWidth?: React.ReactText;\n        resizable?: boolean;\n        sorting?: boolean;\n        comparator?: (a: RowData, b: RowData) => -1 | 0 | 1;\n        separator?: boolean;\n        pinned?: 'left' | 'right';\n        hidden?: boolean;\n        filters?: DropdownProps['options'];\n        onFilterChange?: (data: RowData, filters: Filter) => boolean;\n        translate?: (data: RowData) => RowData,\n        cellType?: CellType;\n        cellRenderer?: React.FunctionComponent\\<GridCellProps\\>;\n        align?: Alignment;\n    }\n\n    GridCellProps: {\n        size: GridSize;\n        rowIndex: number;\n        colIndex: number;\n        data: RowData;\n        schema: ColumnSchema;\n        loading: boolean;\n        expanded: boolean;\n    }\n\n| CellType | CellData | Default Width |\n| --- | --- | --- |\n| DEFAULT | string \\| { title: string } | { width: 200 } |\n| WITH\\_META\\_LIST | { title: string, metaList: string[] } | { width: 200 } |\n| AVATAR | { firstName?: string, lastName?: string, title?: string } | { width: 50, minWidth: 50 } |\n| AVATAR\\_WITH\\_TEXT | { firstName?: string, lastName?: string, title: string } | { width: 250 } |\n| AVATAR\\_WITH\\_META\\_LIST | { firstName?: string, lastName?: string, title: string, metaList: string[] } | { width: 250 } |\n| ICON | { icon: string } | { width: 50, minWidth: 50 } |\n| STATUS_HINT | { title: string, statusAppearance: string } | { width: 100 } |\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | key of the value in `RowData` | |\n| displayName | Column Head Label | |\n| width | width of the column(px or %) | |\n| minWidth | min-width of the column(px or %) | 100 |\n| maxWidth | max-width of the column(px or %) | 800 |\n| resizable | Denotes if column is resizable | |\n| sorting | Enables sorting in column | true |\n| comparator | Sorting Function to be passed(in case of sync) | Default string comparator(localeCompare) |\n| separator | Shows Left separator | |\n| tooltip | Shows tooltip on hover | |\n| pinned | Pin column | |\n| hidden | Denotes if column is hidden | |\n| filters | Filter options for the column | |\n| onFilterChange | Callback to be called on Filter Change | |\n| translate | Translate Cell Data | |\n| cellType | Cell Type | 'DEFAULT' |\n| cellRenderer | Custom Cell Renderer | |\n| align | Align cell content<br>**Align applicable only for following cellTypes:<br>DEFAULT, AVATAR, ICON, STATUS_HINT** | \"left\" |",
          "type": {
            "required": false,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "Set for loading state of Table(in case of sync)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "error": {
          "name": "error",
          "description": "Set for error state of Table(in case of sync)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "errorType": {
          "name": "errorType",
          "description": "Error type to be passed to errorTemplate props",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onSearch": {
          "name": "onSearch",
          "description": "Callback to be called on searchTerm change(in case of sync)",
          "type": {
            "required": false,
            "name": "function",
            "value": "((data: Data, searchTerm: string) => Data) | undefined"
          },
          "table": {
            "type": {
              "summary": "((data: Data, searchTerm: string) => Data) | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-table-variants-with-checkbox--with-checkbox": {
    "id": "components-table-variants-with-checkbox--with-checkbox",
    "kind": "Components/Table/Variants/With Checkbox",
    "name": "With Checkbox",
    "story": "With Checkbox",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const values: TableProps['withCheckbox'][] = [true, false];\n\n  const style = {\n    display: 'flex',\n    flexWrap: 'wrap',\n  };\n\n  return (\n    // @ts-ignore\n    <div style={style}>\n      {values.map((v, index) => (\n        <div\n          key={index}\n          style={{\n            margin: '20px',\n            width: '45%',\n          }}\n        >\n          <Heading>{`withPagination: ${v}`}</Heading>\n          <div\n            style={{\n              height: '350px',\n            }}\n          >\n            <Card shadow=\"light\" className=\"h-100\">\n              <Table\n                data={data}\n                schema={schema}\n                withCheckbox={true}\n                withPagination={v}\n                onSelect={(rowIndex, selected, selectedList, selectAll) =>\n                  action(\n                    `on-select:- rowIndex: ${rowIndex} selected: ${selected} selectedList: ${JSON.stringify(\n                      selectedList\n                    )} selectAll: ${selectAll}`\n                  )()\n                }\n                onPageChange={(newPage) => action(`on-page-change:- ${newPage}`)()}\n              />\n            </Card>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}"
      },
      "__id": "components-table-variants-with-checkbox--with-checkbox",
      "args": {},
      "argTypes": {
        "showHead": {
          "name": "showHead",
          "description": "Controls Table Head display",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "type": {
          "name": "type",
          "description": "Type of Table\n\n**Requires `onRowClick` for 'resource' Table**",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "data",
              "resource"
            ]
          },
          "table": {
            "type": {
              "summary": "\"data\" | \"resource\""
            },
            "defaultValue": {
              "summary": "\"data\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Table cell size",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "standard",
              "compressed",
              "tight",
              "comfortable"
            ]
          },
          "table": {
            "type": {
              "summary": "\"standard\" | \"compressed\" | \"tight\" | \"comfortable\""
            },
            "defaultValue": {
              "summary": "\"standard\""
            }
          }
        },
        "draggable": {
          "name": "draggable",
          "description": "Allow Column reordering",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "nestedRows": {
          "name": "nestedRows",
          "description": "Allow nested rows",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "nestedRowRenderer": {
          "name": "nestedRowRenderer",
          "description": "Renderer to be used for nested rows\n\n<pre className=\"DocPage-codeBlock\">\nNestedRowProps: {\n    rowIndex: number;\n    data: RowData;\n    schema: GridProps['schema'];\n    loading: boolean;\n    expanded: boolean;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FC<NestedRowProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FC<NestedRowProps> | undefined"
            },
            "defaultValue": null
          }
        },
        "withHeader": {
          "name": "withHeader",
          "description": "Set to use `Header`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Options to be passed if using `withHeader: true`\n\n<pre className=\"DocPage-codeBlock\">\nExternalHeaderProps: {\n    children?: React.ReactNode;\n    withSearch?: boolean;\n    searchPlaceholder?: string;\n    dynamicColumn?: boolean;\n    allowSelectAll?: boolean;\n}\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| children | Header actions to be rendered | |\n| withSearch | Set to use Search Input | |\n| searchPlaceholder | Placeholder of Search Input | \"Search\" |\n| dynamicColumn | Set to use Column controlling dropdown | true |\n| allowSelectAll | Set to show Select All button | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "ExternalHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "ExternalHeaderProps | undefined"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Set for Row checkboxes",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showMenu": {
          "name": "showMenu",
          "description": "Set for visibility of Menu on Table Head Cell",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "withPagination": {
          "name": "withPagination",
          "description": "Set for `Pagination` component in `Table`(**Not applied if pageSize >= totalRecords**)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "page": {
          "name": "page",
          "description": "Initial page passed to `Table`",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "paginationType": {
          "name": "paginationType",
          "description": "`Pagination` component type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "basic",
              "jump"
            ]
          },
          "table": {
            "type": {
              "summary": "\"basic\" | \"jump\""
            },
            "defaultValue": {
              "summary": "\"jump\""
            }
          }
        },
        "pageSize": {
          "name": "pageSize",
          "description": "Number of rows to be rendered on a page\n\n**Also used to control number of rows to be rendered while loading: true**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "15"
            }
          }
        },
        "loaderSchema": {
          "name": "loaderSchema",
          "description": "Schema to be used for loading state **only when `schema: undefined`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "multipleSorting": {
          "name": "multipleSorting",
          "description": "Set to allow multiple column sorting",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "sortingList": {
          "name": "sortingList",
          "description": "Initial sortingList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nSortType: 'asc' | 'desc'\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "{ name: string; type: SortType; }[]"
          },
          "table": {
            "type": {
              "summary": "{ name: string; type: SortType; }[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "filterList": {
          "name": "filterList",
          "description": "Initial filterList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nFilter: Array of selected values passed in dropdown\n`any[]`\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Record<string, Filter>"
          },
          "table": {
            "type": {
              "summary": "Record<string, Filter>"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "errorTemplate": {
          "name": "errorTemplate",
          "description": "Template to be rendered when **error: true**\n\n<pre className=\"DocPage-codeBlock\">\nErrorTemplateProps: {\n    errorType: TableProps['errorType']\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FunctionComponent<ErrorTemplateProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FunctionComponent<ErrorTemplateProps> | undefined"
            },
            "defaultValue": {
              "summary": "(props: ErrorTemplateProps) => {\n  const { errorType = 'DEFAULT' } = props;\n\n  const errorMessages: Record<string, string> = {\n    FAILED_TO_FETCH: 'Failed to fetch data',\n    NO_RECORDS_FOUND: 'No results found',\n    DEFAULT: 'No results found',\n  };\n  return <Heading>{errorMessages[errorType]}</Heading>;\n}"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "750"
            }
          }
        },
        "onRowClick": {
          "name": "onRowClick",
          "description": "Callback to be called when a row is clicked in case of Table type: \"resource\"\n\n`onRowClickFunction: (data: RowData, rowIndexes?: number) => void`",
          "type": {
            "required": false,
            "name": "other",
            "value": "onRowClickFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "onRowClickFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "onSelect": {
          "name": "onSelect",
          "description": "Callback to be called when a row is selected",
          "type": {
            "required": false,
            "name": "function",
            "value": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onPageChange": {
          "name": "onPageChange",
          "description": "Callback to be called on page change in case of withPagination: true",
          "type": {
            "required": false,
            "name": "function",
            "value": "((page: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((page: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headCellTooltip": {
          "name": "headCellTooltip",
          "description": "Shows tooltip on Head Cell hover",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "separator": {
          "name": "separator",
          "description": "Shows left separator to all columns\n\n**Can be override by Column Schema**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "filterPosition": {
          "name": "filterPosition",
          "description": "Filters position in the Table\n\n`FilterPosition: 'HEADER' | 'GRID'`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "GRID",
              "HEADER"
            ]
          },
          "table": {
            "type": {
              "summary": "\"GRID\" | \"HEADER\""
            },
            "defaultValue": {
              "summary": "\"GRID\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchData": {
          "name": "fetchData",
          "description": "Callback to be called in case of async `Table`\n\n<pre className=\"DocPage-codeBlock\">\nfetchDataFunction: (options: FetchDataOptions) => Promise<{\n      searchTerm?: string,\n      count: number,\n      data: Data,\n      schema: Schema\n}>;\n\nFetchDataOptions: {\n      page?: number;\n      pageSize?: number;\n      filterList?: TableProps['sortingList'];\n      sortingList?: TableProps['filterList'];\n      searchTerm?: string;\n  }\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchDataFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchDataFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "data": {
          "name": "data",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Data: RowData[]\n\n    RowData: Record<string, any> & {\n      _selected?: boolean\n    }\n\n    `_selected`  Denotes row selection\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Data"
          },
          "table": {
            "type": {
              "summary": "Data"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "schema": {
          "name": "schema",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Schema: ColumnSchema[]\n\n    ColumnSchema: {\n        name: string;\n        displayName: string;\n        width?: React.ReactText;\n        minWidth?: React.ReactText;\n        maxWidth?: React.ReactText;\n        resizable?: boolean;\n        sorting?: boolean;\n        comparator?: (a: RowData, b: RowData) => -1 | 0 | 1;\n        separator?: boolean;\n        pinned?: 'left' | 'right';\n        hidden?: boolean;\n        filters?: DropdownProps['options'];\n        onFilterChange?: (data: RowData, filters: Filter) => boolean;\n        translate?: (data: RowData) => RowData,\n        cellType?: CellType;\n        cellRenderer?: React.FunctionComponent\\<GridCellProps\\>;\n        align?: Alignment;\n    }\n\n    GridCellProps: {\n        size: GridSize;\n        rowIndex: number;\n        colIndex: number;\n        data: RowData;\n        schema: ColumnSchema;\n        loading: boolean;\n        expanded: boolean;\n    }\n\n| CellType | CellData | Default Width |\n| --- | --- | --- |\n| DEFAULT | string \\| { title: string } | { width: 200 } |\n| WITH\\_META\\_LIST | { title: string, metaList: string[] } | { width: 200 } |\n| AVATAR | { firstName?: string, lastName?: string, title?: string } | { width: 50, minWidth: 50 } |\n| AVATAR\\_WITH\\_TEXT | { firstName?: string, lastName?: string, title: string } | { width: 250 } |\n| AVATAR\\_WITH\\_META\\_LIST | { firstName?: string, lastName?: string, title: string, metaList: string[] } | { width: 250 } |\n| ICON | { icon: string } | { width: 50, minWidth: 50 } |\n| STATUS_HINT | { title: string, statusAppearance: string } | { width: 100 } |\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | key of the value in `RowData` | |\n| displayName | Column Head Label | |\n| width | width of the column(px or %) | |\n| minWidth | min-width of the column(px or %) | 100 |\n| maxWidth | max-width of the column(px or %) | 800 |\n| resizable | Denotes if column is resizable | |\n| sorting | Enables sorting in column | true |\n| comparator | Sorting Function to be passed(in case of sync) | Default string comparator(localeCompare) |\n| separator | Shows Left separator | |\n| tooltip | Shows tooltip on hover | |\n| pinned | Pin column | |\n| hidden | Denotes if column is hidden | |\n| filters | Filter options for the column | |\n| onFilterChange | Callback to be called on Filter Change | |\n| translate | Translate Cell Data | |\n| cellType | Cell Type | 'DEFAULT' |\n| cellRenderer | Custom Cell Renderer | |\n| align | Align cell content<br>**Align applicable only for following cellTypes:<br>DEFAULT, AVATAR, ICON, STATUS_HINT** | \"left\" |",
          "type": {
            "required": false,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "Set for loading state of Table(in case of sync)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "error": {
          "name": "error",
          "description": "Set for error state of Table(in case of sync)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "errorType": {
          "name": "errorType",
          "description": "Error type to be passed to errorTemplate props",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onSearch": {
          "name": "onSearch",
          "description": "Callback to be called on searchTerm change(in case of sync)",
          "type": {
            "required": false,
            "name": "function",
            "value": "((data: Data, searchTerm: string) => Data) | undefined"
          },
          "table": {
            "type": {
              "summary": "((data: Data, searchTerm: string) => Data) | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-table-variants-with-editable-cell--with-editable-cell": {
    "id": "components-table-variants-with-editable-cell--with-editable-cell",
    "kind": "Components/Table/Variants/With Editable Cell",
    "name": "With Editable Cell",
    "story": "With Editable Cell",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div\n      style={{\n        height: '350px',\n      }}\n    >\n      <Card className=\"h-100 overflow-hidden\">\n        <Table\n          loaderSchema={loaderSchema}\n          data={data}\n          schema={editableSchema}\n          withHeader={true}\n          withCheckbox={true}\n          onSelect={(rowIndex, selected, selectedList, selectAll) =>\n            action(\n              `on-select:- rowIndex: ${rowIndex} selected: ${selected} selectedList: ${JSON.stringify(\n                selectedList\n              )} selectAll: ${selectAll}`\n            )()\n          }\n          headerOptions={{\n            withSearch: true,\n          }}\n          onSearch={(currData, searchTerm) => {\n            return currData.filter(\n              (d) =>\n                d.firstName.toLowerCase().match(searchTerm.toLowerCase()) ||\n                d.lastName.toLowerCase().match(searchTerm.toLowerCase())\n            );\n          }}\n          withPagination={true}\n          pageSize={5}\n          onPageChange={(newPage) => action(`on-page-change:- ${newPage}`)()}\n        />\n      </Card>\n    </div>\n  );\n}"
      },
      "__id": "components-table-variants-with-editable-cell--with-editable-cell",
      "args": {},
      "argTypes": {
        "showHead": {
          "name": "showHead",
          "description": "Controls Table Head display",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "type": {
          "name": "type",
          "description": "Type of Table\n\n**Requires `onRowClick` for 'resource' Table**",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "data",
              "resource"
            ]
          },
          "table": {
            "type": {
              "summary": "\"data\" | \"resource\""
            },
            "defaultValue": {
              "summary": "\"data\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Table cell size",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "standard",
              "compressed",
              "tight",
              "comfortable"
            ]
          },
          "table": {
            "type": {
              "summary": "\"standard\" | \"compressed\" | \"tight\" | \"comfortable\""
            },
            "defaultValue": {
              "summary": "\"standard\""
            }
          }
        },
        "draggable": {
          "name": "draggable",
          "description": "Allow Column reordering",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "nestedRows": {
          "name": "nestedRows",
          "description": "Allow nested rows",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "nestedRowRenderer": {
          "name": "nestedRowRenderer",
          "description": "Renderer to be used for nested rows\n\n<pre className=\"DocPage-codeBlock\">\nNestedRowProps: {\n    rowIndex: number;\n    data: RowData;\n    schema: GridProps['schema'];\n    loading: boolean;\n    expanded: boolean;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FC<NestedRowProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FC<NestedRowProps> | undefined"
            },
            "defaultValue": null
          }
        },
        "withHeader": {
          "name": "withHeader",
          "description": "Set to use `Header`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Options to be passed if using `withHeader: true`\n\n<pre className=\"DocPage-codeBlock\">\nExternalHeaderProps: {\n    children?: React.ReactNode;\n    withSearch?: boolean;\n    searchPlaceholder?: string;\n    dynamicColumn?: boolean;\n    allowSelectAll?: boolean;\n}\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| children | Header actions to be rendered | |\n| withSearch | Set to use Search Input | |\n| searchPlaceholder | Placeholder of Search Input | \"Search\" |\n| dynamicColumn | Set to use Column controlling dropdown | true |\n| allowSelectAll | Set to show Select All button | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "ExternalHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "ExternalHeaderProps | undefined"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Set for Row checkboxes",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showMenu": {
          "name": "showMenu",
          "description": "Set for visibility of Menu on Table Head Cell",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "withPagination": {
          "name": "withPagination",
          "description": "Set for `Pagination` component in `Table`(**Not applied if pageSize >= totalRecords**)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "page": {
          "name": "page",
          "description": "Initial page passed to `Table`",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "paginationType": {
          "name": "paginationType",
          "description": "`Pagination` component type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "basic",
              "jump"
            ]
          },
          "table": {
            "type": {
              "summary": "\"basic\" | \"jump\""
            },
            "defaultValue": {
              "summary": "\"jump\""
            }
          }
        },
        "pageSize": {
          "name": "pageSize",
          "description": "Number of rows to be rendered on a page\n\n**Also used to control number of rows to be rendered while loading: true**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "15"
            }
          }
        },
        "loaderSchema": {
          "name": "loaderSchema",
          "description": "Schema to be used for loading state **only when `schema: undefined`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "multipleSorting": {
          "name": "multipleSorting",
          "description": "Set to allow multiple column sorting",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "sortingList": {
          "name": "sortingList",
          "description": "Initial sortingList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nSortType: 'asc' | 'desc'\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "{ name: string; type: SortType; }[]"
          },
          "table": {
            "type": {
              "summary": "{ name: string; type: SortType; }[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "filterList": {
          "name": "filterList",
          "description": "Initial filterList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nFilter: Array of selected values passed in dropdown\n`any[]`\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Record<string, Filter>"
          },
          "table": {
            "type": {
              "summary": "Record<string, Filter>"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "errorTemplate": {
          "name": "errorTemplate",
          "description": "Template to be rendered when **error: true**\n\n<pre className=\"DocPage-codeBlock\">\nErrorTemplateProps: {\n    errorType: TableProps['errorType']\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FunctionComponent<ErrorTemplateProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FunctionComponent<ErrorTemplateProps> | undefined"
            },
            "defaultValue": {
              "summary": "(props: ErrorTemplateProps) => {\n  const { errorType = 'DEFAULT' } = props;\n\n  const errorMessages: Record<string, string> = {\n    FAILED_TO_FETCH: 'Failed to fetch data',\n    NO_RECORDS_FOUND: 'No results found',\n    DEFAULT: 'No results found',\n  };\n  return <Heading>{errorMessages[errorType]}</Heading>;\n}"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "750"
            }
          }
        },
        "onRowClick": {
          "name": "onRowClick",
          "description": "Callback to be called when a row is clicked in case of Table type: \"resource\"\n\n`onRowClickFunction: (data: RowData, rowIndexes?: number) => void`",
          "type": {
            "required": false,
            "name": "other",
            "value": "onRowClickFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "onRowClickFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "onSelect": {
          "name": "onSelect",
          "description": "Callback to be called when a row is selected",
          "type": {
            "required": false,
            "name": "function",
            "value": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onPageChange": {
          "name": "onPageChange",
          "description": "Callback to be called on page change in case of withPagination: true",
          "type": {
            "required": false,
            "name": "function",
            "value": "((page: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((page: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headCellTooltip": {
          "name": "headCellTooltip",
          "description": "Shows tooltip on Head Cell hover",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "separator": {
          "name": "separator",
          "description": "Shows left separator to all columns\n\n**Can be override by Column Schema**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "filterPosition": {
          "name": "filterPosition",
          "description": "Filters position in the Table\n\n`FilterPosition: 'HEADER' | 'GRID'`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "GRID",
              "HEADER"
            ]
          },
          "table": {
            "type": {
              "summary": "\"GRID\" | \"HEADER\""
            },
            "defaultValue": {
              "summary": "\"GRID\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchData": {
          "name": "fetchData",
          "description": "Callback to be called in case of async `Table`\n\n<pre className=\"DocPage-codeBlock\">\nfetchDataFunction: (options: FetchDataOptions) => Promise<{\n      searchTerm?: string,\n      count: number,\n      data: Data,\n      schema: Schema\n}>;\n\nFetchDataOptions: {\n      page?: number;\n      pageSize?: number;\n      filterList?: TableProps['sortingList'];\n      sortingList?: TableProps['filterList'];\n      searchTerm?: string;\n  }\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchDataFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchDataFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "data": {
          "name": "data",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Data: RowData[]\n\n    RowData: Record<string, any> & {\n      _selected?: boolean\n    }\n\n    `_selected`  Denotes row selection\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Data"
          },
          "table": {
            "type": {
              "summary": "Data"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "schema": {
          "name": "schema",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Schema: ColumnSchema[]\n\n    ColumnSchema: {\n        name: string;\n        displayName: string;\n        width?: React.ReactText;\n        minWidth?: React.ReactText;\n        maxWidth?: React.ReactText;\n        resizable?: boolean;\n        sorting?: boolean;\n        comparator?: (a: RowData, b: RowData) => -1 | 0 | 1;\n        separator?: boolean;\n        pinned?: 'left' | 'right';\n        hidden?: boolean;\n        filters?: DropdownProps['options'];\n        onFilterChange?: (data: RowData, filters: Filter) => boolean;\n        translate?: (data: RowData) => RowData,\n        cellType?: CellType;\n        cellRenderer?: React.FunctionComponent\\<GridCellProps\\>;\n        align?: Alignment;\n    }\n\n    GridCellProps: {\n        size: GridSize;\n        rowIndex: number;\n        colIndex: number;\n        data: RowData;\n        schema: ColumnSchema;\n        loading: boolean;\n        expanded: boolean;\n    }\n\n| CellType | CellData | Default Width |\n| --- | --- | --- |\n| DEFAULT | string \\| { title: string } | { width: 200 } |\n| WITH\\_META\\_LIST | { title: string, metaList: string[] } | { width: 200 } |\n| AVATAR | { firstName?: string, lastName?: string, title?: string } | { width: 50, minWidth: 50 } |\n| AVATAR\\_WITH\\_TEXT | { firstName?: string, lastName?: string, title: string } | { width: 250 } |\n| AVATAR\\_WITH\\_META\\_LIST | { firstName?: string, lastName?: string, title: string, metaList: string[] } | { width: 250 } |\n| ICON | { icon: string } | { width: 50, minWidth: 50 } |\n| STATUS_HINT | { title: string, statusAppearance: string } | { width: 100 } |\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | key of the value in `RowData` | |\n| displayName | Column Head Label | |\n| width | width of the column(px or %) | |\n| minWidth | min-width of the column(px or %) | 100 |\n| maxWidth | max-width of the column(px or %) | 800 |\n| resizable | Denotes if column is resizable | |\n| sorting | Enables sorting in column | true |\n| comparator | Sorting Function to be passed(in case of sync) | Default string comparator(localeCompare) |\n| separator | Shows Left separator | |\n| tooltip | Shows tooltip on hover | |\n| pinned | Pin column | |\n| hidden | Denotes if column is hidden | |\n| filters | Filter options for the column | |\n| onFilterChange | Callback to be called on Filter Change | |\n| translate | Translate Cell Data | |\n| cellType | Cell Type | 'DEFAULT' |\n| cellRenderer | Custom Cell Renderer | |\n| align | Align cell content<br>**Align applicable only for following cellTypes:<br>DEFAULT, AVATAR, ICON, STATUS_HINT** | \"left\" |",
          "type": {
            "required": false,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "Set for loading state of Table(in case of sync)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "error": {
          "name": "error",
          "description": "Set for error state of Table(in case of sync)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "errorType": {
          "name": "errorType",
          "description": "Error type to be passed to errorTemplate props",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onSearch": {
          "name": "onSearch",
          "description": "Callback to be called on searchTerm change(in case of sync)",
          "type": {
            "required": false,
            "name": "function",
            "value": "((data: Data, searchTerm: string) => Data) | undefined"
          },
          "table": {
            "type": {
              "summary": "((data: Data, searchTerm: string) => Data) | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-table-variants-with-error-template--with-error-template": {
    "id": "components-table-variants-with-error-template--with-error-template",
    "kind": "Components/Table/Variants/With Error Template",
    "name": "With Error Template",
    "story": "With Error Template",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div\n      style={{\n        height: '350px',\n      }}\n    >\n      <Card shadow=\"light\" className=\"h-100\">\n        <Table schema={schema} data={[]} error={true} errorTemplate={errorTemplate} />\n      </Card>\n    </div>\n  );\n}"
      },
      "__id": "components-table-variants-with-error-template--with-error-template",
      "args": {},
      "argTypes": {
        "showHead": {
          "name": "showHead",
          "description": "Controls Table Head display",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "type": {
          "name": "type",
          "description": "Type of Table\n\n**Requires `onRowClick` for 'resource' Table**",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "data",
              "resource"
            ]
          },
          "table": {
            "type": {
              "summary": "\"data\" | \"resource\""
            },
            "defaultValue": {
              "summary": "\"data\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Table cell size",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "standard",
              "compressed",
              "tight",
              "comfortable"
            ]
          },
          "table": {
            "type": {
              "summary": "\"standard\" | \"compressed\" | \"tight\" | \"comfortable\""
            },
            "defaultValue": {
              "summary": "\"standard\""
            }
          }
        },
        "draggable": {
          "name": "draggable",
          "description": "Allow Column reordering",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "nestedRows": {
          "name": "nestedRows",
          "description": "Allow nested rows",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "nestedRowRenderer": {
          "name": "nestedRowRenderer",
          "description": "Renderer to be used for nested rows\n\n<pre className=\"DocPage-codeBlock\">\nNestedRowProps: {\n    rowIndex: number;\n    data: RowData;\n    schema: GridProps['schema'];\n    loading: boolean;\n    expanded: boolean;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FC<NestedRowProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FC<NestedRowProps> | undefined"
            },
            "defaultValue": null
          }
        },
        "withHeader": {
          "name": "withHeader",
          "description": "Set to use `Header`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Options to be passed if using `withHeader: true`\n\n<pre className=\"DocPage-codeBlock\">\nExternalHeaderProps: {\n    children?: React.ReactNode;\n    withSearch?: boolean;\n    searchPlaceholder?: string;\n    dynamicColumn?: boolean;\n    allowSelectAll?: boolean;\n}\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| children | Header actions to be rendered | |\n| withSearch | Set to use Search Input | |\n| searchPlaceholder | Placeholder of Search Input | \"Search\" |\n| dynamicColumn | Set to use Column controlling dropdown | true |\n| allowSelectAll | Set to show Select All button | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "ExternalHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "ExternalHeaderProps | undefined"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Set for Row checkboxes",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showMenu": {
          "name": "showMenu",
          "description": "Set for visibility of Menu on Table Head Cell",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "withPagination": {
          "name": "withPagination",
          "description": "Set for `Pagination` component in `Table`(**Not applied if pageSize >= totalRecords**)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "page": {
          "name": "page",
          "description": "Initial page passed to `Table`",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "paginationType": {
          "name": "paginationType",
          "description": "`Pagination` component type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "basic",
              "jump"
            ]
          },
          "table": {
            "type": {
              "summary": "\"basic\" | \"jump\""
            },
            "defaultValue": {
              "summary": "\"jump\""
            }
          }
        },
        "pageSize": {
          "name": "pageSize",
          "description": "Number of rows to be rendered on a page\n\n**Also used to control number of rows to be rendered while loading: true**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "15"
            }
          }
        },
        "loaderSchema": {
          "name": "loaderSchema",
          "description": "Schema to be used for loading state **only when `schema: undefined`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "multipleSorting": {
          "name": "multipleSorting",
          "description": "Set to allow multiple column sorting",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "sortingList": {
          "name": "sortingList",
          "description": "Initial sortingList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nSortType: 'asc' | 'desc'\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "{ name: string; type: SortType; }[]"
          },
          "table": {
            "type": {
              "summary": "{ name: string; type: SortType; }[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "filterList": {
          "name": "filterList",
          "description": "Initial filterList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nFilter: Array of selected values passed in dropdown\n`any[]`\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Record<string, Filter>"
          },
          "table": {
            "type": {
              "summary": "Record<string, Filter>"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "errorTemplate": {
          "name": "errorTemplate",
          "description": "Template to be rendered when **error: true**\n\n<pre className=\"DocPage-codeBlock\">\nErrorTemplateProps: {\n    errorType: TableProps['errorType']\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FunctionComponent<ErrorTemplateProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FunctionComponent<ErrorTemplateProps> | undefined"
            },
            "defaultValue": {
              "summary": "(props: ErrorTemplateProps) => {\n  const { errorType = 'DEFAULT' } = props;\n\n  const errorMessages: Record<string, string> = {\n    FAILED_TO_FETCH: 'Failed to fetch data',\n    NO_RECORDS_FOUND: 'No results found',\n    DEFAULT: 'No results found',\n  };\n  return <Heading>{errorMessages[errorType]}</Heading>;\n}"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "750"
            }
          }
        },
        "onRowClick": {
          "name": "onRowClick",
          "description": "Callback to be called when a row is clicked in case of Table type: \"resource\"\n\n`onRowClickFunction: (data: RowData, rowIndexes?: number) => void`",
          "type": {
            "required": false,
            "name": "other",
            "value": "onRowClickFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "onRowClickFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "onSelect": {
          "name": "onSelect",
          "description": "Callback to be called when a row is selected",
          "type": {
            "required": false,
            "name": "function",
            "value": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onPageChange": {
          "name": "onPageChange",
          "description": "Callback to be called on page change in case of withPagination: true",
          "type": {
            "required": false,
            "name": "function",
            "value": "((page: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((page: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headCellTooltip": {
          "name": "headCellTooltip",
          "description": "Shows tooltip on Head Cell hover",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "separator": {
          "name": "separator",
          "description": "Shows left separator to all columns\n\n**Can be override by Column Schema**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "filterPosition": {
          "name": "filterPosition",
          "description": "Filters position in the Table\n\n`FilterPosition: 'HEADER' | 'GRID'`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "GRID",
              "HEADER"
            ]
          },
          "table": {
            "type": {
              "summary": "\"GRID\" | \"HEADER\""
            },
            "defaultValue": {
              "summary": "\"GRID\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchData": {
          "name": "fetchData",
          "description": "Callback to be called in case of async `Table`\n\n<pre className=\"DocPage-codeBlock\">\nfetchDataFunction: (options: FetchDataOptions) => Promise<{\n      searchTerm?: string,\n      count: number,\n      data: Data,\n      schema: Schema\n}>;\n\nFetchDataOptions: {\n      page?: number;\n      pageSize?: number;\n      filterList?: TableProps['sortingList'];\n      sortingList?: TableProps['filterList'];\n      searchTerm?: string;\n  }\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchDataFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchDataFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "data": {
          "name": "data",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Data: RowData[]\n\n    RowData: Record<string, any> & {\n      _selected?: boolean\n    }\n\n    `_selected`  Denotes row selection\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Data"
          },
          "table": {
            "type": {
              "summary": "Data"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "schema": {
          "name": "schema",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Schema: ColumnSchema[]\n\n    ColumnSchema: {\n        name: string;\n        displayName: string;\n        width?: React.ReactText;\n        minWidth?: React.ReactText;\n        maxWidth?: React.ReactText;\n        resizable?: boolean;\n        sorting?: boolean;\n        comparator?: (a: RowData, b: RowData) => -1 | 0 | 1;\n        separator?: boolean;\n        pinned?: 'left' | 'right';\n        hidden?: boolean;\n        filters?: DropdownProps['options'];\n        onFilterChange?: (data: RowData, filters: Filter) => boolean;\n        translate?: (data: RowData) => RowData,\n        cellType?: CellType;\n        cellRenderer?: React.FunctionComponent\\<GridCellProps\\>;\n        align?: Alignment;\n    }\n\n    GridCellProps: {\n        size: GridSize;\n        rowIndex: number;\n        colIndex: number;\n        data: RowData;\n        schema: ColumnSchema;\n        loading: boolean;\n        expanded: boolean;\n    }\n\n| CellType | CellData | Default Width |\n| --- | --- | --- |\n| DEFAULT | string \\| { title: string } | { width: 200 } |\n| WITH\\_META\\_LIST | { title: string, metaList: string[] } | { width: 200 } |\n| AVATAR | { firstName?: string, lastName?: string, title?: string } | { width: 50, minWidth: 50 } |\n| AVATAR\\_WITH\\_TEXT | { firstName?: string, lastName?: string, title: string } | { width: 250 } |\n| AVATAR\\_WITH\\_META\\_LIST | { firstName?: string, lastName?: string, title: string, metaList: string[] } | { width: 250 } |\n| ICON | { icon: string } | { width: 50, minWidth: 50 } |\n| STATUS_HINT | { title: string, statusAppearance: string } | { width: 100 } |\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | key of the value in `RowData` | |\n| displayName | Column Head Label | |\n| width | width of the column(px or %) | |\n| minWidth | min-width of the column(px or %) | 100 |\n| maxWidth | max-width of the column(px or %) | 800 |\n| resizable | Denotes if column is resizable | |\n| sorting | Enables sorting in column | true |\n| comparator | Sorting Function to be passed(in case of sync) | Default string comparator(localeCompare) |\n| separator | Shows Left separator | |\n| tooltip | Shows tooltip on hover | |\n| pinned | Pin column | |\n| hidden | Denotes if column is hidden | |\n| filters | Filter options for the column | |\n| onFilterChange | Callback to be called on Filter Change | |\n| translate | Translate Cell Data | |\n| cellType | Cell Type | 'DEFAULT' |\n| cellRenderer | Custom Cell Renderer | |\n| align | Align cell content<br>**Align applicable only for following cellTypes:<br>DEFAULT, AVATAR, ICON, STATUS_HINT** | \"left\" |",
          "type": {
            "required": false,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "Set for loading state of Table(in case of sync)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "error": {
          "name": "error",
          "description": "Set for error state of Table(in case of sync)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "errorType": {
          "name": "errorType",
          "description": "Error type to be passed to errorTemplate props",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onSearch": {
          "name": "onSearch",
          "description": "Callback to be called on searchTerm change(in case of sync)",
          "type": {
            "required": false,
            "name": "function",
            "value": "((data: Data, searchTerm: string) => Data) | undefined"
          },
          "table": {
            "type": {
              "summary": "((data: Data, searchTerm: string) => Data) | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-table-variants-with-header--with-header": {
    "id": "components-table-variants-with-header--with-header",
    "kind": "Components/Table/Variants/With Header",
    "name": "With Header",
    "story": "With Header",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div\n      style={{\n        height: '350px',\n      }}\n    >\n      <Card shadow=\"light\" className=\"h-100\">\n        <Table\n          data={data}\n          schema={schema}\n          withHeader={true}\n          withCheckbox={true}\n          showHead={false}\n          draggable={true}\n          withPagination={true}\n          onSelect={(rowIndex, selected, selectedList, selectAll) =>\n            action(\n              `on-select:- rowIndex: ${rowIndex} selected: ${selected} selectedList: ${JSON.stringify(\n                selectedList\n              )} selectAll: ${selectAll}`\n            )()\n          }\n          onPageChange={(newPage) => action(`on-page-change:- ${newPage}`)()}\n          withHeader={true}\n          headerOptions={{\n            withSearch: true,\n          }}\n        />\n      </Card>\n    </div>\n  );\n}"
      },
      "__id": "components-table-variants-with-header--with-header",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-table-variants-with-pagination--with-pagination": {
    "id": "components-table-variants-with-pagination--with-pagination",
    "kind": "Components/Table/Variants/With Pagination",
    "name": "With Pagination",
    "story": "With Pagination",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const values: TableProps['paginationType'][] = ['basic', 'jump'];\n\n  const style = {\n    display: 'flex',\n    flexWrap: 'wrap',\n  };\n\n  return (\n    // @ts-ignore\n    <div style={style}>\n      {values.map((v, index) => (\n        <div\n          key={index}\n          style={{\n            margin: '20px',\n            width: '45%',\n          }}\n        >\n          <Heading>{`paginationType: ${v}`}</Heading>\n          <div\n            style={{\n              height: '350px',\n            }}\n          >\n            <Card shadow=\"light\" className=\"h-100\">\n              <Table\n                data={data}\n                schema={schema}\n                withPagination={true}\n                paginationType={v}\n                onPageChange={(newPage) => action(`on-page-change:- ${newPage}`)()}\n              />\n            </Card>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}"
      },
      "__id": "components-table-variants-with-pagination--with-pagination",
      "args": {},
      "argTypes": {
        "showHead": {
          "name": "showHead",
          "description": "Controls Table Head display",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "type": {
          "name": "type",
          "description": "Type of Table\n\n**Requires `onRowClick` for 'resource' Table**",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "data",
              "resource"
            ]
          },
          "table": {
            "type": {
              "summary": "\"data\" | \"resource\""
            },
            "defaultValue": {
              "summary": "\"data\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Table cell size",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "standard",
              "compressed",
              "tight",
              "comfortable"
            ]
          },
          "table": {
            "type": {
              "summary": "\"standard\" | \"compressed\" | \"tight\" | \"comfortable\""
            },
            "defaultValue": {
              "summary": "\"standard\""
            }
          }
        },
        "draggable": {
          "name": "draggable",
          "description": "Allow Column reordering",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "nestedRows": {
          "name": "nestedRows",
          "description": "Allow nested rows",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "nestedRowRenderer": {
          "name": "nestedRowRenderer",
          "description": "Renderer to be used for nested rows\n\n<pre className=\"DocPage-codeBlock\">\nNestedRowProps: {\n    rowIndex: number;\n    data: RowData;\n    schema: GridProps['schema'];\n    loading: boolean;\n    expanded: boolean;\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FC<NestedRowProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FC<NestedRowProps> | undefined"
            },
            "defaultValue": null
          }
        },
        "withHeader": {
          "name": "withHeader",
          "description": "Set to use `Header`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "headerOptions": {
          "name": "headerOptions",
          "description": "Options to be passed if using `withHeader: true`\n\n<pre className=\"DocPage-codeBlock\">\nExternalHeaderProps: {\n    children?: React.ReactNode;\n    withSearch?: boolean;\n    searchPlaceholder?: string;\n    dynamicColumn?: boolean;\n    allowSelectAll?: boolean;\n}\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| children | Header actions to be rendered | |\n| withSearch | Set to use Search Input | |\n| searchPlaceholder | Placeholder of Search Input | \"Search\" |\n| dynamicColumn | Set to use Column controlling dropdown | true |\n| allowSelectAll | Set to show Select All button | |",
          "type": {
            "required": false,
            "name": "other",
            "value": "ExternalHeaderProps | undefined"
          },
          "table": {
            "type": {
              "summary": "ExternalHeaderProps | undefined"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "withCheckbox": {
          "name": "withCheckbox",
          "description": "Set for Row checkboxes",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "showMenu": {
          "name": "showMenu",
          "description": "Set for visibility of Menu on Table Head Cell",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "withPagination": {
          "name": "withPagination",
          "description": "Set for `Pagination` component in `Table`(**Not applied if pageSize >= totalRecords**)",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "page": {
          "name": "page",
          "description": "Initial page passed to `Table`",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "1"
            }
          }
        },
        "paginationType": {
          "name": "paginationType",
          "description": "`Pagination` component type",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "basic",
              "jump"
            ]
          },
          "table": {
            "type": {
              "summary": "\"basic\" | \"jump\""
            },
            "defaultValue": {
              "summary": "\"jump\""
            }
          }
        },
        "pageSize": {
          "name": "pageSize",
          "description": "Number of rows to be rendered on a page\n\n**Also used to control number of rows to be rendered while loading: true**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "15"
            }
          }
        },
        "loaderSchema": {
          "name": "loaderSchema",
          "description": "Schema to be used for loading state **only when `schema: undefined`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "multipleSorting": {
          "name": "multipleSorting",
          "description": "Set to allow multiple column sorting",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "sortingList": {
          "name": "sortingList",
          "description": "Initial sortingList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nSortType: 'asc' | 'desc'\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "{ name: string; type: SortType; }[]"
          },
          "table": {
            "type": {
              "summary": "{ name: string; type: SortType; }[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "filterList": {
          "name": "filterList",
          "description": "Initial filterList passed to `Table`\n\n<pre className=\"DocPage-codeBlock\">\nFilter: Array of selected values passed in dropdown\n`any[]`\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Record<string, Filter>"
          },
          "table": {
            "type": {
              "summary": "Record<string, Filter>"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "errorTemplate": {
          "name": "errorTemplate",
          "description": "Template to be rendered when **error: true**\n\n<pre className=\"DocPage-codeBlock\">\nErrorTemplateProps: {\n    errorType: TableProps['errorType']\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "FunctionComponent<ErrorTemplateProps> | undefined"
          },
          "table": {
            "type": {
              "summary": "FunctionComponent<ErrorTemplateProps> | undefined"
            },
            "defaultValue": {
              "summary": "(props: ErrorTemplateProps) => {\n  const { errorType = 'DEFAULT' } = props;\n\n  const errorMessages: Record<string, string> = {\n    FAILED_TO_FETCH: 'Failed to fetch data',\n    NO_RECORDS_FOUND: 'No results found',\n    DEFAULT: 'No results found',\n  };\n  return <Heading>{errorMessages[errorType]}</Heading>;\n}"
            }
          }
        },
        "searchDebounceDuration": {
          "name": "searchDebounceDuration",
          "description": "Debounce duration to call updateData in case of search term update",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": {
              "summary": "750"
            }
          }
        },
        "onRowClick": {
          "name": "onRowClick",
          "description": "Callback to be called when a row is clicked in case of Table type: \"resource\"\n\n`onRowClickFunction: (data: RowData, rowIndexes?: number) => void`",
          "type": {
            "required": false,
            "name": "other",
            "value": "onRowClickFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "onRowClickFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "onSelect": {
          "name": "onSelect",
          "description": "Callback to be called when a row is selected",
          "type": {
            "required": false,
            "name": "function",
            "value": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((rowIndexes: number[], selected: boolean, allSelected: RowData[], selectAll?: boolean | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onPageChange": {
          "name": "onPageChange",
          "description": "Callback to be called on page change in case of withPagination: true",
          "type": {
            "required": false,
            "name": "function",
            "value": "((page: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((page: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "headCellTooltip": {
          "name": "headCellTooltip",
          "description": "Shows tooltip on Head Cell hover",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "separator": {
          "name": "separator",
          "description": "Shows left separator to all columns\n\n**Can be override by Column Schema**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "filterPosition": {
          "name": "filterPosition",
          "description": "Filters position in the Table\n\n`FilterPosition: 'HEADER' | 'GRID'`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "GRID",
              "HEADER"
            ]
          },
          "table": {
            "type": {
              "summary": "\"GRID\" | \"HEADER\""
            },
            "defaultValue": {
              "summary": "\"GRID\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "fetchData": {
          "name": "fetchData",
          "description": "Callback to be called in case of async `Table`\n\n<pre className=\"DocPage-codeBlock\">\nfetchDataFunction: (options: FetchDataOptions) => Promise<{\n      searchTerm?: string,\n      count: number,\n      data: Data,\n      schema: Schema\n}>;\n\nFetchDataOptions: {\n      page?: number;\n      pageSize?: number;\n      filterList?: TableProps['sortingList'];\n      sortingList?: TableProps['filterList'];\n      searchTerm?: string;\n  }\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "fetchDataFunction | undefined"
          },
          "table": {
            "type": {
              "summary": "fetchDataFunction | undefined"
            },
            "defaultValue": null
          }
        },
        "data": {
          "name": "data",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Data: RowData[]\n\n    RowData: Record<string, any> & {\n      _selected?: boolean\n    }\n\n    `_selected`  Denotes row selection\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Data"
          },
          "table": {
            "type": {
              "summary": "Data"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "schema": {
          "name": "schema",
          "description": "<pre className=\"DocPage-codeBlock\">\n    Schema: ColumnSchema[]\n\n    ColumnSchema: {\n        name: string;\n        displayName: string;\n        width?: React.ReactText;\n        minWidth?: React.ReactText;\n        maxWidth?: React.ReactText;\n        resizable?: boolean;\n        sorting?: boolean;\n        comparator?: (a: RowData, b: RowData) => -1 | 0 | 1;\n        separator?: boolean;\n        pinned?: 'left' | 'right';\n        hidden?: boolean;\n        filters?: DropdownProps['options'];\n        onFilterChange?: (data: RowData, filters: Filter) => boolean;\n        translate?: (data: RowData) => RowData,\n        cellType?: CellType;\n        cellRenderer?: React.FunctionComponent\\<GridCellProps\\>;\n        align?: Alignment;\n    }\n\n    GridCellProps: {\n        size: GridSize;\n        rowIndex: number;\n        colIndex: number;\n        data: RowData;\n        schema: ColumnSchema;\n        loading: boolean;\n        expanded: boolean;\n    }\n\n| CellType | CellData | Default Width |\n| --- | --- | --- |\n| DEFAULT | string \\| { title: string } | { width: 200 } |\n| WITH\\_META\\_LIST | { title: string, metaList: string[] } | { width: 200 } |\n| AVATAR | { firstName?: string, lastName?: string, title?: string } | { width: 50, minWidth: 50 } |\n| AVATAR\\_WITH\\_TEXT | { firstName?: string, lastName?: string, title: string } | { width: 250 } |\n| AVATAR\\_WITH\\_META\\_LIST | { firstName?: string, lastName?: string, title: string, metaList: string[] } | { width: 250 } |\n| ICON | { icon: string } | { width: 50, minWidth: 50 } |\n| STATUS_HINT | { title: string, statusAppearance: string } | { width: 100 } |\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | key of the value in `RowData` | |\n| displayName | Column Head Label | |\n| width | width of the column(px or %) | |\n| minWidth | min-width of the column(px or %) | 100 |\n| maxWidth | max-width of the column(px or %) | 800 |\n| resizable | Denotes if column is resizable | |\n| sorting | Enables sorting in column | true |\n| comparator | Sorting Function to be passed(in case of sync) | Default string comparator(localeCompare) |\n| separator | Shows Left separator | |\n| tooltip | Shows tooltip on hover | |\n| pinned | Pin column | |\n| hidden | Denotes if column is hidden | |\n| filters | Filter options for the column | |\n| onFilterChange | Callback to be called on Filter Change | |\n| translate | Translate Cell Data | |\n| cellType | Cell Type | 'DEFAULT' |\n| cellRenderer | Custom Cell Renderer | |\n| align | Align cell content<br>**Align applicable only for following cellTypes:<br>DEFAULT, AVATAR, ICON, STATUS_HINT** | \"left\" |",
          "type": {
            "required": false,
            "name": "other",
            "value": "Schema"
          },
          "table": {
            "type": {
              "summary": "Schema"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "loading": {
          "name": "loading",
          "description": "Set for loading state of Table(in case of sync)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "error": {
          "name": "error",
          "description": "Set for error state of Table(in case of sync)",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "errorType": {
          "name": "errorType",
          "description": "Error type to be passed to errorTemplate props",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onSearch": {
          "name": "onSearch",
          "description": "Callback to be called on searchTerm change(in case of sync)",
          "type": {
            "required": false,
            "name": "function",
            "value": "((data: Data, searchTerm: string) => Data) | undefined"
          },
          "table": {
            "type": {
              "summary": "((data: Data, searchTerm: string) => Data) | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-tabs-all--all": {
    "id": "components-tabs-all--all",
    "kind": "Components/Tabs/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [activeIndex, setActiveIndex] = React.useState(0);\n\n  const onTabChangeHandler = (tabIndex: number) => {\n    setActiveIndex(tabIndex);\n    return action(`tab-change: ${tabIndex}`)();\n  };\n\n  return (\n    <Tabs activeIndex={activeIndex} onTabChange={onTabChangeHandler}>\n      <Tab label=\"Tab(Recommended)\" count={10}>\n        <div>Tab(Recommended)</div>\n      </Tab>\n      <Tab label=\"All\" icon=\"call_received\">\n        <div>All</div>\n      </Tab>\n      <Tab label=\"Extras\" disabled={true}>\n        <div>Extras</div>\n      </Tab>\n    </Tabs>\n  );\n}"
      },
      "__id": "components-tabs-all--all",
      "args": {},
      "argTypes": {
        "activeIndex": {
          "name": "activeIndex",
          "description": "Index of desired selected `Tab`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "withSeparator": {
          "name": "withSeparator",
          "description": "Shows border at bottom of  `Tabs`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "tabs": {
          "name": "tabs",
          "description": "List of tabs\n<pre className=\"DocPage-codeBlock\">\n  Tab {\n    label: React.ReactText;\n    count?: number;\n    icon?: string;\n    disabled?: boolean;\n  }\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Label of Tab |  |\n| count | Count of Tab | |\n| icon | Icon to be rendered inside Tab | |\n| disabled | Determines if tab is disabled | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TabConfig[]"
          },
          "table": {
            "type": {
              "summary": "TabConfig[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "children": {
          "name": "children",
          "description": "`Tab` Component will be wrapped in `Tabs` container",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | ReactElement<any, string | ... 1 more ... | (new (props: any) => Component<...>)>[] | undefined"
          },
          "table": {
            "type": {
              "summary": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | ReactElement<any, string | ... 1 more ... | (new (props: any) => Component<...>)>[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onTabChange": {
          "name": "onTabChange",
          "description": "Called with a new index when a new tab is selected by user",
          "type": {
            "required": false,
            "name": "function",
            "value": "((tabIndex: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((tabIndex: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-tabs-basic-tabs--basic-tabs": {
    "id": "components-tabs-basic-tabs--basic-tabs",
    "kind": "Components/Tabs/Basic Tabs",
    "name": "Basic Tabs",
    "story": "Basic Tabs",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const options = [\n    {\n      label: 'Feb 9, 2019 (recent)',\n      value: 'Feb 9, 2019 (recent)',\n      selected: true,\n    },\n    {\n      label: 'Feb 10, 2019',\n      value: 'Feb 10, 2019',\n    },\n    {\n      label: 'Feb 11, 2019',\n      value: 'Feb 11, 2019',\n    },\n    {\n      label: 'Feb 12, 2019',\n      value: 'Feb 12, 2019',\n    },\n    {\n      label: 'Feb 13, 2019',\n      value: 'Feb 13, 2019',\n    },\n  ];\n\n  const onTabChangeHandler = (tabIndex: number) => {\n    return action(`tab-change: ${tabIndex}`)();\n  };\n\n  return (\n    <div>\n      <div className=\"d-flex justify-content-between\">\n        <Heading size=\"m\">Data Gaps</Heading>\n        <div style={{ width: 'var(--spacing-8)' }}>\n          <Dropdown options={options} />\n        </div>\n      </div>\n      <Tabs onTabChange={onTabChangeHandler}>\n        <Tab label=\"Clinical Gaps\">\n          <div>Clinical Gaps</div>\n        </Tab>\n        <Tab label=\"Billing Gaps\">\n          <div>Billing Gaps</div>\n        </Tab>\n        <Tab label=\"Claim Gaps\" disabled={true}>\n          <div>Claim Gaps</div>\n        </Tab>\n      </Tabs>\n    </div>\n  );\n}"
      },
      "__id": "components-tabs-basic-tabs--basic-tabs",
      "args": {},
      "argTypes": {
        "activeIndex": {
          "name": "activeIndex",
          "description": "Index of desired selected `Tab`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "withSeparator": {
          "name": "withSeparator",
          "description": "Shows border at bottom of  `Tabs`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "tabs": {
          "name": "tabs",
          "description": "List of tabs\n<pre className=\"DocPage-codeBlock\">\n  Tab {\n    label: React.ReactText;\n    count?: number;\n    icon?: string;\n    disabled?: boolean;\n  }\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Label of Tab |  |\n| count | Count of Tab | |\n| icon | Icon to be rendered inside Tab | |\n| disabled | Determines if tab is disabled | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TabConfig[]"
          },
          "table": {
            "type": {
              "summary": "TabConfig[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "children": {
          "name": "children",
          "description": "`Tab` Component will be wrapped in `Tabs` container",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | ReactElement<any, string | ... 1 more ... | (new (props: any) => Component<...>)>[] | undefined"
          },
          "table": {
            "type": {
              "summary": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | ReactElement<any, string | ... 1 more ... | (new (props: any) => Component<...>)>[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onTabChange": {
          "name": "onTabChange",
          "description": "Called with a new index when a new tab is selected by user",
          "type": {
            "required": false,
            "name": "function",
            "value": "((tabIndex: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((tabIndex: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-tabs-custom-labels--custom-labels": {
    "id": "components-tabs-custom-labels--custom-labels",
    "kind": "Components/Tabs/Custom Labels",
    "name": "Custom Labels",
    "story": "Custom Labels",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [activeIndex, setActiveIndex] = React.useState(0);\n\n  const onTabChangeHandler = (tabIndex: number) => {\n    setActiveIndex(tabIndex);\n    return action(`tab-change: ${tabIndex}`)();\n  };\n\n  return (\n    <Tabs activeIndex={activeIndex} onTabChange={onTabChangeHandler}>\n      <Tab\n        label={\n          <>\n            <div className=\"Tab-count\">\n              <Badge appearance={activeIndex === 0 ? 'primary' : 'secondary'}>2</Badge>\n            </div>\n            <Text appearance={activeIndex !== 0 ? 'subtle' : 'link'}>Tab(Recommended)</Text>\n          </>\n        }\n      >\n        <div>Tab(Recommended)</div>\n      </Tab>\n      <Tab\n        label={\n          <div className=\"Tab-icon\">\n            <Icon name=\"south_west\" appearance={activeIndex === 1 ? 'info' : 'subtle'} />\n            <Text appearance={activeIndex !== 1 ? 'subtle' : 'link'}>All</Text>\n          </div>\n        }\n      >\n        <div>All</div>\n      </Tab>\n      <Tab\n        label={\n          <>\n            <Text appearance={activeIndex !== 2 ? 'subtle' : undefined}>Extras</Text>\n          </>\n        }\n        disabled={true}\n      >\n        <div>Extras</div>\n      </Tab>\n    </Tabs>\n  );\n}"
      },
      "__id": "components-tabs-custom-labels--custom-labels",
      "args": {},
      "argTypes": {
        "activeIndex": {
          "name": "activeIndex",
          "description": "Index of desired selected `Tab`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "withSeparator": {
          "name": "withSeparator",
          "description": "Shows border at bottom of  `Tabs`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "tabs": {
          "name": "tabs",
          "description": "List of tabs\n<pre className=\"DocPage-codeBlock\">\n  Tab {\n    label: React.ReactText;\n    count?: number;\n    icon?: string;\n    disabled?: boolean;\n  }\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Label of Tab |  |\n| count | Count of Tab | |\n| icon | Icon to be rendered inside Tab | |\n| disabled | Determines if tab is disabled | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TabConfig[]"
          },
          "table": {
            "type": {
              "summary": "TabConfig[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "children": {
          "name": "children",
          "description": "`Tab` Component will be wrapped in `Tabs` container",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | ReactElement<any, string | ... 1 more ... | (new (props: any) => Component<...>)>[] | undefined"
          },
          "table": {
            "type": {
              "summary": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | ReactElement<any, string | ... 1 more ... | (new (props: any) => Component<...>)>[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onTabChange": {
          "name": "onTabChange",
          "description": "Called with a new index when a new tab is selected by user",
          "type": {
            "required": false,
            "name": "function",
            "value": "((tabIndex: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((tabIndex: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-tabs-inline-content--inline-content": {
    "id": "components-tabs-inline-content--inline-content",
    "kind": "Components/Tabs/Inline Content",
    "name": "Inline Content",
    "story": "Inline Content",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const options = [\n    {\n      label: 'Increasing',\n      value: 'Increasing',\n    },\n    {\n      label: 'Decreasing',\n      value: 'Decreasing',\n    },\n  ];\n\n  const onTabChangeHandler = (tabIndex: number) => {\n    return action(`tab-change: ${tabIndex}`)();\n  };\n\n  return (\n    <Tabs onTabChange={onTabChangeHandler}>\n      <Tab label=\"All\" count={12}>\n        <div>All</div>\n      </Tab>\n      <Tab label=\"Active\" count={3}>\n        <div>Active</div>\n      </Tab>\n      <Tab label=\"Inactive\" count={9}>\n        <div>Inactive</div>\n      </Tab>\n      <div className=\"d-flex justify-content-end flex-grow-1\">\n        <div style={{ width: 'var(--spacing-9)' }} className=\"ml-8\">\n          <Input placeholder=\"Search by name\" icon=\"search\" />\n        </div>\n        <div style={{ width: 'var(--spacing-8)' }} className=\"ml-4\">\n          <Dropdown options={options} placeholder=\"Sort by\" />\n        </div>\n      </div>\n    </Tabs>\n  );\n}"
      },
      "__id": "components-tabs-inline-content--inline-content",
      "args": {},
      "argTypes": {
        "activeIndex": {
          "name": "activeIndex",
          "description": "Index of desired selected `Tab`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "withSeparator": {
          "name": "withSeparator",
          "description": "Shows border at bottom of  `Tabs`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "tabs": {
          "name": "tabs",
          "description": "List of tabs\n<pre className=\"DocPage-codeBlock\">\n  Tab {\n    label: React.ReactText;\n    count?: number;\n    icon?: string;\n    disabled?: boolean;\n  }\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Label of Tab |  |\n| count | Count of Tab | |\n| icon | Icon to be rendered inside Tab | |\n| disabled | Determines if tab is disabled | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TabConfig[]"
          },
          "table": {
            "type": {
              "summary": "TabConfig[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "children": {
          "name": "children",
          "description": "`Tab` Component will be wrapped in `Tabs` container",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | ReactElement<any, string | ... 1 more ... | (new (props: any) => Component<...>)>[] | undefined"
          },
          "table": {
            "type": {
              "summary": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | ReactElement<any, string | ... 1 more ... | (new (props: any) => Component<...>)>[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onTabChange": {
          "name": "onTabChange",
          "description": "Called with a new index when a new tab is selected by user",
          "type": {
            "required": false,
            "name": "function",
            "value": "((tabIndex: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((tabIndex: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-tabs-tabs-with-count--tabs-with-count": {
    "id": "components-tabs-tabs-with-count--tabs-with-count",
    "kind": "Components/Tabs/Tabs With Count",
    "name": "Tabs With Count",
    "story": "Tabs With Count",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const options = [\n    {\n      label: 'Increasing',\n      value: 'Increasing',\n    },\n    {\n      label: 'Decreasing',\n      value: 'Decreasing',\n    },\n  ];\n\n  const onTabChangeHandler = (tabIndex: number) => {\n    return action(`tab-change: ${tabIndex}`)();\n  };\n\n  return (\n    <div>\n      <div className=\"d-flex justify-content-between\">\n        <Heading size=\"m\">Strategy</Heading>\n        <Button appearance=\"primary\">New Strategy</Button>\n      </div>\n      <div className=\"d-flex align-items-center mt-3\">\n        <Tabs onTabChange={onTabChangeHandler}>\n          <Tab label=\"All\" count={12}>\n            <div>All</div>\n          </Tab>\n          <Tab label=\"Active\" count={3}>\n            <div>Active</div>\n          </Tab>\n          <Tab label=\"Inactive\" count={9}>\n            <div>Inactive</div>\n          </Tab>\n          <div className=\"d-flex align-items-center\">\n            <div style={{ width: 'var(--spacing-9)' }} className=\"ml-8\">\n              <Input placeholder=\"Search by name\" icon=\"search\" />\n            </div>\n            <div style={{ width: 'var(--spacing-8)' }} className=\"ml-4\">\n              <Dropdown options={options} placeholder=\"Sort by\" />\n            </div>\n          </div>\n        </Tabs>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-tabs-tabs-with-count--tabs-with-count",
      "args": {},
      "argTypes": {
        "activeIndex": {
          "name": "activeIndex",
          "description": "Index of desired selected `Tab`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "withSeparator": {
          "name": "withSeparator",
          "description": "Shows border at bottom of  `Tabs`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "tabs": {
          "name": "tabs",
          "description": "List of tabs\n<pre className=\"DocPage-codeBlock\">\n  Tab {\n    label: React.ReactText;\n    count?: number;\n    icon?: string;\n    disabled?: boolean;\n  }\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Label of Tab |  |\n| count | Count of Tab | |\n| icon | Icon to be rendered inside Tab | |\n| disabled | Determines if tab is disabled | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TabConfig[]"
          },
          "table": {
            "type": {
              "summary": "TabConfig[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "children": {
          "name": "children",
          "description": "`Tab` Component will be wrapped in `Tabs` container",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | ReactElement<any, string | ... 1 more ... | (new (props: any) => Component<...>)>[] | undefined"
          },
          "table": {
            "type": {
              "summary": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | ReactElement<any, string | ... 1 more ... | (new (props: any) => Component<...>)>[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onTabChange": {
          "name": "onTabChange",
          "description": "Called with a new index when a new tab is selected by user",
          "type": {
            "required": false,
            "name": "function",
            "value": "((tabIndex: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((tabIndex: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-tabs-tabs-with-icon--tabs-with-icon": {
    "id": "components-tabs-tabs-with-icon--tabs-with-icon",
    "kind": "Components/Tabs/Tabs With Icon",
    "name": "Tabs With Icon",
    "story": "Tabs With Icon",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const onTabChangeHandler = (tabIndex: number) => {\n    return action(`tab-change: ${tabIndex}`)();\n  };\n\n  return (\n    <div>\n      <div className=\"d-flex align-items-center\">\n        <Heading size=\"s\">Diabetes: Hemoglobin A1c Poor Control</Heading>\n        <Link className=\"ml-4\">Measure definition</Link>\n      </div>\n      <Tabs onTabChange={onTabChangeHandler}>\n        <Tab label=\"2020\" icon=\"warning\">\n          <div>2020</div>\n        </Tab>\n        <Tab label=\"2019\" icon=\"check_circle\">\n          <div>2019</div>\n        </Tab>\n        <Tab label=\"2018\" icon=\"warning\">\n          <div>2018</div>\n        </Tab>\n        <Tab label=\"2017\" icon=\"check_circle\">\n          <div>2017</div>\n        </Tab>\n      </Tabs>\n    </div>\n  );\n}"
      },
      "__id": "components-tabs-tabs-with-icon--tabs-with-icon",
      "args": {},
      "argTypes": {
        "activeIndex": {
          "name": "activeIndex",
          "description": "Index of desired selected `Tab`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "withSeparator": {
          "name": "withSeparator",
          "description": "Shows border at bottom of  `Tabs`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "tabs": {
          "name": "tabs",
          "description": "List of tabs\n<pre className=\"DocPage-codeBlock\">\n  Tab {\n    label: React.ReactText;\n    count?: number;\n    icon?: string;\n    disabled?: boolean;\n  }\n\n| Name | Description | Default |\n| --- | --- | --- |\n| label | Label of Tab |  |\n| count | Count of Tab | |\n| icon | Icon to be rendered inside Tab | |\n| disabled | Determines if tab is disabled | |\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "TabConfig[]"
          },
          "table": {
            "type": {
              "summary": "TabConfig[]"
            },
            "defaultValue": {
              "summary": "[]"
            }
          }
        },
        "children": {
          "name": "children",
          "description": "`Tab` Component will be wrapped in `Tabs` container",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | ReactElement<any, string | ... 1 more ... | (new (props: any) => Component<...>)>[] | undefined"
          },
          "table": {
            "type": {
              "summary": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | ReactElement<any, string | ... 1 more ... | (new (props: any) => Component<...>)>[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onTabChange": {
          "name": "onTabChange",
          "description": "Called with a new index when a new tab is selected by user",
          "type": {
            "required": false,
            "name": "function",
            "value": "((tabIndex: number) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((tabIndex: number) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-text-all--all": {
    "id": "components-text-all--all",
    "kind": "Components/Text/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const weight = optionsKnob('weight', { strong: 'strong', medium: 'medium' }, undefined, {\n    display: 'inline-radio',\n  });\n  const size = optionsKnob('size', { small: 'small', regular: 'regular', large: 'large' }, undefined, {\n    display: 'inline-radio',\n  });\n  const small = boolean('small', false);\n  const appearance = optionsKnob(\n    'appearance',\n    {\n      default: 'default',\n      white: 'white',\n      destructive: 'destructive',\n      subtle: 'subtle',\n      disabled: 'disabled',\n      success: 'success',\n      link: 'link',\n    },\n    undefined,\n    {\n      display: 'inline-radio',\n    }\n  );\n\n  const options = {\n    size,\n    weight,\n    appearance,\n    small,\n  };\n\n  return (\n    <div style={{ background: appearance === 'white' ? 'black' : 'transparent' }}>\n      <Text {...options}>Text component have different varients, look for options in knobs tab.</Text>\n    </div>\n  );\n}"
      },
      "__id": "components-text-all--all",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "Text to be rendered",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "weight": {
          "name": "weight",
          "description": "Denotes weight of `Text`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "medium",
              "strong"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"medium\" | \"strong\""
            },
            "defaultValue": null
          }
        },
        "small": {
          "name": "small",
          "description": "Changes size of `Text`**[SOON\\_TO\\_BE\\_DEPRECATED]**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Text`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "success",
              "default",
              "disabled",
              "link",
              "subtle",
              "white",
              "destructive"
            ]
          },
          "table": {
            "type": {
              "summary": "\"success\" | \"default\" | \"disabled\" | \"link\" | \"subtle\" | \"white\" | \"destructive\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Size of `Text`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "regular",
              "large",
              "small"
            ]
          },
          "table": {
            "type": {
              "summary": "\"regular\" | \"large\" | \"small\""
            },
            "defaultValue": {
              "summary": "\"regular\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-text-variants-appearance--appearance": {
    "id": "components-text-variants-appearance--appearance",
    "kind": "Components/Text/Variants/Appearance",
    "name": "Appearance",
    "story": "Appearance",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const appearances: Appearance[] = ['default', 'white', 'destructive', 'subtle', 'disabled', 'success', 'link'];\n  return (\n    <div className=\"d-flex\">\n      {appearances.map((appear, ind) => {\n        return (\n          <div key={ind} style={{ background: appear === 'white' ? 'black' : 'transparent' }} className=\"mr-6\">\n            <Text appearance={appear}>{appear.charAt(0).toUpperCase() + appear.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-text-variants-appearance--appearance",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "Text to be rendered",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "weight": {
          "name": "weight",
          "description": "Denotes weight of `Text`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "medium",
              "strong"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"medium\" | \"strong\""
            },
            "defaultValue": null
          }
        },
        "small": {
          "name": "small",
          "description": "Changes size of `Text`**[SOON\\_TO\\_BE\\_DEPRECATED]**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Text`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "success",
              "default",
              "disabled",
              "link",
              "subtle",
              "white",
              "destructive"
            ]
          },
          "table": {
            "type": {
              "summary": "\"success\" | \"default\" | \"disabled\" | \"link\" | \"subtle\" | \"white\" | \"destructive\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Size of `Text`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "regular",
              "large",
              "small"
            ]
          },
          "table": {
            "type": {
              "summary": "\"regular\" | \"large\" | \"small\""
            },
            "defaultValue": {
              "summary": "\"regular\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-text-variants-size--size": {
    "id": "components-text-variants-size--size",
    "kind": "Components/Text/Variants/Size",
    "name": "Size",
    "story": "Size",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div className=\"d-flex\">\n      <div className=\"mr-6\">\n        <Text size=\"small\">Small</Text>\n      </div>\n      <div className=\"mr-6\">\n        <Text size=\"regular\">Regular</Text>\n      </div>\n      <div>\n        <Text size=\"large\">Large</Text>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-text-variants-size--size",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "Text to be rendered",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "weight": {
          "name": "weight",
          "description": "Denotes weight of `Text`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "medium",
              "strong"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"medium\" | \"strong\""
            },
            "defaultValue": null
          }
        },
        "small": {
          "name": "small",
          "description": "Changes size of `Text`**[SOON\\_TO\\_BE\\_DEPRECATED]**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Text`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "success",
              "default",
              "disabled",
              "link",
              "subtle",
              "white",
              "destructive"
            ]
          },
          "table": {
            "type": {
              "summary": "\"success\" | \"default\" | \"disabled\" | \"link\" | \"subtle\" | \"white\" | \"destructive\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Size of `Text`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "regular",
              "large",
              "small"
            ]
          },
          "table": {
            "type": {
              "summary": "\"regular\" | \"large\" | \"small\""
            },
            "defaultValue": {
              "summary": "\"regular\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-text-variants-weight--weight": {
    "id": "components-text-variants-weight--weight",
    "kind": "Components/Text/Variants/Weight",
    "name": "Weight",
    "story": "Weight",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div className=\"d-flex\">\n      <div className=\"mr-6\">\n        <Text weight=\"strong\">Strong</Text>\n      </div>\n      <div>\n        <Text weight=\"medium\">Medium</Text>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-text-variants-weight--weight",
      "args": {},
      "argTypes": {
        "children": {
          "name": "children",
          "description": "Text to be rendered",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactText"
          },
          "table": {
            "type": {
              "summary": "ReactText"
            },
            "defaultValue": null
          }
        },
        "weight": {
          "name": "weight",
          "description": "Denotes weight of `Text`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "medium",
              "strong"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"medium\" | \"strong\""
            },
            "defaultValue": null
          }
        },
        "small": {
          "name": "small",
          "description": "Changes size of `Text`**[SOON\\_TO\\_BE\\_DEPRECATED]**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Text`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "success",
              "default",
              "disabled",
              "link",
              "subtle",
              "white",
              "destructive"
            ]
          },
          "table": {
            "type": {
              "summary": "\"success\" | \"default\" | \"disabled\" | \"link\" | \"subtle\" | \"white\" | \"destructive\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "size": {
          "name": "size",
          "description": "Size of `Text`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "regular",
              "large",
              "small"
            ]
          },
          "table": {
            "type": {
              "summary": "\"regular\" | \"large\" | \"small\""
            },
            "defaultValue": {
              "summary": "\"regular\""
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-textarea-all--all": {
    "id": "components-textarea-all--all",
    "kind": "Components/Textarea/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const value = text('value', '');\n\n  const placeholder = text('placeholder', 'Placeholder');\n\n  const disabled = boolean('disabled', false);\n\n  const error = boolean('error', false);\n\n  const resize = boolean('resize', true);\n\n  const rows = number('rows', 3);\n\n  return (\n    <div style={{ maxWidth: '300px' }}>\n      <Textarea\n        name=\"Textarea\"\n        value={value}\n        disabled={disabled}\n        onChange={action('on-change')}\n        onClick={action('on-click')}\n        placeholder={placeholder}\n        error={error}\n        resize={resize}\n        rows={rows}\n      />\n    </div>\n  );\n}"
      },
      "__id": "components-textarea-all--all",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Name of the `Textarea`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Textarea`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "Adds default value to `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when Textarea is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "rows": {
          "name": "rows",
          "description": "Number of rows in `Textarea`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Textarea`, making it unable to type\n\n**set to `true` if onChange is not provided**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "required": {
          "name": "required",
          "description": "Shows the user that this field id required",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "resize": {
          "name": "resize",
          "description": "Disable the resizable property of a `Textarea`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function when `Textarea` text changes",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: ChangeEvent<HTMLTextAreaElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: ChangeEvent<HTMLTextAreaElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Textarea` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLTextAreaElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLTextAreaElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Textarea` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLTextAreaElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLTextAreaElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Textarea` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLTextAreaElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLTextAreaElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-textarea-default-textarea--default-textarea": {
    "id": "components-textarea-default-textarea--default-textarea",
    "kind": "Components/Textarea/Default Textarea",
    "name": "Default Textarea",
    "story": "Default Textarea",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <>\n    <Label withInput={true}>Comments</Label>\n    <Textarea name=\"Textarea\" className=\"w-25\" placeholder=\"Enter your comments here\" />\n  </>\n)"
      },
      "__id": "components-textarea-default-textarea--default-textarea",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Name of the `Textarea`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Textarea`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "Adds default value to `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when Textarea is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "rows": {
          "name": "rows",
          "description": "Number of rows in `Textarea`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Textarea`, making it unable to type\n\n**set to `true` if onChange is not provided**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "required": {
          "name": "required",
          "description": "Shows the user that this field id required",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "resize": {
          "name": "resize",
          "description": "Disable the resizable property of a `Textarea`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function when `Textarea` text changes",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: ChangeEvent<HTMLTextAreaElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: ChangeEvent<HTMLTextAreaElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Textarea` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLTextAreaElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLTextAreaElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Textarea` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLTextAreaElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLTextAreaElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Textarea` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLTextAreaElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLTextAreaElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-textarea-textarea-with-caption--textarea-with-caption": {
    "id": "components-textarea-textarea-with-caption--textarea-with-caption",
    "kind": "Components/Textarea/Textarea With Caption",
    "name": "Textarea With Caption",
    "story": "Textarea With Caption",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const [value, setValue] = React.useState('Patient moved out of country last week.');\n\n  return (\n    <>\n      <Label withInput={true}>Confirmation Notes</Label>\n      <Textarea\n        name=\"Textarea\"\n        className=\"w-50\"\n        value={value}\n        onChange={(e) => {\n          setValue(e.target.value);\n        }}\n        placeholder=\"Enter your comments here\"\n      />\n      <Caption withInput={true}>This note will be automatically pinned for export.</Caption>\n    </>\n  );\n}"
      },
      "__id": "components-textarea-textarea-with-caption--textarea-with-caption",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Name of the `Textarea`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Textarea`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "Adds default value to `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when Textarea is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "rows": {
          "name": "rows",
          "description": "Number of rows in `Textarea`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Textarea`, making it unable to type\n\n**set to `true` if onChange is not provided**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "required": {
          "name": "required",
          "description": "Shows the user that this field id required",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "resize": {
          "name": "resize",
          "description": "Disable the resizable property of a `Textarea`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function when `Textarea` text changes",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: ChangeEvent<HTMLTextAreaElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: ChangeEvent<HTMLTextAreaElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Textarea` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLTextAreaElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLTextAreaElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Textarea` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLTextAreaElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLTextAreaElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Textarea` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLTextAreaElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLTextAreaElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-textarea-variants-disable--disable": {
    "id": "components-textarea-variants-disable--disable",
    "kind": "Components/Textarea/Variants/Disable",
    "name": "Disable",
    "story": "Disable",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const innerStyle = {\n    display: 'flex',\n    'flex-direction': 'column',\n    alignItems: 'center',\n    maxWidth: '300px',\n  };\n\n  const BooleanValue = [true, false];\n\n  return (\n    <div className=\"Row\">\n      {BooleanValue.map((value, ind) => (\n        <div style={innerStyle} className=\"mr-9 mb-5\" key={ind}>\n          <div style={innerStyle} className=\"mr-9 mb-5\">\n            <div className=\"w-100 mb-6\">\n              <Textarea\n                name=\"Textarea\"\n                onChange={action('on-change')}\n                placeholder=\"Placeholder\"\n                disabled={value}\n                rows={3}\n              />\n            </div>\n            <Text weight=\"strong\">{value ? 'Disabled' : 'Enabled'}</Text>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}"
      },
      "__id": "components-textarea-variants-disable--disable",
      "args": {},
      "argTypes": {
        "name": {
          "name": "name",
          "description": "Name of the `Textarea`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Textarea`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "defaultValue": {
          "name": "defaultValue",
          "description": "Adds default value to `Input`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when Textarea is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "rows": {
          "name": "rows",
          "description": "Number of rows in `Textarea`",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Textarea`, making it unable to type\n\n**set to `true` if onChange is not provided**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "required": {
          "name": "required",
          "description": "Shows the user that this field id required",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "resize": {
          "name": "resize",
          "description": "Disable the resizable property of a `Textarea`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "onChange": {
          "name": "onChange",
          "description": "Callback function when `Textarea` text changes",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: ChangeEvent<HTMLTextAreaElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: ChangeEvent<HTMLTextAreaElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Textarea` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLTextAreaElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLTextAreaElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Textarea` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLTextAreaElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLTextAreaElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Textarea` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLTextAreaElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLTextAreaElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-timepicker-all--all": {
    "id": "components-timepicker-all--all",
    "kind": "Components/TimePicker/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const inputFormat = select('inputFormat', ['hh:mm AM', 'hh:mm'], undefined);\n\n  const outputFormat = select('outputFormat', ['hh:mm AM', 'hh:mm'], undefined);\n\n  const onTimeChange = (val?: string) => {\n    return action(`updated time: ${val}`)();\n  };\n\n  return (\n    <TimePicker\n      key={`${inputFormat}${outputFormat}`}\n      inputFormat={inputFormat}\n      outputFormat={outputFormat}\n      onTimeChange={onTimeChange}\n    />\n  );\n}"
      },
      "__id": "components-timepicker-all--all",
      "args": {},
      "argTypes": {
        "time": {
          "name": "time",
          "description": "Selected time\n\n`number` - number of milliseconds elapsed since January 1, 1970, 00:00:00 UTC\n\n**`string` - Time string value as per `inputFormat`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | undefined"
            },
            "defaultValue": null
          }
        },
        "inputOptions": {
          "name": "inputOptions",
          "description": "Props to be used for `InputMask`",
          "type": {
            "required": false,
            "name": "other",
            "value": "Pick<InputMaskProps, \"open\" | \"children\" | \"className\" | \"data-test\" | \"size\" | \"accept\" | \"acceptCharset\" | \"action\" | \"allowFullScreen\" | \"allowTransparency\" | ... 360 more ... | \"clearOnEmptyBlur\">"
          },
          "table": {
            "type": {
              "summary": "Pick<InputMaskProps, \"open\" | \"children\" | \"className\" | \"data-test\" | \"size\" | \"accept\" | \"acceptCharset\" | \"action\" | \"allowFullScreen\" | \"allowTransparency\" | ... 360 more ... | \"clearOnEmptyBlur\">"
            },
            "defaultValue": {
              "summary": "{ }"
            }
          }
        },
        "inputFormat": {
          "name": "inputFormat",
          "description": "Should be used if `time` is of type `string`\n\nAlso determines mask format",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "hh:mm AM",
              "hh:mm"
            ]
          },
          "table": {
            "type": {
              "summary": "\"hh:mm AM\" | \"hh:mm\""
            },
            "defaultValue": {
              "summary": "\"hh:mm AM\""
            }
          }
        },
        "outputFormat": {
          "name": "outputFormat",
          "description": "Should be used to translate `time` to desired format for `onTimeChange` callback",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "hh:mm AM",
              "hh:mm"
            ]
          },
          "table": {
            "type": {
              "summary": "\"hh:mm AM\" | \"hh:mm\""
            },
            "defaultValue": {
              "summary": "\"hh:mm AM\""
            }
          }
        },
        "validators": {
          "name": "validators",
          "description": "custom Validator for `TimePicker`\n`boolean | ((val?: string) => boolean)`",
          "type": {
            "required": false,
            "name": "other",
            "value": "SingleOrArray<ValidatorFn<any[]>>"
          },
          "table": {
            "type": {
              "summary": "SingleOrArray<ValidatorFn<any[]>>"
            },
            "defaultValue": {
              "summary": "[Utils.validators.time]"
            }
          }
        },
        "onTimeChange": {
          "name": "onTimeChange",
          "description": "Callback function called when input field is blurred",
          "type": {
            "required": false,
            "name": "function",
            "value": "((timeVal?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((timeVal?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-toast-all--all": {
    "id": "components-toast-all--all",
    "kind": "Components/Toast/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const appearance = select('appearance', ['default', 'info', 'success', 'alert', 'warning'], undefined);\n\n  const title = text('title', 'Sample toast');\n\n  const message = text('message', '');\n\n  const actionLabel1 = text('actionLabel1', '');\n  const actionLabel2 = text('actionLabel2', '');\n\n  const props: Record<string, any> = {\n    actions: [],\n  };\n\n  if (actionLabel1) {\n    props.actions.push({\n      label: actionLabel1,\n      onClick: () => action('action button click: 1')(),\n    });\n  }\n  if (actionLabel2) {\n    props.actions.push({\n      label: actionLabel2,\n      onClick: () => action('action button click: 2')(),\n    });\n  }\n\n  return (\n    <Toast appearance={appearance} title={title} message={message} onClose={action('on-close clicked')} {...props} />\n  );\n}"
      },
      "__id": "components-toast-all--all",
      "args": {},
      "argTypes": {
        "title": {
          "name": "title",
          "description": "Title of `Toast`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Toast`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "alert",
              "warning",
              "success",
              "default",
              "info"
            ]
          },
          "table": {
            "type": {
              "summary": "\"alert\" | \"warning\" | \"success\" | \"default\" | \"info\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "message": {
          "name": "message",
          "description": "Message to be rendered inside `Toast`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "actions": {
          "name": "actions",
          "description": "Array for `ActionButton`**(maxLen: 2)**\n\n<pre className=\"DocPage-codeBlock\">\nAction: {\n    label: string,\n    onClick: (e: React.MouseEvent) => void\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Action[] | undefined"
          },
          "table": {
            "type": {
              "summary": "Action[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback for `Toast` close event",
          "type": {
            "required": false,
            "name": "function",
            "value": "(() => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "(() => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-toast-alert-toast--alert-toast": {
    "id": "components-toast-alert-toast--alert-toast",
    "kind": "Components/Toast/Alert Toast",
    "name": "Alert Toast",
    "story": "Alert Toast",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Toast\n    appearance=\"alert\"\n    title=\"Campaign failed to run\"\n    message=\"Try to run again. If it continues to fail, please raise a ticket.\"\n  />\n)"
      },
      "__id": "components-toast-alert-toast--alert-toast",
      "args": {},
      "argTypes": {
        "title": {
          "name": "title",
          "description": "Title of `Toast`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Toast`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "alert",
              "warning",
              "success",
              "default",
              "info"
            ]
          },
          "table": {
            "type": {
              "summary": "\"alert\" | \"warning\" | \"success\" | \"default\" | \"info\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "message": {
          "name": "message",
          "description": "Message to be rendered inside `Toast`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "actions": {
          "name": "actions",
          "description": "Array for `ActionButton`**(maxLen: 2)**\n\n<pre className=\"DocPage-codeBlock\">\nAction: {\n    label: string,\n    onClick: (e: React.MouseEvent) => void\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Action[] | undefined"
          },
          "table": {
            "type": {
              "summary": "Action[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback for `Toast` close event",
          "type": {
            "required": false,
            "name": "function",
            "value": "(() => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "(() => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-toast-default-toast--default-toast": {
    "id": "components-toast-default-toast--default-toast",
    "kind": "Components/Toast/Default Toast",
    "name": "Default Toast",
    "story": "Default Toast",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Toast\n    appearance=\"default\"\n    title=\"Assessment has been archived\"\n    message=\"You can find the assessment later under the 'Archive' tab.\"\n  />\n)"
      },
      "__id": "components-toast-default-toast--default-toast",
      "args": {},
      "argTypes": {
        "title": {
          "name": "title",
          "description": "Title of `Toast`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Toast`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "alert",
              "warning",
              "success",
              "default",
              "info"
            ]
          },
          "table": {
            "type": {
              "summary": "\"alert\" | \"warning\" | \"success\" | \"default\" | \"info\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "message": {
          "name": "message",
          "description": "Message to be rendered inside `Toast`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "actions": {
          "name": "actions",
          "description": "Array for `ActionButton`**(maxLen: 2)**\n\n<pre className=\"DocPage-codeBlock\">\nAction: {\n    label: string,\n    onClick: (e: React.MouseEvent) => void\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Action[] | undefined"
          },
          "table": {
            "type": {
              "summary": "Action[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback for `Toast` close event",
          "type": {
            "required": false,
            "name": "function",
            "value": "(() => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "(() => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-toast-info-toast--info-toast": {
    "id": "components-toast-info-toast--info-toast",
    "kind": "Components/Toast/Info Toast",
    "name": "Info Toast",
    "story": "Info Toast",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Toast\n    appearance=\"info\"\n    title=\"Sophie sent you a task\"\n    message=\"Schedule Appointment for 'Joy Lawson'. It's due on Aug 31.\"\n  />\n)"
      },
      "__id": "components-toast-info-toast--info-toast",
      "args": {},
      "argTypes": {
        "title": {
          "name": "title",
          "description": "Title of `Toast`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Toast`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "alert",
              "warning",
              "success",
              "default",
              "info"
            ]
          },
          "table": {
            "type": {
              "summary": "\"alert\" | \"warning\" | \"success\" | \"default\" | \"info\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "message": {
          "name": "message",
          "description": "Message to be rendered inside `Toast`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "actions": {
          "name": "actions",
          "description": "Array for `ActionButton`**(maxLen: 2)**\n\n<pre className=\"DocPage-codeBlock\">\nAction: {\n    label: string,\n    onClick: (e: React.MouseEvent) => void\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Action[] | undefined"
          },
          "table": {
            "type": {
              "summary": "Action[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback for `Toast` close event",
          "type": {
            "required": false,
            "name": "function",
            "value": "(() => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "(() => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-toast-success-toast--success-toast": {
    "id": "components-toast-success-toast--success-toast",
    "kind": "Components/Toast/Success Toast",
    "name": "Success Toast",
    "story": "Success Toast",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Toast\n    appearance=\"success\"\n    title=\"Outreach successfully sent\"\n    message=\"2,340 outreach messages have been successfully sent.\"\n  />\n)"
      },
      "__id": "components-toast-success-toast--success-toast",
      "args": {},
      "argTypes": {
        "title": {
          "name": "title",
          "description": "Title of `Toast`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Toast`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "alert",
              "warning",
              "success",
              "default",
              "info"
            ]
          },
          "table": {
            "type": {
              "summary": "\"alert\" | \"warning\" | \"success\" | \"default\" | \"info\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "message": {
          "name": "message",
          "description": "Message to be rendered inside `Toast`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "actions": {
          "name": "actions",
          "description": "Array for `ActionButton`**(maxLen: 2)**\n\n<pre className=\"DocPage-codeBlock\">\nAction: {\n    label: string,\n    onClick: (e: React.MouseEvent) => void\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Action[] | undefined"
          },
          "table": {
            "type": {
              "summary": "Action[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback for `Toast` close event",
          "type": {
            "required": false,
            "name": "function",
            "value": "(() => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "(() => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-toast-toast-with-actions--toast-with-actions": {
    "id": "components-toast-toast-with-actions--toast-with-actions",
    "kind": "Components/Toast/Toast With Actions",
    "name": "Toast With Actions",
    "story": "Toast With Actions",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Toast\n    appearance=\"success\"\n    title=\"Review requested successfully\"\n    message=\"Automatically redirecting to the next Prior Auth of Joy Lawson in 10s\"\n    actions={[\n      {\n        label: 'Need Prior Auth',\n        onClick: () => {},\n      },\n      {\n        label: 'Go To Worklist',\n        onClick: () => {},\n      },\n    ]}\n  />\n)"
      },
      "__id": "components-toast-toast-with-actions--toast-with-actions",
      "args": {},
      "argTypes": {
        "title": {
          "name": "title",
          "description": "Title of `Toast`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Toast`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "alert",
              "warning",
              "success",
              "default",
              "info"
            ]
          },
          "table": {
            "type": {
              "summary": "\"alert\" | \"warning\" | \"success\" | \"default\" | \"info\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "message": {
          "name": "message",
          "description": "Message to be rendered inside `Toast`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "actions": {
          "name": "actions",
          "description": "Array for `ActionButton`**(maxLen: 2)**\n\n<pre className=\"DocPage-codeBlock\">\nAction: {\n    label: string,\n    onClick: (e: React.MouseEvent) => void\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Action[] | undefined"
          },
          "table": {
            "type": {
              "summary": "Action[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback for `Toast` close event",
          "type": {
            "required": false,
            "name": "function",
            "value": "(() => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "(() => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-toast-toast-with-description--toast-with-description": {
    "id": "components-toast-toast-with-description--toast-with-description",
    "kind": "Components/Toast/Toast With Description",
    "name": "Toast With Description",
    "story": "Toast With Description",
    "parameters": {
      "storySource": {
        "source": "() => <Toast appearance=\"success\" title=\"Message sent successfully\" />"
      },
      "__id": "components-toast-toast-with-description--toast-with-description",
      "args": {},
      "argTypes": {
        "title": {
          "name": "title",
          "description": "Title of `Toast`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Toast`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "alert",
              "warning",
              "success",
              "default",
              "info"
            ]
          },
          "table": {
            "type": {
              "summary": "\"alert\" | \"warning\" | \"success\" | \"default\" | \"info\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "message": {
          "name": "message",
          "description": "Message to be rendered inside `Toast`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "actions": {
          "name": "actions",
          "description": "Array for `ActionButton`**(maxLen: 2)**\n\n<pre className=\"DocPage-codeBlock\">\nAction: {\n    label: string,\n    onClick: (e: React.MouseEvent) => void\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Action[] | undefined"
          },
          "table": {
            "type": {
              "summary": "Action[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback for `Toast` close event",
          "type": {
            "required": false,
            "name": "function",
            "value": "(() => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "(() => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-toast-variants-appearance--appearance": {
    "id": "components-toast-variants-appearance--appearance",
    "kind": "Components/Toast/Variants/Appearance",
    "name": "Appearance",
    "story": "Appearance",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const appearances: Appearance[] = ['default', 'info', 'success', 'alert', 'warning'];\n  return (\n    <div className=\"d-flex\">\n      {appearances.map((appear, ind) => {\n        return (\n          <div key={ind} className=\"mr-5 mb-8\">\n            <Toast appearance={appear} title={appear.charAt(0).toUpperCase() + appear.slice(1)} />\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-toast-variants-appearance--appearance",
      "args": {},
      "argTypes": {
        "title": {
          "name": "title",
          "description": "Title of `Toast`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Toast`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "alert",
              "warning",
              "success",
              "default",
              "info"
            ]
          },
          "table": {
            "type": {
              "summary": "\"alert\" | \"warning\" | \"success\" | \"default\" | \"info\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "message": {
          "name": "message",
          "description": "Message to be rendered inside `Toast`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "actions": {
          "name": "actions",
          "description": "Array for `ActionButton`**(maxLen: 2)**\n\n<pre className=\"DocPage-codeBlock\">\nAction: {\n    label: string,\n    onClick: (e: React.MouseEvent) => void\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Action[] | undefined"
          },
          "table": {
            "type": {
              "summary": "Action[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback for `Toast` close event",
          "type": {
            "required": false,
            "name": "function",
            "value": "(() => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "(() => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-toast-variants-toast-with-action--toast-with-action": {
    "id": "components-toast-variants-toast-with-action--toast-with-action",
    "kind": "Components/Toast/Variants/Toast With Action",
    "name": "Toast With Action",
    "story": "Toast With Action",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const appearances: Appearance[] = ['default', 'info', 'success', 'alert', 'warning'];\n\n  const message = text('message', 'Outreach was sent');\n\n  const actionLabel1 = text('actionLabel1', 'Try Again');\n  const actionLabel2 = text('actionLabel2', '');\n\n  const props: Record<string, any> = {\n    actions: [],\n  };\n\n  if (actionLabel1) {\n    props.actions.push({\n      label: actionLabel1,\n      onClick: () => action('action button click: 1')(),\n    });\n  }\n  if (actionLabel2) {\n    props.actions.push({\n      label: actionLabel2,\n      onClick: () => action('action button click: 2')(),\n    });\n  }\n\n  return (\n    <div className=\"d-flex\">\n      {appearances.map((appearance, ind) => {\n        return (\n          <div key={ind} className=\"mr-5 mb-8\">\n            <Toast\n              appearance={appearance}\n              title={appearance.charAt(0).toUpperCase() + appearance.slice(1)}\n              message={message}\n              onClose={action('on-close clicked')}\n              {...props}\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-toast-variants-toast-with-action--toast-with-action",
      "args": {},
      "argTypes": {
        "title": {
          "name": "title",
          "description": "Title of `Toast`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Toast`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "alert",
              "warning",
              "success",
              "default",
              "info"
            ]
          },
          "table": {
            "type": {
              "summary": "\"alert\" | \"warning\" | \"success\" | \"default\" | \"info\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "message": {
          "name": "message",
          "description": "Message to be rendered inside `Toast`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "actions": {
          "name": "actions",
          "description": "Array for `ActionButton`**(maxLen: 2)**\n\n<pre className=\"DocPage-codeBlock\">\nAction: {\n    label: string,\n    onClick: (e: React.MouseEvent) => void\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Action[] | undefined"
          },
          "table": {
            "type": {
              "summary": "Action[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback for `Toast` close event",
          "type": {
            "required": false,
            "name": "function",
            "value": "(() => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "(() => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-toast-variants-toast-with-description--toast-with-description": {
    "id": "components-toast-variants-toast-with-description--toast-with-description",
    "kind": "Components/Toast/Variants/Toast With Description",
    "name": "Toast With Description",
    "story": "Toast With Description",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const appearances: Appearance[] = ['default', 'info', 'success', 'alert', 'warning'];\n\n  const message = text('message', 'Outreach was sent');\n  return (\n    <div className=\"d-flex\">\n      {appearances.map((appearance, ind) => {\n        return (\n          <div key={ind} className=\"mr-5 mb-8\">\n            <Toast\n              appearance={appearance}\n              title={appearance.charAt(0).toUpperCase() + appearance.slice(1)}\n              message={message}\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-toast-variants-toast-with-description--toast-with-description",
      "args": {},
      "argTypes": {
        "title": {
          "name": "title",
          "description": "Title of `Toast`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Toast`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "alert",
              "warning",
              "success",
              "default",
              "info"
            ]
          },
          "table": {
            "type": {
              "summary": "\"alert\" | \"warning\" | \"success\" | \"default\" | \"info\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "message": {
          "name": "message",
          "description": "Message to be rendered inside `Toast`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "actions": {
          "name": "actions",
          "description": "Array for `ActionButton`**(maxLen: 2)**\n\n<pre className=\"DocPage-codeBlock\">\nAction: {\n    label: string,\n    onClick: (e: React.MouseEvent) => void\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Action[] | undefined"
          },
          "table": {
            "type": {
              "summary": "Action[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback for `Toast` close event",
          "type": {
            "required": false,
            "name": "function",
            "value": "(() => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "(() => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-toast-warning-toast--warning-toast": {
    "id": "components-toast-warning-toast--warning-toast",
    "kind": "Components/Toast/Warning Toast",
    "name": "Warning Toast",
    "story": "Warning Toast",
    "parameters": {
      "storySource": {
        "source": "() => (\n  <Toast\n    appearance=\"warning\"\n    title=\"Chat response is delayed\"\n    message=\"'Memorial Clinic' has been running for more that 2 hours.\"\n  />\n)"
      },
      "__id": "components-toast-warning-toast--warning-toast",
      "args": {},
      "argTypes": {
        "title": {
          "name": "title",
          "description": "Title of `Toast`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "appearance": {
          "name": "appearance",
          "description": "Color of `Toast`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "alert",
              "warning",
              "success",
              "default",
              "info"
            ]
          },
          "table": {
            "type": {
              "summary": "\"alert\" | \"warning\" | \"success\" | \"default\" | \"info\""
            },
            "defaultValue": {
              "summary": "\"default\""
            }
          }
        },
        "message": {
          "name": "message",
          "description": "Message to be rendered inside `Toast`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "actions": {
          "name": "actions",
          "description": "Array for `ActionButton`**(maxLen: 2)**\n\n<pre className=\"DocPage-codeBlock\">\nAction: {\n    label: string,\n    onClick: (e: React.MouseEvent) => void\n}\n</pre>",
          "type": {
            "required": false,
            "name": "other",
            "value": "Action[] | undefined"
          },
          "table": {
            "type": {
              "summary": "Action[] | undefined"
            },
            "defaultValue": null
          }
        },
        "onClose": {
          "name": "onClose",
          "description": "Callback for `Toast` close event",
          "type": {
            "required": false,
            "name": "function",
            "value": "(() => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "(() => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-tooltip-all--all": {
    "id": "components-tooltip-all--all",
    "kind": "Components/Tooltip/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const position = select(\n    'position',\n    ['top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end', 'left', 'right'],\n    'bottom'\n  );\n  const appendToBody = boolean('appendToBody', true);\n  const hoverable = boolean('hoverable', false);\n  const tooltip = text('tooltip', 'An awesome tooltip');\n\n  const options = {\n    tooltip,\n    hoverable,\n    position,\n    appendToBody,\n  };\n\n  return (\n    <div style={{ marginTop: '30px', marginLeft: '150px' }}>\n      <Tooltip {...options}>\n        <Button>{position}</Button>\n      </Tooltip>\n    </div>\n  );\n}"
      },
      "__id": "components-tooltip-all--all",
      "args": {},
      "argTypes": {
        "tooltip": {
          "name": "tooltip",
          "description": "Text to be rendered in `Tooltip`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Trigger for `Tooltip`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>"
          },
          "table": {
            "type": {
              "summary": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>"
            },
            "defaultValue": null
          }
        },
        "position": {
          "name": "position",
          "description": "Position to place the `trigger`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "bottom",
              "top",
              "top-start",
              "top-end",
              "bottom-start",
              "bottom-end",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"top\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "\"bottom\""
            }
          }
        },
        "appendToBody": {
          "name": "appendToBody",
          "description": "Appends `trigger` wrapper inside body",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "hoverable": {
          "name": "hoverable",
          "description": "Holds `Popover` on hover\n\n**Use only if you are using `on = 'hover'`**",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "triggerClass": {
          "name": "triggerClass",
          "description": "Class to be added to PopperWrapper trigger",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "boundaryElement": {
          "name": "boundaryElement",
          "description": "BoundaryElement for `Popover`",
          "type": {
            "required": true,
            "name": "other",
            "value": "Element | RefObject<HTMLElement>"
          },
          "table": {
            "type": {
              "summary": "Element | RefObject<HTMLElement>"
            },
            "defaultValue": {
              "summary": "object"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-tooltip-variants-position--position": {
    "id": "components-tooltip-variants-position--position",
    "kind": "Components/Tooltip/Variants/Position",
    "name": "Position",
    "story": "Position",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const positions: TooltipProps['position'][] = [\n    'top',\n    'top-start',\n    'top-end',\n    'bottom',\n    'bottom-start',\n    'bottom-end',\n    'left',\n    'right',\n  ];\n  const appendToBody = boolean('appendToBody', false);\n  const tooltip = text('tooltip', 'An awesome tooltip');\n\n  const options = {\n    tooltip,\n    appendToBody,\n  };\n\n  return (\n    <div className=\"pb-6 Row\">\n      {positions.map((pos, ind) => {\n        return (\n          <div key={ind} className=\"mr-13 mt-8\">\n            <Tooltip position={pos} {...options}>\n              <div\n                ref={(buttonRef) => {\n                  const event = new MouseEvent('mouseover', {\n                    view: window,\n                    bubbles: true,\n                    cancelable: true,\n                  });\n                  if (buttonRef) buttonRef.dispatchEvent(event);\n                }}\n              >\n                <Button>{pos}</Button>\n              </div>\n            </Tooltip>\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "components-tooltip-variants-position--position",
      "args": {},
      "argTypes": {
        "tooltip": {
          "name": "tooltip",
          "description": "Text to be rendered in `Tooltip`",
          "type": {
            "required": true,
            "name": "string"
          },
          "table": {
            "type": {
              "summary": "string"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Trigger for `Tooltip`",
          "type": {
            "required": true,
            "name": "other",
            "value": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>"
          },
          "table": {
            "type": {
              "summary": "ReactElement<any, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)>"
            },
            "defaultValue": null
          }
        },
        "position": {
          "name": "position",
          "description": "Position to place the `trigger`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "bottom",
              "top",
              "top-start",
              "top-end",
              "bottom-start",
              "bottom-end",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"top\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "\"bottom\""
            }
          }
        },
        "appendToBody": {
          "name": "appendToBody",
          "description": "Appends `trigger` wrapper inside body",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "hoverable": {
          "name": "hoverable",
          "description": "Holds `Popover` on hover\n\n**Use only if you are using `on = 'hover'`**",
          "type": {
            "required": true,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "triggerClass": {
          "name": "triggerClass",
          "description": "Class to be added to PopperWrapper trigger",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "boundaryElement": {
          "name": "boundaryElement",
          "description": "BoundaryElement for `Popover`",
          "type": {
            "required": true,
            "name": "other",
            "value": "Element | RefObject<HTMLElement>"
          },
          "table": {
            "type": {
              "summary": "Element | RefObject<HTMLElement>"
            },
            "defaultValue": {
              "summary": "object"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-verificationcodeinput-all--all": {
    "id": "components-verificationcodeinput-all--all",
    "kind": "Components/VerificationCodeInput/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const inputType = select('type', ['text', 'password', 'number'], 'number');\n\n  const fields = select('fields', [4, 6], undefined);\n\n  const value = text('values', '6543');\n\n  const placeholder = text('placeholder', '-');\n\n  const disabled = boolean('disabled', false);\n\n  const autoFocus = boolean('autoFocus', true);\n\n  const readOnly = boolean('readOnly', false);\n\n  const error = boolean('error', false);\n\n  const pattern = text('pattern', '');\n\n  return (\n    <>\n      <Label withInput={true}>Verification code</Label>\n      <VerificationCodeInput\n        fields={fields}\n        type={inputType}\n        value={value}\n        disabled={disabled}\n        readOnly={readOnly}\n        onComplete={action('on-complete')}\n        onFocus={action('on-focus')}\n        onBlur={action('on-blur')}\n        placeholder={placeholder}\n        error={error}\n        pattern={pattern}\n        autoFocus={autoFocus}\n      />\n    </>\n  );\n}"
      },
      "__id": "components-verificationcodeinput-all--all",
      "args": {},
      "argTypes": {
        "fields": {
          "name": "fields",
          "description": "Number of input fields to be used to compose code input.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of values to be entered.",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "number",
              "text",
              "password"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"number\" | \"text\" | \"password\""
            },
            "defaultValue": null
          }
        },
        "onComplete": {
          "name": "onComplete",
          "description": "Callback triggered after all values are entered.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "pattern": {
          "name": "pattern",
          "description": "The pattern attribute, when specified, is a regular expression that the input's value\nmust match in order for the value to pass constraint validation.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when input is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "readOnly": {
          "name": "readOnly",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "required": {
          "name": "required",
          "description": "Shows the user that this field id required",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Input` (Used in case of controlled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Input` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Input` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Input` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "minimum width of `Input` component\n\n**No default value for `type='number'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-verificationcodeinput-variants-disabled--disabled": {
    "id": "components-verificationcodeinput-variants-disabled--disabled",
    "kind": "Components/VerificationCodeInput/Variants/Disabled",
    "name": "Disabled",
    "story": "Disabled",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <>\n      <Label withInput={true}>Verification code</Label>\n      <VerificationCodeInput disabled={true} value=\"1234\" />\n    </>\n  );\n}"
      },
      "__id": "components-verificationcodeinput-variants-disabled--disabled",
      "args": {},
      "argTypes": {
        "fields": {
          "name": "fields",
          "description": "Number of input fields to be used to compose code input.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of values to be entered.",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "number",
              "text",
              "password"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"number\" | \"text\" | \"password\""
            },
            "defaultValue": null
          }
        },
        "onComplete": {
          "name": "onComplete",
          "description": "Callback triggered after all values are entered.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "pattern": {
          "name": "pattern",
          "description": "The pattern attribute, when specified, is a regular expression that the input's value\nmust match in order for the value to pass constraint validation.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when input is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "readOnly": {
          "name": "readOnly",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "required": {
          "name": "required",
          "description": "Shows the user that this field id required",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Input` (Used in case of controlled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Input` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Input` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Input` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "minimum width of `Input` component\n\n**No default value for `type='number'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-verificationcodeinput-variants-error--error": {
    "id": "components-verificationcodeinput-variants-error--error",
    "kind": "Components/VerificationCodeInput/Variants/Error",
    "name": "Error",
    "story": "Error",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <>\n      <Label withInput={true}>Verification code</Label>\n      <VerificationCodeInput error={true} />\n    </>\n  );\n}"
      },
      "__id": "components-verificationcodeinput-variants-error--error",
      "args": {},
      "argTypes": {
        "fields": {
          "name": "fields",
          "description": "Number of input fields to be used to compose code input.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of values to be entered.",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "number",
              "text",
              "password"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"number\" | \"text\" | \"password\""
            },
            "defaultValue": null
          }
        },
        "onComplete": {
          "name": "onComplete",
          "description": "Callback triggered after all values are entered.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "pattern": {
          "name": "pattern",
          "description": "The pattern attribute, when specified, is a regular expression that the input's value\nmust match in order for the value to pass constraint validation.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when input is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "readOnly": {
          "name": "readOnly",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "required": {
          "name": "required",
          "description": "Shows the user that this field id required",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Input` (Used in case of controlled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Input` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Input` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Input` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "minimum width of `Input` component\n\n**No default value for `type='number'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-verificationcodeinput-with-four-fields--with-four-fields": {
    "id": "components-verificationcodeinput-with-four-fields--with-four-fields",
    "kind": "Components/VerificationCodeInput/With Four Fields",
    "name": "With Four Fields",
    "story": "With Four Fields",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <>\n      <Label withInput={true}>Verification code</Label>\n      <VerificationCodeInput />\n    </>\n  );\n}"
      },
      "__id": "components-verificationcodeinput-with-four-fields--with-four-fields",
      "args": {},
      "argTypes": {
        "fields": {
          "name": "fields",
          "description": "Number of input fields to be used to compose code input.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of values to be entered.",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "number",
              "text",
              "password"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"number\" | \"text\" | \"password\""
            },
            "defaultValue": null
          }
        },
        "onComplete": {
          "name": "onComplete",
          "description": "Callback triggered after all values are entered.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "pattern": {
          "name": "pattern",
          "description": "The pattern attribute, when specified, is a regular expression that the input's value\nmust match in order for the value to pass constraint validation.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when input is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "readOnly": {
          "name": "readOnly",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "required": {
          "name": "required",
          "description": "Shows the user that this field id required",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Input` (Used in case of controlled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Input` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Input` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Input` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "minimum width of `Input` component\n\n**No default value for `type='number'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-verificationcodeinput-with-six-fields--with-six-fields": {
    "id": "components-verificationcodeinput-with-six-fields--with-six-fields",
    "kind": "Components/VerificationCodeInput/With Six Fields",
    "name": "With Six Fields",
    "story": "With Six Fields",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <>\n      <Label withInput={true}>Verification code</Label>\n      <VerificationCodeInput fields={6} />\n    </>\n  );\n}"
      },
      "__id": "components-verificationcodeinput-with-six-fields--with-six-fields",
      "args": {},
      "argTypes": {
        "fields": {
          "name": "fields",
          "description": "Number of input fields to be used to compose code input.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of values to be entered.",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "number",
              "text",
              "password"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"number\" | \"text\" | \"password\""
            },
            "defaultValue": null
          }
        },
        "onComplete": {
          "name": "onComplete",
          "description": "Callback triggered after all values are entered.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "pattern": {
          "name": "pattern",
          "description": "The pattern attribute, when specified, is a regular expression that the input's value\nmust match in order for the value to pass constraint validation.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when input is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "readOnly": {
          "name": "readOnly",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "required": {
          "name": "required",
          "description": "Shows the user that this field id required",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Input` (Used in case of controlled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Input` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Input` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Input` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "minimum width of `Input` component\n\n**No default value for `type='number'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-verticalnav-all--all": {
    "id": "components-verticalnav-all--all",
    "kind": "Components/VerticalNav/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const autoCollapse = boolean('autoCollapse', true);\n\n  const data = [\n    {\n      name: 'patient_360',\n      label: 'Patient 360',\n      icon: 'assignment_ind',\n      link: '/patient360',\n    },\n    {\n      name: 'care_management',\n      label: 'Care Management and Resources',\n      icon: 'forum',\n      subMenu: [\n        {\n          name: 'care_management.timeline',\n          label: 'Timeline',\n        },\n        {\n          name: 'care_management.care_plans',\n          label: 'Care Plans',\n        },\n      ],\n    },\n    {\n      name: 'episodes',\n      label: 'Episodes',\n      disabled: true,\n      icon: 'airline_seat_flat_angled',\n    },\n    {\n      name: 'risk',\n      label: 'Risk',\n      icon: 'favorite',\n      subMenu: [\n        {\n          name: 'risk.timeline',\n          label: 'Timeline',\n        },\n        {\n          name: 'risk.care_plans',\n          label: 'Care Plans',\n        },\n      ],\n    },\n    {\n      name: 'claims',\n      label: 'Claims',\n      icon: 'receipt',\n    },\n    {\n      name: 'profile',\n      label: 'Profile',\n      icon: 'account_circle',\n    },\n    {\n      name: 'manula_entry',\n      label: 'Manual Entry',\n      icon: 'border_color',\n    },\n    {\n      name: 'documents',\n      label: 'Documents',\n      icon: 'assignment',\n    },\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'care_management.timeline',\n  });\n\n  const onClickHandler = (menu: Menu) => {\n    action(`menu-clicked: ${JSON.stringify(menu)}`)();\n\n    setActive(menu);\n  };\n\n  return (\n    <div style={{ height: 'calc(80vh)', background: 'var(--secondary-lightest)' }}>\n      <VerticalNav menus={data} expanded={true} autoCollapse={autoCollapse} active={active} onClick={onClickHandler} />\n    </div>\n  );\n}"
      },
      "__id": "components-verticalnav-all--all",
      "args": {},
      "argTypes": {
        "menus": {
          "name": "menus",
          "description": "List of menus to be rendered\n\n<pre className=\"DocPage-codeBlock\">\nMenu: {\n    name: string;\n    label: string;\n    link?: string;\n    group?: string;\n    disabled?: boolean;\n    count?: number;\n    subMenu?: Menu[];\n    icon?: string;\n};\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | Menu name | |\n| label | Menu display name | |\n| link | Menu link | |\n| disabled | Set menu as disabled | false |\n| count | Value of Count (Max value 99) | |\n| group | Section of menu | |\n| subMenu | Menu submenus of type `Menu[]` | |\n| icon | Menu icon | |",
          "type": {
            "required": true,
            "name": "other",
            "value": "Menu[]"
          },
          "table": {
            "type": {
              "summary": "Menu[]"
            },
            "defaultValue": null
          }
        },
        "active": {
          "name": "active",
          "description": "Sets menu as active",
          "type": {
            "required": false,
            "name": "other",
            "value": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
          },
          "table": {
            "type": {
              "summary": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Callback to be called on Menu click**(only if it's not disabled)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((menu: Menu) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((menu: Menu) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "rounded": {
          "name": "rounded",
          "description": "Makes active menu rounded **(applicable only for type: `vertical` and `expanded` menu)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Set expanded state of `Navigation`**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "autoCollapse": {
          "name": "autoCollapse",
          "description": "Only one SubMenu visible at a time**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-verticalnav-child-items-with-icons--child-items-with-icons": {
    "id": "components-verticalnav-child-items-with-icons--child-items-with-icons",
    "kind": "Components/VerticalNav/Child Items With Icons",
    "name": "Child Items With Icons",
    "story": "Child Items With Icons",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const data = [\n    {\n      name: 'clinical_data',\n      label: 'Clinical Data',\n      icon: 'assignment_ind',\n    },\n    {\n      name: 'care_management',\n      label: 'Care Management',\n      icon: 'forum',\n      subMenu: [\n        {\n          name: 'care_management.timeline',\n          label: 'Timeline',\n          icon: 'people',\n        },\n        {\n          name: 'care_management.care_protocol',\n          label: 'Care Protocol',\n          icon: 'fact_check',\n        },\n        {\n          name: 'care_management.assessments',\n          label: 'Assessments',\n          icon: 'assessment',\n        },\n        {\n          name: 'care_management.tasks',\n          label: 'Tasks',\n          icon: 'alarm',\n        },\n        {\n          name: 'care_management.goals',\n          label: 'Goals',\n          icon: 'golf_course',\n        },\n        {\n          name: 'care_management.care_plans',\n          label: 'Care Plans',\n          icon: 'accessibility_new',\n        },\n        {\n          name: 'care_management.medical_adherence',\n          label: 'Medical Adherence',\n          icon: 'local_pharmacy',\n        },\n        {\n          name: 'care_management.community_resources',\n          label: 'Community Resources',\n          icon: 'businesses',\n        },\n      ],\n    },\n    {\n      name: 'episodes',\n      label: 'Episodes',\n      icon: 'airline_seat_flat_angled',\n    },\n    {\n      name: 'risk',\n      label: 'Risk',\n      icon: 'favorite',\n    },\n    {\n      name: 'preventive_health',\n      label: 'Preventive Health',\n      icon: 'beenhere',\n    },\n    {\n      name: 'profile',\n      label: 'Profile',\n      icon: 'receipt',\n    },\n    {\n      name: 'claims',\n      label: 'Claims',\n      icon: 'account_circle',\n    },\n    {\n      name: 'manual_entry',\n      label: 'Manual Entry',\n      icon: 'edit',\n    },\n    {\n      name: 'patient_notes',\n      label: 'Patient Notes',\n      icon: 'note_add',\n    },\n    {\n      name: 'documents',\n      label: 'Documents',\n      icon: 'assignment',\n    },\n  ];\n\n  const [expanded, setExpanded] = React.useState(false);\n  const [active, setActive] = React.useState({\n    name: 'care_management.timeline',\n  });\n\n  return (\n    <div style={{ height: '100vh', background: 'var(--secondary-lightest)' }}>\n      <Collapsible expanded={expanded} onToggle={setExpanded}>\n        <VerticalNav menus={data} active={active} expanded={expanded} onClick={setActive} />\n      </Collapsible>\n    </div>\n  );\n}"
      },
      "__id": "components-verticalnav-child-items-with-icons--child-items-with-icons",
      "args": {},
      "argTypes": {
        "menus": {
          "name": "menus",
          "description": "List of menus to be rendered\n\n<pre className=\"DocPage-codeBlock\">\nMenu: {\n    name: string;\n    label: string;\n    link?: string;\n    group?: string;\n    disabled?: boolean;\n    count?: number;\n    subMenu?: Menu[];\n    icon?: string;\n};\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | Menu name | |\n| label | Menu display name | |\n| link | Menu link | |\n| disabled | Set menu as disabled | false |\n| count | Value of Count (Max value 99) | |\n| group | Section of menu | |\n| subMenu | Menu submenus of type `Menu[]` | |\n| icon | Menu icon | |",
          "type": {
            "required": true,
            "name": "other",
            "value": "Menu[]"
          },
          "table": {
            "type": {
              "summary": "Menu[]"
            },
            "defaultValue": null
          }
        },
        "active": {
          "name": "active",
          "description": "Sets menu as active",
          "type": {
            "required": false,
            "name": "other",
            "value": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
          },
          "table": {
            "type": {
              "summary": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Callback to be called on Menu click**(only if it's not disabled)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((menu: Menu) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((menu: Menu) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "rounded": {
          "name": "rounded",
          "description": "Makes active menu rounded **(applicable only for type: `vertical` and `expanded` menu)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Set expanded state of `Navigation`**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "autoCollapse": {
          "name": "autoCollapse",
          "description": "Only one SubMenu visible at a time**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-verticalnav-cutsom-vertical-navigation--cutsom-vertical-navigation": {
    "id": "components-verticalnav-cutsom-vertical-navigation--cutsom-vertical-navigation",
    "kind": "Components/VerticalNav/Cutsom Vertical Navigation",
    "name": "Cutsom Vertical Navigation",
    "story": "Cutsom Vertical Navigation",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const data = [\n    {\n      name: 'to_dos',\n      label: 'To-dos',\n      icon: 'check_circle_outline',\n      subMenu: [\n        {\n          name: 'to_dos.due',\n          label: 'Due',\n          count: 10,\n        },\n        {\n          name: 'to_dos.completed',\n          label: 'Completed',\n          count: 7,\n        },\n      ],\n    },\n    {\n      name: 'received',\n      label: 'Received',\n      icon: 'call_received',\n    },\n    {\n      name: 'sent',\n      label: 'Sent',\n      icon: 'call_made',\n    },\n  ];\n\n  const [expanded, setExpanded] = React.useState(true);\n  const [active, setActive] = React.useState({\n    name: 'data_exchange.reports',\n  });\n\n  return (\n    <div style={{ height: '90vh', background: 'var(--secondary-lightest)' }}>\n      <Collapsible expanded={expanded} onToggle={setExpanded} hoverable={false}>\n        <>\n          <VerticalNav menus={data} expanded={expanded} active={active} onClick={setActive} />\n          {expanded && (\n            <div className=\"mt-5 d-flex justify-content-center\" style={{ borderTop: 'var(--border)' }}>\n              <DatePicker date={new Date()} size=\"small\" />\n            </div>\n          )}\n        </>\n      </Collapsible>\n    </div>\n  );\n}"
      },
      "__id": "components-verticalnav-cutsom-vertical-navigation--cutsom-vertical-navigation",
      "args": {},
      "argTypes": {
        "menus": {
          "name": "menus",
          "description": "List of menus to be rendered\n\n<pre className=\"DocPage-codeBlock\">\nMenu: {\n    name: string;\n    label: string;\n    link?: string;\n    group?: string;\n    disabled?: boolean;\n    count?: number;\n    subMenu?: Menu[];\n    icon?: string;\n};\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | Menu name | |\n| label | Menu display name | |\n| link | Menu link | |\n| disabled | Set menu as disabled | false |\n| count | Value of Count (Max value 99) | |\n| group | Section of menu | |\n| subMenu | Menu submenus of type `Menu[]` | |\n| icon | Menu icon | |",
          "type": {
            "required": true,
            "name": "other",
            "value": "Menu[]"
          },
          "table": {
            "type": {
              "summary": "Menu[]"
            },
            "defaultValue": null
          }
        },
        "active": {
          "name": "active",
          "description": "Sets menu as active",
          "type": {
            "required": false,
            "name": "other",
            "value": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
          },
          "table": {
            "type": {
              "summary": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Callback to be called on Menu click**(only if it's not disabled)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((menu: Menu) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((menu: Menu) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "rounded": {
          "name": "rounded",
          "description": "Makes active menu rounded **(applicable only for type: `vertical` and `expanded` menu)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Set expanded state of `Navigation`**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "autoCollapse": {
          "name": "autoCollapse",
          "description": "Only one SubMenu visible at a time**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-verticalnav-flat-edged-vertical-navigation--flat-edged-vertical-navigation": {
    "id": "components-verticalnav-flat-edged-vertical-navigation--flat-edged-vertical-navigation",
    "kind": "Components/VerticalNav/Flat Edged Vertical Navigation",
    "name": "Flat Edged Vertical Navigation",
    "story": "Flat Edged Vertical Navigation",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const data = [\n    {\n      name: 'home',\n      label: 'Home',\n      icon: 'home',\n    },\n    {\n      name: 'profile',\n      label: 'Profile',\n      icon: 'account_circle',\n      subMenu: [\n        {\n          name: 'profile.personal',\n          label: 'Personal',\n        },\n        {\n          name: 'profile.are_team',\n          label: 'Care Team',\n        },\n        {\n          name: 'profile.goals',\n          label: 'Goals',\n        },\n        {\n          name: 'profile.care_plans',\n          label: 'Care Plans',\n        },\n      ],\n    },\n    {\n      name: 'medical_records',\n      label: 'Medical Records',\n      icon: 'local_hospital',\n      subMenu: [\n        {\n          name: 'medical_records.allergies',\n          label: 'Allergies',\n        },\n        {\n          name: 'medical_records.conditions',\n          label: 'Conditions',\n        },\n        {\n          name: 'medical_records.immunizations',\n          label: 'Immunizations',\n        },\n        {\n          name: 'medical_records.lab_results',\n          label: 'Lab Results',\n        },\n        {\n          name: 'medical_records.medications',\n          label: 'Medications',\n        },\n        {\n          name: 'medical_records.procedures',\n          label: 'Procedures',\n        },\n        {\n          name: 'medical_records.vitals',\n          label: 'Vitals',\n        },\n        {\n          name: 'medical_records.smoking_history',\n          label: 'medical_records.Smoking History',\n        },\n        {\n          name: 'devices',\n          label: 'Devices',\n        },\n      ],\n    },\n    {\n      name: 'formulary',\n      label: 'Formulary',\n      icon: 'list',\n    },\n    {\n      name: 'encounters',\n      label: 'Encounters',\n      icon: 'directions_walk',\n    },\n    {\n      name: 'claims',\n      label: 'Claims',\n      icon: 'receipt',\n    },\n    {\n      name: 'documents',\n      label: 'Documents',\n      icon: 'assignment',\n    },\n    {\n      name: 'find_care',\n      label: 'Find Care',\n      icon: 'search',\n      subMenu: [\n        {\n          name: 'find_care.providers',\n          label: 'Providers',\n        },\n        {\n          name: 'find_care.pharmacies',\n          label: 'Pharmacies',\n        },\n      ],\n    },\n    {\n      name: 'connected_applications',\n      label: 'Connected Applications',\n      icon: 'extension',\n    },\n  ];\n\n  const [expanded, setExpanded] = React.useState(true);\n  const [active, setActive] = React.useState({\n    name: 'medical_records.allergies',\n  });\n\n  const onClickHandler = (menu: Menu) => {\n    setActive(menu);\n  };\n\n  return (\n    <div style={{ height: '100vh', background: 'var(--secondary-lightest)' }}>\n      <Collapsible expanded={expanded} onToggle={setExpanded} hoverable={false}>\n        <VerticalNav menus={data} expanded={expanded} active={active} onClick={onClickHandler} />\n      </Collapsible>\n    </div>\n  );\n}"
      },
      "__id": "components-verticalnav-flat-edged-vertical-navigation--flat-edged-vertical-navigation",
      "args": {},
      "argTypes": {
        "menus": {
          "name": "menus",
          "description": "List of menus to be rendered\n\n<pre className=\"DocPage-codeBlock\">\nMenu: {\n    name: string;\n    label: string;\n    link?: string;\n    group?: string;\n    disabled?: boolean;\n    count?: number;\n    subMenu?: Menu[];\n    icon?: string;\n};\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | Menu name | |\n| label | Menu display name | |\n| link | Menu link | |\n| disabled | Set menu as disabled | false |\n| count | Value of Count (Max value 99) | |\n| group | Section of menu | |\n| subMenu | Menu submenus of type `Menu[]` | |\n| icon | Menu icon | |",
          "type": {
            "required": true,
            "name": "other",
            "value": "Menu[]"
          },
          "table": {
            "type": {
              "summary": "Menu[]"
            },
            "defaultValue": null
          }
        },
        "active": {
          "name": "active",
          "description": "Sets menu as active",
          "type": {
            "required": false,
            "name": "other",
            "value": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
          },
          "table": {
            "type": {
              "summary": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Callback to be called on Menu click**(only if it's not disabled)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((menu: Menu) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((menu: Menu) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "rounded": {
          "name": "rounded",
          "description": "Makes active menu rounded **(applicable only for type: `vertical` and `expanded` menu)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Set expanded state of `Navigation`**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "autoCollapse": {
          "name": "autoCollapse",
          "description": "Only one SubMenu visible at a time**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-verticalnav-grouping--grouping": {
    "id": "components-verticalnav-grouping--grouping",
    "kind": "Components/VerticalNav/Grouping",
    "name": "Grouping",
    "story": "Grouping",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const data = [\n    {\n      name: 'customer_information',\n      label: 'Customer Information',\n      group: 'General',\n    },\n    {\n      name: 'organizational_structure',\n      label: 'Organizational Structure',\n      group: 'General',\n    },\n    {\n      name: 'contacts',\n      label: 'Contacts',\n      group: 'General',\n    },\n    {\n      name: 'empi',\n      label: 'EMPI',\n      group: 'Platform',\n    },\n    {\n      name: 'data_exchange',\n      label: 'Data Exchange',\n      group: 'Platform',\n      subMenu: [\n        {\n          name: 'data_exchange.reports',\n          label: 'Reports',\n        },\n        {\n          name: 'data_exchange.destinations',\n          label: 'Destinations',\n        },\n        {\n          name: 'data_exchange.validation',\n          label: 'Validation',\n        },\n      ],\n    },\n    {\n      name: 'import_export_settings',\n      label: 'Import/Export Settings',\n      group: 'Platform',\n    },\n    {\n      name: 'pipelines',\n      label: 'Pipelines',\n      group: 'Apps',\n    },\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'data_exchange.reports',\n  });\n\n  return (\n    <div style={{ height: '90vh', background: 'var(--secondary-lightest)' }}>\n      <VerticalNav menus={data} expanded={true} active={active} onClick={setActive} />\n    </div>\n  );\n}"
      },
      "__id": "components-verticalnav-grouping--grouping",
      "args": {},
      "argTypes": {
        "menus": {
          "name": "menus",
          "description": "List of menus to be rendered\n\n<pre className=\"DocPage-codeBlock\">\nMenu: {\n    name: string;\n    label: string;\n    link?: string;\n    group?: string;\n    disabled?: boolean;\n    count?: number;\n    subMenu?: Menu[];\n    icon?: string;\n};\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | Menu name | |\n| label | Menu display name | |\n| link | Menu link | |\n| disabled | Set menu as disabled | false |\n| count | Value of Count (Max value 99) | |\n| group | Section of menu | |\n| subMenu | Menu submenus of type `Menu[]` | |\n| icon | Menu icon | |",
          "type": {
            "required": true,
            "name": "other",
            "value": "Menu[]"
          },
          "table": {
            "type": {
              "summary": "Menu[]"
            },
            "defaultValue": null
          }
        },
        "active": {
          "name": "active",
          "description": "Sets menu as active",
          "type": {
            "required": false,
            "name": "other",
            "value": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
          },
          "table": {
            "type": {
              "summary": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Callback to be called on Menu click**(only if it's not disabled)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((menu: Menu) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((menu: Menu) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "rounded": {
          "name": "rounded",
          "description": "Makes active menu rounded **(applicable only for type: `vertical` and `expanded` menu)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Set expanded state of `Navigation`**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "autoCollapse": {
          "name": "autoCollapse",
          "description": "Only one SubMenu visible at a time**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-verticalnav-hoverable-vertical-navigation--hoverable-vertical-navigation": {
    "id": "components-verticalnav-hoverable-vertical-navigation--hoverable-vertical-navigation",
    "kind": "Components/VerticalNav/Hoverable Vertical Navigation",
    "name": "Hoverable Vertical Navigation",
    "story": "Hoverable Vertical Navigation",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const data = [\n    {\n      name: 'clinical_data',\n      label: 'Clinical Data',\n      icon: 'assignment_ind',\n    },\n    {\n      name: 'care_management',\n      label: 'Care Management',\n      icon: 'forum',\n      subMenu: [\n        {\n          name: 'care_management.timeline',\n          label: 'Timeline',\n          icon: 'people',\n        },\n        {\n          name: 'care_management.care_protocol',\n          label: 'Care Protocol',\n          icon: 'fact_check',\n        },\n        {\n          name: 'care_management.assessments',\n          label: 'Assessments',\n          icon: 'assessment',\n        },\n        {\n          name: 'care_management.tasks',\n          label: 'Tasks',\n          icon: 'alarm',\n        },\n        {\n          name: 'care_management.goals',\n          label: 'Goals',\n          icon: 'golf_course',\n        },\n        {\n          name: 'care_management.care_plans',\n          label: 'Care Plans',\n          icon: 'accessibility_new',\n        },\n        {\n          name: 'care_management.medical_adherence',\n          label: 'Medical Adherence',\n          icon: 'local_pharmacy',\n        },\n        {\n          name: 'care_management.community_resources',\n          label: 'Community Resources',\n          icon: 'businesses',\n        },\n      ],\n    },\n    {\n      name: 'episodes',\n      label: 'Episodes',\n      icon: 'airline_seat_flat_angled',\n    },\n    {\n      name: 'risk',\n      label: 'Risk',\n      icon: 'favorite',\n    },\n    {\n      name: 'preventive_health',\n      label: 'Preventive Health',\n      icon: 'beenhere',\n    },\n    {\n      name: 'profile',\n      label: 'Profile',\n      icon: 'receipt',\n    },\n    {\n      name: 'claims',\n      label: 'Claims',\n      icon: 'account_circle',\n    },\n    {\n      name: 'manual_entry',\n      label: 'Manual Entry',\n      icon: 'edit',\n    },\n    {\n      name: 'patient_notes',\n      label: 'Patient Notes',\n      icon: 'note_add',\n    },\n    {\n      name: 'documents',\n      label: 'Documents',\n      icon: 'assignment',\n    },\n  ];\n\n  const [expanded, setExpanded] = React.useState(false);\n  const [active, setActive] = React.useState({\n    name: 'care_management.timeline',\n  });\n\n  return (\n    <div className=\"d-flex\" style={{ height: '100vh', background: 'var(--secondary-lightest)' }}>\n      <Collapsible expanded={expanded} onToggle={setExpanded}>\n        <VerticalNav menus={data} active={active} expanded={expanded} onClick={setActive} />\n      </Collapsible>\n      <div className=\"ml-6 d-flex flex-column\">\n        <Heading className=\"my-5\">Assessments</Heading>\n        <Card className=\"h-100 overflow-hidden\">\n          <Table\n            data={tableData}\n            schema={schema}\n            withHeader={true}\n            withCheckbox={true}\n            headerOptions={{\n              withSearch: true,\n            }}\n            onSearch={(currData, searchTerm) => {\n              return currData.filter(\n                (d) =>\n                  d.firstName.toLowerCase().match(searchTerm.toLowerCase()) ||\n                  d.lastName.toLowerCase().match(searchTerm.toLowerCase())\n              );\n            }}\n            withPagination={true}\n            pageSize={5}\n          />\n        </Card>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-verticalnav-hoverable-vertical-navigation--hoverable-vertical-navigation",
      "args": {},
      "argTypes": {
        "menus": {
          "name": "menus",
          "description": "List of menus to be rendered\n\n<pre className=\"DocPage-codeBlock\">\nMenu: {\n    name: string;\n    label: string;\n    link?: string;\n    group?: string;\n    disabled?: boolean;\n    count?: number;\n    subMenu?: Menu[];\n    icon?: string;\n};\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | Menu name | |\n| label | Menu display name | |\n| link | Menu link | |\n| disabled | Set menu as disabled | false |\n| count | Value of Count (Max value 99) | |\n| group | Section of menu | |\n| subMenu | Menu submenus of type `Menu[]` | |\n| icon | Menu icon | |",
          "type": {
            "required": true,
            "name": "other",
            "value": "Menu[]"
          },
          "table": {
            "type": {
              "summary": "Menu[]"
            },
            "defaultValue": null
          }
        },
        "active": {
          "name": "active",
          "description": "Sets menu as active",
          "type": {
            "required": false,
            "name": "other",
            "value": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
          },
          "table": {
            "type": {
              "summary": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Callback to be called on Menu click**(only if it's not disabled)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((menu: Menu) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((menu: Menu) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "rounded": {
          "name": "rounded",
          "description": "Makes active menu rounded **(applicable only for type: `vertical` and `expanded` menu)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Set expanded state of `Navigation`**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "autoCollapse": {
          "name": "autoCollapse",
          "description": "Only one SubMenu visible at a time**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-verticalnav-non-collapsible-vertical-navigation--non-collapsible-vertical-navigation": {
    "id": "components-verticalnav-non-collapsible-vertical-navigation--non-collapsible-vertical-navigation",
    "kind": "Components/VerticalNav/Non Collapsible Vertical Navigation",
    "name": "Non Collapsible Vertical Navigation",
    "story": "Non Collapsible Vertical Navigation",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const data = [\n    {\n      name: 'practice',\n      label: 'Practice',\n    },\n    {\n      name: 'users',\n      label: 'Users',\n    },\n    {\n      name: 'copayment',\n      label: 'Copayment',\n    },\n    {\n      name: 'subscription',\n      label: 'Subscription',\n    },\n    {\n      name: 'import_export_settings',\n      label: 'Import/Export Settings',\n    },\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'users',\n  });\n\n  return (\n    <div style={{ height: '50vh', background: 'var(--secondary-lightest)' }}>\n      <VerticalNav menus={data} active={active} expanded={true} onClick={setActive} />\n    </div>\n  );\n}"
      },
      "__id": "components-verticalnav-non-collapsible-vertical-navigation--non-collapsible-vertical-navigation",
      "args": {},
      "argTypes": {
        "menus": {
          "name": "menus",
          "description": "List of menus to be rendered\n\n<pre className=\"DocPage-codeBlock\">\nMenu: {\n    name: string;\n    label: string;\n    link?: string;\n    group?: string;\n    disabled?: boolean;\n    count?: number;\n    subMenu?: Menu[];\n    icon?: string;\n};\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | Menu name | |\n| label | Menu display name | |\n| link | Menu link | |\n| disabled | Set menu as disabled | false |\n| count | Value of Count (Max value 99) | |\n| group | Section of menu | |\n| subMenu | Menu submenus of type `Menu[]` | |\n| icon | Menu icon | |",
          "type": {
            "required": true,
            "name": "other",
            "value": "Menu[]"
          },
          "table": {
            "type": {
              "summary": "Menu[]"
            },
            "defaultValue": null
          }
        },
        "active": {
          "name": "active",
          "description": "Sets menu as active",
          "type": {
            "required": false,
            "name": "other",
            "value": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
          },
          "table": {
            "type": {
              "summary": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Callback to be called on Menu click**(only if it's not disabled)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((menu: Menu) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((menu: Menu) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "rounded": {
          "name": "rounded",
          "description": "Makes active menu rounded **(applicable only for type: `vertical` and `expanded` menu)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Set expanded state of `Navigation`**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "autoCollapse": {
          "name": "autoCollapse",
          "description": "Only one SubMenu visible at a time**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-verticalnav-round-edged-vertical-navigation--round-edged-vertical-navigation": {
    "id": "components-verticalnav-round-edged-vertical-navigation--round-edged-vertical-navigation",
    "kind": "Components/VerticalNav/Round Edged Vertical Navigation",
    "name": "Round Edged Vertical Navigation",
    "story": "Round Edged Vertical Navigation",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const primaryNavdata = [\n    {\n      name: 'clinical_data',\n      label: 'Clinical Data',\n      icon: 'assignment_ind',\n    },\n    {\n      name: 'care_management',\n      label: 'Care Management',\n      icon: 'forum',\n      subMenu: [\n        {\n          name: 'care_management.timeline',\n          label: 'Timeline',\n          icon: 'people',\n        },\n        {\n          name: 'care_management.care_protocol',\n          label: 'Care Protocol',\n          icon: 'fact_check',\n        },\n        {\n          name: 'care_management.assessments',\n          label: 'Assessments',\n          icon: 'assessment',\n        },\n        {\n          name: 'care_management.tasks',\n          label: 'Tasks',\n          icon: 'alarm',\n        },\n        {\n          name: 'care_management.goals',\n          label: 'Goals',\n          icon: 'golf_course',\n        },\n        {\n          name: 'care_management.care_plans',\n          label: 'Care Plans',\n          icon: 'accessibility_new',\n        },\n        {\n          name: 'care_management.medical_adherence',\n          label: 'Medical Adherence',\n          icon: 'local_pharmacy',\n        },\n        {\n          name: 'care_management.community_resources',\n          label: 'Community Resources',\n          icon: 'businesses',\n        },\n      ],\n    },\n    {\n      name: 'episodes',\n      label: 'Episodes',\n      icon: 'airline_seat_flat_angled',\n    },\n    {\n      name: 'risk',\n      label: 'Risk',\n      icon: 'favorite',\n    },\n    {\n      name: 'preventive_health',\n      label: 'Preventive Health',\n      icon: 'beenhere',\n    },\n    {\n      name: 'profile',\n      label: 'Profile',\n      icon: 'receipt',\n    },\n    {\n      name: 'claims',\n      label: 'Claims',\n      icon: 'account_circle',\n    },\n    {\n      name: 'manual_entry',\n      label: 'Manual Entry',\n      icon: 'edit',\n    },\n    {\n      name: 'patient_notes',\n      label: 'Patient Notes',\n      icon: 'note_add',\n    },\n    {\n      name: 'documents',\n      label: 'Documents',\n      icon: 'assignment',\n    },\n  ];\n\n  const secondaryNavdata = [\n    {\n      name: '11/12/20',\n      label: '11 Dec, 2020',\n    },\n    {\n      name: '17/11/20',\n      label: '17 Nov, 2020',\n    },\n    {\n      name: '07/11/20',\n      label: '7 Nov, 2020',\n    },\n    {\n      name: '09/10/20',\n      label: '9 Oct, 2020',\n    },\n    {\n      name: '23/08/20',\n      label: '23 Aug, 2020',\n    },\n  ];\n\n  const [primaryActive, setPrimaryActive] = React.useState({\n    name: 'care_management.timeline',\n  });\n\n  const [secondaryActive, setSecondaryActive] = React.useState({\n    name: '11/12/20',\n  });\n\n  return (\n    <div className=\"d-flex\" style={{ height: '100vh', background: 'var(--secondary-lightest)' }}>\n      <VerticalNav menus={primaryNavdata} active={primaryActive} onClick={setPrimaryActive} />\n      <VerticalNav\n        menus={secondaryNavdata}\n        active={secondaryActive}\n        rounded={true}\n        className=\"mt-10 ml-5\"\n        onClick={setSecondaryActive}\n      />\n    </div>\n  );\n}"
      },
      "__id": "components-verticalnav-round-edged-vertical-navigation--round-edged-vertical-navigation",
      "args": {},
      "argTypes": {
        "menus": {
          "name": "menus",
          "description": "List of menus to be rendered\n\n<pre className=\"DocPage-codeBlock\">\nMenu: {\n    name: string;\n    label: string;\n    link?: string;\n    group?: string;\n    disabled?: boolean;\n    count?: number;\n    subMenu?: Menu[];\n    icon?: string;\n};\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | Menu name | |\n| label | Menu display name | |\n| link | Menu link | |\n| disabled | Set menu as disabled | false |\n| count | Value of Count (Max value 99) | |\n| group | Section of menu | |\n| subMenu | Menu submenus of type `Menu[]` | |\n| icon | Menu icon | |",
          "type": {
            "required": true,
            "name": "other",
            "value": "Menu[]"
          },
          "table": {
            "type": {
              "summary": "Menu[]"
            },
            "defaultValue": null
          }
        },
        "active": {
          "name": "active",
          "description": "Sets menu as active",
          "type": {
            "required": false,
            "name": "other",
            "value": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
          },
          "table": {
            "type": {
              "summary": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Callback to be called on Menu click**(only if it's not disabled)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((menu: Menu) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((menu: Menu) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "rounded": {
          "name": "rounded",
          "description": "Makes active menu rounded **(applicable only for type: `vertical` and `expanded` menu)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Set expanded state of `Navigation`**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "autoCollapse": {
          "name": "autoCollapse",
          "description": "Only one SubMenu visible at a time**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-verticalnav-secondary-vertical-navigation--secondary-vertical-navigation": {
    "id": "components-verticalnav-secondary-vertical-navigation--secondary-vertical-navigation",
    "kind": "Components/VerticalNav/Secondary Vertical Navigation",
    "name": "Secondary Vertical Navigation",
    "story": "Secondary Vertical Navigation",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const primaryNavdata = [\n    {\n      name: 'clinical_data',\n      label: 'Clinical Data',\n      icon: 'assignment_ind',\n    },\n    {\n      name: 'care_management',\n      label: 'Care Management',\n      icon: 'forum',\n      subMenu: [\n        {\n          name: 'care_management.timeline',\n          label: 'Timeline',\n          icon: 'people',\n        },\n        {\n          name: 'care_management.care_protocol',\n          label: 'Care Protocol',\n          icon: 'fact_check',\n        },\n        {\n          name: 'care_management.assessments',\n          label: 'Assessments',\n          icon: 'assessment',\n        },\n        {\n          name: 'care_management.tasks',\n          label: 'Tasks',\n          icon: 'alarm',\n        },\n        {\n          name: 'care_management.goals',\n          label: 'Goals',\n          icon: 'golf_course',\n        },\n        {\n          name: 'care_management.care_plans',\n          label: 'Care Plans',\n          icon: 'accessibility_new',\n        },\n        {\n          name: 'care_management.medical_adherence',\n          label: 'Medical Adherence',\n          icon: 'local_pharmacy',\n        },\n        {\n          name: 'care_management.community_resources',\n          label: 'Community Resources',\n          icon: 'businesses',\n        },\n      ],\n    },\n    {\n      name: 'episodes',\n      label: 'Episodes',\n      icon: 'airline_seat_flat_angled',\n    },\n    {\n      name: 'risk',\n      label: 'Risk',\n      icon: 'favorite',\n    },\n    {\n      name: 'preventive_health',\n      label: 'Preventive Health',\n      icon: 'beenhere',\n    },\n    {\n      name: 'profile',\n      label: 'Profile',\n      icon: 'receipt',\n    },\n    {\n      name: 'claims',\n      label: 'Claims',\n      icon: 'account_circle',\n    },\n    {\n      name: 'manual_entry',\n      label: 'Manual Entry',\n      icon: 'edit',\n    },\n    {\n      name: 'patient_notes',\n      label: 'Patient Notes',\n      icon: 'note_add',\n    },\n    {\n      name: 'documents',\n      label: 'Documents',\n      icon: 'assignment',\n    },\n  ];\n\n  const secondaryNavdata = [\n    {\n      name: '19/01/20',\n      label: '19 Jan, 2020',\n      group: 'Completed',\n    },\n    {\n      name: '16/01/20',\n      label: '16 Jan, 2020',\n      group: 'Completed',\n    },\n    {\n      name: '11/11/20',\n      label: '11 Nov, 2020',\n      group: 'Ongoing',\n    },\n    {\n      name: '17/11/20',\n      label: '17 Nov, 2020',\n      group: 'Ongoing',\n    },\n    {\n      name: '07/11/20',\n      label: '7 Nov, 2020',\n      group: 'Ongoing',\n    },\n    {\n      name: '09/10/20',\n      label: '9 Oct, 2020',\n      group: 'Ongoing',\n    },\n    {\n      name: '23/08/20',\n      label: '23 Aug, 2020',\n      group: 'Ongoing',\n    },\n  ];\n\n  const [primaryActive, setPrimaryActive] = React.useState({\n    name: 'care_management.timeline',\n  });\n\n  const [secondaryActive, setSecondaryActive] = React.useState({\n    name: '19/01/20',\n  });\n\n  return (\n    <div className=\"d-flex\" style={{ height: '100vh', background: 'var(--secondary-lightest)' }}>\n      <VerticalNav menus={primaryNavdata} active={primaryActive} onClick={setPrimaryActive} />\n      <div className=\"w-50 ml-6\">\n        <Heading className=\"my-5\">Assessments</Heading>\n        <Card shadow=\"none\" style={{ height: 'calc(80vh)' }}>\n          <VerticalNav menus={secondaryNavdata} active={secondaryActive} onClick={setSecondaryActive} />\n        </Card>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "components-verticalnav-secondary-vertical-navigation--secondary-vertical-navigation",
      "args": {},
      "argTypes": {
        "menus": {
          "name": "menus",
          "description": "List of menus to be rendered\n\n<pre className=\"DocPage-codeBlock\">\nMenu: {\n    name: string;\n    label: string;\n    link?: string;\n    group?: string;\n    disabled?: boolean;\n    count?: number;\n    subMenu?: Menu[];\n    icon?: string;\n};\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | Menu name | |\n| label | Menu display name | |\n| link | Menu link | |\n| disabled | Set menu as disabled | false |\n| count | Value of Count (Max value 99) | |\n| group | Section of menu | |\n| subMenu | Menu submenus of type `Menu[]` | |\n| icon | Menu icon | |",
          "type": {
            "required": true,
            "name": "other",
            "value": "Menu[]"
          },
          "table": {
            "type": {
              "summary": "Menu[]"
            },
            "defaultValue": null
          }
        },
        "active": {
          "name": "active",
          "description": "Sets menu as active",
          "type": {
            "required": false,
            "name": "other",
            "value": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
          },
          "table": {
            "type": {
              "summary": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Callback to be called on Menu click**(only if it's not disabled)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((menu: Menu) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((menu: Menu) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "rounded": {
          "name": "rounded",
          "description": "Makes active menu rounded **(applicable only for type: `vertical` and `expanded` menu)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Set expanded state of `Navigation`**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "autoCollapse": {
          "name": "autoCollapse",
          "description": "Only one SubMenu visible at a time**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-verticalnav-variants-rounded--rounded": {
    "id": "components-verticalnav-variants-rounded--rounded",
    "kind": "Components/VerticalNav/Variants/Rounded",
    "name": "Rounded",
    "story": "Rounded",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const autoCollapse = boolean('autoCollapse', true);\n\n  const data = [\n    {\n      name: 'patient_360',\n      label: 'Patient 360',\n      icon: 'assignment_ind',\n      link: '/patient360',\n    },\n    {\n      name: 'care_management',\n      label: 'Care Management and Resources',\n      icon: 'forum',\n      subMenu: [\n        {\n          name: 'care_management.timeline',\n          label: 'Timeline',\n        },\n        {\n          name: 'care_management.care_plans',\n          label: 'Care Plans',\n        },\n      ],\n    },\n    {\n      name: 'episodes',\n      label: 'Episodes',\n      disabled: true,\n      icon: 'airline_seat_flat_angled',\n    },\n    {\n      name: 'risk',\n      label: 'Risk',\n      icon: 'favorite',\n      subMenu: [\n        {\n          name: 'risk.timeline',\n          label: 'Timeline',\n        },\n        {\n          name: 'risk.care_plans',\n          label: 'Care Plans',\n        },\n      ],\n    },\n    {\n      name: 'claims',\n      label: 'Claims',\n      icon: 'receipt',\n    },\n    {\n      name: 'profile',\n      label: 'Profile',\n      icon: 'account_circle',\n    },\n    {\n      name: 'manula_entry',\n      label: 'Manual Entry',\n      icon: 'border_color',\n    },\n    {\n      name: 'documents',\n      label: 'Documents',\n      icon: 'assignment',\n    },\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'care_management.timeline',\n  });\n\n  const onClickHandler = (menu: Menu) => {\n    action(`menu-clicked: ${JSON.stringify(menu)}`)();\n\n    setActive(menu);\n  };\n\n  return (\n    <div style={{ height: 'calc(80vh)', background: 'var(--secondary-lightest)' }}>\n      <VerticalNav\n        menus={data}\n        expanded={true}\n        autoCollapse={autoCollapse}\n        active={active}\n        rounded={true}\n        onClick={onClickHandler}\n      />\n    </div>\n  );\n}"
      },
      "__id": "components-verticalnav-variants-rounded--rounded",
      "args": {},
      "argTypes": {
        "menus": {
          "name": "menus",
          "description": "List of menus to be rendered\n\n<pre className=\"DocPage-codeBlock\">\nMenu: {\n    name: string;\n    label: string;\n    link?: string;\n    group?: string;\n    disabled?: boolean;\n    count?: number;\n    subMenu?: Menu[];\n    icon?: string;\n};\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | Menu name | |\n| label | Menu display name | |\n| link | Menu link | |\n| disabled | Set menu as disabled | false |\n| count | Value of Count (Max value 99) | |\n| group | Section of menu | |\n| subMenu | Menu submenus of type `Menu[]` | |\n| icon | Menu icon | |",
          "type": {
            "required": true,
            "name": "other",
            "value": "Menu[]"
          },
          "table": {
            "type": {
              "summary": "Menu[]"
            },
            "defaultValue": null
          }
        },
        "active": {
          "name": "active",
          "description": "Sets menu as active",
          "type": {
            "required": false,
            "name": "other",
            "value": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
          },
          "table": {
            "type": {
              "summary": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Callback to be called on Menu click**(only if it's not disabled)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((menu: Menu) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((menu: Menu) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "rounded": {
          "name": "rounded",
          "description": "Makes active menu rounded **(applicable only for type: `vertical` and `expanded` menu)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Set expanded state of `Navigation`**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "autoCollapse": {
          "name": "autoCollapse",
          "description": "Only one SubMenu visible at a time**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "components-verticalnav-variants-section--section": {
    "id": "components-verticalnav-variants-section--section",
    "kind": "Components/VerticalNav/Variants/Section",
    "name": "Section",
    "story": "Section",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const autoCollapse = boolean('autoCollapse', true);\n\n  const data = [\n    {\n      name: 'patient_360',\n      label: 'Patient 360',\n      icon: 'assignment_ind',\n      link: '/patient360',\n      group: 'Section 1',\n    },\n    {\n      name: 'care_management',\n      label: 'Care Management and Resources',\n      icon: 'forum',\n      group: 'Section 2',\n      subMenu: [\n        {\n          name: 'care_management.timeline',\n          label: 'Timeline',\n        },\n        {\n          name: 'care_management.care_plans',\n          label: 'Care Plans',\n        },\n      ],\n    },\n    {\n      name: 'episodes',\n      label: 'Episodes',\n      disabled: true,\n      group: 'Section 2',\n      icon: 'airline_seat_flat_angled',\n    },\n    {\n      name: 'risk',\n      label: 'Risk',\n      icon: 'favorite',\n      group: 'Section 2',\n      subMenu: [\n        {\n          name: 'risk.timeline',\n          label: 'Timeline',\n        },\n        {\n          name: 'risk.care_plans',\n          label: 'Care Plans',\n        },\n      ],\n    },\n    {\n      name: 'claims',\n      label: 'Claims',\n      icon: 'receipt',\n      group: 'Section 3',\n    },\n    {\n      name: 'profile',\n      label: 'Profile',\n      icon: 'account_circle',\n      group: 'Section 3',\n    },\n    {\n      name: 'manula_entry',\n      label: 'Manual Entry',\n      icon: 'border_color',\n      group: 'Section 3',\n    },\n    {\n      name: 'documents',\n      label: 'Documents',\n      icon: 'assignment',\n      group: 'Section 3',\n    },\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'care_management.timeline',\n  });\n\n  const onClickHandler = (menu: Menu) => {\n    action(`menu-clicked: ${JSON.stringify(menu)}`)();\n\n    setActive(menu);\n  };\n\n  return (\n    <div style={{ height: 'calc(90vh)', background: 'var(--secondary-lightest)' }}>\n      <VerticalNav menus={data} expanded={true} autoCollapse={autoCollapse} active={active} onClick={onClickHandler} />\n    </div>\n  );\n}"
      },
      "__id": "components-verticalnav-variants-section--section",
      "args": {},
      "argTypes": {
        "menus": {
          "name": "menus",
          "description": "List of menus to be rendered\n\n<pre className=\"DocPage-codeBlock\">\nMenu: {\n    name: string;\n    label: string;\n    link?: string;\n    group?: string;\n    disabled?: boolean;\n    count?: number;\n    subMenu?: Menu[];\n    icon?: string;\n};\n</pre>\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | Menu name | |\n| label | Menu display name | |\n| link | Menu link | |\n| disabled | Set menu as disabled | false |\n| count | Value of Count (Max value 99) | |\n| group | Section of menu | |\n| subMenu | Menu submenus of type `Menu[]` | |\n| icon | Menu icon | |",
          "type": {
            "required": true,
            "name": "other",
            "value": "Menu[]"
          },
          "table": {
            "type": {
              "summary": "Menu[]"
            },
            "defaultValue": null
          }
        },
        "active": {
          "name": "active",
          "description": "Sets menu as active",
          "type": {
            "required": false,
            "name": "other",
            "value": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
          },
          "table": {
            "type": {
              "summary": "({ name: string; } & Partial<Menu>) | ({ link: string; } & Partial<Menu>) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Callback to be called on Menu click**(only if it's not disabled)**",
          "type": {
            "required": false,
            "name": "function",
            "value": "((menu: Menu) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((menu: Menu) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "rounded": {
          "name": "rounded",
          "description": "Makes active menu rounded **(applicable only for type: `vertical` and `expanded` menu)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "false"
            }
          }
        },
        "expanded": {
          "name": "expanded",
          "description": "Set expanded state of `Navigation`**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "autoCollapse": {
          "name": "autoCollapse",
          "description": "Only one SubMenu visible at a time**(applicable only for type: `vertical`)**",
          "type": {
            "required": false,
            "name": "boolean"
          },
          "table": {
            "type": {
              "summary": "boolean"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "others-design-tokens-colors--colors": {
    "id": "others-design-tokens-colors--colors",
    "kind": "Others/Design Tokens/Colors",
    "name": "Colors",
    "story": "Colors",
    "parameters": {
      "storySource": {
        "source": "() => {\n  React.useEffect(() => {\n    const collection = document.getElementsByClassName('setBgColor');\n    giveBgColor(collection);\n  });\n\n  const colorSchema = getSchema('backgroundColor', '', 'p-4');\n  return (\n    <div>\n      <Heading size=\"xxl\">Design Tokens</Heading>\n      <br />\n      <br />\n      <Heading size=\"m\">Colors</Heading>\n      <br />\n      {tokenColors.map((data, idx) => {\n        const heading =\n          idx !== 4 && idx !== 9\n            ? data[0].token.slice(2)[0].toUpperCase() + data[0].token.slice(3)\n            : idx === 4\n            ? 'Neutral'\n            : 'Others';\n        return (\n          <div className=\"mt-5 mb-5\" key={idx}>\n            <Heading size=\"s\">{heading}</Heading>\n            <br />\n            <Card className=\"h-100 overflow-hidden\">\n              <Table data={data} schema={colorSchema} />\n            </Card>\n            <br />\n          </div>\n        );\n      })}\n    </div>\n  );\n}"
      },
      "__id": "others-design-tokens-colors--colors",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "others-design-tokens-miscellaneous--miscellaneous": {
    "id": "others-design-tokens-miscellaneous--miscellaneous",
    "kind": "Others/Design Tokens/Miscellaneous",
    "name": "Miscellaneous",
    "story": "Miscellaneous",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const borderSchema = getSchema('border', 'aA bB cC', 'p-3 w-50');\n  const shadowSchema = getSchema('boxShadow', 'aA bB cC', 'p-7');\n  return (\n    <div>\n      <Heading size=\"xxl\">Design Tokens</Heading>\n      <br />\n      <br />\n      <Heading size=\"m\">Miscellaneous</Heading>\n      <br />\n      <Heading size=\"m\">Border</Heading>\n      <Card className=\"h-100 overflow-hidden\">\n        <Table data={borderData} schema={borderSchema} />\n      </Card>\n      <br />\n      <Heading size=\"m\">Shadow</Heading>\n      <Card className=\"h-100 overflow-hidden\">\n        <Table data={shadowData} schema={shadowSchema} />\n      </Card>\n      <br />\n      <Heading size=\"m\">Grid breakpoints</Heading>\n      <Card className=\"h-100 overflow-hidden\">\n        <Table data={gridBreakpointData} schema={spaceSchema} />\n      </Card>\n      <br />\n      <Heading size=\"m\">Grid Columns</Heading>\n      <Paragraph appearance=\"default\">\n        The <Text weight=\"strong\">--grid-columns</Text> token has a value of\n        <Text weight=\"strong\"> 12 </Text>\n        which defines the maximum number of columns in a row.\n      </Paragraph>\n      <br />\n    </div>\n  );\n}"
      },
      "__id": "others-design-tokens-miscellaneous--miscellaneous",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "others-design-tokens-spacing--spacing": {
    "id": "others-design-tokens-spacing--spacing",
    "kind": "Others/Design Tokens/Spacing",
    "name": "Spacing",
    "story": "Spacing",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div>\n      <Heading size=\"xxl\">Design Tokens</Heading>\n      <br />\n      <br />\n      <Heading size=\"m\">Spacing</Heading>\n      <br />\n      <Card className=\"h-100\">\n        <Table data={spacingData} schema={spaceSchema} />\n      </Card>\n    </div>\n  );\n}"
      },
      "__id": "others-design-tokens-spacing--spacing",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "others-design-tokens-typography--typography": {
    "id": "others-design-tokens-typography--typography",
    "kind": "Others/Design Tokens/Typography",
    "name": "Typography",
    "story": "Typography",
    "parameters": {
      "storySource": {
        "source": "() => {\n  React.useEffect(() => {\n    const collection = document.getElementsByClassName('setBgColor');\n    giveBgColor(collection);\n  });\n\n  const textColorsSchema = getSchema('color', 'aA bB cC');\n  const fontSizeSchema = getSchema('fontSize', 'aA bB cC');\n  const fontWeightSchema = getSchema('fontWeight', 'aA bB cC');\n  const fontHeightSchema = getSchema('lineHeight', 'aA bB cC', '', { backgroundColor: 'var(--secondary-light)' });\n\n  return (\n    <div>\n      <Heading size=\"xxl\">Design Tokens</Heading>\n      <br />\n      <br />\n      <Heading size=\"m\">Typography</Heading>\n      <Text appearance=\"default\" size=\"regular\" weight=\"strong\">\n        The design system has many built in tokens to easily solve most common use cases surrounding text and its\n        formatting.\n      </Text>\n      <br />\n      <br />\n      <Heading size=\"m\">Text Colors</Heading>\n      <Card className=\"h-100 overflow-hidden\">\n        <Table data={textColors} schema={textColorsSchema} />\n      </Card>\n      <br />\n      <Heading size=\"m\">Font Family</Heading>\n      <Paragraph appearance=\"default\">\n        The <Text weight=\"strong\">--font-family</Text> token provides with Nunito sans font family which is used\n        throughout the design system.\n      </Paragraph>\n      <br />\n      <Card className=\"w-25 p-4\">\n        <Row>\n          <Column size=\"6\" sizeS=\"12\" sizeXS=\"12\">\n            <div style={{ fontFamily: 'Times New Roman, Times, serif' }}>Normal Text</div>\n          </Column>\n          <Column size=\"6\" sizeS=\"12\" sizeXS=\"12\">\n            <div style={{ fontFamily: 'var(--font-family)' }}>Nunito Sans</div>\n          </Column>\n        </Row>\n      </Card>\n      <br />\n      <Heading size=\"m\">Font Size</Heading>\n      <Card className=\"h-100 overflow-hidden\">\n        <Table data={fontSize} schema={fontSizeSchema} />\n      </Card>\n      <br />\n      <Heading size=\"m\">Font Weight</Heading>\n      <Card className=\"h-100 overflow-hidden\">\n        <Table data={fontWeight} schema={fontWeightSchema} />\n      </Card>\n      <br />\n      <Heading size=\"m\">Font Height</Heading>\n      <Card className=\"h-100 overflow-hidden\">\n        <Table data={fontHeight} schema={fontHeightSchema} />\n      </Card>\n      <br />\n      <Heading size=\"m\">Letter Spacing</Heading>\n      <Paragraph appearance=\"default\">\n        The <Text weight=\"strong\">--letter-spacing</Text> token provides with <Text weight=\"strong\">0.5px </Text>\n        of spacing between letters.\n      </Paragraph>\n      <br />\n      <Card className=\"w-25 p-4\">\n        <Row>\n          <Column size=\"12\">\n            <div>\n              Text <strong>without</strong> letter spacing\n            </div>\n          </Column>\n          <Column size=\"12\">\n            <div style={{ letterSpacing: 'var(--letter-spacing)' }}>\n              Text <strong>with</strong> letter spacing\n            </div>\n          </Column>\n        </Row>\n      </Card>\n      <br />\n    </div>\n  );\n}"
      },
      "__id": "others-design-tokens-typography--typography",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "others-layout-all--all": {
    "id": "others-layout-all--all",
    "kind": "Others/Layout/All",
    "name": "All",
    "story": "All",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const size = optionsKnob(\n    'size',\n    {\n      1: '1',\n      2: '2',\n      3: '3',\n      4: '4',\n      5: '5',\n      6: '6',\n      7: '7',\n      8: '8',\n      9: '9',\n      10: '10',\n      11: '11',\n      12: '12',\n    },\n    undefined,\n    {\n      display: 'inline-radio',\n    }\n  );\n  const sizeXS = optionsKnob(\n    'sizeXS',\n    {\n      1: '1',\n      2: '2',\n      3: '3',\n      4: '4',\n      5: '5',\n      6: '6',\n      7: '7',\n      8: '8',\n      9: '9',\n      10: '10',\n      11: '11',\n      12: '12',\n    },\n    undefined,\n    {\n      display: 'inline-radio',\n    }\n  );\n  const sizeS = optionsKnob(\n    'sizeS',\n    {\n      1: '1',\n      2: '2',\n      3: '3',\n      4: '4',\n      5: '5',\n      6: '6',\n      7: '7',\n      8: '8',\n      9: '9',\n      10: '10',\n      11: '11',\n      12: '12',\n    },\n    undefined,\n    {\n      display: 'inline-radio',\n    }\n  );\n  const sizeM = optionsKnob(\n    'sizeM',\n    {\n      1: '1',\n      2: '2',\n      3: '3',\n      4: '4',\n      5: '5',\n      6: '6',\n      7: '7',\n      8: '8',\n      9: '9',\n      10: '10',\n      11: '11',\n      12: '12',\n    },\n    undefined,\n    {\n      display: 'inline-radio',\n    }\n  );\n  const sizeL = optionsKnob(\n    'sizeL',\n    {\n      1: '1',\n      2: '2',\n      3: '3',\n      4: '4',\n      5: '5',\n      6: '6',\n      7: '7',\n      8: '8',\n      9: '9',\n      10: '10',\n      11: '11',\n      12: '12',\n    },\n    undefined,\n    {\n      display: 'inline-radio',\n    }\n  );\n  const sizeXL = optionsKnob(\n    'sizeXL',\n    {\n      1: '1',\n      2: '2',\n      3: '3',\n      4: '4',\n      5: '5',\n      6: '6',\n      7: '7',\n      8: '8',\n      9: '9',\n      10: '10',\n      11: '11',\n      12: '12',\n    },\n    undefined,\n    {\n      display: 'inline-radio',\n    }\n  );\n\n  const columnOptions = {\n    size,\n    sizeXL,\n    sizeL,\n    sizeM,\n    sizeS,\n    sizeXS,\n  };\n  return (\n    <Row>\n      <Column {...columnOptions}>1</Column>\n      <Column {...columnOptions}>2</Column>\n      <Column {...columnOptions}>3</Column>\n      <Column {...columnOptions}>4</Column>\n      <Column {...columnOptions}>5</Column>\n      <Column {...columnOptions}>6</Column>\n      <Column {...columnOptions}>7</Column>\n      <Column {...columnOptions}>8</Column>\n      <Column {...columnOptions}>9</Column>\n      <Column {...columnOptions}>10</Column>\n      <Column {...columnOptions}>11</Column>\n      <Column {...columnOptions}>12</Column>\n    </Row>\n  );\n}"
      },
      "__id": "others-layout-all--all",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Default size of Column",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "10",
              "8",
              "2",
              "1",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "auto",
              "3",
              "4",
              "5",
              "6",
              "7",
              "9",
              "11",
              "12"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | 10 | 8 | 2 | 1 | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" | \"10\" | \"11\" | \"12\" | \"auto\" | 3 | 4 | 5 | 6 | 7 | 9 | 11 | 12"
            },
            "defaultValue": null
          }
        },
        "sizeXS": {
          "name": "sizeXS",
          "description": "Size of Column if the viewport is between 0 to 575 pixels wide.",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "10",
              "8",
              "2",
              "1",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "auto",
              "3",
              "4",
              "5",
              "6",
              "7",
              "9",
              "11",
              "12"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | 10 | 8 | 2 | 1 | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" | \"10\" | \"11\" | \"12\" | \"auto\" | 3 | 4 | 5 | 6 | 7 | 9 | 11 | 12"
            },
            "defaultValue": null
          }
        },
        "sizeS": {
          "name": "sizeS",
          "description": "Size of Column if the viewport is between 576 and 767 pixels wide.",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "10",
              "8",
              "2",
              "1",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "auto",
              "3",
              "4",
              "5",
              "6",
              "7",
              "9",
              "11",
              "12"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | 10 | 8 | 2 | 1 | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" | \"10\" | \"11\" | \"12\" | \"auto\" | 3 | 4 | 5 | 6 | 7 | 9 | 11 | 12"
            },
            "defaultValue": null
          }
        },
        "sizeM": {
          "name": "sizeM",
          "description": "Size of Column if the viewport is between 768 and 991 pixels wide.",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "10",
              "8",
              "2",
              "1",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "auto",
              "3",
              "4",
              "5",
              "6",
              "7",
              "9",
              "11",
              "12"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | 10 | 8 | 2 | 1 | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" | \"10\" | \"11\" | \"12\" | \"auto\" | 3 | 4 | 5 | 6 | 7 | 9 | 11 | 12"
            },
            "defaultValue": null
          }
        },
        "sizeL": {
          "name": "sizeL",
          "description": "Size of Column if the viewport is between 992 and 1199 pixels wide.",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "10",
              "8",
              "2",
              "1",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "auto",
              "3",
              "4",
              "5",
              "6",
              "7",
              "9",
              "11",
              "12"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | 10 | 8 | 2 | 1 | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" | \"10\" | \"11\" | \"12\" | \"auto\" | 3 | 4 | 5 | 6 | 7 | 9 | 11 | 12"
            },
            "defaultValue": null
          }
        },
        "sizeXL": {
          "name": "sizeXL",
          "description": "Size of Column if the viewport is 1200 pixels wide or wider.",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "10",
              "8",
              "2",
              "1",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "auto",
              "3",
              "4",
              "5",
              "6",
              "7",
              "9",
              "11",
              "12"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | 10 | 8 | 2 | 1 | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" | \"10\" | \"11\" | \"12\" | \"auto\" | 3 | 4 | 5 | 6 | 7 | 9 | 11 | 12"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "others-utilities-align--align": {
    "id": "others-utilities-align--align",
    "kind": "Others/Utilities/Align",
    "name": "Align",
    "story": "Align",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const data = [\n    {\n      className: 'align-baseline',\n      properties: 'vertical-align: baseline ;',\n    },\n    {\n      className: 'align-top',\n      properties: 'vertical-align: top ;',\n    },\n    {\n      className: 'align-middle',\n      properties: 'vertical-align: middle ;',\n    },\n    {\n      className: 'align-bottom',\n      properties: 'vertical-align: bottom ;',\n    },\n    {\n      className: 'align-text-bottom',\n      properties: 'vertical-align: text-bottom ;',\n    },\n    {\n      className: 'align-text-top',\n      properties: 'vertical-align: text-top ;',\n    },\n  ];\n  return (\n    <div>\n      <Heading size=\"xxl\">Vertical alignment</Heading>\n      <br />\n      &nbsp;\n      <Text weight=\"strong\">Change the vertical alignment of inline, inline-block, inline-table </Text>\n      &nbsp;\n      <div\n        style={{\n          height: '250px',\n        }}\n        className=\"mt-5 mb-8\"\n      >\n        <Card className=\"h-100\">\n          <Table\n            data={data}\n            schema={utilitiesSchema}\n            size={'standard'}\n            headerOptions={{\n              withSearch: true,\n            }}\n            showMenu={false}\n          />\n        </Card>\n      </div>\n      <Heading size=\"m\">Examples</Heading>\n      <Paragraph>Here are some representative examples of these classes:</Paragraph>\n      &nbsp;\n      <div className=\"pl-10 h-25 Utilities-example w-50\">\n        <span className=\"align-baseline\">baseline </span>\n        <span className=\"align-top\">top </span>\n        <span className=\"align-middle\">middle </span>\n        <span className=\"align-bottom\">bottom </span>\n        <span className=\"align-text-top\">text-top </span>\n        <span className=\"align-text-bottom\">text-bottom </span>\n      </div>\n      &nbsp;\n      <div className=\"DocPage-codeBlock w-50 pl-10\">\n        {'<span className=\"align-baseline\">baseline </span>'}\n        <br />\n        {'<span className=\"align-top\">top </span>'}\n        <br />\n        {'<span className=\"align-middle\">middle </span>'}\n        <br />\n        {'<span className=\"align-bottom\">bottom </span>'}\n        <br />\n        {'<span className=\"align-text-top\">text-top </span>'}\n        <br />\n        {'<span className=\"align-text-bottom\">text-bottom </span>'}\n        <br />\n      </div>\n      &nbsp;\n    </div>\n  );\n}"
      },
      "__id": "others-utilities-align--align",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "others-utilities-background--background": {
    "id": "others-utilities-background--background",
    "kind": "Others/Utilities/Background",
    "name": "Background",
    "story": "Background",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const data = [\n    {\n      className: 'bg-primary',\n      properties: 'background-color: var(--primary);',\n    },\n    {\n      className: 'bg-secondary',\n      properties: 'background-color: var(--secondary);',\n    },\n    {\n      className: 'bg-secondary-lighter',\n      properties: 'background-color: var(--secondary-lighter);',\n    },\n    {\n      className: 'bg-secondary-lightest',\n      properties: 'background-color: var(--secondary-lightest);',\n    },\n    {\n      className: 'bg-success',\n      properties: 'background-color: var(--success);',\n    },\n    {\n      className: 'bg-warning',\n      properties: 'background-color: var(--warning);',\n    },\n    {\n      className: 'bg-danger',\n      properties: 'background-color: var(--alert);',\n    },\n    {\n      className: 'bg-light',\n      properties: 'background-color: var(--white);',\n    },\n    {\n      className: 'bg-dark',\n      properties: 'background-color: var(--inverse);',\n    },\n    {\n      className: 'bg-transparent',\n      properties: 'background-color: transparent;',\n    },\n  ];\n\n  return (\n    <div>\n      <Heading size=\"xxl\">Background color</Heading>\n      <br />\n      <Text weight=\"strong\">Easily set the background of an element to any contextual class</Text>\n      <div\n        style={{\n          height: '250px',\n        }}\n        className=\"mt-5 mb-8\"\n      >\n        <Card className=\"h-100\">\n          <Table\n            data={data}\n            schema={utilitiesSchema}\n            headerOptions={{\n              withSearch: true,\n            }}\n            size={'standard'}\n            showMenu={false}\n          />\n        </Card>\n      </div>\n      <Heading size=\"m\">Examples</Heading>\n      <Paragraph>Here are some representative examples of these classes:</Paragraph>\n      &nbsp;\n      <div className=\"p-7 mb-4 bg-primary\">.bg-primary</div>\n      <div className=\"p-7 mb-4 bg-secondary\">.bg-secondary</div>\n      <div className=\"p-7 mb-4 bg-secondary-lighter\">.bg-secondary-lighter</div>\n      <div className=\"p-7 mb-4 bg-secondary-lightest\">.bg-secondary-lightest</div>\n      <div className=\"p-7 mb-4 bg-success \">.bg-success</div>\n      <div className=\"p-7 mb-4 bg-danger \">.bg-danger</div>\n      <div className=\"p-7 mb-4 bg-warning text-dark\">.bg-warning</div>\n      <div className=\"p-7 mb-4 bg-light text-dark\">.bg-light</div>\n      <div className=\"p-7 mb-4 bg-transparent text-dark\">.bg-transparent</div>\n      <div className=\"p-7 mb-4 bg-dark Utilities-text--color\">.bg-dark</div>\n      &nbsp;\n      <div className=\"DocPage-codeBlock pb-5 pt-5 pl-5\">\n        {'<div className=\"p-7 mb-4 bg-primary\" >.bg-primary </div>'}\n        <br />\n        {'<div className=\"p-7 mb-4 bg-secondary\">.bg-secondary </div>'}\n        <br />\n        {'<div className=\"p-7 mb-4 bg-secondary-lighter\">.bg-secondary-lighter</div>'}\n        <br />\n        {'<div className=\"p-7 mb-4 bg-secondary-lightest\">.bg-secondary-lightest</div>'}\n        <br />\n        {'<div className=\"p-7 mb-4 bg-success\">.bg-success </div>'}\n        <br />\n        {'<div className=\"p-7 mb-4 bg-danger\">.bg-danger </div>'}\n        <br />\n        {'<div className=\"p-7 mb-4 bg-warning\">.bg-warning </div>'}\n        <br />\n        {'<div className=\"p-7 mb-4 bg-light\">.bg-light </div>'}\n        <br />\n        {'<div className=\"p-7 mb-4 bg-transparent\">.bg-transparent </div>'}\n        <br />\n        {'<div className=\"p-7 mb-4 bg-dark\">.bg-dark </div>'}\n        <br />\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "others-utilities-background--background",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "others-utilities-display--display": {
    "id": "others-utilities-display--display",
    "kind": "Others/Utilities/Display",
    "name": "Display",
    "story": "Display",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const data = [\n    {\n      className: 'd-none',\n      properties: 'display: none ;',\n    },\n    {\n      className: 'd-inline',\n      properties: 'display: inline ;',\n    },\n    {\n      className: 'd-inline-block',\n      properties: 'display: inline-block ;',\n    },\n    {\n      className: 'd-block',\n      properties: 'display: block ;',\n    },\n    {\n      className: 'd-table',\n      properties: 'display: table ;',\n    },\n    {\n      className: 'd-table-row',\n      properties: 'display: table-row ;',\n    },\n    {\n      className: 'd-table-cell',\n      properties: 'display: table-cell ;',\n    },\n    {\n      className: 'd-flex',\n      properties: 'display: flex ;',\n    },\n    {\n      className: 'd-inline-flex',\n      properties: 'display: inline-flex ;',\n    },\n  ];\n  return (\n    <div>\n      <Heading size=\"xxl\">Display property</Heading>\n      <br />\n      <Text weight=\"strong\">\n        Quickly and responsively toggle the display value of components and more with our display utilities.\n      </Text>\n      &nbsp;\n      <Heading size=\"m\">How it works</Heading>\n      <Paragraph>\n        Change the value of the display property with our responsive display utility classes. We purposely support only\n        a subset of all possible values for display. Classes can be combined for various effects as you need.\n      </Paragraph>\n      &nbsp;\n      <Heading size=\"m\">Notation</Heading>\n      <Paragraph> Value of display is one of:</Paragraph>\n      <div\n        style={{\n          height: '350px',\n        }}\n        className=\"mt-5 mb-8\"\n      >\n        <Card className=\"h-100\">\n          <Table\n            data={data}\n            schema={utilitiesSchema}\n            headerOptions={{\n              withSearch: true,\n            }}\n            size={'standard'}\n            showMenu={false}\n          />\n        </Card>\n      </div>\n      <Heading size=\"m\">Examples</Heading>\n      <Paragraph>Here are some representative examples of these classes:</Paragraph>\n      <br />\n      <div className=\"d-inline p-2 Utilities-example\">d-inline</div>\n      <div className=\"d-inline p-2 bg-dark Utilities-example Utilities-text--color\">d-inline</div>\n      <br />\n      &nbsp;\n      <div className=\"DocPage-codeBlock pb-5 pt-5 pl-5\">\n        {'<div className=\"d-inline p-2\">d-inline</div>'}\n        <br />\n        {'<div className=\"d-inline p-2\">d-inline</div>'}\n        <br />\n      </div>\n      &nbsp;\n      <span className=\"d-block p-2 Utilities-example\">d-block</span>\n      <span className=\"d-block p-2 bg-dark Utilities-example Utilities-text--color \">d-block</span>\n      &nbsp;\n      <div className=\"DocPage-codeBlock pb-5 pt-5 pl-5\">\n        {'<span className=\"d-block p-2\">d-block</span>'}\n        <br />\n        {'<span className=\"d-block p-2\">d-block</span>'}\n        <br />\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "others-utilities-display--display",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "others-utilities-flex--flex": {
    "id": "others-utilities-flex--flex",
    "kind": "Others/Utilities/Flex",
    "name": "Flex",
    "story": "Flex",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const data = [\n    {\n      className: 'flex-fill',\n      properties: 'flex: 1 1 auto ;',\n    },\n    {\n      className: 'flex-row',\n      properties: 'flex-direction: row ;',\n    },\n    {\n      className: 'flex-column',\n      properties: 'flex-direction: column ;',\n    },\n    {\n      className: 'flex-row-reverse',\n      properties: 'flex-direction: row-reverse ;',\n    },\n    {\n      className: 'flex-column-reverse',\n      properties: 'flex-direction: column-reverse ;',\n    },\n    {\n      className: 'flex-grow-0',\n      properties: 'flex-grow: 0 ;',\n    },\n    {\n      className: 'flex-grow-1',\n      properties: 'flex-grow: 1 ;',\n    },\n    {\n      className: 'flex-shrink-0',\n      properties: 'flex-shrink: 0 ;',\n    },\n    {\n      className: 'flex-shrink-1',\n      properties: 'flex-shrink: 1 ;',\n    },\n    {\n      className: 'flex-wrap',\n      properties: 'flex-wrap: wrap ;',\n    },\n    {\n      className: 'flex-nowrap',\n      properties: 'flex-wrap: nowrap ;',\n    },\n    {\n      className: 'flex-wrap-reverse',\n      properties: 'flex-wrap: wrap-reverse ;',\n    },\n    {\n      className: 'justify-content-start',\n      properties: 'justify-content: flex-start ;',\n    },\n    {\n      className: 'justify-content-end',\n      properties: 'justify-content: flex-end ;',\n    },\n    {\n      className: 'justify-content-center',\n      properties: 'justify-content: center ;',\n    },\n    {\n      className: 'justify-content-between',\n      properties: 'justify-content: space-between ;',\n    },\n    {\n      className: 'justify-content-around',\n      properties: 'justify-content: space-around ;',\n    },\n    {\n      className: 'justify-content-evenly',\n      properties: 'justify-content: space-evenly ;',\n    },\n    {\n      className: 'align-items-start',\n      properties: 'align-items: flex-start ;',\n    },\n    {\n      className: 'align-items-end',\n      properties: 'align-items: flex-end ;',\n    },\n    {\n      className: 'align-items-center',\n      properties: 'align-items: center ;',\n    },\n    {\n      className: 'align-items-baseline',\n      properties: 'align-items: baseline ;',\n    },\n    {\n      className: 'align-items-stretch',\n      properties: 'align-items: stretch ;',\n    },\n    {\n      className: 'align-content-start',\n      properties: 'align-content: flex-start ;',\n    },\n    {\n      className: 'align-content-end',\n      properties: 'align-content: flex-end ;',\n    },\n    {\n      className: 'align-content-center',\n      properties: 'align-content: center ;',\n    },\n    {\n      className: 'align-content-between',\n      properties: 'align-content: space-between ;',\n    },\n    {\n      className: 'align-content-around',\n      properties: 'align-content: space-around ;',\n    },\n    {\n      className: 'align-content-stretch',\n      properties: 'align-content: stretch ;',\n    },\n    {\n      className: 'align-self-auto',\n      properties: 'align-self: auto ;',\n    },\n    {\n      className: 'align-self-start',\n      properties: 'align-self: flex-start ;',\n    },\n    {\n      className: 'align-self-end',\n      properties: 'align-self: flex-end ;',\n    },\n    {\n      className: 'align-self-center',\n      properties: 'align-self: center ;',\n    },\n    {\n      className: 'align-self-baseline',\n      properties: 'align-self: baseline ;',\n    },\n    {\n      className: 'align-self-stretch',\n      properties: 'align-self: stretch ;',\n    },\n    {\n      className: 'order-first',\n      properties: 'order: -1 ;',\n    },\n    {\n      className: 'order-0',\n      properties: 'order: 0 ;',\n    },\n    {\n      className: 'order-1',\n      properties: 'order: 1 ;',\n    },\n    {\n      className: 'order-2',\n      properties: 'order: 2 ;',\n    },\n    {\n      className: 'order-3',\n      properties: 'order: 3 ;',\n    },\n    {\n      className: 'order-4',\n      properties: 'order: 4 ;',\n    },\n    {\n      className: 'order-5',\n      properties: 'order: 5 ;',\n    },\n    {\n      className: 'order-last',\n      properties: 'order: 6 ;',\n    },\n  ];\n  return (\n    <div>\n      <Heading size=\"xxl\">Flex</Heading>\n      <br />\n      <Text weight=\"strong\">\n        Quickly manage the layout, alignment, and sizing of grid columns, navigation, components, and more with a full\n        suite of responsive flexbox utilities.\n      </Text>\n      <div\n        style={{\n          height: '350px',\n        }}\n        className=\"mt-5 mb-8\"\n      >\n        <Card className=\"h-100\">\n          <Table\n            data={data}\n            schema={utilitiesSchema}\n            headerOptions={{\n              withSearch: true,\n            }}\n            size={'standard'}\n            showMenu={false}\n          />\n        </Card>\n      </div>\n      <Heading size=\"m\">Examples</Heading>\n      <Paragraph>Here are some representative examples of these classes:</Paragraph>\n      &nbsp;\n      <Heading size=\"s\">\n        Use .flex-row to set a horizontal direction (the browser default), or .flex-row-reverse to start the horizontal\n        direction from the opposite side.\n      </Heading>\n      &nbsp;\n      <div className=\"d-flex flex-row Utilities-example h-25\">\n        <div className=\"p-2\">Flex item 1</div>\n        <div className=\"p-2\">Flex item 2</div>\n        <div className=\"p-2\">Flex item 3</div>\n      </div>\n      &nbsp;\n      <div className=\"d-flex flex-row-reverse Utilities-example h-25\">\n        <div className=\"p-2\">Flex item 1</div>\n        <div className=\"p-2\">Flex item 2</div>\n        <div className=\"p-2\">Flex item 3</div>\n      </div>\n      &nbsp;\n      <div className=\"DocPage-codeBlock pb-5 pt-5 pl-5\">\n        {'<div className=\"d-flex flex-row \">'}\n        <br />\n        &nbsp; {'<div className=\"p-2\">Flex item 1</div>'}\n        <br />\n        &nbsp; {'<div className=\"p-2\">Flex item 2</div>'}\n        <br />\n        &nbsp; {'<div className=\"p-2\">Flex item 3</div>'}\n        <br />\n        {'</div>'}\n        <br />\n        {'<div className=\"d-flex flex-row-reverse\">'}\n        <br />\n        &nbsp; {'<div className=\"p-2\">Flex item 1</div>'}\n        <br />\n        &nbsp; {'<div className=\"p-2\">Flex item 2</div>'}\n        <br />\n        &nbsp; {'<div className=\"p-2\">Flex item 3</div>'}\n        <br />\n        {'</div>'}\n      </div>\n      &nbsp;\n      <Heading size=\"s\">\n        Use .flex-column to set a vertical direction, or .flex-column-reverse to start the vertical direction from the\n        opposite side.\n      </Heading>\n      &nbsp;\n      <div className=\"d-flex flex-column Utilities-example\">\n        <div className=\"p-2\">Flex item 1</div>\n        <div className=\"p-2\">Flex item 2</div>\n        <div className=\"p-2\">Flex item 3</div>\n      </div>\n      &nbsp;\n      <div className=\"d-flex flex-column-reverse Utilities-example\">\n        <div className=\"p-2\">Flex item 1</div>\n        <div className=\"p-2\">Flex item 2</div>\n        <div className=\"p-2\">Flex item 3</div>\n      </div>\n      &nbsp;\n      <div className=\"DocPage-codeBlock pb-5 pt-5 pl-5\">\n        <code>\n          {'<div className=\"d-flex flex-column\">'}\n          <br />\n          &nbsp; {'<div className=\"p-2\">Flex item 1</div>'}\n          <br />\n          &nbsp; {'<div className=\"p-2\">Flex item 2</div>'}\n          <br />\n          &nbsp; {'<div className=\"p-2\">Flex item 3</div>'}\n          <br />\n          {'</div>'}\n          <br />\n        </code>\n        &nbsp;\n        <code>\n          {'<div className=\"d-flex flex-column-reverse\">'}\n          <br />\n          &nbsp; {'<div className=\"p-2\">Flex item 1</div>'}\n          <br />\n          &nbsp; {'<div className=\"p-2\">Flex item 2</div>'}\n          <br />\n          &nbsp; {'<div className=\"p-2\">Flex item 3</div>'}\n          <br />\n          {'</div>'}\n          <br />\n        </code>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "others-utilities-flex--flex",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "others-utilities-miscellaneous--miscellaneous": {
    "id": "others-utilities-miscellaneous--miscellaneous",
    "kind": "Others/Utilities/Miscellaneous",
    "name": "Miscellaneous",
    "story": "Miscellaneous",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const data = [\n    {\n      className: 'hide-scroll-bar::-webkit-scrollbar',\n      properties: 'height: 0px;\\nbackground: transparent;',\n    },\n    {\n      className: 'hide-scroll-bar',\n      properties: '-ms-overflow-style: none;\\nscrollbar-width: none;',\n    },\n    {\n      className: 'ellipsis',\n      properties: 'overflow: hidden;\\ntext-overflow: ellipsis;',\n    },\n    {\n      className: 'ellipsis--noWrap',\n      properties: 'white-space: nowrap;\\noverflow: hidden;\\ntext-overflow: ellipsis;',\n    },\n    {\n      className: 'cursor-pointer',\n      properties: 'cursor: pointer;',\n    },\n  ];\n  return (\n    <div className=\"mt-8 mb-8\">\n      <Card className=\"h-100\">\n        <Table\n          data={data}\n          schema={utilitiesSchema}\n          headerOptions={{\n            withSearch: true,\n          }}\n          size={'standard'}\n          showMenu={false}\n        />\n      </Card>\n    </div>\n  );\n}"
      },
      "__id": "others-utilities-miscellaneous--miscellaneous",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "others-utilities-overflow--overflow": {
    "id": "others-utilities-overflow--overflow",
    "kind": "Others/Utilities/Overflow",
    "name": "Overflow",
    "story": "Overflow",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const data = [\n    {\n      className: 'overflow-auto',\n      properties: 'overflow: auto !important;',\n    },\n    {\n      className: 'overflow-hidden',\n      properties: 'overflow: hidden !important;',\n    },\n  ];\n  return (\n    <div>\n      <Heading size=\"xxl\">Overflow</Heading>\n      <br />\n      <Text weight=\"strong\">\n        The CSS overflow property controls what happens to content that is too big to fit into an area.\n      </Text>\n      <div className=\"mb-8 mt-5\">\n        <Card className=\"h-100\">\n          <Table\n            data={data}\n            schema={utilitiesSchema}\n            headerOptions={{\n              withSearch: true,\n            }}\n            size={'standard'}\n            showMenu={false}\n          />\n        </Card>\n      </div>\n      <Heading size=\"m\">Examples</Heading>\n      <Paragraph>Here are some representative examples of these classes:</Paragraph>\n      &nbsp;\n      <Heading size=\"s\">The auto value adds scrollbars when necessary:</Heading>\n      <br />\n      <div className=\"overflow-auto Utilities-overflow\">\n        You can use the overflow property when you want to have better control of the layout. The overflow property\n        specifies what happens if content overflows an element's box.\n      </div>\n      &nbsp;\n      <div className=\"DocPage-codeBlock\">\n        {'<div className=\"overflow-auto overflow\">'}\n        <br />\n        {\n          'You can use the overflow property when you want to have better control of the layout. The overflow property specifies what happens if content overflows an element box.'\n        }\n        <br />\n        {'</div>'}\n      </div>\n      &nbsp;\n      <Heading size=\"s\">With the hidden value, the overflow is clipped, and the rest of the content is hidden</Heading>\n      <br />\n      <div className=\"overflow-hidden Utilities-overflow\">\n        You can use the overflow property when you want to have better control of the layout. The overflow property\n        specifies what happens if content overflows an element's box.\n      </div>\n      &nbsp;\n      <div className=\"DocPage-codeBlock\">\n        {'<div className=\"overflow-hidden overflow\">'}\n        <br />\n        {\n          'You can use the overflow property when you want to have better control of the layout. The overflow property specifies what happens if content overflows an elements box.'\n        }\n        <br />\n        {'</div>'}\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "others-utilities-overflow--overflow",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "others-utilities-position--position": {
    "id": "others-utilities-position--position",
    "kind": "Others/Utilities/Position",
    "name": "Position",
    "story": "Position",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const data = [\n    {\n      className: 'position-static',\n      properties: 'position: static ;',\n    },\n    {\n      className: 'position-relative',\n      properties: 'position: relative ;',\n    },\n    {\n      className: 'position-absolute',\n      properties: 'position: absolute ;',\n    },\n    {\n      className: 'position-fixed',\n      properties: 'position: fixed ;',\n    },\n    {\n      className: 'position-sticky',\n      properties: 'position: -webkit-sticky ;\\nposition: sticky ;',\n    },\n  ];\n  return (\n    <div>\n      <Heading size=\"xxl\">Position</Heading>\n      <br />\n      <Text weight=\"strong\">Use these shorthand utilities for quickly configuring the position of an element.</Text>\n      <div className=\"mb-8 mt-5\">\n        <Card className=\"h-100\">\n          <Table\n            data={data}\n            schema={utilitiesSchema}\n            headerOptions={{\n              withSearch: true,\n            }}\n            size={'standard'}\n            showMenu={false}\n          />\n        </Card>\n      </div>\n      <Heading size=\"m\">Examples</Heading>\n      <Paragraph>Here are some representative examples of these classes:</Paragraph>\n      <br />\n      <div className=\"DocPage-codeBlock w-50\">\n        <code>\n          {'<div className=\"position-static\">...</div>'}\n          <br />\n          {'<div className=\"position-relative\">...</div>'}\n          <br />\n          {'<div className=\"position-absolute\">...</div>'}\n          <br />\n          {'<div className=\"position-fixed\">...</div>'}\n          <br />\n          {'<div className=\"position-sticky\">...</div>'}\n          <br />\n        </code>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "others-utilities-position--position",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "others-utilities-sizing--sizing": {
    "id": "others-utilities-sizing--sizing",
    "kind": "Others/Utilities/Sizing",
    "name": "Sizing",
    "story": "Sizing",
    "parameters": {
      "storySource": {
        "source": "() => {\n  const data = [\n    {\n      className: 'w-25',\n      properties: 'width: 25% ;',\n    },\n    {\n      className: 'w-50',\n      properties: 'width: 50% ;',\n    },\n    {\n      className: 'w-75',\n      properties: 'width: 75% ;',\n    },\n    {\n      className: 'w-100',\n      properties: 'width: 100% ;',\n    },\n    {\n      className: 'w-auto',\n      properties: 'width: auto ;',\n    },\n    {\n      className: 'mw-100',\n      properties: 'max-width: 100% ;',\n    },\n    {\n      className: 'vw-100',\n      properties: 'width: 100vw ;',\n    },\n  ];\n  const Data = [\n    {\n      className: 'h-25',\n      properties: 'height: 25% ;',\n    },\n    {\n      className: 'h-50',\n      properties: 'height: 50% ;',\n    },\n    {\n      className: 'h-75',\n      properties: 'height: 75% ;',\n    },\n    {\n      className: 'h-100',\n      properties: 'height: 100% ;',\n    },\n    {\n      className: 'h-auto',\n      properties: 'height: auto ;',\n    },\n    {\n      className: 'mh-100',\n      properties: 'max-height: 100% ;',\n    },\n    {\n      className: 'vh-100',\n      properties: 'height: 100vh ;',\n    },\n    {\n      className: 'min-vh-100',\n      properties: 'min-height: 100vh ;',\n    },\n  ];\n  return (\n    <div>\n      <Heading size=\"xxl\"> Sizing</Heading>\n      <br />\n      <Text weight=\"strong\">\n        You can make an element as wide or as tall (relative to its parent) with our width and height utilities.\n      </Text>\n      <br />\n      &nbsp;\n      <Heading size=\"s\">WIDTH</Heading>\n      <div className=\"mt-4 mb-8\">\n        <Card className=\"h-100\">\n          <Table\n            data={data}\n            schema={utilitiesSchema}\n            headerOptions={{\n              withSearch: true,\n            }}\n            size={'standard'}\n            showMenu={false}\n          />\n        </Card>\n      </div>\n      <Heading size=\"m\">Examples</Heading>\n      <Paragraph>Here are some representative examples of these classes:</Paragraph>\n      &nbsp;\n      <div className=\"w-25 p-3 mb-2 width-color\">Width 25%</div>\n      <div className=\"w-50 p-3 mb-2 width-color\">Width 50%</div>\n      <div className=\"w-75 p-3 mb-2 width-color\">Width 75%</div>\n      <div className=\"w-100 p-3 mb-2 width-color\">Width 100%</div>\n      &nbsp;\n      <div className=\"DocPage-codeBlock\">\n        {'<div className=\"w-25 p-3\">Width 25%</div>'}\n        <br />\n        {'<div className=\"w-50 p-3\">Width 50%</div>'}\n        <br />\n        {'<div className=\"w-75 p-3\">Width 75%</div>'}\n        <br />\n        {'<div className=\"w-100 p-3\">Width 100%</div>'}\n        <br />\n      </div>\n      &nbsp;\n      <Heading size=\"m\">HEIGHT</Heading>\n      <div className=\"mt-4 mb-8\">\n        <Card className=\"h-100\">\n          <Table\n            data={Data}\n            schema={utilitiesSchema}\n            headerOptions={{\n              withSearch: true,\n            }}\n            size={'standard'}\n            showMenu={false}\n          />\n        </Card>\n      </div>\n      <Heading size=\"m\">Examples</Heading>\n      <Paragraph>Here are some representative examples of these classes:</Paragraph>\n      &nbsp;\n      <div className=\"height w-50\">\n        <div className=\"h-25 d-inline-block height-color mr-2\">Height 25%</div>\n        <div className=\"h-50 d-inline-block height-color mr-2\">Height 50%</div>\n        <div className=\"h-75 d-inline-block height-color mr-2\">Height 75%</div>\n        <div className=\"h-100 d-inline-block height-color mr-2\">Height 100%</div>\n      </div>\n      &nbsp;\n      <div className=\"DocPage-codeBlock\">\n        <code>\n          {'<div className=\"h-25 d-inline-block\">Height 25%</div>'}\n          <br />\n          {'<div className=\"h-50 d-inline-block\">Height 50%</div>'}\n          <br />\n          {'<div className=\"h-75 d-inline-block\">Height 75%</div>'}\n          <br />\n          {'<div className=\"h-100 d-inline-block\">Height 100%</div>'}\n          <br />\n        </code>\n      </div>\n    </div>\n  );\n}"
      },
      "__id": "others-utilities-sizing--sizing",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "others-utilities-spacing--spacing": {
    "id": "others-utilities-spacing--spacing",
    "kind": "Others/Utilities/Spacing",
    "name": "Spacing",
    "story": "Spacing",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (\n    <div>\n      <Heading size=\"xxl\">Spacing</Heading>\n      <br />\n      <br />\n      <Text weight=\"strong\">\n        The classes are named using the format (property)(sides)-(size) for xs and (property)(sides)-(breakpoint)-(size)\n        for sm, md, lg, and xl.\n      </Text>\n      <br />\n      <Paragraph>\n        <br />\n        <Text weight=\"strong\">Where property is one of:</Text>\n        <br />\n        m - for classes that set margin\n        <br />\n        p - for classes that set padding\n        <br />\n        <br />\n        <Text weight=\"strong\">Where sides is one of:</Text>\n        <br />\n        t - for classes that set margin-top or padding-top\n        <br />\n        b - for classes that set margin-bottom or padding-bottom\n        <br />\n        l - for classes that set margin-left or padding-left\n        <br />\n        r - for classes that set margin-right or padding-right\n        <br />\n        x - for classes that set both *-left and *-right\n        <br />\n        y - for classes that set both *-top and *-bottom\n        <br />\n        blank - for classes that set a margin or padding on all 4 sides of the element\n        <br />\n        <br />\n        <Text weight=\"strong\">Where size is one of:</Text>\n      </Paragraph>\n      <br />\n      <div className=\"mt-5 mb-8 bg-secondary-lightest p-3 Card w-50\">\n        <Row>\n          <Column className=\"p-2\">\n            <Text weight=\"strong\">Size</Text>\n          </Column>\n          <Column className=\"p-2\">\n            <Text weight=\"strong\">Token</Text>\n          </Column>\n          <Column className=\"p-2\">\n            <Text weight=\"strong\">Pixels</Text>\n          </Column>\n        </Row>\n        {sizeData.map(({ value, properties, pixel }, index) => {\n          return (\n            <Row key={index}>\n              <Column className=\"p-2\">{value}</Column>\n              <Column className=\"p-2\">{properties}</Column>\n              <Column className=\"p-2\">{pixel}</Column>\n            </Row>\n          );\n        })}\n      </div>\n      <Heading size=\"m\">Class List</Heading>\n      <div className=\"mt-5 mb-8\">\n        <Card className=\"h-100 overflow-hidden\">\n          <Table\n            data={classData}\n            schema={classSchema}\n            separator={true}\n            withHeader={true}\n            headerOptions={{\n              withSearch: true,\n            }}\n            size=\"tight\"\n            showMenu={false}\n            pageSize={16}\n            onSearch={(currData, searchTerm) => {\n              return currData.filter((d) => d.pixel.toLowerCase().includes(searchTerm.toLowerCase()));\n            }}\n          />\n        </Card>\n      </div>\n      <Heading size=\"m\">Examples</Heading>\n      <Paragraph>Here are some representative examples of these classes:</Paragraph>\n      &nbsp;\n      <div className=\"w-50 bg-secondary p-10 m-10\">\n        This text is the content of the box. We have added a (p-10) padding, (m-10) margin to it.\n      </div>\n      <div className=\"DocPage-codeBlock pt-5 pb-5 pl-5\">\n        {'<div className=\"w-50 bg-secondary p-10 m-10 \">'}\n        <br />\n        {'This text is the content of the box.'}\n        {'We have added a (p-10) padding, (m-10) margin to it.'}\n        <br />\n        {'</div>'}\n      </div>\n      &nbsp;\n    </div>\n  );\n}"
      },
      "__id": "others-utilities-spacing--spacing",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "patterns-datepicker-date-and-time-picker--date-and-time-picker": {
    "id": "patterns-datepicker-date-and-time-picker--date-and-time-picker",
    "kind": "Patterns/DatePicker/Date And Time Picker",
    "name": "Date And Time Picker",
    "story": "Date And Time Picker",
    "parameters": {
      "storySource": {
        "source": "() => <></>"
      },
      "__id": "patterns-datepicker-date-and-time-picker--date-and-time-picker",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "patterns-daterangepicker-with-custom-popover--with-custom-popover": {
    "id": "patterns-daterangepicker-with-custom-popover--with-custom-popover",
    "kind": "Patterns/DateRangePicker/With Custom Popover",
    "name": "With Custom Popover",
    "story": "With Custom Popover",
    "parameters": {
      "storySource": {
        "source": "() => <></>"
      },
      "__id": "patterns-daterangepicker-with-custom-popover--with-custom-popover",
      "args": {},
      "argTypes": {
        "size": {
          "name": "size",
          "description": "Size of `Calendar`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "large",
              "small"
            ]
          },
          "table": {
            "type": {
              "summary": "\"large\" | \"small\""
            },
            "defaultValue": {
              "summary": "\"large\""
            }
          }
        },
        "monthsInView": {
          "name": "monthsInView",
          "description": "Number of months rendered in view\nNumber of months rendered in view\n\n**Default set to `2` when `withInput: true`**",
          "type": {
            "required": false,
            "name": "number"
          },
          "table": {
            "type": {
              "summary": "number"
            },
            "defaultValue": null
          }
        },
        "jumpView": {
          "name": "jumpView",
          "description": "Enables jumping to different view on clicking on Calendar Header\n\n**set to `false` if monthsInView > 1**",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": {
              "summary": "true"
            }
          }
        },
        "firstDayOfWeek": {
          "name": "firstDayOfWeek",
          "description": "Specifies first day of week to be rendered",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "sunday",
              "monday",
              "tuesday",
              "wednesday",
              "thursday",
              "friday",
              "saturday"
            ]
          },
          "table": {
            "type": {
              "summary": "\"sunday\" | \"monday\" | \"tuesday\" | \"wednesday\" | \"thursday\" | \"friday\" | \"saturday\""
            },
            "defaultValue": {
              "summary": "\"sunday\""
            }
          }
        },
        "view": {
          "name": "view",
          "description": "Specifies initial view of `Calendar`",
          "type": {
            "required": true,
            "name": "enum",
            "value": [
              "date",
              "month",
              "year"
            ]
          },
          "table": {
            "type": {
              "summary": "\"date\" | \"month\" | \"year\""
            },
            "defaultValue": {
              "summary": "\"date\""
            }
          }
        },
        "disabledBefore": {
          "name": "disabledBefore",
          "description": "Dates to be disabled before mentioned date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "disabledAfter": {
          "name": "disabledAfter",
          "description": "Dates to be disabled after mentioned date",
          "type": {
            "required": false,
            "name": "other",
            "value": "Date | undefined"
          },
          "table": {
            "type": {
              "summary": "Date | undefined"
            },
            "defaultValue": null
          }
        },
        "yearNav": {
          "name": "yearNav",
          "description": "Initial year to be set for navigation\n\n**use only if date, startDate and endDate are all set or undefined**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "monthNav": {
          "name": "monthNav",
          "description": "Initial month to be set for navigation\n\n**0 indexed(0-11)**\n\n**use only if date, startDate and endDate are all set or undefined**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onRangeChange": {
          "name": "onRangeChange",
          "description": "",
          "type": {
            "required": false,
            "name": "function",
            "value": "((startDate?: Date | undefined, endDate?: Date | undefined, startValue?: string | undefined, endValue?: string | undefined) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((startDate?: Date | undefined, endDate?: Date | undefined, startValue?: string | undefined, endValue?: string | undefined) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "children": {
          "name": "children",
          "description": "Element to be rendered inside Popover",
          "type": {
            "required": false,
            "name": "other",
            "value": "ReactNode"
          },
          "table": {
            "type": {
              "summary": "ReactNode"
            },
            "defaultValue": {
              "summary": "<></>"
            }
          }
        },
        "contentAlign": {
          "name": "contentAlign",
          "description": "Alignment of `children` Element",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "left"
            }
          }
        },
        "startDate": {
          "name": "startDate",
          "description": "Start date of `DateRangePicker`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | Date | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | Date | undefined"
            },
            "defaultValue": null
          }
        },
        "endDate": {
          "name": "endDate",
          "description": "End date of `DateRangePicker`",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | number | Date | undefined"
          },
          "table": {
            "type": {
              "summary": "string | number | Date | undefined"
            },
            "defaultValue": null
          }
        },
        "rangeLimit": {
          "name": "rangeLimit",
          "description": "Allowed limit for difference in startDate and endDate\n\n**set `0` or `undefined` for infinite limit**",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "withInput": {
          "name": "withInput",
          "description": "Set if `InputMask` should be used as trigger",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "singleInput": {
          "name": "singleInput",
          "description": "Set if single `InputMask` should be used as trigger",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "open": {
          "name": "open",
          "description": "Sets open state of `Popover`",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "position": {
          "name": "position",
          "description": "Position of `DateRangePicker` w.r.t. `InputMask`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "bottom",
              "top",
              "top-start",
              "top-end",
              "bottom-start",
              "bottom-end",
              "left",
              "right"
            ]
          },
          "table": {
            "type": {
              "summary": "\"bottom\" | \"top\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"right\""
            },
            "defaultValue": {
              "summary": "\"bottom-start\""
            }
          }
        },
        "inputFormat": {
          "name": "inputFormat",
          "description": "Should be used if `date` is of type `string`",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "mm/dd/yyyy",
              "dd/mm/yyyy",
              "yyyy/mm/dd",
              "mm-dd-yyyy",
              "dd-mm-yyyy",
              "yyyy-mm-dd"
            ]
          },
          "table": {
            "type": {
              "summary": "\"mm/dd/yyyy\" | \"dd/mm/yyyy\" | \"yyyy/mm/dd\" | \"mm-dd-yyyy\" | \"dd-mm-yyyy\" | \"yyyy-mm-dd\""
            },
            "defaultValue": {
              "summary": "\"mm/dd/yyyy\""
            }
          }
        },
        "outputFormat": {
          "name": "outputFormat",
          "description": "Should be used to translate `date` to desired format for `onRangeChange` callback",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "mm/dd/yyyy",
              "dd/mm/yyyy",
              "yyyy/mm/dd",
              "mm-dd-yyyy",
              "dd-mm-yyyy",
              "yyyy-mm-dd"
            ]
          },
          "table": {
            "type": {
              "summary": "\"mm/dd/yyyy\" | \"dd/mm/yyyy\" | \"yyyy/mm/dd\" | \"mm-dd-yyyy\" | \"dd-mm-yyyy\" | \"yyyy-mm-dd\""
            },
            "defaultValue": {
              "summary": "\"mm/dd/yyyy\""
            }
          }
        },
        "inputOptions": {
          "name": "inputOptions",
          "description": "Props to be used for date of `InputMask`\n\n**Valid in case of single input**.",
          "type": {
            "required": false,
            "name": "other",
            "value": "InputOptions"
          },
          "table": {
            "type": {
              "summary": "InputOptions"
            },
            "defaultValue": {
              "summary": "{ label: 'Date' }"
            }
          }
        },
        "startInputOptions": {
          "name": "startInputOptions",
          "description": "Props to be used for Start date `InputMask`",
          "type": {
            "required": false,
            "name": "other",
            "value": "InputOptions"
          },
          "table": {
            "type": {
              "summary": "InputOptions"
            },
            "defaultValue": {
              "summary": "{ label: 'Start Date' }"
            }
          }
        },
        "endInputOptions": {
          "name": "endInputOptions",
          "description": "Props to be used for End date `InputMask`",
          "type": {
            "required": false,
            "name": "other",
            "value": "InputOptions"
          },
          "table": {
            "type": {
              "summary": "InputOptions"
            },
            "defaultValue": {
              "summary": "{ label: 'End Date' }"
            }
          }
        },
        "validators": {
          "name": "validators",
          "description": "custom Validator for `DateRangePicker`\n\n`ValidatorFn: (val: string, format: string) => boolean`",
          "type": {
            "required": false,
            "name": "other",
            "value": "SingleOrArray<ValidatorFn<any[]>>"
          },
          "table": {
            "type": {
              "summary": "SingleOrArray<ValidatorFn<any[]>>"
            },
            "defaultValue": {
              "summary": "[Utils.validators.date]"
            }
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "patterns-forms-basic-form--basic-form": {
    "id": "patterns-forms-basic-form--basic-form",
    "kind": "Patterns/Forms/Basic Form",
    "name": "Basic Form",
    "story": "Basic Form",
    "parameters": {
      "storySource": {
        "source": "() => <></>"
      },
      "__id": "patterns-forms-basic-form--basic-form",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "patterns-forms-create-password--create-password": {
    "id": "patterns-forms-create-password--create-password",
    "kind": "Patterns/Forms/Create Password",
    "name": "Create Password",
    "story": "Create Password",
    "parameters": {
      "storySource": {
        "source": "() => <></>"
      },
      "__id": "patterns-forms-create-password--create-password",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "patterns-forms-create-user--create-user": {
    "id": "patterns-forms-create-user--create-user",
    "kind": "Patterns/Forms/Create User",
    "name": "Create User",
    "story": "Create User",
    "parameters": {
      "storySource": {
        "source": "() => <></>"
      },
      "__id": "patterns-forms-create-user--create-user",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "patterns-forms-inline-form--inline-form": {
    "id": "patterns-forms-inline-form--inline-form",
    "kind": "Patterns/Forms/Inline Form",
    "name": "Inline Form",
    "story": "Inline Form",
    "parameters": {
      "storySource": {
        "source": "() => <></>"
      },
      "__id": "patterns-forms-inline-form--inline-form",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "patterns-forms-inline-label-form--inline-label-form": {
    "id": "patterns-forms-inline-label-form--inline-label-form",
    "kind": "Patterns/Forms/Inline Label Form",
    "name": "Inline Label Form",
    "story": "Inline Label Form",
    "parameters": {
      "storySource": {
        "source": "() => <></>"
      },
      "__id": "patterns-forms-inline-label-form--inline-label-form",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "patterns-forms-stepper-form--stepper-form": {
    "id": "patterns-forms-stepper-form--stepper-form",
    "kind": "Patterns/Forms/Stepper Form",
    "name": "Stepper Form",
    "story": "Stepper Form",
    "parameters": {
      "storySource": {
        "source": "() => <></>"
      },
      "__id": "patterns-forms-stepper-form--stepper-form",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "patterns-forms-time-period-form--time-period-form": {
    "id": "patterns-forms-time-period-form--time-period-form",
    "kind": "Patterns/Forms/Time Period Form",
    "name": "Time Period Form",
    "story": "Time Period Form",
    "parameters": {
      "storySource": {
        "source": "() => <></>"
      },
      "__id": "patterns-forms-time-period-form--time-period-form",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "patterns-forms-verification-code-input--verification-code-input": {
    "id": "patterns-forms-verification-code-input--verification-code-input",
    "kind": "Patterns/Forms/Verification Code Input",
    "name": "Verification Code Input",
    "story": "Verification Code Input",
    "parameters": {
      "storySource": {
        "source": "() => <></>"
      },
      "__id": "patterns-forms-verification-code-input--verification-code-input",
      "args": {},
      "argTypes": {
        "fields": {
          "name": "fields",
          "description": "Number of input fields to be used to compose code input.",
          "type": {
            "required": false,
            "name": "other",
            "value": "number | undefined"
          },
          "table": {
            "type": {
              "summary": "number | undefined"
            },
            "defaultValue": null
          }
        },
        "type": {
          "name": "type",
          "description": "Type of values to be entered.",
          "type": {
            "required": false,
            "name": "enum",
            "value": [
              "undefined",
              "number",
              "text",
              "password"
            ]
          },
          "table": {
            "type": {
              "summary": "undefined | \"number\" | \"text\" | \"password\""
            },
            "defaultValue": null
          }
        },
        "onComplete": {
          "name": "onComplete",
          "description": "Callback triggered after all values are entered.",
          "type": {
            "required": false,
            "name": "function",
            "value": "((value: string) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((value: string) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "className": {
          "name": "className",
          "description": "Adds custom class",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "data-test": {
          "name": "data-test",
          "description": "Stores custom testing data private to the component.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "autoFocus": {
          "name": "autoFocus",
          "description": "Adds autoFocus",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "disabled": {
          "name": "disabled",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "pattern": {
          "name": "pattern",
          "description": "The pattern attribute, when specified, is a regular expression that the input's value\nmust match in order for the value to pass constraint validation.",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "placeholder": {
          "name": "placeholder",
          "description": "Text to display when input is empty",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "readOnly": {
          "name": "readOnly",
          "description": "Disables the `Input`, making it unable to type",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "required": {
          "name": "required",
          "description": "Shows the user that this field id required",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "value": {
          "name": "value",
          "description": "Value of the `Input` (Used in case of controlled `Input`)",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        },
        "onFocus": {
          "name": "onFocus",
          "description": "Handler to be called when `Input` gets focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onBlur": {
          "name": "onBlur",
          "description": "Handler to be called when `Input` loses focus",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: FocusEvent<HTMLInputElement>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "onClick": {
          "name": "onClick",
          "description": "Handler to be called when `Input` is clicked",
          "type": {
            "required": false,
            "name": "function",
            "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "table": {
            "type": {
              "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
            },
            "defaultValue": null
          }
        },
        "error": {
          "name": "error",
          "description": "Shows error state in case of failed validation",
          "type": {
            "required": false,
            "name": "other",
            "value": "boolean | undefined"
          },
          "table": {
            "type": {
              "summary": "boolean | undefined"
            },
            "defaultValue": null
          }
        },
        "minWidth": {
          "name": "minWidth",
          "description": "minimum width of `Input` component\n\n**No default value for `type='number'`**",
          "type": {
            "required": false,
            "name": "other",
            "value": "string | undefined"
          },
          "table": {
            "type": {
              "summary": "string | undefined"
            },
            "defaultValue": null
          }
        }
      },
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "patterns-layouts-blank-template--blank-template": {
    "id": "patterns-layouts-blank-template--blank-template",
    "kind": "Patterns/Layouts/Blank Template",
    "name": "Blank Template",
    "story": "Blank Template",
    "parameters": {
      "storySource": {
        "source": "() => <></>"
      },
      "__id": "patterns-layouts-blank-template--blank-template",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "patterns-layouts-level-1-header-template--level-1-header-template": {
    "id": "patterns-layouts-level-1-header-template--level-1-header-template",
    "kind": "Patterns/Layouts/Level 1 Header Template",
    "name": "Level 1 Header Template",
    "story": "Level 1 Header Template",
    "parameters": {
      "storySource": {
        "source": "() => <></>"
      },
      "__id": "patterns-layouts-level-1-header-template--level-1-header-template",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "patterns-layouts-mini-sidebar-template--mini-sidebar-template": {
    "id": "patterns-layouts-mini-sidebar-template--mini-sidebar-template",
    "kind": "Patterns/Layouts/Mini Sidebar Template",
    "name": "Mini Sidebar Template",
    "story": "Mini Sidebar Template",
    "parameters": {
      "storySource": {
        "source": "() => <></>"
      },
      "__id": "patterns-layouts-mini-sidebar-template--mini-sidebar-template",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "patterns-layouts-narrow-width-content-template--narrow-width-content-template": {
    "id": "patterns-layouts-narrow-width-content-template--narrow-width-content-template",
    "kind": "Patterns/Layouts/Narrow Width Content Template",
    "name": "Narrow Width Content Template",
    "story": "Narrow Width Content Template",
    "parameters": {
      "storySource": {
        "source": "() => <></>"
      },
      "__id": "patterns-layouts-narrow-width-content-template--narrow-width-content-template",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "patterns-layouts-resource-table-template--resource-table-template": {
    "id": "patterns-layouts-resource-table-template--resource-table-template",
    "kind": "Patterns/Layouts/Resource Table Template",
    "name": "Resource Table Template",
    "story": "Resource Table Template",
    "parameters": {
      "storySource": {
        "source": "() => <></>"
      },
      "__id": "patterns-layouts-resource-table-template--resource-table-template",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "patterns-layouts-sidebar-template--sidebar-template": {
    "id": "patterns-layouts-sidebar-template--sidebar-template",
    "kind": "Patterns/Layouts/Sidebar Template",
    "name": "Sidebar Template",
    "story": "Sidebar Template",
    "parameters": {
      "storySource": {
        "source": "() => <></>"
      },
      "__id": "patterns-layouts-sidebar-template--sidebar-template",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "patterns-table-table-with-header--table-with-header": {
    "id": "patterns-table-table-with-header--table-with-header",
    "kind": "Patterns/Table/Table With Header",
    "name": "Table With Header",
    "story": "Table With Header",
    "parameters": {
      "storySource": {
        "source": "() => {\n  return (<></>);\n}"
      },
      "__id": "patterns-table-table-with-header--table-with-header",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  },
  "patterns-verticalnavigation-side-nav--side-nav": {
    "id": "patterns-verticalnavigation-side-nav--side-nav",
    "kind": "Patterns/VerticalNavigation/Side Nav",
    "name": "Side Nav",
    "story": "Side Nav",
    "parameters": {
      "storySource": {
        "source": "() => <></>"
      },
      "__id": "patterns-verticalnavigation-side-nav--side-nav",
      "args": {},
      "argTypes": {},
      "__isArgsStory": false
    },
    "args": {},
    "initialArgs": {}
  }
}